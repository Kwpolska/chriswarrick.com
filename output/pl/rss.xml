<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Blog)</title><link>https://chriswarrick.com/</link><description>A rarely updated blog, mostly about programming.</description><atom:link href="https://chriswarrick.com/pl/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Sat, 23 Jan 2021 23:47:35 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What an ARM Mac means for developers and Windows users</title><link>https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;The rumor mill was right this time, and Apple has just announced they will
transition Macs to ARM processors. These news have some side effects for
software developers, particularly those not working with the Apple ecosystem.
And they also affect people who depend on both macOS and Windows.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#how-will-it-work-out-in-apple-land" id="id1"&gt;How will it work out in Apple land?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#who-needs-non-apple-operating-systems" id="id2"&gt;Who needs non-Apple operating systems?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#is-virtualization-possible-on-arm" id="id3"&gt;Is virtualization possible on ARM?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#can-we-emulate-x86-64-and-run-x86-64-windows-10" id="id4"&gt;Can we emulate x86(_64) and run x86(_64) Windows 10?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#whats-next-for-people-who-rely-on-both-macos-and-windows" id="id5"&gt;What’s next for people who rely on both macOS and Windows?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#post-m1-announcement-update-2020-11-14" id="id6"&gt;Post-M1 announcement update (2020-11-14)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;In this post, I am not going to focus in the differences between x86_64 and ARM,
RISC and CISC, and all the benchmarks. Let’s assume that Apple manages to offer
ARM-based CPUs that can match performance of most Intel processors in Apple’s
lineup, and let’s even assume they can make an ARM Mac Pro. (A note on naming:
Apple Silicon is the official name, but it sounds ugly. I’ll just call it ARM.
For Intel, I’ll use either Intel or x86(_64).)&lt;/p&gt;
&lt;p&gt;For many users, the transition will be more-or-less transparent. Sure, they’ll
lose some apps, just like they probably did with Catalina (which dropped
support for 32-bit Intel apps), or some apps will not be available/will be
buggy in the first few months of the transition (though it will be easier than
the PowerPC transition, because Apple uses little-endian byte order on ARM).&lt;/p&gt;
&lt;div class="section" id="how-will-it-work-out-in-apple-land"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id1"&gt;How will it work out in Apple land?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For developers who work only on iOS apps, the transition also won’t mean much.
Maybe a faster, more accurate Simulator. They’ll need to buy an ARM Mac sooner
or later (within the next 5 years), because Apple requires them to use the
latest Xcode version for App Store submissions, and Xcode supports at best the
previous version of macOS.  But that has been Apple’s policy forever, and the
Intel Macs will probably be within the usual deprecation range when that
happens.&lt;/p&gt;
&lt;p&gt;The requirements for macOS-only developers are pretty obvious, they will need
to buy an ARM Mac on day one, so they can test their apps on the new platform.
They will also need to work on ARM compatibility — although updating your app
for the new OS is a yearly ritual in Apple land, so that’s also mostly
business-as-usual (unless you do a lot of unportable low-level stuff in your
code). There are some pro apps that tend to lag behind new Apple decrees (some
might have been hit by Catalina), and users of those apps might prefer to stay
with Intel for a little bit longer.&lt;/p&gt;
&lt;p&gt;But then, we get to the requirements of developers who use Macs, but don’t work
exclusively with the Apple platforms. This is a fairly large group, since many
developers like Macs for the good hardware, Unix-based software, and the
integration of both. And for some part, non-developers are affected too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-needs-non-apple-operating-systems"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id2"&gt;Who needs non-Apple operating systems?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first group are people tied to Windows, somehow. Some of them might be
using Boot Camp to play games. Others might be using Boot Camp or
virtualization software (Parallels Desktop, VMware Fusion, Oracle VM
VirtualBox) to run Windows and Windows-specific apps — perhaps they need the
Windows version of Office, or various Windows-onlypro apps, or they need
Windows to file their taxes, because their government does not care about
non-Windows OSes. Or perhaps they’re web developers, and they need to test
compatibility with the Windows versions of browsers, or the old Microsoft
browsers (IE and pre-Chromium Edge).&lt;/p&gt;
&lt;p&gt;The second group is software developers who need Linux. While macOS provides a
very competent development environment, and many things can be run directly on
macOS, some use-cases may require a Linux VM.  Perhaps the most notable case is
Docker.&lt;/p&gt;
&lt;p&gt;Docker is a solution for lightweight app containers, that can offer separation
between apps, and that can simplify and standardize deployment. Docker itself
is not a virtualization solution (at least in the traditional sense). Docker
must run on top of Linux (there’s also Docker-on-Windows, but that’s another
story). The Docker Desktop for Mac app runs a lightweight Linux VM, and runs
containers in that VM. The virtualization solution &lt;a class="reference external" href="https://github.com/docker/for-mac"&gt;Docker for Mac uses&lt;/a&gt; is &lt;code class="docutils literal"&gt;Hypervisor.framework&lt;/code&gt;, which is
part of macOS itself.&lt;/p&gt;
&lt;p&gt;Who else needs virtualization? Android developers. The Android Emulator is also
a virtual machine that runs the Android operating system. Android can run on
different architectures, and so, a x86 system image is typically used for the
Emulator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-virtualization-possible-on-arm"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id3"&gt;Is virtualization possible on ARM?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, definitely. Apple has been testing it much earlier, since the
aforementioned &lt;code class="docutils literal"&gt;Hypervisor.framework&lt;/code&gt; was found &lt;a class="reference external" href="https://twitter.com/never_released/status/1250533740557852674"&gt;on iOS in April&lt;/a&gt;.
And Apple announced virtualization support for ARM Macs during the keynote, and
showed an example of a Linux VM. That VM was, of course, running an ARM64
distribution of Linux.&lt;/p&gt;
&lt;p&gt;But what can we use this for? Turns out, it’s complicated. The easiest thing
from the few use-cases mentioned before is Android. Google just needs to get
the Emulator working on ARM Macs and ship that to the devs.&lt;/p&gt;
&lt;p&gt;What about Linux in general? Many mainstream distributions
support ARM64, so that’s not a problem in general. The support for a particular
distro or software might be worse than on x86_64, but it’s generally not a
problem for users.&lt;/p&gt;
&lt;p&gt;But for Docker, there’s a problem. One of the many advantages of Docker is
dev-prod parity. If you deploy your app with Docker to an x86_64 Linux server,
you can also install Docker on an x86_64 Linux developer machine (or a Linux VM on an
Intel Mac/Windows PC). Both the server and the dev machine can run &lt;strong&gt;the same&lt;/strong&gt;
image, the same code, the same configuration. That won’t happen if they are a
different architecture. This means that you can end up with bugs happening
because of different environments, and it’s also possible that some images you
depend on are not available for both architectures.&lt;/p&gt;
&lt;p&gt;And then we get to Windows. Windows also has an ARM version, but it’s currently
available only with a new ARM device (you can’t buy it standalone). If
Microsoft were to sell this, we’d have an issue with the software. Windows 10
on ARM supports 32/64-bit ARM software, and can run 32-bit Intel (x86) software
using emulation. It cannot, however, emulate apps that require 64-bit Intel
processors (x86_64).  This makes the software situation on that platform a bit
better. While many developers don’t care about ARM and might not have builds
for ARM available, most Windows software is available in both x86 and x86_64
versions, or is exclusively 32-bit. But certain pro apps are x86_64 only, so if
there is no ARM build of it, an ARM Windows PC currently cannot run it.
(&lt;em&gt;Update:&lt;/em&gt; Microsoft announced &lt;a class="reference external" href="https://blogs.windows.com/windowsexperience/2020/09/30/now-more-essential-than-ever-the-role-of-the-windows-pc-has-changed/"&gt;x86_64 emulation on ARM&lt;/a&gt;,
which means more software will work.)&lt;/p&gt;
&lt;p&gt;And note that Microsoft knows about the transition, but we haven’t heard
anything about Windows during the keynote…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-we-emulate-x86-64-and-run-x86-64-windows-10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id4"&gt;Can we emulate x86(_64) and run x86(_64) Windows 10?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Theoretically? Yes. Practically? No.&lt;/p&gt;
&lt;p&gt;The issue with emulation is speed. There are a few x86 emulators available, and
those emulators can be run on an ARM device just fine. You can find videos on
YouTube (not a very reliable source of information, I know) in which people try
to benchmark those, or try to run Windows using an emulator like that. And even
with an ancient Windows version, the emulation is painfully slow. Windows 10
would be basically unusable if you tried to emulate all of it.&lt;/p&gt;
&lt;p&gt;How does the x86 emulation on Windows 10 for ARM work? You can watch &lt;a class="reference external" href="https://channel9.msdn.com/Events/Build/2017/P4171"&gt;the
Channel 9 video about Windows 10 on ARM&lt;/a&gt; (around 6:00) for more
details. The trick is that system DLLs are using a hybrid x86/ARM64 library
format, which means x86 code can call those DLLs at native speeds. This means
that many apps run at near-native speed (depending on the ratio of custom code
to system DLL calls). This technique cannot work for emulating the entire
operating system. If Windows 10 on ARM was made available for ARM Macs, running
x86 Windows apps would become feasible.&lt;/p&gt;
&lt;p&gt;Rosetta probably uses similar technique. Most apps will be translated at
install time, not at run time. But you can’t do that with an entire OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-next-for-people-who-rely-on-both-macos-and-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id5"&gt;What’s next for people who rely on both macOS and Windows?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a few more years, Intel Macs will still be supported by Apple (with new
macOS versions) and by software vendors. But after that? Well, you’re stuck
with two machines, at least until Windows on ARM becomes viable and runnable on
Macs. Or you can start exploring alternatives to macOS software. If you’re one
of the macOS-as-UNIX-with-great-UX developers (hello!), perhaps you’ll have to
switch to Linux — or perhaps Windows with Windows Subsystem for Linux? (The
latter is becoming more usable with every Windows release, so keep an eye on
that… I wrote this post in NeoVim in WSL2, with Windows Terminal supporting
many advanced terminal features, and the transparent filesystem integration
letting me access Windows files directly).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-m1-announcement-update-2020-11-14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id6"&gt;Post-M1 announcement update (2020-11-14)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Parallels have confirmed &lt;a class="reference external" href="https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/"&gt;support for M1 Macs&lt;/a&gt; and
are offering a Technical Preview of their M1 virtualization product. This
announcement’s mention of Windows 10 ARM supporting x86_64 apps has caused
some tech writers to assume Parallels will support Windows 10 ARM on M1
Macs. This is &lt;strong&gt;not&lt;/strong&gt; what the post says. Parallels is not, and cannot
announce support for that OS, because Windows 10 ARM is (still) available to
ARM OEMs only to install on their devices — making an official announcement
about this feature today would be admitting to doing something illegal/not
allowed by the EULA. I’m pretty sure they are not working on support for
Windows 10 ARM now and in the foreseeable future, until Microsoft opens up
Windows 10 ARM to the public — their own legal issues aside, who would they sell
the Windows support to?&lt;/p&gt;
&lt;p&gt;In other news, &lt;a class="reference external" href="https://github.com/docker/for-mac/issues/4733"&gt;Docker is not ready yet&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/</guid><pubDate>Mon, 22 Jun 2020 19:00:00 GMT</pubDate></item><item><title>Reinstalling macOS: What To Try When All Else Fails</title><link>https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I reinstalled macOS on my device. Throughout the process, many
attempts failed miserably. But I now have some experience and assorted hints on
what to try.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; All information in this post is provided as-is, and some of it may
void your warranty. Neither Chris Warrick nor Apple will be responsible for any
damage to your devices caused as a result of using information in this post.&lt;/p&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#making-install-media-with-el-capitan-with-access-only-to-recovery" id="id1"&gt;Making install media with El Capitan (with access only to Recovery)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#manually-installing-pkg-files" id="id2"&gt;Manually installing .pkg files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#making-install-media-out-of-partial-macos-installers-not-a-valid-os-installer-application" id="id3"&gt;Making install media out of partial macOS installers (“not a valid OS installer application”)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#a-from-the-el-capitan-download" id="id4"&gt;a. From the El Capitan download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#b-installer-from-recovery-app-store-any-macos-version" id="id5"&gt;b. Installer from Recovery/App Store (any macOS version)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#el-capitan-installer-cant-be-verified" id="id6"&gt;El Capitan installer can’t be verified&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#bonus-tidbit-1-how-the-download-works" id="id7"&gt;Bonus tidbit 1: how the download works&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#bonus-tidbit-2-using-terminal-from-setup-assistant" id="id8"&gt;Bonus tidbit 2: using Terminal from Setup Assistant&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#bonus-tidbit-3-creating-an-image-of-the-install-media-might-not-work" id="id9"&gt;Bonus tidbit 3: creating an image of the install media might not work&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#bonus-tidbit-4-dont-bother-restoring-a-time-machine-backup" id="id10"&gt;Bonus tidbit 4: don’t bother restoring a Time Machine backup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#an-open-letter-to-progress-bar-designers" id="id11"&gt;An Open Letter to Progress Bar Designers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#in-the-end" id="id12"&gt;In the end…&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="making-install-media-with-el-capitan-with-access-only-to-recovery"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id1"&gt;Making install media with El Capitan (with access only to Recovery)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The best, safest, least error-prone way to do an install is with a USB stick.
Unfortunately, making a USB stick with the macOS installer on it is a nuisance.
The expected way to produce macOS install media is to download the installer
from App Store/Software Update, and run the &lt;code class="docutils literal"&gt;createinstallmedia&lt;/code&gt; command-line
program included with that installer app. All is well, as long as macOS works.
If it doesn’t, and Recovery can’t install it for you, that can be difficult to
solve.&lt;/p&gt;
&lt;p&gt;Apple does not make macOS images publicly available. That’s probably to make
Hackintoshing this little bit harder, but this also affects legitimate users.
The only thing you can download from Apple is El Capitan. Apple offers
&lt;a class="reference external" href="https://support.apple.com/en-us/HT206886"&gt;InstallMacOSX.dmg&lt;/a&gt; on their
website. If you take a look at the instructions, you will see that this is
&lt;em&gt;not&lt;/em&gt; a bootable OS X image. This image has a &lt;code class="docutils literal"&gt;.pkg&lt;/code&gt; package. This package is
expected to install &lt;code class="docutils literal"&gt;/Applications/Install OS X El Capitan.app&lt;/code&gt;. Well, we’re
in recovery, we can’t install stuff. So, let’s do this the manual way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manually-installing-pkg-files"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id2"&gt;Manually installing .pkg files&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Turns out the &lt;code class="docutils literal"&gt;.pkg&lt;/code&gt; format is just an archives all the way down, with all
archives being different formats (at least three).&lt;/p&gt;
&lt;div class="float-md-right mt-md-0 sidebar"&gt;
&lt;p class="sidebar-title"&gt;macOS flat package format&lt;/p&gt;
&lt;p&gt;You can find more resources about the flat package format, &lt;a class="reference external" href="http://s.sudre.free.fr/Stuff/Ivanhoe/FLAT.html"&gt;one&lt;/a&gt; or &lt;a class="reference external" href="https://matthew-brett.github.io/docosx/flat_packages.html#payload_"&gt;two&lt;/a&gt;, although
this was deduced from the &lt;code class="docutils literal"&gt;file&lt;/code&gt; command and The Unarchiver.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The first archive is the &lt;code class="docutils literal"&gt;.pkg&lt;/code&gt; file itself. Those files are in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Xar_(archiver)"&gt;XAR format&lt;/a&gt;, which was invented by the
OpenDarwin community. You can either extract it with &lt;code class="docutils literal"&gt;pkgutil &lt;span class="pre"&gt;--expand&lt;/span&gt;
foo.pkg foo_files&lt;/code&gt; (the last argument is the destination directory, can be
anything, will be created by &lt;code class="docutils literal"&gt;pkgutil&lt;/code&gt;) if you have access to that command (it’s
available in Recovery OS), or you can try the &lt;code class="docutils literal"&gt;xar&lt;/code&gt; utility as &lt;code class="docutils literal"&gt;xar &lt;span class="pre"&gt;-xf&lt;/span&gt;
foo.pkg&lt;/code&gt;. The structure produced by both tools is a bit different, but we can
work with both.&lt;/p&gt;
&lt;p&gt;The second archive-in-archive is the &lt;code class="docutils literal"&gt;Payload&lt;/code&gt;. It’s a gzipped cpio archive
that contains the files installed by this package.  If you have BSD tar
(default on macOS, easily installable on Linux), you can just do &lt;code class="docutils literal"&gt;tar &lt;span class="pre"&gt;-xvf&lt;/span&gt; Payload&lt;/code&gt;.
Otherwise, you can use &lt;code class="docutils literal"&gt;gunzip &lt;span class="pre"&gt;-c&lt;/span&gt; Payload | cpio &lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;gzcat&lt;/code&gt;). That
will extract all the files the package has.&lt;/p&gt;
&lt;p&gt;Another nested archive is the &lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; archive, although note that
&lt;code class="docutils literal"&gt;pkgutil&lt;/code&gt; will extract it automatically. If it’s not extracted, it’s actually
&lt;code class="docutils literal"&gt;.cpio.gz&lt;/code&gt; again, with the same way to extract it.&lt;/p&gt;
&lt;p&gt;(PS.  If you have &lt;code class="docutils literal"&gt;7z&lt;/code&gt; around (on Windows/Linux as well), you can just point
it at all the compressed files mentioned in this paragraph.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-install-media-out-of-partial-macos-installers-not-a-valid-os-installer-application"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id3"&gt;Making install media out of partial macOS installers (“not a valid OS installer application”)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="a-from-the-el-capitan-download"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id4"&gt;a. From the El Capitan download&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s expand the El Capitan package.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_530407b228584ea99357137813bff397-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mount the DMG in Disk Utility&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_530407b228584ea99357137813bff397-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cp /Volumes/Install&lt;span class="se"&gt;\ &lt;/span&gt;OS&lt;span class="se"&gt;\ &lt;/span&gt;X/InstallMacOSX.pkg /Volumes/Macintosh&lt;span class="se"&gt;\ &lt;/span&gt;HD/
&lt;a name="rest_code_530407b228584ea99357137813bff397-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;     (Or copy it to some other volume you can write to; NOT the USB stick)&lt;/span&gt;
&lt;a name="rest_code_530407b228584ea99357137813bff397-4"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /Volumes/Macintosh&lt;span class="se"&gt;\ &lt;/span&gt;HD/
&lt;a name="rest_code_530407b228584ea99357137813bff397-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pkgutil --expand InstallMacOSX.pkg elcapitan
&lt;a name="rest_code_530407b228584ea99357137813bff397-6"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ls -F elcapitan
&lt;a name="rest_code_530407b228584ea99357137813bff397-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;Distribution*       InstallMacOSX.pkg/ Resources/&lt;/span&gt;
&lt;a name="rest_code_530407b228584ea99357137813bff397-8"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; elcapitan/InstallMacOSX.pkg/
&lt;a name="rest_code_530407b228584ea99357137813bff397-9"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tar -xvf Payload
&lt;a name="rest_code_530407b228584ea99357137813bff397-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;x .&lt;/span&gt;
&lt;a name="rest_code_530407b228584ea99357137813bff397-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;x ./Install OS X El Capitan.app&lt;/span&gt;
&lt;a name="rest_code_530407b228584ea99357137813bff397-12"&gt;&lt;/a&gt;&lt;span class="go"&gt;x ./Install OS X El Capitan.app/Contents&lt;/span&gt;
&lt;a name="rest_code_530407b228584ea99357137813bff397-13"&gt;&lt;/a&gt;&lt;span class="go"&gt;…&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We’ve got the installer app, which is what we need to create an install image.
Great, let’s try it!&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_44452312441d4d829e22b5c6f0721aac-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/Resources/createinstallmedia"&lt;/span&gt; --volume /Volumes/MyBlankUSBDrive --applicationpath &lt;span class="s2"&gt;"Install OS X El Capitan.app"&lt;/span&gt;
&lt;a name="rest_code_44452312441d4d829e22b5c6f0721aac-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;Install OS X El Capitan.app does not appear to be a valid OS installer application.&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Oh, we’ve got a problem. Turns out there’s one more thing we need to take care
of, and it’s the scripts. MacOS packages have scripts, typically shell scripts,
that are run at various stages in the install process. We can look at the
&lt;code class="docutils literal"&gt;PackageInfo&lt;/code&gt; file, or just look in the &lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; folder, to see that
there’s an &lt;code class="docutils literal"&gt;link_package&lt;/code&gt; script we need to run. This script creates a
&lt;code class="docutils literal"&gt;Contents/SharedSupport&lt;/code&gt; directory inside the installer app, and
copies/hardlinks the &lt;code class="docutils literal"&gt;InstallESD.dmg&lt;/code&gt; file (which is the install formerly-DVD
image) to that directory. Let’s try doing this on our own:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_880a8eba00394c1d8144877825aa0e6c-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/SharedSupport"&lt;/span&gt;
&lt;a name="rest_code_880a8eba00394c1d8144877825aa0e6c-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mv InstallESD.dmg &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/SharedSupport"&lt;/span&gt;
&lt;a name="rest_code_880a8eba00394c1d8144877825aa0e6c-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/Resources/createinstallmedia"&lt;/span&gt; --volume /Volumes/MyBlankUSBDrive --applicationpath &lt;span class="s2"&gt;"Install OS X El Capitan.app"&lt;/span&gt;
&lt;a name="rest_code_880a8eba00394c1d8144877825aa0e6c-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;Ready to start.&lt;/span&gt;
&lt;a name="rest_code_880a8eba00394c1d8144877825aa0e6c-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;To continue we need to erase the disk at /Volumes/MyBlankUSBDrive.&lt;/span&gt;
&lt;a name="rest_code_880a8eba00394c1d8144877825aa0e6c-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;If you wish to continue type (Y) then press return:&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And it works! &lt;code class="docutils literal"&gt;createinstallmedia&lt;/code&gt; will now produce valid install media.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="b-installer-from-recovery-app-store-any-macos-version"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id5"&gt;b. Installer from Recovery/App Store (any macOS version)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are in Recovery, you can find an Install app on the filesystem. If you
try to run it, you will get the same error as in the previous paragraph:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_c4ec5e25805b4dd0b65af42106a613ae-1"&gt;&lt;/a&gt;Install macOS Catalina.app does not appear to be a valid OS installer application.
&lt;/pre&gt;&lt;p&gt;This also happens with some older macOS versions, where you get a small
&lt;code class="docutils literal"&gt;.app&lt;/code&gt; from the App Store, and that app does the actual download.&lt;/p&gt;
&lt;p&gt;Whatever the issue was, we need to download the install files with the
installer. Open the installer and let it run until the download finishes. If
the app asks you to reboot, quit it at this point. If it never asks, you can
still find a way to get files out (after a failed install, they should not be
removed).&lt;/p&gt;
&lt;p&gt;The install files can be found in &lt;code class="docutils literal"&gt;/macOS Install Data&lt;/code&gt; on the destination
volume. For older versions, you will just have &lt;code class="docutils literal"&gt;InstallESD.dmg&lt;/code&gt;, newer
versions add more and more files, some of which are hardware-specific (and
Catalina has &lt;code class="docutils literal"&gt;InstallESDDmg.pkg&lt;/code&gt;, because Apple loves nesting archives for no
reason!). However many files you find, you can just:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;code class="docutils literal"&gt;Install macOS Catalina.app&lt;/code&gt; to a read-write volume.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the contents of &lt;code class="docutils literal"&gt;/Volumes/TARGET/macOS Install Data&lt;/code&gt; to &lt;code class="docutils literal"&gt;Install
macOS Catalina.app/Content/SharedSupport&lt;/code&gt;. Make sure you account for hidden
files, if any (copy the entire directory). If you did this correctly,
&lt;code class="docutils literal"&gt;InstallESDDmg.pkg&lt;/code&gt; (or &lt;code class="docutils literal"&gt;InstallESD.dmg&lt;/code&gt; on older verisons) is in the &lt;code class="docutils literal"&gt;SharedSupport&lt;/code&gt;
directory (not in a subdirectory).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;createinstallmedia&lt;/code&gt;. It should now consider the installer valid. The
available options differ slightly depending on the OS version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="el-capitan-installer-cant-be-verified"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id6"&gt;El Capitan installer can’t be verified&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you get this error, it might be because Apple’s signing keys expired, or
because of other date/time weirdness. Regardless, you can force an install if
you are sure the installer is not damaged with this command &lt;a class="reference external" href="https://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h"&gt;(source)&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_d0f11e5517244fe3896b8bfe3026f0d1-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; installer -pkg  /Volumes/Mac&lt;span class="se"&gt;\ &lt;/span&gt;OS&lt;span class="se"&gt;\ &lt;/span&gt;X&lt;span class="se"&gt;\ &lt;/span&gt;Install&lt;span class="se"&gt;\ &lt;/span&gt;DVD/Packages/OSInstall.mpkg -target /Volumes/&lt;span class="s2"&gt;"XXX"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="bonus-tidbit-1-how-the-download-works"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id7"&gt;Bonus tidbit 1: how the download works&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While messing with all the installer stuff, I found out a few
interesting/worrying things about the download process.&lt;/p&gt;
&lt;p&gt;The first one is that the macOS installer uses plain HTTP without encryption to
download files. That opens you to all the standard issues — an attacker can
replace files you download, and the protocol doesn’t do anything to detect
errors (the installer will verify files, but where do the checksums come
from?).&lt;/p&gt;
&lt;p&gt;The second one is how the download happens. You might have noticed it to be a
bit slower than usual traffic. The download happens in 10 MB chunks, using the
&lt;code class="docutils literal"&gt;Range&lt;/code&gt; HTTP header. The installer asks for 10 MB, gets it, saves, asks for
another chunk. Repeat that over 800 times, and the overhead of the entire HTTP
dance becomes noticeable. (I haven’t checked, but I hope the installer at least
uses Keep-Alive. I wouldn’t be particularly surprised if it didn’t, though.)&lt;/p&gt;
&lt;p&gt;But this raises another question. The servers clearly support partial downloads.
And yet, if your network disconnects during the download, your download
progress for that file is reset, and in Catalina, you can go from 8 GB back to
500 MB if you’re particularly unlucky. The question is, why? This
infrastructure should make it trivial to continue the download, perhaps
discarding the most recent chunk if you’re concerned about that download of it
being unsuccessful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-tidbit-2-using-terminal-from-setup-assistant"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id8"&gt;Bonus tidbit 2: using Terminal from Setup Assistant&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first time you boot a Mac after a clean install, it starts the Setup
Assistant. This app asks for basic OS settings (locale, date/time, user
accounts), and also lets you restore user data from backups.&lt;/p&gt;
&lt;p&gt;Sometimes, you might want to access the Terminal or Console from that screen.
You can do that with Ctrl + Opt + Cmd + T and Ctrl + Opt + Cmd + C respectively &lt;a class="reference external" href="https://chris-collins.io/2018/03/15/Using-Terminal-At-macOS-Setup-Assistant/"&gt;(source)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How could that come in handy? For example, if you want to check if the backup
drive still worked and if the process isn’t stuck (I wrote a test file and also
checked &lt;code class="docutils literal"&gt;top&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-tidbit-3-creating-an-image-of-the-install-media-might-not-work"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id9"&gt;Bonus tidbit 3: creating an image of the install media might not work&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A few months later, in December, I upgraded to Big Sur and then installed Windows 10
alongside it in Boot Camp. I then did some more hacks, which led to
two unbootable OSes.&lt;/p&gt;
&lt;p&gt;As part of the upgrade, I had prepared install media and used it to install (so
it wouldn’t fail, as it did last time), and made a &lt;code class="docutils literal"&gt;.dmg&lt;/code&gt; of it with Disk
Utility. (Also, Apple won’t tell you this, but you need to give Disk Utility
&lt;em&gt;Full Disk Access&lt;/em&gt; for disk imaging to work. Otherwise, you get a cryptic
error.) I erased the USB drive after installing, but hey, I could get it back.
I booted into Internet Recovery and restored my image. Big Sur failed to boot
and showed a &lt;a class="reference external" href="https://support.apple.com/en-us/HT210901"&gt;🚫 sign&lt;/a&gt;. I tried
restoring my Catalina image from the previous reinstall, and that didn’t work
due to a size mismatch. I used a different USB drive than these months ago (I
didn’t have that one with me at the moment), and apparently the one I used had
a different size (both are marketed as 16 GB). The images could be mounted
fine, and &lt;code class="docutils literal"&gt;createinstallmedia&lt;/code&gt; should have worked, likely producing a
bootable drive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-tidbit-4-dont-bother-restoring-a-time-machine-backup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id10"&gt;Bonus tidbit 4: don’t bother restoring a Time Machine backup&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Time Machine is Apple’s magical backup solution. Time Machine saves snapshots
of your entire disk. It’s supposed to help restore files that were deleted or
changed in an unwanted way, or help you restore a full macOS install.&lt;/p&gt;
&lt;p&gt;Time Machine is great at file recovery, but none of my 3 system restore
attempts were successful. Attempt #1 was a full Time Machine System Restore,
from Recovery, back in June. It failed partway through, it couldn’t read
everything from the disk. There might have been underlying hardware issues with
that failure, so I had another attempt.&lt;/p&gt;
&lt;p&gt;Attempt #2 was a Migration Assistant restore, as part of the initial setup.
This one succeeded, and things worked… except for one fairly important app.
This app requires online activation with the vendor, and it wouldn’t reactivate
after the install. Whatever the third-party vendor is doing didn’t like the
reinstall. I tried to nuke all the things in ~/Library related to their
software, and ran their nuke-everything uninstaller, but that didn’t work.
I reinstalled from scratch and copied over my files, settings and apps from the
Time Machine drive.&lt;/p&gt;
&lt;p&gt;Attempt #3 involved the System Restore again, this time for the December
reinstall. The hardware issues were all fixed in the meantime, so I went for a
Time Machine System Restore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issue #1:&lt;/strong&gt; Internet Recovery booted into Catalina. There was an issue on Apple’s
side, &lt;a class="reference external" href="https://mjtsai.com/blog/2020/12/30/no-more-big-sur-internet-recovery/"&gt;Big Sur was unavailable in Internet Recovery in December&lt;/a&gt;. TM
Recovery will not restore a backup created with a newer version of macOS than
you’re booted into, so I was forced to restore a slightly older Catalina
backup. (I spent most of my time in Windows during that weekend, so other than
the need to upgrade macOS to Big Sur again, I didn’t really lose any data due
to this.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issue #2:&lt;/strong&gt; It wasted time computing an inaccurate size estimate. Before
restoring a backup, macOS first checks if it will fit on your drive. When it
does that, an indeterminate progress bar is shown. macOS won’t tell you the
result of that computation, but you can read the final value from the full
Installer Log (Cmd + L). On my Mac, the value was 96.2 GB. I was at the Mac
when it was getting close to that value. 94, 95, 96, 96.1, 96.2, 96.3… hold on
a second, 96.3 GB? Hopefully that’s just a bunch of extra things that are
installed from the system image directly, or something like that, right? Of
course, since the progress bar is based on the pre-computed size, it became
indeterminate and I couldn’t tell when it would end. 98, 100, 110, 120, 121.2
GB is where it ultimately ended. So, not only did it waste 20+ minutes
computing a size, it was off by 25 GB.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Issue #3:&lt;/strong&gt; The restore didn’t work. The System Restore finished and claimed to
have succeeded, but macOS wouldn’t boot. It showed an &lt;em&gt;Unrecoverable error&lt;/em&gt;,
&lt;em&gt;SecurityAgent was unable to create requested mechanism&lt;/em&gt;. Most people who had a
similar error had it caused by a botched TeamViewer uninstall; I didn’t have
that installed, and it was referring to a different component. So, wipe and
fresh reinstall it is.&lt;/p&gt;
&lt;p&gt;I copied my stuff from the TM drive, and it was acting weird. Some apps failed
to load their settings copied into Library, others started with a “Move to
/Applications?” prompt (even though they were in that directory). For some
reason, those files had some hidden attribute set on it. I worked around it by
putting files in a &lt;code class="docutils literal"&gt;.zip&lt;/code&gt; archive with Keka, and then unzipping them;
&lt;code class="docutils literal"&gt;xattr&lt;/code&gt; might also help. (The attribute was likely &lt;code class="docutils literal"&gt;com.apple.quarantine&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;After I got the Mac to work, I reinstalled Windows and set up rEFInd, and it
now works fine. (I only use rEFInd because I want virtualization in Windows,
and that doesn’t work unless you’re warm-rebooting from macOS. I don’t need
anything more advanced than the Option key boot menu, but Apple made me use a
third-party bootloader.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We now go back to the original post from June.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-open-letter-to-progress-bar-designers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id11"&gt;An Open Letter to Progress Bar Designers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dear Progress Bar Designers: can you please make your progress bars
functional? The macOS progress bar might look sleek at just 7 px (non-Retina)/6
pt = 12 px (Retina) high, but at the same time, you’re looking at individual
pixels if you need to know if it works or if it’s stuck. I have had to point my
mouse cursor at the end of the filled-in part just to know if it’s working or
not. Or sometimes, put a piece of paper in front of my screen, because there is
no mouse cursor when macOS installs on the black screen. How to make
that progress bar easier to use and more informative? Just add numbers on top of
it. For long-running processes, I wouldn’t mind progress bars that said
“12.34%”. That specific Setup/Migration Assistant window should be changed (it
only has a remaining time estimate and transfer speed, it should also show
moved data/total size), but wouldn’t more things benefit from a clear
indication of the progress? Yes, perhaps it looks less sleek, perhaps it
requires more space for the bar.&lt;/p&gt;
&lt;p&gt;Just compare: which is easier to parse? Which is more informative?&lt;/p&gt;
&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 6.5px; border-radius: 6.5px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 42.42%;" aria-valuenow="42.42" aria-valuemin="0" aria-valuemax="100"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 20px; border-radius: 20px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 42.42%;" aria-valuenow="42.42" aria-valuemin="0" aria-valuemax="100"&gt;42%&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 20px; border-radius: 20px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 42.42%;" aria-valuenow="42.42" aria-valuemin="0" aria-valuemax="100"&gt;42.4%&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 20px; border-radius: 20px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 64.64%;" aria-valuenow="64.64" aria-valuemin="0" aria-valuemax="100"&gt;&lt;/div&gt;
  &lt;div style="position: absolute; text-align: center; left: 0; right: 0; margin-top: 10px;"&gt;64.64% (6.7 GB/10 GB copied)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I’d honestly be happy enough with option 2, at least it can be read easily and
you can remember the number instead of a vague position.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-end"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id12"&gt;In the end…&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After all this, I managed to get macOS Catalina installed. After various
failures in built-in El Capitan recovery and Catalina Internet Recovery, I first
installed El Capitan with this hack, then jumped to Mojave because I thought
the new Software Update would help (it didn’t, same installer, same
failed-to-extract-package issue), then made a Catalina USB stick, and it
finally clean-installed, but I was worried about the backup disk’s operation,
and I used a proxy on my local network to try and speed up Catalina downloads
without much improvement… but hey, at least it works. Apple should really make
it easier to install their OS and to make boot media even when stuff doesn’t
work, even from Windows. The Hackintosh folks can just find someone with a
working Mac and ask them to download from App Store and make install media, or
find less legitimate sources, they probably don’t care as much. But if my own
system crashes, I’d probably want to get working install media immediately,
myself, and from Apple. Without all this mess.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/</guid><pubDate>Wed, 03 Jun 2020 21:00:00 GMT</pubDate></item><item><title>When HTML is not enough: a tale of the &lt;datalist&gt; element</title><link>https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;HTML 5.0 was finalized in 2014 (and its drafts were published even earlier), and with it came the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; element.  It’s
2020, and even though it might look like a good replacement for custom
autocomplete widgets, browser issues made me get rid of it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I’ve built a web app to help me track my expenses. The app is written in Django,
and &lt;a class="reference external" href="https://github.com/Kwpolska/django-expenses"&gt;it’s open source&lt;/a&gt;. One of
the goals was to have a simple codebase with limited external JS dependencies,
as well as basic usability with JS disabled. This is partially to facilitate
learning of standard DOM manipulation routines and TypeScript.&lt;/p&gt;
&lt;p&gt;The JS/TS bits are called the &lt;em&gt;Scripting Enhancements&lt;/em&gt; to reflect their nature.
The biggest items are an interactive bill editor (a table with add/edit/remove
operations, that submits its data as a regular HTML POST &lt;code class="docutils literal"&gt;&amp;lt;form&amp;gt;&lt;/code&gt;) and an
autocomplete framework (used by the bill editor in an advanced way, and by
other screens in the app with a more basic featureset). The autocomplete
framework is exactly what you’d expect: point it at an input field and a URL,
and keypresses lead to the URL being queried for previous values for this
field, which are displayed as possible values to the user to save typing.&lt;/p&gt;
&lt;div class="section" id="autocomplete-with-html-5-the-datalist-tag"&gt;
&lt;h2&gt;Autocomplete with HTML 5: the &amp;lt;datalist&amp;gt; tag&lt;/h2&gt;
&lt;p&gt;But how to display the options to the user? Most people would display a
&lt;code class="docutils literal"&gt;position: absolute&lt;/code&gt; box with links/buttons, throw in some more logic around
the focus and blur events, and call it a day. There are tons of ready-made
solutions that do all that for you, although most of them are terrible. But!
HTML 5 introduced a &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag. And it looks like everything you could
need. You link a &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag to an &lt;code class="docutils literal"&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and it shows matching
options in an autocomplete-style box.  In fact, here’s a simple demo, in case
your browser supports it:&lt;/p&gt;
&lt;div class="card mb-3 text-center"&gt;
    &lt;div class="card-body"&gt;
        &lt;label for="dldemo" class="ml-1 mr-1"&gt;Favorite programming language:&lt;/label&gt;
        &lt;input class="form-control d-inline-block ml-1 mr-1" style="width: auto" placeholder="Start typing…" list="dldemolist" id="dldemo"&gt;
        &lt;datalist id="dldemolist"&gt;
            &lt;option value="Swift"&gt;
            &lt;/option&gt;&lt;option value="Rust"&gt;
            &lt;/option&gt;&lt;option value="Ruby"&gt;
            &lt;/option&gt;&lt;option value="Python"&gt;
            &lt;/option&gt;&lt;option value="PHP"&gt;
            &lt;/option&gt;&lt;option value="Kotlin"&gt;
            &lt;/option&gt;&lt;option value="JavaScript"&gt;
            &lt;/option&gt;&lt;option value="Java"&gt;
            &lt;/option&gt;&lt;option value="Go"&gt;
            &lt;/option&gt;&lt;option value="C++"&gt;
            &lt;/option&gt;&lt;option value="C#"&gt;C Sharp&lt;/option&gt;
            &lt;option value="C"&gt;
        &lt;/option&gt;&lt;/datalist&gt;
    &lt;/div&gt;
    &lt;div class="card-footer"&gt;&lt;a href="https://chriswarrick.com/listings/datalist/datalist-demo.html.html"&gt;View demo source&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, here are a few takeaways from that demo:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Options are displayed in the same order as in the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag in the
source, this list was sorted reverse-alphabetically in the source, and
that’s how it appears in the source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The list is filtered case-insensitively based on user-input substrings. In
Chrome, Firefox and Safari, the substring can appear at any point in the
string.  But in Edge (old Microsoft engine), it looks only at the beginning
of the string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some browsers show an arrow on the field to show the entries, sometimes
double-clicking opens the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entry for C# is as follows: &lt;code class="docutils literal"&gt;&amp;lt;option &lt;span class="pre"&gt;value="C#"&amp;gt;C&lt;/span&gt; &lt;span class="pre"&gt;Sharp&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;/code&gt;.
Chrome displays it on as &lt;span class="raw-html"&gt;“&lt;strong&gt;C#&lt;/strong&gt; &lt;small&gt;C
Sharp&lt;/small&gt;”&lt;/span&gt; (on two lines), Safari shows only “C#”, Firefox and Edge
show “C Sharp”. Selecting the option always inputs C#.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mobile Safari does not expand the list by default, but displays some of the
options above the keyboard (as typing predictions). You can click on the
arrow to display all the options in a &lt;a class="reference external" href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers/"&gt;scrolling picker&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chrome on Android displays it the same way as on desktop (drop-down list).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This demo uses static, hardcoded data. Doing that for the Expenses app would
be terrible for performance — that would waste bandwidth, force the browser to
parse a fairly long list, and it could easily overload the browser when it
tries to expand the list. But wiring it up to a &lt;code class="docutils literal"&gt;fetch()&lt;/code&gt; call to a REST API
should not be hard, and browsers work correctly when the datalist changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-emoji-hack"&gt;
&lt;h2&gt;An emoji hack&lt;/h2&gt;
&lt;p&gt;One of the features I needed was to make the auto-complete fill out more than
one field at once. Well, &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; has no specific support for that. It only
supports showing a list and putting the value in the input box it’s connected
to. But choosing something from the list fires the usual &lt;code class="docutils literal"&gt;input&lt;/code&gt; event. I
opted to do this: show every entry with a sparkles emoji (✨) in front, with the
two other fields also inside this string, delimited by other emoji, and then
catch the &lt;code class="docutils literal"&gt;input&lt;/code&gt; event.  If the field beigns with ✨, then use a regex to go
from one emoji-delimited string to three, and place the correct strings in
three input boxes (while also removing the sparkles from the first field).&lt;/p&gt;
&lt;p&gt;Yes, it’s a hack. But it’s pretty okay appearance-wise, and it does work. It
wouldn’t have worked so well in Edge, but I didn’t even know about this
behavior before writing this blog post, and the initial sparkles emoji could be
dropped and I could still make it work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="works-on-mobile-yes-except"&gt;
&lt;h2&gt;Works on mobile? Yes, except…&lt;/h2&gt;
&lt;p&gt;I went on and deployed the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;-based autocomplete to my site. It
looked good, worked fine. To use the thing on mobile, I’ve got a special
launcher app. Its main reason for existence? I want a home screen icon, but
Chrome only allows progressive web apps to do that (and that’s busywork I don’t
feel like doing), and back then, Firefox (which has no such restrictions) did
not support &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; on Android.  The app is fairly simple, with a
standard WebView widget and a slide-out navigation drawer, and a few other nice
things, and it’s 120 SLOC of Kotlin.&lt;/p&gt;
&lt;p&gt;But then, I bought a new phone, and with it, upgraded from Android 7 to 9. And
I hit a bug in Chrome, which is still not fixed. The bug?
&lt;a class="reference external" href="https://bugs.chromium.org/p/chromium/issues/detail?id=949555"&gt;HTML datalist doesn’t work on Android 8 or higher in WebView&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh. We’ve got a bit of a problem. Firefox still didn’t seem to support
&lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. But there’s one more way to make an app show a webpage: Custom
Tabs. This is a feature you’ve probably seen around Android, and it’s somewhere
in between. The app gets minimum control over the appearance of the toolbar,
but the “real” web browser is responsible for rendering the page. Chrome in a
Custom Tab supports &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. So I built a small app to do what I wanted.&lt;/p&gt;
&lt;p&gt;There was just one minor thing to fix. My default browser on mobile is &lt;a class="reference external" href="https://support.mozilla.org/en-US/kb/focus"&gt;Firefox
Focus&lt;/a&gt;. The main features of
Focus are tracking protection, content blocking, and storing zero
history and cookies (permanent incognito mode with one-click clearing). This is
perfect for clicking random links, especially since I hate Chrome’s insistence
on showing webpages you visited 5 years ago once when autocompleting URLs.
(Chrome is my secondary browser on mobile; on desktop, I almost always have an
incognito window open.)&lt;/p&gt;
&lt;p&gt;Why is Focus relevant to this story? One, it (still) does not support the tag.
Two, the default browser is also the provider of the Custom Tabs. Which is
great for my web-browsing habits, but won’t solve the problem.  Fortunately,
it’s just a one-line change to send the intent directly to Chrome. The entire
thing is less than 30 lines long. You can see the full &lt;a class="reference external" href="https://chriswarrick.com/listings/android-chrome-custom-tabs/CustomTabsActivity.java.html"&gt;CustomTabsActivity.java&lt;/a&gt; file, but the relevant bits are below.&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Optionally, configure appearance and buttons on toolbar.&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Force browser to Chrome instead of system default.&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.android.chrome"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://chriswarrick.com/"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;It seems to work well, the list is displayed, and it can be used to input
stuff, the emoji hack works too.&lt;/p&gt;
&lt;p&gt;There was one more bug with Chrome on Android. Typing a character sometimes led to
it appearing twice: I typed &lt;em&gt;A&lt;/em&gt;, the hints appeared, then the text box started
showing &lt;em&gt;AA&lt;/em&gt;, and my hints disappeared. I can’t reproduce it right now, but
that also made the entire flow just annoying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aftermath"&gt;
&lt;h2&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;With all the browser bugs, support issues, and various glitches, I decided to
build an autocomplete widget of my own. I took the CSS from Bootstrap 4, and
used Popper.js to do the positioning. It looks and works better, has keyboard
support, and is definitely less hacky (the emoji is still there, because they
look good, but my entries know the original object they were made from and can
just tell the handler to use that instead of using regex). And it beats many of
the autocomplete widgets out there, because they often fail when you hold the
mouse a bit longer; also, it can reposition itself to the top if there’s more
space. All that in just 198 SLOC of TypeScript. (I also discovered a bug in my
code that made it work a bit worse, fixing it for the old implementation would
still not fix the other issues.)&lt;/p&gt;
&lt;p&gt;What’s the moral of the story? Even though HTML 5 has been a standard for many
years, browser support for the new tags still seems to be an issue. And
sometimes, it’s better to just put in the extra work and build a good UI on
your own, instead of trusting the browser to do it right.&lt;/p&gt;
&lt;p&gt;The same applies to other “new” HTML 5 form elements.  &lt;code class="docutils literal"&gt;&amp;lt;input &lt;span class="pre"&gt;type="date"&amp;gt;&lt;/span&gt;&lt;/code&gt;
is not supported in desktop Safari, and is fairly ugly in desktop Firefox and
Chrome.  It displays the standard OS picker on mobile, which gets you a
calendar on Android, but a &lt;a class="reference external" href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers/"&gt;scrolling picker&lt;/a&gt; on iOS.
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;datetime-local&lt;/span&gt;&lt;/code&gt; is currently Chrome-only.  &lt;code class="docutils literal"&gt;month&lt;/code&gt; lets you click on a day
and end up with an entire month selected in Chrome.  A custom component with
JavaScript would be far more consistent and often easier to use.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/</guid><pubDate>Sun, 09 Feb 2020 15:30:00 GMT</pubDate></item><item><title>Modern Web Development: where you need 500 packages to build Bootstrap</title><link>https://chriswarrick.com/pl/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;This humble blog is written by an old-school developer who sometimes does web stuff. An attempt to customize the Bootstrap CSS theme requires 50 MB of node_modules, over 500 packages, and comes with a bit of frustration at stupid tools and terrible documentation.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;You might notice that this website is based on Bootstrap. You might also notice it’s been heavily customized, especially if you’re browsing in the (currently default) Dark Mode. Back in Bootstrap v3 days, the task was accomplished by &lt;a class="reference external" href="https://getbootstrap.com/docs/3.4/customize/"&gt;a simple online tool&lt;/a&gt; that required no local installs. Bootstrap 4 changed the landscape: now you need to manually compile Sass. Moreover, Autoprefixer is required to make the CSS usable by web browsers.&lt;/p&gt;
&lt;p&gt;Now, when it comes to web development, I believe the old ways were better. Back when nobody thought to make a client-side-JS-based blog or pastebin, and only apps that needed interactivity were JS-first. Gmail is a good example of that, although they &lt;em&gt;still&lt;/em&gt; offer a &lt;a class="reference external" href="https://support.google.com/mail/answer/15049?hl=en"&gt;basic HTML view&lt;/a&gt; and it works good — in fact, I suppose it might be less buggy than the JS-ladden version. (A lot of single-page apps like to randomly glitch out in my experience.)&lt;/p&gt;
&lt;p&gt;I still remember the days when all that one had to do is &lt;code class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; yuicompressor.jar style.css &amp;gt; style.min.css&lt;/code&gt;. Then Less and Sass became more popular — and that’s good. The ability to use variables and functions makes it possible to produce well-organized stylesheets. The idea of Autoprefixer is also fine, humans should not waste their time with browser-specific prefixes for experimental features, that can be neatly automated.&lt;/p&gt;
&lt;p&gt;But to use all these fancy tools, glue code is necessary. Autoprefixer is (mainly server-side) JS-only, Sass is currently Node or Dart, minifier tools are available in many languages.&lt;/p&gt;
&lt;div class="section" id="attempt-0-no-js-stuff-no-node-modules"&gt;
&lt;h2&gt;Attempt 0: no JS stuff, no node_modules&lt;/h2&gt;
&lt;p&gt;I installed a Sass compiler. There are web services like cssminifier.com that can be easily used with curl in a Bash script. Autoprefixer has a webpage that lets you use the service without installing it as well. The catch is, the code runs locally in your web browser. Automating a web browser requires some effort. I decided to leave this part un-automated. Here is the Bash script I hacked together (with some messages removed):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &amp;gt; bootstrap.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &amp;gt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Go to https://autoprefixer.github.io/."&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-6"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"(light) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-8"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-9"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-11"&gt;&lt;/a&gt;sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-13"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-14"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"( dark) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-15"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-16"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap-dark.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-18"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap.min.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-19"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap-dark.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap-dark.min.css
&lt;/pre&gt;&lt;p&gt;The “manual copy” solution was inconvenient, but it worked.&lt;/p&gt;
&lt;p&gt;Well, most of the time Some lags/glitches with the clipboard meant that sometimes, files had the incorrect content. So, I wanted to fix it, and build it in a more modern, JS-y way. The way Bootstrap does it is a lot of shell commands (that run various Node tools). I don’t feel like building this pipeline with Bash, it would feel fragile. Let’s do it the JS way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-1-webpack"&gt;
&lt;h2&gt;Attempt 1: webpack&lt;/h2&gt;
&lt;p&gt;I’ve used webpack for &lt;a class="reference external" href="https://github.com/Kwpolska/django-expenses/blob/master/ts/webpack.config.js"&gt;another project of mine&lt;/a&gt;. It was okay, and it did the job (namely, compiling TypeScript into browser-usable JS).&lt;/p&gt;
&lt;p&gt;I wanted to give it a try for this one. I googled “webpack sass”. The first result was &lt;a class="reference external" href="https://github.com/webpack-contrib/sass-loader"&gt;sass-loader&lt;/a&gt;. The pipeline for it was:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_89bf8d84a24a411c948d75ebbd6a9bd7-1"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"style-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// creates style nodes from JS strings&lt;/span&gt;
&lt;a name="rest_code_89bf8d84a24a411c948d75ebbd6a9bd7-2"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"css-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// translates CSS into CommonJS&lt;/span&gt;
&lt;a name="rest_code_89bf8d84a24a411c948d75ebbd6a9bd7-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"sass-loader"&lt;/span&gt; &lt;span class="c1"&gt;// compiles Sass to CSS, using Node Sass by default&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s recap. Someone thought that the right way to do CSS is to use JS imports.&lt;/p&gt;
&lt;p&gt;Yes. &lt;code class="docutils literal"&gt;import &lt;span class="pre"&gt;"./style.css";&lt;/span&gt;&lt;/code&gt; in a JS file. So that your fancy build tool knows about CSS.&lt;/p&gt;
&lt;p&gt;Webpack wasn’t the right tool for my project, but even if I had JS code there, &lt;strong&gt;WHY WOULD I MENTION STYLESHEETS IN MY JS CODE?!&lt;/strong&gt; Webpack’s website also lists .jpg and .png assets, are they meant to be imported in JS as well? This is absurd.&lt;/p&gt;
&lt;p&gt;Going back to googling “webpack sass”… The next two results were Medium posts. The stupidity of Medium as a blog platform notwithstanding, one of the posts was from 2017, referring to webpack 2. The next post was a year older, a completely unreadable mess, and it was for webpack 4. That’s not helpful in any way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-gulp"&gt;
&lt;h2&gt;Attempt 2: Gulp&lt;/h2&gt;
&lt;p&gt;Let’s try something else from the JS world: Gulp. Now, the tool is not terrible, but it still requires a lot of dependencies.&lt;/p&gt;
&lt;p&gt;The pipeline that was required for this task sounds very simple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bootstrap-kw{,-dark}.sass → Sass compiler → Autoprefixer → bootstrap{,-dark}.css → minify → bootstrap{,-dark}.min.css&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Gulp version is fairly simple: (I based it on examples on Gulp’s website, and pages of all my dependencies).&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minifyCSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-csso'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp-rename"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-7"&gt;&lt;/a&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'node-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*.scss'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-13"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;()]))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-14"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-kw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-17"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minifyCSS&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-19"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-20"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;".min"&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-21"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-22"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-25"&gt;&lt;/a&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="a-node-modules-extravaganza"&gt;
&lt;h2&gt;A node_modules extravaganza&lt;/h2&gt;
&lt;p&gt;Can you see all the &lt;code class="docutils literal"&gt;require&lt;/code&gt; lines at the top? Every one of them is a dependency of my build script. With the exception of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;gulp-rename&lt;/span&gt;&lt;/code&gt;, which IMO should be a built-in part of Gulp (it’s 45 lines of code and no external dependencies), the list is sensible.&lt;/p&gt;
&lt;p&gt;Well, I already mentioned the size of &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;: 51 MiB according to &lt;code class="docutils literal"&gt;du&lt;/code&gt; (size-on-disk measurement). How many packages are there?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="545"&gt;
&lt;li&gt;&lt;p&gt;Five hundred and forty-five packages.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoa, when did that happen? Most of it comes from gulp/gulp-cli (384 packages), with node-sass taking the second place (177 packages). Some of those are shared between libraries, and a few more belong to the other requirements. And many of these dependencies are a disgrace to programming.&lt;/p&gt;
&lt;p&gt;After a full install of my &lt;code class="docutils literal"&gt;package.json&lt;/code&gt;, npm says &lt;code class="docutils literal"&gt;added 545 packages from 331 contributors and audited 10500 packages in 22.458s&lt;/code&gt;.  I’ve implicitly agreed to licenses imposed by 331 random people. All to build some simple CSS files out of SASS.&lt;/p&gt;
&lt;p&gt;Let’s go on a tour of &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; and see what we ended up with.&lt;/p&gt;
&lt;div class="section" id="polyfills-reimplementations-oh-my"&gt;
&lt;h3&gt;Polyfills, reimplementations, oh my!&lt;/h3&gt;
&lt;p&gt;Everything I’ve installed is meant to be used on top of Node.js. Node runs on top of the V8 engine, coming from Chrome. They’ve had almost-full ES2015 (ES6) support since April 2016. And yet, my node_modules is full of small polyfills.&lt;/p&gt;
&lt;p&gt;Let’s pick a random one and work back from it: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Copyright © Sindre Sorhus, MIT license&lt;/span&gt;
&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s a one-liner that re-implements &lt;code class="docutils literal"&gt;Number.isNaN&lt;/code&gt; if it’s not available, which is, according to MDN, &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"&gt;a more robust version of the original, global
isNaN()&lt;/a&gt;. The original function coerced everything to Number before testing, which apparently wasn’t enough. That’s what you get for using a language designed in a week. The function was added to all sane browsers and Node around 2013, the polyfill was created in 2015.&lt;/p&gt;
&lt;p&gt;It was pulled in by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-fullwidth-code-point&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-finite&lt;/span&gt;&lt;/code&gt;, both by the same author. The latter one is especially interesting: it’s at version 1.0.2. Version 1.0.1improved the codebase from &lt;code class="docutils literal"&gt;if (x) { return false; } return true&lt;/code&gt; (via pull request), and version 1.0.2 replaced a manual &lt;code class="docutils literal"&gt;val !== val&lt;/code&gt; comparison with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt; has 7.5 million weekly downloads, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-finite&lt;/span&gt;&lt;/code&gt; has 6.7M. The build of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt; &lt;a class="reference external" href="https://travis-ci.org/sindresorhus/number-is-nan/builds/363709421"&gt;is currently failing.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fifty-shades-of-terminal"&gt;
&lt;h3&gt;Fifty shades of terminal&lt;/h3&gt;
&lt;p&gt;Every Node-based CLI tool wants to be cool. And for that, they need colors.&lt;/p&gt;
&lt;p&gt;How does this work in Bash? You could use &lt;code class="docutils literal"&gt;tput setaf XX&lt;/code&gt;, but many people would just manually &lt;code class="docutils literal"&gt;echo '\033[XXm'&lt;/code&gt;, the codes are available &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit"&gt;in Wikipedia&lt;/a&gt; or elsewhere.&lt;/p&gt;
&lt;p&gt;How does this work in Python? There are a few libraries for this (and you can always do it manually), but the most popular one is &lt;a class="reference external" href="https://pypi.org/project/colorama/"&gt;colorama&lt;/a&gt;. That library can even handle Windows.&lt;/p&gt;
&lt;p&gt;What is available in Node?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;color-support&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;supports-color&lt;/span&gt;&lt;/code&gt; are both part of my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There seems to be a fairly advanced &lt;code class="docutils literal"&gt;chalk&lt;/code&gt; library, by the aforementioned Sindre Sorhus.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-colors&lt;/span&gt;&lt;/code&gt; seems to be another, smaller option for it, it claims to be 10-20x faster than &lt;code class="docutils literal"&gt;chalk&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s a package called &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;has-ansi&lt;/span&gt;&lt;/code&gt; which checks if a string has ANSI escapes in it. It depends on &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;strip-ansi&lt;/span&gt;&lt;/code&gt; also uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/code&gt;. All three packages are basically one liners. One exports a regex, the other two do replacement/search with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/code&gt; intelligently wraps a string with ANSI escapes in it.  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt; takes three strings and  returns &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;'\u001b['+&lt;/span&gt; a + 'm' + msg + '\u001b[' + b + 'm'&lt;/code&gt; (Copyright © Jon Schlinkert, MIT license)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s also &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/code&gt;, which calls &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt; with a = 90, b = 39, and a user-specified message. (Copyright © Jon Schlinkert, MIT license)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-red&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-cyan&lt;/span&gt;&lt;/code&gt; are very similar libraries to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/code&gt;. Is this a joke?!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are definitely other &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-$color&lt;/span&gt;&lt;/code&gt; libraries, although they are not in my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;. And probably other libraries for color support, but either they are not installed, or I haven’t managed to spot them in my &lt;code class="docutils literal"&gt;npm list&lt;/code&gt; output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="copyrighted-one-liners"&gt;
&lt;h3&gt;Copyrighted one-liners&lt;/h3&gt;
&lt;p&gt;Another famous library by Jon Schlinkert is called &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt;. Here is the complete code, verbatim:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-even &amp;lt;https://github.com/jonschlinkert/is-even&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015, 2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-odd'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-13"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; is slightly longer:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-odd &amp;lt;https://github.com/jonschlinkert/is-odd&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015-2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-10"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-13"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-14"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected a number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-16"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-17"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected an integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-20"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isSafeInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'value exceeds maximum safe integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-22"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-23"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-number&lt;/span&gt;&lt;/code&gt; is another fun library; it says &lt;code class="docutils literal"&gt;true&lt;/code&gt; for strings of numbers, and &lt;code class="docutils literal"&gt;false&lt;/code&gt; for NaN (&lt;code class="docutils literal"&gt;typeof NaN === 'number'&lt;/code&gt;). &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; is used by, for example, &lt;code class="docutils literal"&gt;even&lt;/code&gt;, which calls &lt;code class="docutils literal"&gt;Array.filter&lt;/code&gt; with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; as the argument. There’s also &lt;code class="docutils literal"&gt;odd&lt;/code&gt;, and for some reason, the two packages are separate.&lt;/p&gt;
&lt;p&gt;The checks found in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; make some more sense if you’re working with a dynamically-typed language where every number is a float (like JS). But you could release &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;check-odd&lt;/span&gt;&lt;/code&gt;, which is 100x faster than &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; (it assumes its input is correct), and exports &lt;code class="docutils literal"&gt;function checkOdd(value) { return (value % 2) !== 0; }&lt;/code&gt; &lt;s&gt;(Copyright © 2019, Chris Warrick. Licensed under the 4-clause BSD license.)&lt;/s&gt; &lt;i&gt;(No, not really.)&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-product-includes-software-developed-by"&gt;
&lt;h3&gt;This product includes software developed by…&lt;/h3&gt;
&lt;p&gt;Hold on a second, 4-clause BSD? That license contains the following clause:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-1"&gt;&lt;/a&gt;Redistribution and use in source and binary forms, with or without
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-2"&gt;&lt;/a&gt;modification, are permitted provided that the following conditions are met:
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-3"&gt;&lt;/a&gt;3. All advertising materials mentioning features or use of this software
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-4"&gt;&lt;/a&gt;   must display the following acknowledgement:
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-5"&gt;&lt;/a&gt;     This product includes software developed by the University of
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-6"&gt;&lt;/a&gt;     California, Berkeley and its contributors.
&lt;/pre&gt;&lt;p&gt;This clause was removed by UC Berkeley in 1999, but there is still old code that has clauses (with other names), and someone could create something with the old license. I actually found one such clause in my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; (from &lt;code class="docutils literal"&gt;bcrypt_pbkdf&lt;/code&gt;). &lt;a class="reference external" href="https://www.gnu.org/licenses/bsd.html"&gt;NetBSD had 75 different clauses&lt;/a&gt; in 1997. It would be fun to see figures for the Node ecosystem… or more packages with equally problematic clauses.&lt;/p&gt;
&lt;p&gt;Most people aren’t aware of the licenses of their node dependencies. Going back to Colorama, I can quickly verify that Colorama has no dependencies, and itself uses the 3-clause BSD license. (That version of the license lacks the advertising clause and is considered GPL-compatible.) There is a helpful &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;license-checker&lt;/span&gt;&lt;/code&gt; package that can tell you what licenses you have (based on the details provided in &lt;code class="docutils literal"&gt;package.json&lt;/code&gt;)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-1"&gt;&lt;/a&gt;├─ MIT: 380
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-2"&gt;&lt;/a&gt;├─ ISC: 64
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-3"&gt;&lt;/a&gt;├─ Apache-2.0: 10
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-4"&gt;&lt;/a&gt;├─ BSD-3-Clause: 10
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-5"&gt;&lt;/a&gt;├─ BSD-2-Clause: 3
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-6"&gt;&lt;/a&gt;├─ CC-BY-3.0: 2
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-7"&gt;&lt;/a&gt;├─ BSD-3-Clause OR MIT: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-8"&gt;&lt;/a&gt;├─ MIT*: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-9"&gt;&lt;/a&gt;├─ (MIT OR Apache-2.0): 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-10"&gt;&lt;/a&gt;├─ CC-BY-4.0: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-11"&gt;&lt;/a&gt;├─ AFLv2.1,BSD: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-12"&gt;&lt;/a&gt;├─ MPL-2.0: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-13"&gt;&lt;/a&gt;├─ (BSD-2-Clause OR MIT OR Apache-2.0): 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-14"&gt;&lt;/a&gt;├─ CC0-1.0: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-15"&gt;&lt;/a&gt;└─ Unlicense: 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-back-to-bash"&gt;
&lt;h2&gt;Attempt 2: back to Bash&lt;/h2&gt;
&lt;p&gt;I decided to get rid of Gulp, it’s not necessary for this pipeline. I replaced
it with Bash and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;postcss-cli&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node-sass&lt;/span&gt;&lt;/code&gt; was replaced by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;dart-sass&lt;/span&gt;&lt;/code&gt;
(a two-file binary distribution), and &lt;code class="docutils literal"&gt;csso&lt;/code&gt; was replaced by &lt;code class="docutils literal"&gt;cssnano&lt;/code&gt; (it
works with postcss). Here is the resulting Bash file:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap.css
&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap-dark.css
&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-3"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap.min.css assets/css/bootstrap.css
&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-4"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap-dark.min.css assets/css/bootstrap-dark.css
&lt;/pre&gt;&lt;p&gt;The simplified dependency list cost me 37 MiB of disk space, and I’ve got 438
packages from 232 contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-3-node-clis-are-unnecessary"&gt;
&lt;h2&gt;Attempt 3: node CLIs are unnecessary&lt;/h2&gt;
&lt;p&gt;Let’s try something else: replace &lt;code class="docutils literal"&gt;npx postcss&lt;/code&gt; with a custom tool.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fs'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get-stdin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cssnano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cssnano'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-8"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-10"&gt;&lt;/a&gt;&lt;span class="nx"&gt;getStdin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-11"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-12"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-14"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;cssnano&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result2&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.min.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The bash script now pipes &lt;code class="docutils literal"&gt;sass&lt;/code&gt; output to &lt;code class="docutils literal"&gt;node run_postcss.js &lt;span class="pre"&gt;bootstrap(-dark)&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Doing this… cost me a new dependency. Its name is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/code&gt;. We’ve already met its author, Sindre Sorhus. While the library has its deficiencies &lt;a class="reference external" href="https://github.com/sindresorhus/get-stdin/issues/21"&gt;(namely, it doesn’t support reading from TTY)&lt;/a&gt;, it’s good enough. I could do it manually or use some other tricks, but since &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/code&gt; does not pull in any other dependencies, I’m going to accept it. After cleaning up &lt;code class="docutils literal"&gt;packages.json&lt;/code&gt;, we end up with:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;added 144 packages from 119 contributors and audited 637 packages in 8.127s&lt;/span&gt;
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;found 0 vulnerabilities&lt;/span&gt;
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-4"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; du -hs node_modules
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-5"&gt;&lt;/a&gt;&lt;span class="go"&gt; 21M    node_modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The task at hand was very simple. So was the JS code (Gulp and custom) I had to write to implement it. But underneath, there was a mess of unknown, unaudited code, duplicated libraries, and libraries created effectively to bump people’s npm download stats. There were already incidents, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;left-pad&lt;/span&gt;&lt;/code&gt; (the removal of which broke Babel), or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;event-stream&lt;/span&gt;&lt;/code&gt; (which was taken over and modified to steal cryptocurrencies). The modern web development ecosystem is a huge mess of dependencies and one-line packages. Some of them are necessary due to the lackluster JS standard library — but some are just useless. And some of these micro-packages would be better off as larger libraries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sure, the package count went down from the original 545 to 144. But the original point still stands: too much useless stuff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS. Five of the packages (in the “large” set) had a &lt;code class="docutils literal"&gt;.DS_Store&lt;/code&gt; file left over. I’m wondering if there are any other files that shouldn’t be shipped with packages, lurking in &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; directories all over the world…&lt;/p&gt;
&lt;p&gt;PPS. I’ve replaced Disqus with Isso, because it had too many advertisements. If you experience any issues with the comment system (after force-refreshing), e-mail me.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</guid><pubDate>Fri, 15 Feb 2019 18:00:00 GMT</pubDate></item><item><title>Python Hackery: merging signatures of two Python functions</title><link>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Today’s blog post is going to contain fairly advanced Python hackery. We’ll
take two functions — one is a wrapper for the other, but also adds some
positional arguments.  And we’ll change the signature displayed everywhere from
the uninformative &lt;code class="docutils literal"&gt;f(new_arg, *args, **kwargs)&lt;/code&gt; to something more
appropriate.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This blog post was inspired by F4D3C0D3 on #python (freenode IRC). I also took
some inspiration from
Gynvael Coldwind’s classic &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;Python 101&lt;/a&gt; (April Fools) video. (Audio and some comments are in Polish, but even if you don’t speak the language, it’s still worth it to click through the time bar and see some (fairly unusual) magic happen.)&lt;/p&gt;
&lt;div class="section" id="starting-point"&gt;
&lt;h2&gt;Starting point&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""This is old's docstring."""&lt;/span&gt;
&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_43cce7f28c4a47dab036495ff31dc506-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s test it.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;a b&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;!a b&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' - '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;ab - !ab&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-7"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function old in module __main__:&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;old(foo, bar)&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;    This is old's docstring.&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-13"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-14"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function new in module __main__:&lt;/span&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_2a53ef7fb0134b578cfc9efbc459ac7c-16"&gt;&lt;/a&gt;&lt;span class="go"&gt;new(prefix, foo, *args, **kwargs)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The last line is not exactly informative — it doesn’t tell us that we need to
pass &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as an argument.  Sure, you could define &lt;code class="docutils literal"&gt;new&lt;/code&gt; as just &lt;code class="docutils literal"&gt;(prefix, foo,
bar)&lt;/code&gt; — but that means every change to &lt;code class="docutils literal"&gt;old&lt;/code&gt; requires editing &lt;code class="docutils literal"&gt;new&lt;/code&gt; as
well. So, not ideal. Let’s try to fix this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-existing-infrastructure-functools-wraps"&gt;
&lt;h2&gt;The existing infrastructure: functools.wraps&lt;/h2&gt;
&lt;p&gt;First, let’s start with the basic facility Python already has.  The standard
library already comes with &lt;code class="docutils literal"&gt;functools.wraps&lt;/code&gt; and
&lt;code class="docutils literal"&gt;functools.update_wrapper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you’ve never heard of those two functions, here’s a crash course:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-2"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-4"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Inside wrapper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-10"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Square a number."""&lt;/span&gt;
&lt;a name="rest_code_ef6d926e002649fabbb8216ddfe735a5-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we try to inspect the &lt;code class="docutils literal"&gt;square&lt;/code&gt; function, we’ll see the original name, arguments,
annotations, and the docstring.  If we ran this code again, but with the
&lt;code class="docutils literal"&gt;@functools.wraps(f)&lt;/code&gt; line commented out, we would only see &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrapper(*args,&lt;/span&gt;
**kwargs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This approach gives us a hint of what we need to do.  However, if we apply
&lt;code class="docutils literal"&gt;wraps&lt;/code&gt; (or &lt;code class="docutils literal"&gt;update_wrapper&lt;/code&gt;, which is what &lt;code class="docutils literal"&gt;wraps&lt;/code&gt; ends up calling)
to our function, it will only have &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as arguments, and its
name will be displayed as &lt;code class="docutils literal"&gt;old&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, let’s take a look at &lt;a class="reference external" href="https://github.com/python/cpython/blob/4fe8dc68577f9e22aaf24db08fb6647277c42d4c/Lib/functools.py#L27-L79"&gt;functools.update_wrapper&lt;/a&gt;. What does it do? Two things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;copy some attributes from the old function to the new one
(&lt;code class="docutils literal"&gt;__module__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__name__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__qualname__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__doc__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update &lt;code class="docutils literal"&gt;__dict__&lt;/code&gt; of the new function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;wrapper.__wrapped__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we try to experiment with it — by changing the list of things to copy, for
example — we’ll find out that the annotations, the docstring, and the displayed name come from
the copied attributes, but the signature itself is apparently taken from &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Further investigation reveals this fact about &lt;code class="docutils literal"&gt;inspect.signature&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;inspect.signature(callable, *, follow_wrapped=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New in version 3.5:&lt;/em&gt; &lt;code class="docutils literal"&gt;follow_wrapped&lt;/code&gt; parameter. Pass &lt;code class="docutils literal"&gt;False&lt;/code&gt; to get a signature of callable specifically (&lt;code class="docutils literal"&gt;callable.__wrapped__&lt;/code&gt; will not be used to unwrap decorated callables.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so, this is our &lt;strong&gt;end goal:&lt;/strong&gt;&lt;/p&gt;
&lt;p class="lead"&gt;Craft a function with a specific signature (that merges &lt;code class="docutils literal"&gt;old&lt;/code&gt; and &lt;code class="docutils literal"&gt;new&lt;/code&gt;) and set it as &lt;code class="docutils literal"&gt;new.__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But first, we need to talk about parallel universes.&lt;/p&gt;
&lt;p&gt;Or actually, code objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-a-function-programmatically"&gt;
&lt;h2&gt;Defining a function programmatically&lt;/h2&gt;
&lt;p&gt;Let’s try an experiment.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_6099edd28af14127825a7f856fb9f007-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_6099edd28af14127825a7f856fb9f007-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__wrapped__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_6099edd28af14127825a7f856fb9f007-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6099edd28af14127825a7f856fb9f007-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;foo(x, y)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So, there are two ways to do this.  The first one would be to generate a string
with the signature and just use &lt;code class="docutils literal"&gt;eval&lt;/code&gt; to get a &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt; function. But
that would be cheating, and honestly, quite boring. (The inspect module could
help us with preparing the string.)  The second one? Create code objects
manually.&lt;/p&gt;
&lt;div class="section" id="code-objects"&gt;
&lt;h3&gt;Code objects&lt;/h3&gt;
&lt;p&gt;To create a function, we’ll need the &lt;code class="docutils literal"&gt;types&lt;/code&gt; module. &lt;code class="docutils literal"&gt;types.FunctionType&lt;/code&gt;
gives us a function, but it asks us for a code object. As the &lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html"&gt;docs&lt;/a&gt; state,
&lt;em&gt;Code objects represent byte-compiled executable Python code, or bytecode.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create one by
hand, we’ll need &lt;code class="docutils literal"&gt;types.CodeType&lt;/code&gt;. Well, not exactly by hand — we’ll end up doing a three-way merge between
&lt;code class="docutils literal"&gt;source&lt;/code&gt; (&lt;code class="docutils literal"&gt;old&lt;/code&gt;), &lt;code class="docutils literal"&gt;dest&lt;/code&gt; (&lt;code class="docutils literal"&gt;new&lt;/code&gt;) and &lt;code class="docutils literal"&gt;def &lt;span class="pre"&gt;_blank():&lt;/span&gt; pass&lt;/code&gt; (a function
that does nothing).&lt;/p&gt;
&lt;p&gt;Let’s look at the docstring for &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_bda5abd0f13b49daa4b5b15cae80e234-1"&gt;&lt;/a&gt;code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
&lt;a name="rest_code_bda5abd0f13b49daa4b5b15cae80e234-2"&gt;&lt;/a&gt;    constants, names, varnames, filename, name, firstlineno,
&lt;a name="rest_code_bda5abd0f13b49daa4b5b15cae80e234-3"&gt;&lt;/a&gt;    lnotab[, freevars[, cellvars]])
&lt;a name="rest_code_bda5abd0f13b49daa4b5b15cae80e234-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_bda5abd0f13b49daa4b5b15cae80e234-5"&gt;&lt;/a&gt;Create a code object.  Not for the faint of heart.
&lt;/pre&gt;&lt;p&gt;All of the arguments end up being fields of a code objects (name starts with
&lt;code class="docutils literal"&gt;co_&lt;/code&gt;).  For each
function &lt;code class="docutils literal"&gt;f&lt;/code&gt;, its code object is &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt;. You can find the filename in
&lt;code class="docutils literal"&gt;f.__code__.co_filename&lt;/code&gt;, for example. The meaning of all fields can be
found in docs for the &lt;a class="reference external" href="https://docs.python.org/3/library/inspect.html#types-and-members"&gt;inspect module&lt;/a&gt;. We’ll be
interested in the following three fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;argcount&lt;/code&gt; — number of arguments (not including keyword only arguments, * or ** args)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;kwonlyargcount&lt;/code&gt; — number of keyword only arguments (not including ** arg)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;varnames&lt;/code&gt; — tuple of names of arguments and local variables&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all the other fields, we’ll copy them from the appropriate function (one of
the three).  We don’t expect anyone to call the wrapped function directly; as
long as &lt;code class="docutils literal"&gt;help&lt;/code&gt; and &lt;code class="docutils literal"&gt;inspect&lt;/code&gt; members don’t crash when they look into it,
we’re fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="everything-you-need-to-know-about-function-arguments"&gt;
&lt;h3&gt;Everything you need to know about function arguments&lt;/h3&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_5ef79288cff14b80bb778084528bddd4-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_5ef79288cff14b80bb778084528bddd4-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfullargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5ef79288cff14b80bb778084528bddd4-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;FullArgSpec(args=['a', 'b', 'c'], varargs=None, varkw=None, defaults=(1, 2), kwonlyargs=['d'], kwonlydefaults={'d': 3}, annotations={})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A function signature has the following syntax:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Any positional (non-optional) arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable positional arguments (&lt;code class="docutils literal"&gt;*x&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varargs&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arguments with defaults (keyword-maybe arguments); their value is stored in &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt; left-to-right&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keyword-only arguments (after an asterisk); their values are stored in a dictionary.  Cannot be used if &lt;code class="docutils literal"&gt;varargs&lt;/code&gt; are defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable keyword arguments (&lt;code class="docutils literal"&gt;**y&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varkw&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’re going to make one assumption: we aren’t going to support a &lt;code class="docutils literal"&gt;source&lt;/code&gt;
function that uses variable arguments of any kind.  So, our final signature
will be composed like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That will be saved into &lt;code class="docutils literal"&gt;co_names&lt;/code&gt;.  The first two arguments are counts —
the first one is &lt;code class="docutils literal"&gt;len(1+2+3+4)&lt;/code&gt; and the other is &lt;code class="docutils literal"&gt;len(5+6)&lt;/code&gt;. The remaining
arguments to &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt; will be either safe minimal defaults, or things taken from
one of the three functions.&lt;/p&gt;
&lt;p&gt;We’ll also need to do one more thing: we must ensure &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt;,
&lt;code class="docutils literal"&gt;__kwdefaults__&lt;/code&gt;, and &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt; are all in the right places.
That’s also a fairly simple thing to do (it requires more tuple/dict merging).
And with that, we’re done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-results"&gt;
&lt;h2&gt;Final results&lt;/h2&gt;
&lt;p&gt;Before I show you the code, let’s test it out:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_fe7d3e858a6246e5a16ff8d4a25b5abe-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# old defined as before&lt;/span&gt;
&lt;a name="rest_code_fe7d3e858a6246e5a16ff8d4a25b5abe-2"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@merge_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_fe7d3e858a6246e5a16ff8d4a25b5abe-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_fe7d3e858a6246e5a16ff8d4a25b5abe-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And the end result — &lt;code class="docutils literal"&gt;help(new)&lt;/code&gt; says:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_092ef841130543a0af7f0ee788b1e874-1"&gt;&lt;/a&gt;new(prefix, foo, bar)
&lt;a name="rest_code_092ef841130543a0af7f0ee788b1e874-2"&gt;&lt;/a&gt;    This is old's docstring.
&lt;/pre&gt;&lt;p&gt;We did it!&lt;/p&gt;
&lt;p class="lead"&gt;The code is available on &lt;a class="reference external" href="https://github.com/Kwpolska/merge_args"&gt;GitHub&lt;/a&gt; and on &lt;a class="reference external" href="https://pypi.org/project/merge-args/"&gt;PyPI&lt;/a&gt; (&lt;code class="docutils literal"&gt;pip install merge_args&lt;/code&gt;).
There’s also an extensive test suite.&lt;/p&gt;
&lt;p&gt;PS. you might be interested in another related post of mine, in which I
reverse-engineer the compilation of a function: &lt;a class="reference external" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/"&gt;Gynvael’s Mission 11 (en): Python bytecode reverse-engineering&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</guid><pubDate>Thu, 20 Sep 2018 13:52:20 GMT</pubDate></item><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;There are two main tools used to create virtual environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt; has
been the de facto standard tool for many years. It can be used with both
Python 2 and 3, including very old versions of Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; (aka pyvenv) was added to the
standard library in Python 3.3, and with the addition of &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt; in 3.4,
it’s an even easier way to get a virtual environment created.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;virtualenv can be installed with your system package manager, or &lt;code class="docutils literal"&gt;pip
install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;venv comes built-in with Python 3, although
Debian/Ubuntu users will need to run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/code&gt; to
make it work. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id5" id="id1"&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which one to use? It’s up to you. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;code class="docutils literal"&gt;env&lt;/code&gt;, use (depending on your tool of
choice):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_3d775236c905462e8521126ec28fc47d-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_e85b542c933e4eb2afd90a6403639ae9-1"&gt;&lt;/a&gt;$ python3 -m venv env
&lt;/pre&gt;&lt;p&gt;Afterwards, you will end up with a folder named &lt;code class="docutils literal"&gt;env&lt;/code&gt; that contains folders
named &lt;code class="docutils literal"&gt;bin&lt;/code&gt; (&lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; on Windows — contains executables, including
&lt;code class="docutils literal"&gt;python&lt;/code&gt;), &lt;code class="docutils literal"&gt;lib&lt;/code&gt; (contains code), and &lt;code class="docutils literal"&gt;include&lt;/code&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;setuptools&lt;/code&gt;, but &lt;code class="docutils literal"&gt;venv&lt;/code&gt; does not ship with
&lt;code class="docutils literal"&gt;wheel&lt;/code&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick (first command is Unix, second is Windows): &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id6" id="id2"&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6bdcb0f334aa4ff58b83ece10fcc36a5-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a name="rest_code_6bdcb0f334aa4ff58b83ece10fcc36a5-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;div class="section" id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Have one global place for them, like &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store them in each project’s directory, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option comes with tools that make it easier, such as
&lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/"&gt;virtualenvwrapper&lt;/a&gt;.
The second option is equally easy to work with, but comes with one caveat —
you must add the venv directory to your &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; file, since you don’t
want it in your repository (it’s binary bloat, and works only on your machine).&lt;/p&gt;
&lt;p&gt;And if you don’t want to install virtualenvwrapper but want to put virtualenvs
in one global place, all you need is a short function in your shell
configuration file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_9fdbde02c76244438a858ca45a34657b-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_9fdbde02c76244438a858ca45a34657b-1"&gt;&lt;/a&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/virtualenvs
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_9fdbde02c76244438a858ca45a34657b-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_9fdbde02c76244438a858ca45a34657b-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_9fdbde02c76244438a858ca45a34657b-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_9fdbde02c76244438a858ca45a34657b-3"&gt;&lt;/a&gt; &lt;span class="k"&gt;function&lt;/span&gt; workon &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_9fdbde02c76244438a858ca45a34657b-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_9fdbde02c76244438a858ca45a34657b-4"&gt;&lt;/a&gt;     &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_9fdbde02c76244438a858ca45a34657b-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_9fdbde02c76244438a858ca45a34657b-5"&gt;&lt;/a&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;activation (run &lt;code class="docutils literal"&gt;source env/bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;env\Scripts\activate&lt;/code&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;executing &lt;code class="docutils literal"&gt;env/bin/python&lt;/code&gt; (&lt;code class="docutils literal"&gt;env\Scripts\python&lt;/code&gt;) and other scripts directly, as
activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is, and that
method is failsafe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a name="rest_code_bb1aabee40344c319ab82d2dc33f3d5f-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;/pre&gt;&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt;, calling it as
&lt;code class="docutils literal"&gt;./manage.py&lt;/code&gt; requires activation, or you can run
&lt;code class="docutils literal"&gt;venv/bin/python manage.py&lt;/code&gt;.)&lt;/p&gt;
&lt;div class="section" id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option is deprecated and generally fails to
solve the problem.) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id7" id="id3"&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_30f7373422494d838496a38506d4d5e1-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a name="rest_code_30f7373422494d838496a38506d4d5e1-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a name="rest_code_30f7373422494d838496a38506d4d5e1-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a name="rest_code_30f7373422494d838496a38506d4d5e1-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id8" id="id4"&gt;4&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;div class="section" id="do-i-need-to-install-the-virtualenv-tool-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;Do I need to install the virtualenv tool for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;code class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/code&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;code class="docutils literal"&gt;sudo pip&lt;/code&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The thing you’re actually installing is &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; if you want to upgrade the package manager itself.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item><item><title>Pipenv: promises a lot, delivers very little</title><link>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Pipenv is a Python packaging tool that does one thing reasonably well — application dependency management. However, it is also plagued by issues, limitations and a break-neck development process. In the past, Pipenv’s promotional material was highly misleading as to its purpose and backers.&lt;/p&gt;
&lt;p&gt;In this post, I will explore the problems with Pipenv. Was it really
recommended by Python.org? Can everyone — or at least, the vast majority
of people — benefit from it?&lt;/p&gt;
&lt;p&gt;(This post has been updated in February 2020 and May 2020 to reflect the
current state of Pipenv.)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#a-2020-update-updated" id="id14"&gt;A 2020 update (updated)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#officially-recommended-tool-or-how-we-got-here" id="id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-does" id="id16"&gt;What pipenv does&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#application-dependencies" id="id17"&gt;Application dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly" id="id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#finishing-it-all-up" id="id19"&gt;Finishing it all up&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-doesnt-do" id="id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#setup-py-source-distributions-and-wheels" id="id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#working-outside-of-the-project-root" id="id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#nikola" id="id23"&gt;Nikola&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-part-where-i-try-to-measure-times" id="id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#alternative-tools" id="id25"&gt;Alternative tools&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-tools-locking-and-hashing-and-that-is-all" id="id26"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#poetry-better-but-still-not-convincing" id="id27"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-is-here-to-stay" id="id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv" id="id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#conclusion" id="id30"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-2020-update-updated"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id14"&gt;A 2020 update (updated)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This blog post was written in 2018, and it’s still pretty accurate when it
comes to the criticisms of Pipenv, but something else happened since then.&lt;/p&gt;
&lt;p class="lead"&gt;No release was made between November 2018 and May 2020. Pipenv was effectively
dead for 1.5 years, and the state of Pipenv maintenance is alarming.&lt;/p&gt;
&lt;p&gt;A release of Pipenv was made in late 2018 (aptly named v2018.11.26). But then,
there was silence. New commits were made (on the order of 600-700 by the end of
the year). People asked for new releases, in more or less strong words, &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/3742"&gt;in May
2019&lt;/a&gt;, then &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/3978"&gt;in October&lt;/a&gt;, and again &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/4058"&gt;in December&lt;/a&gt;. Many people — including yours
truly, in this post — considered Pipenv dead. On 13th December 2019, the current
maintainer claimed &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/4058#issuecomment-565550646"&gt;a new release is almost finished&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pipenv 2019/2020 was vaporware for five months. Not much progress was made since the
December post until March 2020, when an issue from 2018 was renamed the &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/3369"&gt;March 2020
Release Tracking Issue&lt;/a&gt;. Some
progress was happening, and many release dates were given, but delays stacked
up. March became April. The first beta release was promised by 21st April, it
was delayed until the 29th. The final release was scheduled for a week from
that, but it didn’t happen. Finally, Beta 2 came out on 20th May 2020, and the
final release landed as v2020.5.28.&lt;/p&gt;
&lt;p&gt;If you read further into the post, you’ll encounter a chapter titled &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv"&gt;The
break-neck pace of Pipenv&lt;/a&gt;. Am I being a hypocrite right now? No, not at all.
Projects that are being depended on, such as a package manager, should have
clear policies about how they’re maintained. A new release when the maintainer
feels like adding a feature is too often. A new release every 1.5 years is not
often enough. And silence from maintainers, when faced with questions about
releases, is simply unacceptable.  Pip, for example, has updates every few
months in a fairly stable pace (with the exception of emergency bugfix
releases), and pip has years of development behind it, unlike the fairly new
Pipenv.&lt;/p&gt;
&lt;p&gt;And even if the May release was successful, you can’t be sure about any future
releases, and what will happen with Pipenv. At the same time, Pipenv isn’t a
good tool, as this post tries to explain — those criticisms are still valid,
since they are at the core of what Pipenv is. Instead, perhaps consider using
&lt;strong&gt;pip-tools&lt;/strong&gt; for locking dependencies? It does one thing, and one thing well.
It doesn’t enforce any specific structures on users, and supports any workflow
you have. (If you don’t need to lock dependencies, &lt;strong&gt;pip + venv&lt;/strong&gt; will
suffice.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="officially-recommended-tool-or-how-we-got-here"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pipenv’s README used to have a version of the above line in their README for
many months: it was added on  &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6e06fc451767a57e6fccb828c74a1412f6cef687"&gt;2017-08-31&lt;/a&gt; and eventually disappeared on &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/47debed9a1c2a3649bef4d59a3f1cf01bf059522"&gt;2018-05-19&lt;/a&gt;. For a short while (2018-05-16), it was clarified (&lt;em&gt;managing application dependencies&lt;/em&gt;, and &lt;em&gt;PyPA&lt;/em&gt; instead of &lt;em&gt;Python.org&lt;/em&gt;), and for about 15 minutes, the tagline called Pipenv &lt;em&gt;the world’s worst&lt;/em&gt; or &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6d77e4a0551528d5d72d81e8a15da4722ad82f26"&gt;something&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/1c956d37e6ad20babdb5021610b2ed2c9c4203f2"&gt;along&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/e3c72e167d21b921bd3bd89d4217b04628919bb2"&gt;these&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/fe78628903948013e8687d1a3be9fd4da2b6bd3d"&gt;lines&lt;/a&gt; (this coming from the maintainer).&lt;/p&gt;
&lt;p&gt;The README tagline claimed that Pipenv is the be-all, end-all of Python
packaging. The problem is: it isn’t that. There are some use cases that benefit
from Pipenv, but for many others, trying to use that tool will only lead to
frustration. We will explore this issue later.&lt;/p&gt;
&lt;p&gt;Another issue with this tagline was the &lt;em&gt;Python.org&lt;/em&gt; and &lt;em&gt;official&lt;/em&gt; parts. The
thing that made it “official” was a &lt;a class="reference external" href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;short tutorial&lt;/a&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id10" id="id1"&gt;1&lt;/a&gt; on packaging.python.org,
which is the PyPA’s packaging user guide. Also of note is the &lt;em&gt;Python.org&lt;/em&gt;
domain used. It makes it sound as if Pipenv was endorsed by the Python core
team. PyPA (Python Packaging Authority) is a separate organization — they are
responsible for the packaging parts (including pypi.org, setuptools, pip,
wheel, virtualenv, etc.) of Python. This made the endorsement misleading. Of
course, PyPA is a valued part of the Python world; an endorsement by the core
team — say, &lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html"&gt;inclusion in official Python distributions&lt;/a&gt; — is something far more
important.&lt;/p&gt;
&lt;p&gt;This tagline has led to many discussions and flamewars, perhaps with &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/"&gt;this
Reddit thread from May&lt;/a&gt; being the most heated and most important. The change
was the direct result of this Reddit thread. I recommend reading this thread in
full.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-does"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id16"&gt;What pipenv does&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve already learned that Pipenv is used to &lt;em&gt;manage application dependencies&lt;/em&gt;.
Let’s learn what that term really means.&lt;/p&gt;
&lt;div class="section" id="application-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id17"&gt;Application dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is an example use case for Pipenv:
I’m working on a website based on Django.  I create &lt;code class="docutils literal"&gt;~/git/website&lt;/code&gt; and run
&lt;code class="docutils literal"&gt;pipenv install Django&lt;/code&gt; in that directory.  Pipenv:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;automatically creates a virtualenv somewhere in my home directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;writes a Pipfile, which lists Django as my dependency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;installs Django using pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;proceeds to write &lt;code class="docutils literal"&gt;Pipfile.lock&lt;/code&gt;, which stores the exact version and source file hash &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id11" id="id5"&gt;2&lt;/a&gt; of each package installed (including &lt;code class="docutils literal"&gt;pytz&lt;/code&gt;, Django’s dependency).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part of the process was the most time consuming. At one point, while
locking the dependency versions, Pipenv hangs for 46 seconds. This is one of
Pipenv’s notable issues: &lt;strong&gt;it’s slow.&lt;/strong&gt; Of course, this isn’t the only one,
but it defintely doesn’t help. Losing 46 seconds isn’t much, but when we get to
the longer waits in the timing test section later, we’ll see something that
could easily discourage users from using a package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-scripts-badly"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But let’s continue with our workflow. &lt;code class="docutils literal"&gt;pipenv run &lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject
foobanizer&lt;/code&gt; is what I must use now, which is rather unwieldy to type, and
requires running pipenv even for the smallest things. (The &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt; script
has &lt;code class="docutils literal"&gt;/usr/bin/env python&lt;/code&gt; in its shebang.) I can run &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; to get
a new shell which runs the &lt;code class="docutils literal"&gt;activate&lt;/code&gt; script by default, giving you the worst
of both worlds when it comes to virtualenv activation: the unwieldiness of a
new shell, and the activate script, which the proponents of the shell spawning
dislike.&lt;/p&gt;
&lt;p&gt;Using &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; means spawning a new subshell, executing the shell
startup scripts (eg. &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt;), and requiring you to exit with &lt;code class="docutils literal"&gt;exit&lt;/code&gt; or
^D. If you type &lt;code class="docutils literal"&gt;deactivate&lt;/code&gt;, you are working with an extra shell, but now
outside of the virtualenv. Or you can use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--fancy&lt;/span&gt;&lt;/code&gt; mode that manipulates
&lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; before launching the subshell, but it requires a specific shell
configuration, in which &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; is not overridden in non-login shells — and
also often changing the config of your terminal emulator to run a login shell,
as many of the Linux terminals don’t do it.&lt;/p&gt;
&lt;p&gt;Now, why does all this happen? Because a command cannot manipulate the
environment of the shell it spawns. This means that Pipenv must pretend what it
does is a reasonable thing instead of a workaround. This can be solved with
manual activation using &lt;code class="docutils literal"&gt;source $(pipenv &lt;span class="pre"&gt;--venv)/bin/activate&lt;/span&gt;&lt;/code&gt; (can be made
into a neat alias), or shell wrappers (similar to what virtualenvwrapper does).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finishing-it-all-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id19"&gt;Finishing it all up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Anyway, I want a blog on my site. I want to write them in Markdown syntax, so I
run &lt;code class="docutils literal"&gt;pipenv install Markdown&lt;/code&gt;, and a few long seconds later, it’s added to
both Pipfiles.  Another thing I can do is &lt;code class="docutils literal"&gt;pipenv install &lt;span class="pre"&gt;--dev&lt;/span&gt; ipython&lt;/code&gt; and
get a handy shell for tinkering, but it will be marked as a development
dependency — so, not installed in production. That last part is an important
advantage of using Pipenv.&lt;/p&gt;
&lt;p&gt;When I’m done working on my website, I commit both Pipfiles to my git
repository, and push it to the remote server. Then I can clone it to, say,
&lt;code class="docutils literal"&gt;/srv/website&lt;/code&gt;. Now I can just &lt;code class="docutils literal"&gt;pipenv install&lt;/code&gt; to get all the production
packages installed (but not the development ones — Django, pytz, Markdown will
be installed, but IPython and all its million dependencies won’t). There’s just
one caveat: by default, the virtualenv will still be created in the current
user’s home directory. This is a problem in this case, since it needs to be
accessible by &lt;a class="reference external" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/"&gt;nginx and uWSGI&lt;/a&gt;, which do not have access to my (or root’s)
home directory, and don’t have a home directory of their own.  This can be
solved with &lt;code class="docutils literal"&gt;export PIPENV_VENV_IN_PROJECT=1&lt;/code&gt;. But note that I will now need
to export this environment variable every time I work with the app in &lt;code class="docutils literal"&gt;/srv&lt;/code&gt;
via Pipenv. The tool supports loading &lt;code class="docutils literal"&gt;.env&lt;/code&gt; files, &lt;strong&gt;but&lt;/strong&gt; only when
running &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; and &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;. You can’t use it to configure
Pipenv. And to run my app with nginx/uWSGI, I will need to know the exact virtualenv
path anyway, since I can’t use &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt; as part of uWSGI configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-doesnt-do"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The workflow I mentioned above looks pretty reasonable, right? There are some
deficiencies, but other than that, it seems to work well. The main issue with
Pipenv is: &lt;strong&gt;it works with one workflow, and one workflow only.&lt;/strong&gt; Try to do
anything else, and you end up facing multiple obstacles.&lt;/p&gt;
&lt;div class="section" id="setup-py-source-distributions-and-wheels"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pipenv only concerns itself with managing dependencies. &lt;strong&gt;It isn’t a packaging
tool.&lt;/strong&gt; If you want your thing up on PyPI, Pipenv won’t help you with anything.
You still need to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; with &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;, because the
Pipfile format only specifies the dependencies and runtime requirements (Python
version), there is no place in it for the package name, and Pipenv does not
mandate/expect you to install your project. It can come in handy to manage the
development environment (as a &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; replacement, or something
used to write said file), but if your project has a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;, you still
need to manually manage &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;. Pipenv can’t create wheels on its
own either. And &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; is going to be a lot faster than Pipenv ever
will be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-outside-of-the-project-root"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another issue with Pipenv is the use of the working directory to select
the virtual environment. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id12" id="id6"&gt;3&lt;/a&gt; Let’s say I’m a library author.  A user of my &lt;code class="docutils literal"&gt;foobar&lt;/code&gt;
library has just reported a bug and attached a &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; file that lets me
reproduce the issue. I download that file to &lt;code class="docutils literal"&gt;~/Downloads&lt;/code&gt; on my filesystem.
With plain old virtualenv, I can easily confirm the reproduction in a spare
shell with:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_261dc6c75f81447ea0e90277a870d122-1"&gt;&lt;/a&gt;$ ~/virtualenvs/foobar/bin/python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;And then I can launch my fancy IDE to fix the bug.  I don’t have to &lt;code class="docutils literal"&gt;cd&lt;/code&gt; into
the project. But with Pipenv, I can’t really do that.  If I put the virtualenv
in &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; with the command line option, I can type
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv/bin/python&lt;/span&gt; ~/Downloads/repro.py&lt;/code&gt;. If I use the
centralized directory + hashes thing, Tab completion becomes mandatory, if I
haven’t memorized the hash.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_5784d3befd314649a910acbf11096ec7-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_5784d3befd314649a910acbf11096ec7-2"&gt;&lt;/a&gt;$ pipenv run python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;What if I had two &lt;code class="docutils literal"&gt;.py&lt;/code&gt; files, or &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; otherwise depended on being in
the current working directory?&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_bf10085f9f28452dbde238e056772e93-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_bf10085f9f28452dbde238e056772e93-2"&gt;&lt;/a&gt;$ pipenv shell
&lt;a name="rest_code_bf10085f9f28452dbde238e056772e93-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_bf10085f9f28452dbde238e056772e93-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_bf10085f9f28452dbde238e056772e93-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;  &lt;span class="c1"&gt;# (not deactivate!)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;This is becoming ugly fairly quickly.&lt;/strong&gt; Also, with virtualenvwrapper, I can
do this:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_28f8c3ce05e140cda0c67a3a591b0484-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_28f8c3ce05e140cda0c67a3a591b0484-2"&gt;&lt;/a&gt;$ workon foobar
&lt;a name="rest_code_28f8c3ce05e140cda0c67a3a591b0484-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_28f8c3ce05e140cda0c67a3a591b0484-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;p&gt;And let’s not forget that Pipenv doesn’t help me to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;,
distribute code, or manage releases.  It just manages dependencies.  And it
does it pretty badly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nikola"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id23"&gt;Nikola&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m a co-maintainer of a static site generator, &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt;.  As part of this, I have the following places where
I need to run Nikola:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-site&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-plugins&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-themes&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/website&lt;/code&gt; (this blog)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;/Volumes/RAMDisk/n&lt;/code&gt; (demo site, used for testing and created when needed, on a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RAM_drive"&gt;RAM disk&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That list is long.  End users of Nikola probably don’t have a list that long,
but they might just have more than one Nikola site.  For me, and for the
aforementioned users, Pipenv does not work.  To use Pipenv, all those
repositories would need to live in one directory. I would also need to have a
&lt;em&gt;separate&lt;/em&gt; Pipenv environment for &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;nikola-users&lt;/span&gt;&lt;/code&gt;, because that needs Django.
Moreover, the Pipfile would have to be symlinked from &lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt; if we
were to make use of those in the project.  So, I would have a &lt;code class="docutils literal"&gt;~/nikola&lt;/code&gt;
directory just to make Pipenv happy, do testing/bug reproduction on a SSD (and
wear it out faster), and so on… Well, I could also use the virtualenv directly.
But in that case, Pipenv loses its usefulness, and makes my workflow more
complicated. I can’t use &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, because I would need to hack a
fuzzy matching system onto it, or memorize the random string appended to my
virtualenv name.  All because Pipenv relies on the current directory too much.&lt;/p&gt;
&lt;p&gt;Nikola end users who want to use Pipenv will also have a specific directory
structure forced on them. What if the site serves as docs for a project, and
lives inside another project’s repo? Two virtualenvs, 100 megabytes wasted.
Or worse, Nikola ends up in the other project’s Pipfile, which is technically
good for our download stats, but not really good for the other project’s
contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-try-to-measure-times"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pipenv is famous for being slow.  But how slow is it really?
I put it to the test.  I used two test environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Remote: a DigitalOcean VPS, the cheapest option (1 vCPU), Python 3.6/Fedora
28, in Frankfurt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local: my 2015 13” MacBook Pro (base model), Python 3.7, on a rather slow
Internet connection (10 Mbps on a good day, and the test was not performed on
one of them)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both were runninng Pipenv 2018.7.1, installed from pip.&lt;/p&gt;
&lt;p&gt;And with the following cache setups:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Removed: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.cache/pipenv&lt;/span&gt;&lt;/code&gt; removed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Partial: &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/depcache-py*.json&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/hash-cache/&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kept: no changes done from previous run&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, turns out Pipenv likes doing strange things with caching and locking.  A
look at the Activity Monitor hinted that there is network activity going on
when Pipenv displays its &lt;em&gt;Locking [packages] dependencies...&lt;/em&gt; line and
hangs. Now, the docs don’t tell you that. The most atrocious example was a
local Nikola install that was done in two runs: the first &lt;code class="docutils literal"&gt;pipenv install
Nikola&lt;/code&gt; run was interrupted &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id13" id="id8"&gt;4&lt;/a&gt; right after it was done installing packages,
so the cache had all the necessary wheels in it. The install took 10 minutes
and 7 seconds, 9:50 of which were taken by locking dependencies and installing
the locked dependencies — so, roughly nine and a half minutes were spent
staring at a static screen, with the tool doing &lt;em&gt;something&lt;/em&gt; in the background —
and Pipenv doesn’t tell you what happens in this phase.&lt;/p&gt;
&lt;p&gt;(Updated 2018-07-22: In the pipenv measurements: the first entry is the total
time of pipenv executon. The second is the long wait for pipenv to do its
“main” job: locking dependencies and installing them. The timing starts when
pipenv starts locking dependencies and ends when the prompt appears. The third
item is pipenv’s reported installation time.  So, pipenv install ⊇ locking/installing ⊇ Pipfile.lock install.)&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;colgroup&gt;
&lt;col style="width: 4%"&gt;
&lt;col style="width: 26%"&gt;
&lt;col style="width: 10%"&gt;
&lt;col style="width: 10%"&gt;
&lt;col style="width: 21%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Task&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Action&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Measurement
method&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Environment&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Cache&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" colspan="4"&gt;&lt;p&gt;Times in seconds&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Attempt 1&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 2&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 3&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Average&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.911&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4.052&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.914&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.959&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.562&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.943&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.773&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.759&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.404&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.681&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.569&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.551&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.536&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;62.973&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;71.305&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.271&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;42.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.9&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13.667&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to an environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (only Nikola in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to another environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (both in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.612&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.666&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.665&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.648&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.333&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django (new env)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;9&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola (cached)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial, after interruption&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(10m 7s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(9m 50s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(L/I: 10.51 s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id25"&gt;Alternative tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python packaging is something with the state of which nobody seems to be
satisfied. As such, there are many new contenders for the role of “best new
packaging tool”.&lt;/p&gt;
&lt;p&gt;Two popular alternatives packaging tools are &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; (by Vincent Driessen
and Jazzband) and &lt;a class="reference external" href="https://github.com/sdispater/poetry"&gt;Poetry&lt;/a&gt; (by Sébastien Eustace).&lt;/p&gt;
&lt;div class="section" id="pip-tools-locking-and-hashing-and-that-is-all"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id26"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pip-tools&lt;/strong&gt; contains two tools. The first one is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt;. It locks
dependencies in &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files, and that’s all it does. It allows
updating dependencies in the file based on what’s on PyPI. You can optionally
add hashes to that file. The second tool is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-sync&lt;/span&gt;&lt;/code&gt;. It will synchronize
your virtualenv and the requirements file: it will delete packages not in that
file, so that you don’t work with stuff not declared in requirements, and will
ensure versions match the requirements file.  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; takes roughly
10-20 seconds to run in the Nikola repo with a clean pip-tools cache (but with
the pip cache intact).&lt;/p&gt;
&lt;p&gt;Its speed is fairly reasonable, and it does not try to be the be-all-end-all
tool for development. It handles a specific task, does it well, and does not
try to handle tasks it should not. Pip-tools lets you work with venvs in any
way you like, and it does not require anything specific. Unlike Pipenv and
Poetry, you can install it into the virtualenvs that need it, and not
system-wide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poetry-better-but-still-not-convincing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id27"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Poetry&lt;/strong&gt; is somewhere in between. Its main aim is close to Pipenv, but it
also makes it possible to distribute things to PyPI. It tries really hard to
hide that it uses Pip behind the scenes. Its README comes with an extensive
&lt;a class="reference external" href="https://github.com/sdispater/poetry#what-about-pipenv"&gt;“What about Pipenv?”&lt;/a&gt;
section, which I recommend reading — it has a few more examples of bad Pipenv
features.  Poetry claims to use the standardized (PEP 518) &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt;
file to replace the usual lot of files. Unfortunately, the only thing that is
standardized is the file name and syntax. Poetry uses custom &lt;code class="docutils literal"&gt;[tool.poetry]&lt;/code&gt;
sections, which means that one needs Poetry to fully use the packages created
with it, leading to vendor lock-in. There is a &lt;code class="docutils literal"&gt;build&lt;/code&gt; feature to produce a
sdist with setup.py and friends.&lt;/p&gt;
&lt;p&gt;In February 2020, in a simple &lt;code class="docutils literal"&gt;poetry add Nikola&lt;/code&gt; test, it took &lt;strong&gt;about a
minute&lt;/strong&gt; (55.1/50.8/53.6 s) to resolve dependencies (according to Poetry’s own
count, Local environment, Poetry cache removed), complete with reassuring output and
no quiet lockups.  Not as good as pip, but it’s more reasonable than Pipenv.
Also, the codebase and its layout are rather convoluted, and the docs are very
sparse and lacking. Poetry produces packages instead of just managing
dependencies, so it’s generally more useful than Pipenv. That said, I am not
convinced by that tool either.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-is-here-to-stay"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But in all the talk about new tools, we’re forgetting about the old ones, and
they do their job well — so well in fact, that the new tools still need them
under the covers.&lt;/p&gt;
&lt;p&gt;Pip is fast. It does its job well enough. It lacks support for splitting
packages between production and development (as Pipenv and Poetry do). This
means that &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip install&lt;/code&gt; are instant, at the cost of (a)
needing two separate environments, or (b) installing development dependencies
in production (which &lt;em&gt;should&lt;/em&gt; only be a waste of HDD space and nothing more in
a well-architected system). But at the same time, pip-tools can help keep the
environments separate, as long as you take some time to write separate
&lt;code class="docutils literal"&gt;requirements.in&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The virtualenv management features can be provided by virtualenvwrapper. That
tool’s main advantage is the shell script implementation, which means that
&lt;code class="docutils literal"&gt;workon foo&lt;/code&gt; activates the &lt;code class="docutils literal"&gt;foo&lt;/code&gt; virtualenv without spawning a new
subshell (an issue with Pipenv and Poetry, that I already covered when
describing Pipenv’s operation in the &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly"&gt;Running scripts (badly)&lt;/a&gt; chapter.) An
argument often raised by Pipenv proponents is that one does not need to concern
itself with creating the virtualenv, and doesn’t need to care where it is.
Unfortuntately, many tools require this knowledge from their user, or force a
specific location, or require it to be different to the home directory.&lt;/p&gt;
&lt;p&gt;And for a reasonable project template with release automation — well, I have my
own entry in that category, called (rather unoriginally) the &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project
Template (PyPT)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, setup.py files are not ideal, since they use &lt;code class="docutils literal"&gt;.py&lt;/code&gt; code and a function
execution, making access to meta information hard (&lt;code class="docutils literal"&gt;./setup.py egg_info&lt;/code&gt;
creates tool-accessible text files). Their main advantage is that they are the
&lt;em&gt;only&lt;/em&gt; format that is widely supported — pip is the de-facto default
Python package manager (which is pre-installed on Windows and Mac), and other
tools would require installation/bootstrapping first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-break-neck-pace-of-pipenv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good packaging tool is stable. In other words, it doesn’t change often, and
it strives to support existing environments. It wouldn’t be fun to re-download
everything on your system, because someone decided that &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; is now called
&lt;code class="docutils literal"&gt;/stuff&lt;/code&gt;, and all the files in &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; would become forgotten and not
removed. Well, this is what Pipenv did:&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;colgroup&gt;
&lt;col style="width: 11%"&gt;
&lt;col style="width: 89%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Date/Time (UTC)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Event&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-01-31 22:01&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.2.14 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;./.venv&lt;/span&gt;&lt;/code&gt; (eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foo/.venv&lt;/span&gt;&lt;/code&gt;). Last version with the original behavior of pipenv.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 05:36&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.0 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo&lt;/span&gt;&lt;/code&gt; (to be precise, &lt;code class="docutils literal"&gt;$WORKON_HOME/foo&lt;/code&gt;).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/178"&gt;Issue #178&lt;/a&gt; is reported regarding the behavior change.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:18&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “no plans for making it configurable.” and closes the issue.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 03:05&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “added &lt;code class="docutils literal"&gt;PIPENV_VENV_IN_PROJECT&lt;/code&gt; mode for classic operation. Not released yet.”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 04:29&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.3 released. The default is still uses a “remote” location, but &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; can now be used.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-03-02 13:48&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.5.0 released. The new default path is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$WORKON_HOME/foo-HASH&lt;/span&gt;&lt;/code&gt;, eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo-7pl2iuUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Over the course of a month, the location of the virtualenv changed twice. If
the user didn’t read the changelog and didn’t manually intervene (also of note,
the option name was mentioned in the issue and in v3.3.4’s changelog), they
would have a stale &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; directory, since the new scheme was adopted for
them. And then, after switching to v3.5.0, they would have a stale virtualenv
hidden somewhere in their home directory, because pipenv decided to add hashes.&lt;/p&gt;
&lt;p&gt;Also, this is not configurable. One cannot disable the hashes in paths, even
though &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/589"&gt;users&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/1049"&gt;wanted&lt;/a&gt; to. It would also help people
who want to mix Pipenv and virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Pipenv is a very &lt;strong&gt;opinionated&lt;/strong&gt; tool, and if the dev team changes their mind,
the old way is not supported.&lt;/p&gt;
&lt;p&gt;Pipenv moves fast and doesn’t care if anything breaks. As an example, between
2018-03-13 13:21 and 2018-03-14 13:44 (a little over 24 hours), Pipenv had 10
releases, ranging from v11.6.2 to v11.7.3. The &lt;a class="reference external" href="https://github.com/pypa/pipenv/blob/25df09c171a548fd71d4df735767bf763a653b83/HISTORY.txt"&gt;changelog&lt;/a&gt; is rather unhelpful
when it comes to informing users what happened in each of the releases.&lt;/p&gt;
&lt;p&gt;Extra reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://web.archive.org/web/20180717140106/https://journal.kennethreitz.org/entry/r-python"&gt;Kenneth Reitz, A Letter to /r/python (with some notes about bipolar disorder)&lt;/a&gt; (replaced with Wayback Machine link on 2020-02-07)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reddit comment threads for the letter: &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kdfd6/kenneth_reitz_a_letter_to_rpython_with_some_notes/"&gt;first&lt;/a&gt; and &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kjv8x/a_letter_to_rpython_kenneth_reitzs_journal/"&gt;second&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id30"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pipenv, contrary to popular belief and (now removed) propaganda, is not an
officially recommended tool of Python.org. It merely has a tutorial written
about it on packaging.python.org (page run by the PyPA).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv solves one use case reasonably well, but fails at many others, because
it forces a particular workflow on its users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv does not handle any parts of packaging (cannot produce sdists and
wheels).  Users who want to upload to PyPI need to manage a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file
manually, alongside and independently of Pipenv.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv produces lockfiles, which are useful for reproducibility, at the cost
of installation speed. The speed is a noticeable issue with the tool. &lt;code class="docutils literal"&gt;pip
freeze&lt;/code&gt; is good enough for this, even if there are no dependency classes
(production vs development) and no hashes (which
have minor benefits) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id11" id="id9"&gt;2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hatch attempts to replace many packaging tools, but some of its practices and
ideas can be questionable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Poetry supports the same niche Pipenv does, while also adding the ability to
create packages and improving over many gripes of Pipenv. A notable issue is
the use of a custom all-encompassing file format, which makes switching tools
more difficult (vendor lock-in).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pip, setup.py, and virtualenv — the traditional, tried-and-true tools — are
still available, undergoing constant development. Using them can lead to a
simpler, better experience.  Also of note, tools like virtualenvwrapper
can manage virtualenvs better than the aforementioned new Python tools,
because it is based on shell scripts (which can modify the enivironment).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id10"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;On a side note, the tutorial explains nothing. A prospective user only learns it’s similar to npm or bundler (what does that mean?), installs one package, and runs a &lt;code class="docutils literal"&gt;.py&lt;/code&gt; file through &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id11"&gt;&lt;span class="brackets"&gt;2&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id5"&gt;1&lt;/a&gt;,&lt;a href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id9"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Note that one can’t change the file on PyPI after uploading it, so this would only be protection against rogue PyPI admins or a MitM attack (in which case you’ve got bigger problems anyways). &lt;a class="reference external" href="https://github.com/nedbat/coveragepy/issues/679#issuecomment-406396761"&gt;Also, the feature is fairly broken.&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id12"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id6"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Fortunately, it looks in the parent directories for Pipfiles as well. Otherwise, you might end up with one environment for &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and another for &lt;code class="docutils literal"&gt;foo/foo&lt;/code&gt; and yet another for &lt;code class="docutils literal"&gt;foo/docs&lt;/code&gt; and so on…&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id13"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id8"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The interruption happened by mistake due to the RAM disk running out of space, but it was actually a good thing to have happened.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr class="docutils"&gt;
&lt;p class="alert alert-info"&gt;&lt;strong&gt;Other discussion threads:&lt;/strong&gt; &lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/a3h81m/pipenv_promises_a_lot_delivers_very_little/"&gt;r/Python&lt;/a&gt;, &lt;a class="reference external" href="https://news.ycombinator.com/item?id=18612590"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</guid><pubDate>Tue, 17 Jul 2018 17:40:00 GMT</pubDate></item><item><title>Teleperypetie, czyli jak mój operator nie chciał moich pieniędzy</title><link>https://chriswarrick.com/pl/blog/2017/09/22/mobile-phone-woes-or-how-my-carrier-didnt-want-my-money/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Wykorzystałem 0,99 GB z 1 GB pakietu. Musiałem dokupić dodatkowy transfer. Mój (były) pomarańczowy operator oferuje pakiet 1 GB za okazyjną cenę 15 zł. (U innych operatorów jest taniej, nawet o połowę)&lt;/p&gt;
&lt;p&gt;Jak go włączyć? Można wysłać SMS-a albo zadzwonić do automatycznego biura obsługi. Więc dzwonimy.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;blockquote&gt;&lt;p&gt;Witamy w Orendż, sieci numer jeden!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Reasumując, mamy w Polsce:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;pomarańczową &lt;em&gt;Sieć Numer Jeden&lt;/em&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Najlepszą Sieć&lt;/em&gt; koloru &lt;a class="reference external" href="https://www.t-mobile.com/company/legal-notices/trademarks.html"&gt;magenta™,&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Najchętniej Wybieraną Sieć w Polsce&lt;/em&gt;, czyli fioletową,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;oraz sieć zielona, której reklamy mają epileptyczne migające kolory orkaszone sloganem &lt;em&gt;Brawo Ty!&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oraz oczywiście &lt;a class="reference external" href="https://pl.wikipedia.org/wiki/Operator_wirtualny#Wirtualni_operatorzy_na_rynku_polskim"&gt;kilkadziesiąt MVNO i marek alternatywnych&lt;/a&gt;.
I wszyscy — niezależnie, czy są numer jeden, czy najlepsi, et cetera — kochają swoich klientów, dbają o najwyższą jakość usług i zadowolenie klienta, a ich nadrzędnym celem jest obniżenie rachunków klientów.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A nie, przepraszam.&lt;/em&gt; Ich celem jest maksymalizacja zysków, a słowo &lt;em&gt;kochają&lt;/em&gt; nie ma racji bytu.&lt;/p&gt;
&lt;p&gt;Po kolejnych trzech reklamach docieramy do menu głównego. Dotarcie do opcji &lt;em&gt;jednorazowe pakiety internetowe&lt;/em&gt; trochę zajęło. Wybieram pakiet 1 GB. &lt;em&gt;Wygranko?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Usługa zostanie aktywowana o północy.&lt;/p&gt;
&lt;footer&gt;Pan Robot z Infolinii, w gąszczu innych nieistotnych informacji&lt;/footer&gt;
&lt;/blockquote&gt;&lt;p&gt;A gdyby tego było mało, otrzymałem jeszcze dwa SMS-y: (pisownia oryginalna)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Otrzymalismy prosbe o wlaczenie uslugi Pakiet 1 GB jednorazowy. Usluge wlaczymy &lt;em&gt;[dzisiaj]&lt;/em&gt;. Oplata za usluge wynosi 15 zl. Pozdrawiamy, Orange&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Usluga Pakiet 1 GB jednorazowy wlaczymy w ciagu 24 godzin. Pozdrawiamy, Orange&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sieć Numer Jeden, a nawet nie potrafi jasno i dokładnie określić daty uruchomienia usługi? I do tego usługi bardzo prostej która nie wymaga od nic żadnej dodatkowej pracy? Usługa zostanie uruchomiona:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Dzisiaj. (Najwcześniej — teraz, najpóźniej — sekundę przed północą.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;O północy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;W ciągu 24 godzin. (Najwcześniej — teraz, najpóźniej — jutro o tej samej porze.)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="https://chriswarrick.com/images/20170922-orange-time-graph.svg" class="align-center" alt="Graficzna reprezentacja możliwości czasu uruchomienia usługi."&gt;&lt;p&gt;Pół godziny później, kiedy mój telefon mówi, że zużyłem ponad 1 GB, Sieć Numer Jeden ostrzega mnie, że wykorzystałem 80% „standardowego” pakietu. Android i Pomarańczowi chyba mają inną definicję gigabajta — trzeba przyznać, że to Sieć Numer Jeden ma lepszą.&lt;/p&gt;
&lt;p&gt;Dziesięć godzin później licznik Androida pokazuje 1,36 GB. Sieć Numer Jeden informuje mnie, że właśnie wykorzystałem 1 GB, aktywował się lejek — 16 kb/s w jednej wiadomości, 16kB/s w kolejnej. (Jak zwykle rozdźwięk pomiędzy SMS-ami wysłanymi w tym samym czasie. Chociaż oba limity są równie tragiczne.) Fast.com podaje 52 Kbps. Cytując reklamy sieci zielonej — &lt;em&gt;Brawo Wy!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Drogi Pomarańczowy operatorze Sieci Numer Jeden!&lt;/strong&gt; Czy aktywowanie tak prostej — wręcz prymitywnej — a niewątpliwie popularnej usługi wymaga odczekania do północy? Czy nie moglibyście włączyć pakietu w chwili złożenia dyspozycji? I dlaczego w waszych komunikatach są trzy różne czasy oczekiwania i dwa limity prędkości?&lt;/p&gt;
&lt;p&gt;Opuściłem Sieć Numer Jeden. I jestem zadowolony — płacę mniej za więcej.&lt;/p&gt;&lt;/div&gt;</description><category>mobile</category><category>Orange</category><category>phone</category><category>telecom</category><guid>https://chriswarrick.com/pl/blog/2017/09/22/mobile-phone-woes-or-how-my-carrier-didnt-want-my-money/</guid><pubDate>Fri, 22 Sep 2017 14:00:00 GMT</pubDate></item><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;div class="contents right-toc topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is not in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; your process gets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the hard-coded path is not correct on the end user’s system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id5" id="id1"&gt;1&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;code class="docutils literal"&gt;grep&lt;/code&gt;, &lt;code class="docutils literal"&gt;sed&lt;/code&gt; and
&lt;code class="docutils literal"&gt;awk&lt;/code&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;code class="docutils literal"&gt;os&lt;/code&gt; or &lt;code class="docutils literal"&gt;shutil&lt;/code&gt;. Your language of
choice can also handle things like networking (don’t call &lt;code class="docutils literal"&gt;curl&lt;/code&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;code class="docutils literal"&gt;execve()&lt;/code&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id6" id="id2"&gt;2&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id7" id="id3"&gt;3&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id8" id="id4"&gt;4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;directly, by calling &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;through the shell (&lt;code class="docutils literal"&gt;sh&lt;/code&gt;), usually by calling &lt;code class="docutils literal"&gt;system()&lt;/code&gt;. As Linux’s
manpage for &lt;code class="docutils literal"&gt;system(3)&lt;/code&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;system()&lt;/code&gt; library function uses &lt;code class="docutils literal"&gt;fork(2)&lt;/code&gt; to create a child process that executes the shell command specified in command using &lt;code class="docutils literal"&gt;execl(3)&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_24dee89c73ec490aa169882d35186803-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3bf4035ddfba4a518489eb66b9da864a-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_3bf4035ddfba4a518489eb66b9da864a-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_3bf4035ddfba4a518489eb66b9da864a-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a name="rest_code_d27bb2a5629440a1bcde3de0423b87d6-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;quotes and escapes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding expressions in braces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wildcards (glob, &lt;code class="docutils literal"&gt;*&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redirections and pipes (&lt;code class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command substitution (backticks or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running multiple commands on the same line (&lt;code class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="dl-horizontal simple"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Perform fork-exec by yourself, or use &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;code class="docutils literal"&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the subprocess module. Always pass &lt;code class="docutils literal"&gt;shell=False&lt;/code&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;code class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/code&gt; (and not &lt;code class="docutils literal"&gt;_shell&lt;/code&gt;), but note it takes &lt;code class="docutils literal"&gt;*args&lt;/code&gt; and not a list. Never use &lt;code class="docutils literal"&gt;os.system&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.popen&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;IO.popen&lt;/code&gt;. Pass multiple arguments to &lt;code class="docutils literal"&gt;system()&lt;/code&gt; (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/code&gt;). Never use &lt;code class="docutils literal"&gt;%x{command}&lt;/code&gt; or backticks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;Runtime.exec&lt;/code&gt;. Pass multiple arguments or list to &lt;code class="docutils literal"&gt;ProcessBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All the standard methods go through the shell. Try &lt;code class="docutils literal"&gt;escapeshellcmd()&lt;/code&gt;, &lt;code class="docutils literal"&gt;escapeshellarg()&lt;/code&gt; — or better, switch to Python. Or anything, really.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;os/exec&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.StartProcess&lt;/code&gt; are safe.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use &lt;code class="docutils literal"&gt;child_process.execFile&lt;/code&gt; or &lt;code class="docutils literal"&gt;child_process.spawn&lt;/code&gt; with &lt;code class="docutils literal"&gt;shell&lt;/code&gt; set to false.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; on Windows. Instead, &lt;code class="docutils literal"&gt;CreateProcess()&lt;/code&gt;,
&lt;code class="docutils literal"&gt;ShellExecute()&lt;/code&gt;, or lower-level &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/code&gt; functions are used. &lt;code class="docutils literal"&gt;cmd.exe
/c&lt;/code&gt; is called in shell calls.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The function that does the real work is &lt;code class="docutils literal"&gt;execve()&lt;/code&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;code class="docutils literal"&gt;execl()&lt;/code&gt; does the last two.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Quoted from &lt;code class="docutils literal"&gt;execve(2)&lt;/code&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An alternative is &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Misja Gynvaela 11 (stream anglojęzyczny): reverse-engineering bajtkodu Pythona</title><link>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Gynvael Coldwind jest badaczem bezpieczeństwa pracującym w Google, który organizuje cotygodniowe livestreamy na tematy bezpieczeństwa i programowania &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;po polsku&lt;/a&gt; i  &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;po angielsku&lt;/a&gt;). Częścią streamów są misje — w skrócie, zadania w stylu CTF-owym dotyczące inżynierii wstecznej. Wczorajsza misja była o elfickim — znaczy o Paint’cie — znaczy o programowaniu w Pythonie i jego bajtkodzie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-9"&gt;&lt;/a&gt;files.
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-19"&gt;&lt;/a&gt;Good luck!
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a name="rest_code_b69d6cd512664e61b9d83e6f73ca7f44-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;p&gt;Kod firmware:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-3"&gt;&lt;/a&gt;co_flags 67
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-4"&gt;&lt;/a&gt;co_name check_password
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a name="rest_code_4e7af76fc33c469d8a0b8a4fb6302dd7-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Dla niewtajemniczonych to może wyglądać na &lt;em&gt;elficki&lt;/em&gt;. W rzeczywistości jest to bajtkod Pythona — zestaw instrukcji używany przez maszynę wirtualną Pythona (CPython 2.7.) Python, podobnie jak wiele innych języków, używa kompilatora do tłumaczenia kodu źródłowego czytelnego dla ludzi na coś bardziej odpowiedniego dla komputerów. Kod Pythona tłumaczony jest na bajtkod, który jest wykonywany przez maszynę wirtualną CPythona. Bajtkod CPythona może być używany na różnym sprzęcie, podczas gdy kod maszynowy nie może. Z drugiej strony kod maszynowy jest zazwyczaj szybszy niż języki oparte na maszynach wirtualnych i bajtkodzie. (Java i C# działają tak jak Python, C jest tłumaczone prosto do kodu maszynowego)&lt;/p&gt;
&lt;p&gt;To jest wewnętrzna reprezentacja funkcji Pythona. Pierwsze kilka linii to zmienne należące do obiektu &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt; naszej funkcji. Wiemy, że funkcja:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ma 1 argument&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma 7 stałych: None, długi ciąg cyfr hex, i liczby: 89, 255, 115 ,50.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flagi&lt;/a&gt; ustawione na 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). Jest to “standardowa” wartość używana przez większość nieskomplikowanych funkcji.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nazywa się &lt;code class="docutils literal"&gt;check_password&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;używa następujących zmiennych globalnych lub nazw atrybutów: &lt;code class="docutils literal"&gt;decode&lt;/code&gt;, &lt;code class="docutils literal"&gt;len&lt;/code&gt;, &lt;code class="docutils literal"&gt;False&lt;/code&gt;, &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma 4 zmienne lokalne&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;używa stosu o rozmiarze 6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jej zmienne nazywają się &lt;code class="docutils literal"&gt;s&lt;/code&gt;, &lt;code class="docutils literal"&gt;good&lt;/code&gt;, &lt;code class="docutils literal"&gt;cs&lt;/code&gt;, &lt;code class="docutils literal"&gt;cg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Są dwa sposoby na rozwiązanie tego zadania: można spróbować zreasemblować wyjście &lt;code class="docutils literal"&gt;dis&lt;/code&gt; przy pomocy modułu &lt;code class="docutils literal"&gt;opcode&lt;/code&gt; lub odtworzyć funkcję ręcznie, używając bajtkodu. Wybrałem tę drugą opcję.&lt;/p&gt;
&lt;div class="section" id="reverse-engineering-bajtkodu-pythona-reczne-odtwarzanie-funkcji"&gt;
&lt;h2&gt;Reverse-engineering bajtkodu Pythona: ręczne odtwarzanie funkcji&lt;/h2&gt;
&lt;p&gt;Zacząłem od odtworzenia oryginalnego pliku z firmware’em. Utworzyłem pustą funkcję i napisałem trochę kodu, który wypisuje zawartość &lt;code class="docutils literal"&gt;__code__&lt;/code&gt; i wyjście &lt;code class="docutils literal"&gt;dis.dis&lt;/code&gt;. Dodałem też kolorowanie wyjścia, by łatwiej się czytało:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_d451e83575cc4a29b3e7a03c5a6445fb-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli uruchomimy ten solver, otrzymamy następujące wyjście (tekst w nawiasach kwadratowych dopisany przeze mnie):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_984367983de945388ada888a21d2ab33-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 się zgadza]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-5"&gt;&lt;/a&gt;co_names ()              [0/6 się zgadza]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-6"&gt;&lt;/a&gt;co_nlocals 1             [powinno być 4]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-7"&gt;&lt;/a&gt;co_stacksize 1           [powinno być 6]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 się zgadza]
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a name="rest_code_984367983de945388ada888a21d2ab33-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy (przy pomocy kolorów, których tu nie ma), że &lt;code class="docutils literal"&gt;co_argcount&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_flags&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_name&lt;/code&gt; są ustawione poprawnie. Mamy też jedną ze zmiennych (&lt;code class="docutils literal"&gt;None&lt;/code&gt;, jest w każdej funkcji) i jedną nazwę zmiennej (nazwę argumentu &lt;code class="docutils literal"&gt;s&lt;/code&gt;). Widzimy wyjście &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt;. O ile jest podobne do tego z zadania, to jest kilka zauważalnych różnic: nie ma &lt;code class="docutils literal"&gt;7&lt;/code&gt; na początku (numer linii), a instrukcje &lt;code class="docutils literal"&gt;LOAD_CONST&lt;/code&gt; nie miały niczego w nawiasach (tylko porównania i pętle coś miały). To utrudnia czytanie bajtkodu, ale to jest wciąż możliwe. (Początkowo chciałem sobie pomóc narzędziem &lt;code class="docutils literal"&gt;diff&lt;/code&gt;, ale nie jest trudno to zrobić ręcznie. Użyłem &lt;code class="docutils literal"&gt;diff&lt;/code&gt; do ostatecznego sprawdzenia po ręcznej „konwersji”)&lt;/p&gt;
&lt;p&gt;Zatrzymajmy się na chwilę i spójrzmy na stałe i nazwy. Po długim stringu pojawia się &lt;code class="docutils literal"&gt;hex&lt;/code&gt;, a jedną ze stałych jest &lt;code class="docutils literal"&gt;decode&lt;/code&gt;. To znaczy, że musimy użyć &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/code&gt; by utworzyć (byte)string z pewną informacją. Odpowiedzi do misji są czytelne dla ludzi, a ten string nie jest — więc musimy zrobić coś więcej.&lt;/p&gt;
&lt;p&gt;Spróbujmy odtworzyć oryginalny kod misji. VM Pythona opiera się na stosie. W bajtkodzie powyżej widzimy, że instrukcje przyjmują 0 lub 1 argument. Niektóre z nich dodają obiekty na stos, inne wykonują akcje i usuwają rzeczy ze stosu. Większość nazw instrukcji jest łatwa do zrozumienia, ale pełna lista jest dostępna w &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacji modułu dis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instrukcje takie jak &lt;code class="docutils literal"&gt;LOAD&lt;/code&gt; czy &lt;code class="docutils literal"&gt;STORE&lt;/code&gt; odwołują się do indeksów w krotkach constants/names/varnames. Aby było łatwiej, oto “tabelka” tych indeksów:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-1"&gt;&lt;/a&gt;constants
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a name="rest_code_1595955ecc714675af951a2d011c75ac-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;p&gt;W celu poprawienia czytelności, użyję “nowe” wyjście &lt;code class="docutils literal"&gt;dis&lt;/code&gt; z nazwami w nawiasach poniżej:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_262fe01b47a84d2fbb2b3609706896ee-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a name="rest_code_262fe01b47a84d2fbb2b3609706896ee-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a name="rest_code_262fe01b47a84d2fbb2b3609706896ee-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a name="rest_code_262fe01b47a84d2fbb2b3609706896ee-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # funkcja pobiera 1 argument ze stosu
&lt;a name="rest_code_262fe01b47a84d2fbb2b3609706896ee-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;p&gt;Jak wcześniej zgadywałem, pierwsza linia funkcji wygląda tak:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_67501b1b4e3848faa9214a6067207ef0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_67501b1b4e3848faa9214a6067207ef0-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli jeszcze raz uruchomimy solver, zobaczymy że pierwsze 12 bajtów w bajtkodzie zgadza się z treścią misji. Widzimy też, że &lt;code class="docutils literal"&gt;varnames&lt;/code&gt; jest wypełnione w połowie, dodaliśmy dwie stałe, i jedną nazwę. Następne kilka linii wygląda tak:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a name="rest_code_bfa2bfdc7a0f4f508e0fe48322f81f22-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy że umieszczamy obiekt globalny na stosie i wywołujemy go z jednym argumentem. W obu przypadkach, obiekt globalny ma indeks 1, czyli &lt;code class="docutils literal"&gt;len&lt;/code&gt;. Dwa argumenty to &lt;code class="docutils literal"&gt;s&lt;/code&gt; i &lt;code class="docutils literal"&gt;good&lt;/code&gt;. Umieszczamy obie długości na stosie i je porównujemy. Jeśli porównanie się nie uda (są równe), przeskakujemy do instrukcji zaczynającej się na bajcie 43, w przeciwnym razie kontynuujemy wykonywanie, by załadować drugi global (False) i go zwrócić. Ta ściana tekstu tłumaczy się na następujący prosty kod:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_f3c7561284224ebc9bf821ea84820c7e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_f3c7561284224ebc9bf821ea84820c7e-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f3c7561284224ebc9bf821ea84820c7e-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a name="rest_code_f3c7561284224ebc9bf821ea84820c7e-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# newr&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Popatrzmy się jeszcze raz na nasze nazwy. Widzimy, że brakuje &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;. Można zauważyć pewien znany wzorzec: iterujemy po obu stringach na raz (używając &lt;code class="docutils literal"&gt;zip&lt;/code&gt;), wykonujemy obliczenia na podstawie kodów znaków (&lt;code class="docutils literal"&gt;ord&lt;/code&gt;) i sprawdzamy czy wszystkie (&lt;code class="docutils literal"&gt;all&lt;/code&gt;) wyniki (zazwyczaj porównania) są prawdziwe.&lt;/p&gt;
&lt;p&gt;Oto bajtkod z dopisanymi wartościami i komentarzami które tłumaczą, co się gdzie dzieje:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Początek iteracji: iter()
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # początek iteracji pętli for (jeśli koniec iteratora, skocz +52 bajty do pozycji 117)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # rozpakuj sekwencję (a, b = sequence)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = wartość z s
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = wartość z good
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [odejmij 89 od wartości na górze stosu]
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND z wartością na górze stosu]
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # porównaj dwie wartości na stosie
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # dodaj wartość umieszczoną na górze sotosu do listy góra-1; usuń górę stosu (dopisz do listy tworzonej w list comprehension)
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # przeskocz na początek pętli
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # po pętli: wywołaj all([wynik list comprehension])
&lt;a name="rest_code_1197e35179fe4b7e8bc2bbf0155e3131-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # zwróć wartość zwróconą przez all()
&lt;/pre&gt;&lt;p&gt;Możemy teraz zapisać pełną odpowiedź.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b0c131d089a149beb76878763d64e20a-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_b0c131d089a149beb76878763d64e20a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b0c131d089a149beb76878763d64e20a-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_b0c131d089a149beb76878763d64e20a-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b0c131d089a149beb76878763d64e20a-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_b0c131d089a149beb76878763d64e20a-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b0c131d089a149beb76878763d64e20a-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_b0c131d089a149beb76878763d64e20a-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b0c131d089a149beb76878763d64e20a-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_b0c131d089a149beb76878763d64e20a-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b0c131d089a149beb76878763d64e20a-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_b0c131d089a149beb76878763d64e20a-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Ostatecznie, wyjście &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt; zgadza się z tekstem z misji (za wyjątkiem usuniętych wartości, ale ID się zgadzają), nasze zmienne &lt;code class="docutils literal"&gt;co_*&lt;/code&gt; są zielone, i możemy rozwiązać prawdziwą zagadkę!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Na marginesie:&lt;/strong&gt; zadanie używa list comprehension. Możesz chcieć ją zoptymalizować, usunąć nawiasy kwadratowe, i otrzymać generator expression. W ten sposób zadanie stałoby się trudniejsze, gdyż wymagałoby pracy również z wewnętrznym obiektem kodu generatora:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f24992dceff940f6a281e33399727f8b-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a name="rest_code_f24992dceff940f6a281e33399727f8b-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_f24992dceff940f6a281e33399727f8b-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;BINARY_*&lt;/code&gt; i &lt;code class="docutils literal"&gt;ord&lt;/code&gt; zniknęły z nowego listingu. Możesz zobaczyć &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;zmodyfikowany kod&lt;/a&gt; (który różni się dwoma bajtami) i &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;wyjście solvera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na marginesie marginesu: zna ktoś jakieś dobre tłumaczenie &lt;code class="docutils literal"&gt;list comprehension&lt;/code&gt;? Polska język trudna język.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rozwiazywanie-prawdziwej-zagadki"&gt;
&lt;h2&gt;Rozwiązywanie prawdziwej zagadki&lt;/h2&gt;
&lt;p&gt;Rozwiązałem dodatkową część zagadki. Jej &lt;em&gt;prawdziwym&lt;/em&gt; celem było odzyskanie hasła — tekstu, dla którego &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt; zwróci True.&lt;/p&gt;
&lt;p&gt;Ta część jest dosyć nudna. Zbudowałem słownik, w którym przypisałem każdy bajt (0…255) do wyniku obliczeń wykonywanych w pętli funkcji &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt;. Potem użyłem jej do odzyskania oryginalnego tekstu.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-11"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2921837b9c6e42c894a7c980b962bde7-12"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Hasło brzmi:&lt;/strong&gt; &lt;code class="docutils literal"&gt;huh, that actually worked!&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-co-chodzilo-z-tym-paintem"&gt;
&lt;h2&gt;O co chodziło z tym Paintem?&lt;/h2&gt;
&lt;blockquote&gt;Wczorajsza misja była o elfickim — &lt;strong&gt;znaczy o Paint’cie&lt;/strong&gt; — znaczy o programowaniu w Pythonie i bytecode.&lt;footer&gt;niżej podpisany, w leadzie tego posta&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Większość moich czytelników była zdziwiona wspomnieniem programu Paint. Stali widzowie polskich streamów Gynvaela pamiętają film Python 101, który opublikował 1 kwietnia 2016. Zobacz &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;oryginalny film&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;wyjaśnienie&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;kod&lt;/a&gt; (po polsku) &lt;strong&gt;Uwaga, spoilery.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;W tym dowcipie primaaprilisowym, Gynvael uczył podstaw Pythona. Pierwsza część dotyczyła pisania bytecodu ręcznie. Druga (ok. 12 minuty) dotyczyła rysowania swoich własnych modułów Pythona. W programie Paint. Tak, Paint, prostym programie graficznym dołączonym do Windowsa. Narysował swój własny moduł Pythona w Paint’cie i zapisał jako BMP. Wyglądało to tak (powiększony PNG poniżej; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;pobierz gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;Jak to działa? Są trzy powody:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python może importować kod z pliku ZIP (dopisanego do sys.path). Niektóre narzędzia które tworzą pliki &lt;code class="docutils literal"&gt;.exe&lt;/code&gt; z kodu Pythona używają tej metody; stary format &lt;code class="docutils literal"&gt;.egg&lt;/code&gt; również używał ZIPów w ten sposób.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pliki BMP mają nagłówki na początku pliku.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pliki ZIP mają nagłówki na końcu pliku.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Więc jeden plik może być jednocześnie poprawnym plikiem BMP i poprawnym ZIPem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wziąłem kod &lt;code class="docutils literal"&gt;check_password&lt;/code&gt; i umieściłem go w pliku &lt;code class="docutils literal"&gt;mission11.py&lt;/code&gt; (wcześniej zacytowanym). Potem skompilowałem do &lt;code class="docutils literal"&gt;.pyc&lt;/code&gt; i utworzyłem z niego &lt;code class="docutils literal"&gt;.zip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_43fb7116bf5747d8a626c45050cbd34f-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_43fb7116bf5747d8a626c45050cbd34f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_43fb7116bf5747d8a626c45050cbd34f-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_43fb7116bf5747d8a626c45050cbd34f-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_43fb7116bf5747d8a626c45050cbd34f-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_43fb7116bf5747d8a626c45050cbd34f-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_43fb7116bf5747d8a626c45050cbd34f-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_43fb7116bf5747d8a626c45050cbd34f-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_43fb7116bf5747d8a626c45050cbd34f-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_43fb7116bf5747d8a626c45050cbd34f-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_43fb7116bf5747d8a626c45050cbd34f-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_43fb7116bf5747d8a626c45050cbd34f-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Ponieważ nie jestem ekspertem w żadnym z formatów, uruchomiłem maszynę wirtualną z Windowsem i na ślepo &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;przekopiowałem parametry użyte przez Gynvaela&lt;/a&gt; do otwarcia pliku ZIP (nazwanego &lt;code class="docutils literal"&gt;.raw&lt;/code&gt;) w IrfanView i zapisałem jako &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt;. Zmieniłem rozmiar na 83×2, ponieważ mój ZIP miał 498 bajty (3 BPP * 83 px * 2 px = 498 bytes) — dzięki temu i odpowiedniemu rozmiarowi plików, mogłem nie dodawać komentarzy i edytowaniu ZIPa. Dostałem ten obrazek (znowu PNG; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;pobierz mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;Plik &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt; można uruchomić! Używamy tego kodu:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8310a5bb9f7e4dbfb779d01875b1671f-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_8310a5bb9f7e4dbfb779d01875b1671f-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8310a5bb9f7e4dbfb779d01875b1671f-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_8310a5bb9f7e4dbfb779d01875b1671f-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8310a5bb9f7e4dbfb779d01875b1671f-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_8310a5bb9f7e4dbfb779d01875b1671f-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8310a5bb9f7e4dbfb779d01875b1671f-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_8310a5bb9f7e4dbfb779d01875b1671f-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8310a5bb9f7e4dbfb779d01875b1671f-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_8310a5bb9f7e4dbfb779d01875b1671f-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8310a5bb9f7e4dbfb779d01875b1671f-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_8310a5bb9f7e4dbfb779d01875b1671f-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8310a5bb9f7e4dbfb779d01875b1671f-7"&gt;&lt;code data-line-number="7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_8310a5bb9f7e4dbfb779d01875b1671f-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;I dostajemy to:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="materialy"&gt;
&lt;h2&gt;Materiały&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (pełny kod solvera)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (używane w notatce na marginesie dot. vs list comprehensions)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py, kod użyty w pliku BMP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, plik uruchamiający moduł BMP/ZIP&lt;/a&gt; (na bazie utworzonego przez Gynvaela)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacja modułu dis&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dzięki za misję (i pomysł z BMP), Gynvael!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>Python hackery</category><category>Python internals</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item></channel></rss>