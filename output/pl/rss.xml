<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Blog)</title><link>https://chriswarrick.com/</link><description>A blog about everything and nothing.</description><atom:link href="https://chriswarrick.com/pl/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Tue, 17 Jul 2018 17:41:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Pipenv: promises a lot, delivers very little</title><link>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Pipenv is a Python packaging tool that does one thing reasonably well — application dependency management. However, it is also plagued by issues, limitations and a break-neck development process. In the past, Pipenv’s promotional material was highly misleading as to its purpose and backers.&lt;/p&gt;
&lt;p&gt;In this post, I will explore the problems with Pipenv. Was it really
recommended by Python.org? Can everyone — or at least, the vast majority
of people — benefit from it?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#officially-recommended-tool-or-how-we-got-here" id="id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-does" id="id16"&gt;What pipenv does&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#application-dependencies" id="id17"&gt;Application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly" id="id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#finishing-it-all-up" id="id19"&gt;Finishing it all up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-doesnt-do" id="id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#setup-py-source-distributions-and-wheels" id="id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#working-outside-of-the-project-root" id="id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#nikola" id="id23"&gt;Nikola&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-part-where-i-try-to-measure-times" id="id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#alternatives-and-new-tools" id="id25"&gt;Alternatives and new tools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#hatch" id="id26"&gt;Hatch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#poetry" id="id27"&gt;Poetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-is-here-to-stay" id="id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv" id="id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#conclusion" id="id30"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="officially-recommended-tool-or-how-we-got-here"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
“Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).”&lt;/blockquote&gt;
&lt;p&gt;Pipenv’s README used to have a version of the above line in their README for
many months: it was added on  &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6e06fc451767a57e6fccb828c74a1412f6cef687"&gt;2017-08-31&lt;/a&gt; and eventually disappeared on &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/47debed9a1c2a3649bef4d59a3f1cf01bf059522"&gt;2018-05-19&lt;/a&gt;. For a short while (2018-05-16), it was clarified (&lt;em&gt;managing application dependencies&lt;/em&gt;, and &lt;em&gt;PyPA&lt;/em&gt; instead of &lt;em&gt;Python.org&lt;/em&gt;), and for about 15 minutes, the tagline called Pipenv &lt;em&gt;the world’s worst&lt;/em&gt; or &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6d77e4a0551528d5d72d81e8a15da4722ad82f26"&gt;something&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/1c956d37e6ad20babdb5021610b2ed2c9c4203f2"&gt;along&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/e3c72e167d21b921bd3bd89d4217b04628919bb2"&gt;these&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/fe78628903948013e8687d1a3be9fd4da2b6bd3d"&gt;lines&lt;/a&gt; (this coming from the maintainer).&lt;/p&gt;
&lt;p&gt;The README tagline claimed that Pipenv is the be-all, end-all of Python
packaging. The problem is: it isn’t that. There are some use cases that benefit
from Pipenv, but for many others, trying to use that tool will only lead to
frustration. We will explore this issue later.&lt;/p&gt;
&lt;p&gt;Another issue with this tagline was the &lt;em&gt;Python.org&lt;/em&gt; and &lt;em&gt;official&lt;/em&gt; parts. The
thing that made it “official” was a &lt;a class="reference external" href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;short tutorial&lt;/a&gt; &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id11" id="id1"&gt;[1]&lt;/a&gt; on packaging.python.org,
which is the PyPA’s packaging user guide. Also of note is the &lt;em&gt;Python.org&lt;/em&gt;
domain used. It makes it sound as if Pipenv was endorsed by the Python core
team. PyPA (Python Packaging Authority) is a separate organization — they are
responsible for the packaging parts (including pypi.org, setuptools, pip,
wheel, virtualenv, etc.) of Python. This made the endorsement misleading. Of
course, PyPA is a valued part of the Python world; an endorsement by the core
team — say, &lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html"&gt;inclusion in official Python distributions&lt;/a&gt; — is something far more
important.&lt;/p&gt;
&lt;p&gt;This tagline has led to many discussions and flamewars, perhaps with &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/"&gt;this
Reddit thread from May&lt;/a&gt; being the most heated and most important. The change
was the direct result of this Reddit thread. I recommend reading this thread in
full.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-does"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id16"&gt;What pipenv does&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve already learned that Pipenv is used to &lt;em&gt;manage application dependencies&lt;/em&gt;.
Let’s learn what that term really means.&lt;/p&gt;
&lt;div class="section" id="application-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id17"&gt;Application dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is an example use case for Pipenv:
I’m working on a website based on Django.  I create &lt;tt class="docutils literal"&gt;~/git/website&lt;/tt&gt; and run
&lt;tt class="docutils literal"&gt;pipenv install Django&lt;/tt&gt; in that directory.  Pipenv:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;automatically creates a virtualenv somewhere in my home directory&lt;/li&gt;
&lt;li&gt;writes a Pipfile, which lists Django as my dependency&lt;/li&gt;
&lt;li&gt;installs Django using pip&lt;/li&gt;
&lt;li&gt;proceeds to write &lt;tt class="docutils literal"&gt;Pipfile.lock&lt;/tt&gt;, which stores the exact version and source file hash &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id12" id="id5"&gt;[2]&lt;/a&gt; of each package installed (including &lt;tt class="docutils literal"&gt;pytz&lt;/tt&gt;, Django’s dependency).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part of the process was the most time consuming. At one point, while
locking the dependency versions, Pipenv hangs for 46 seconds. This is one of
Pipenv’s notable issues: &lt;strong&gt;it’s slow.&lt;/strong&gt; Of course, this isn’t the only one,
but it defintely doesn’t help. Losing 46 seconds isn’t much, but when we get to
the longer waits in the timing test section later, we’ll see something that
could easily discourage users from using a package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-scripts-badly"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But let’s continue with our workflow. &lt;tt class="docutils literal"&gt;pipenv run &lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject
foobanizer&lt;/tt&gt; is what I must use now, which is rather unwieldy to type, and
requires running pipenv even for the smallest things. (The &lt;tt class="docutils literal"&gt;manage.py&lt;/tt&gt; script
has &lt;tt class="docutils literal"&gt;/usr/bin/env python&lt;/tt&gt; in its shebang.) I can run &lt;tt class="docutils literal"&gt;pipenv shell&lt;/tt&gt; to get
a new shell which runs the &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; script by default, giving you the worst
of both worlds when it comes to virtualenv activation: the unwieldiness of a
new shell, and the activate script, which the proponents of the shell spawning
dislike.&lt;/p&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;pipenv shell&lt;/tt&gt; means spawning a new subshell, executing the shell
startup scripts (eg. &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt;), and requiring you to exit with &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt; or
^D. If you type &lt;tt class="docutils literal"&gt;deactivate&lt;/tt&gt;, you are working with an extra shell, but now
outside of the virtualenv. Or you can use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--fancy&lt;/span&gt;&lt;/tt&gt; mode that manipulates
&lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; before launching the subshell, but it requires a specific shell
configuration, in which &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; is not overridden in non-login shells — and
also often changing the config of your terminal emulator to run a login shell,
as many of the Linux terminals don’t do it.&lt;/p&gt;
&lt;p&gt;Now, why does all this happen? Because a command cannot manipulate the
environment of the shell it spawns. This means that Pipenv must pretend what it
does is a reasonable thing instead of a workaround. This can be solved with
manual activation using &lt;tt class="docutils literal"&gt;source $(pipenv &lt;span class="pre"&gt;--venv)/bin/activate&lt;/span&gt;&lt;/tt&gt; (can be made
into a neat alias), or shell wrappers (similar to what virtualenvwrapper does).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finishing-it-all-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id19"&gt;Finishing it all up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Anyway, I want a blog on my site. I want to write them in Markdown syntax, so I
run &lt;tt class="docutils literal"&gt;pipenv install Markdown&lt;/tt&gt;, and a few long seconds later, it’s added to
both Pipfiles.  Another thing I can do is &lt;tt class="docutils literal"&gt;pipenv install &lt;span class="pre"&gt;--dev&lt;/span&gt; ipython&lt;/tt&gt; and
get a handy shell for tinkering, but it will be marked as a development
dependency — so, not installed in production. That last part is an important
advantage of using Pipenv.&lt;/p&gt;
&lt;p&gt;When I’m done working on my website, I commit both Pipfiles to my git
repository, and push it to the remote server. Then I can clone it to, say,
&lt;tt class="docutils literal"&gt;/srv/website&lt;/tt&gt;. Now I can just &lt;tt class="docutils literal"&gt;pipenv install&lt;/tt&gt; to get all the production
packages installed (but not the development ones — Django, pytz, Markdown will
be installed, but IPython and all its million dependencies won’t). There’s just
one caveat: by default, the virtualenv will still be created in the current
user’s home directory. This is a problem in this case, since it needs to be
accessible by &lt;a class="reference external" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/"&gt;nginx and uWSGI&lt;/a&gt;, which do not have access to my (or root’s)
home directory, and don’t have a home directory of their own.  This can be
solved with &lt;tt class="docutils literal"&gt;export PIPENV_VENV_IN_PROJECT=1&lt;/tt&gt;. But note that I will now need
to export this environment variable every time I work with the app in &lt;tt class="docutils literal"&gt;/srv&lt;/tt&gt;
via Pipenv. The tool supports loading &lt;tt class="docutils literal"&gt;.env&lt;/tt&gt; files, &lt;strong&gt;but&lt;/strong&gt; only when
running &lt;tt class="docutils literal"&gt;pipenv shell&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pipenv run&lt;/tt&gt;. You can’t use it to configure
Pipenv. And to run my app with nginx/uWSGI, I will need to know the exact virtualenv
path anyway, since I can’t use &lt;tt class="docutils literal"&gt;pipenv run&lt;/tt&gt; as part of uWSGI configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-doesnt-do"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The workflow I mentioned above looks pretty reasonable, right? There are some
deficiencies, but other than that, it seems to work well. The main issue with
Pipenv is: &lt;strong&gt;it works with one workflow, and one workflow only.&lt;/strong&gt; Try to do
anything else, and you end up facing multiple obstacles.&lt;/p&gt;
&lt;div class="section" id="setup-py-source-distributions-and-wheels"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pipenv only concerns itself with managing dependencies. &lt;strong&gt;It isn’t a packaging
tool.&lt;/strong&gt; If you want your thing up on PyPI, Pipenv won’t help you with anything.
You still need to write a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;install_requires&lt;/tt&gt;, because the
Pipfile format only specifies the dependencies and runtime requirements (Python
version), there is no place in it for the package name, and Pipenv does not
mandate/expect you to install your project. It can come in handy to manage the
development environment (as a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; replacement, or something
used to write said file), but if your project has a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, you still
need to manually manage &lt;tt class="docutils literal"&gt;install_requires&lt;/tt&gt;. Pipenv can’t create wheels on its
own either. And &lt;tt class="docutils literal"&gt;pip freeze&lt;/tt&gt; is going to be a lot faster than Pipenv ever
will be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-outside-of-the-project-root"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another issue with Pipenv is the use of the working directory to select
the virtual environment. &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id13" id="id6"&gt;[3]&lt;/a&gt; Let’s say I’m a library author.  A user of my &lt;tt class="docutils literal"&gt;foobar&lt;/tt&gt;
library has just reported a bug and attached a &lt;tt class="docutils literal"&gt;repro.py&lt;/tt&gt; file that lets me
reproduce the issue. I download that file to &lt;tt class="docutils literal"&gt;~/Downloads&lt;/tt&gt; on my filesystem.
With plain old virtualenv, I can easily confirm the reproduction in a spare
shell with:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_e49d536b2ffc4800abe84e47e4875b65-1"&gt;&lt;/a&gt;$ ~/virtualenvs/foobar/bin/python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;And then I can launch my fancy IDE to fix the bug.  I don’t have to &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; into
the project. But with Pipenv, I can’t really do that.  If I put the virtualenv
in &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; with the command line option, I can type
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv/bin/python&lt;/span&gt; ~/Downloads/repro.py&lt;/tt&gt;. If I use the
centralized directory + hashes thing, Tab completion becomes mandatory, if I
haven’t memorized the hash.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_87c14584f46e472b93d92d0f74d54be4-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_87c14584f46e472b93d92d0f74d54be4-2"&gt;&lt;/a&gt;$ pipenv run python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;What if I had two &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; files, or &lt;tt class="docutils literal"&gt;repro.py&lt;/tt&gt; otherwise depended on being in
the current working directory?&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_9c445e7fb85440388ed2de8c916815d7-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_9c445e7fb85440388ed2de8c916815d7-2"&gt;&lt;/a&gt;$ pipenv shell
&lt;a name="rest_code_9c445e7fb85440388ed2de8c916815d7-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_9c445e7fb85440388ed2de8c916815d7-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_9c445e7fb85440388ed2de8c916815d7-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;  &lt;span class="c1"&gt;# (not deactivate!)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;This is becoming ugly fairly quickly.&lt;/strong&gt; Also, with virtualenvwrapper, I can
do this:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_f93c568f1e6b4fd79cc0cbd3a03b8fe3-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_f93c568f1e6b4fd79cc0cbd3a03b8fe3-2"&gt;&lt;/a&gt;$ workon foobar
&lt;a name="rest_code_f93c568f1e6b4fd79cc0cbd3a03b8fe3-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_f93c568f1e6b4fd79cc0cbd3a03b8fe3-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;p&gt;And let’s not forget that Pipenv doesn’t help me to write a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;,
distribute code, or manage releases.  It just manages dependencies.  And it
does it pretty badly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nikola"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id23"&gt;Nikola&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m a co-maintainer of a static site generator, &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt;.  As part of this, I have the following places where
I need to run Nikola:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;~/git/nikola&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-site&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-plugins&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-themes&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;~/website&lt;/tt&gt; (this blog)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;/Volumes/RAMDisk/n&lt;/tt&gt; (demo site, used for testing and created when needed, on a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RAM_drive"&gt;RAM disk&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That list is long.  End users of Nikola probably don’t have a list that long,
but they might just have more than one Nikola site.  For me, and for the
aforementioned users, Pipenv does not work.  To use Pipenv, all those
repositories would need to live in one directory. I would also need to have a
&lt;em&gt;separate&lt;/em&gt; Pipenv environment for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nikola-users&lt;/span&gt;&lt;/tt&gt;, because that needs Django.
Moreover, the Pipfile would have to be symlinked from &lt;tt class="docutils literal"&gt;~/git/nikola&lt;/tt&gt; if we
were to make use of those in the project.  So, I would have a &lt;tt class="docutils literal"&gt;~/nikola&lt;/tt&gt;
directory just to make Pipenv happy, do testing/bug reproduction on a SSD (and
wear it out faster), and so on… Well, I could also use the virtualenv directly.
But in that case, Pipenv loses its usefulness, and makes my workflow more
complicated. I can’t use &lt;tt class="docutils literal"&gt;virtualenvwrapper&lt;/tt&gt;, because I would need to hack a
fuzzy matching system onto it, or memorize the random string appended to my
virtualenv name.  All because Pipenv relies on the current directory too much.&lt;/p&gt;
&lt;p&gt;Nikola end users who want to use Pipenv will also have a specific directory
structure forced on them. What if the site serves as docs for a project, and
lives inside another project’s repo? Two virtualenvs, 100 megabytes wasted.
Or worse, Nikola ends up in the other project’s Pipfile, which is technically
good for our download stats, but not really good for the other project’s
contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-try-to-measure-times"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pipenv is famous for being slow.  But how slow is it really?
I put it to the test.  I used two test environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remote: a DigitalOcean VPS, the cheapest option (1 vCPU), Python 3.6/Fedora
28, in Frankfurt&lt;/li&gt;
&lt;li&gt;Local: my 2015 13” MacBook Pro (base model), Python 3.7, on a rather slow
Internet connection (10 Mbps on a good day, and the test was not performed on
one of them)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both were runninng Pipenv 2018.7.1, installed from pip.&lt;/p&gt;
&lt;p&gt;And with the following cache setups:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Removed: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.cache/pipenv&lt;/span&gt;&lt;/tt&gt; removed&lt;/li&gt;
&lt;li&gt;Partial: &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/depcache-py*.json&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/hash-cache/&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Kept: no changes done from previous run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, turns out Pipenv likes doing strange things with caching and locking.  A
look at the Activity Monitor hinted that there is network activity going on
when Pipenv displays its &lt;em&gt;Locking [packages] dependencies...&lt;/em&gt; line and
hangs. Now, the docs don’t tell you that. The most atrocious example was a
local Nikola install that was done in two runs: the first &lt;tt class="docutils literal"&gt;pipenv install
Nikola&lt;/tt&gt; run was interrupted &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id14" id="id8"&gt;[4]&lt;/a&gt; right after it was done installing packages,
so the cache had all the necessary wheels in it. The install took 10 minutes
and 7 seconds, 9:50 of which were taken by locking dependencies and installing
the locked dependencies — so, roughly nine and a half minutes were spent
staring at a static screen, with the tool doing &lt;em&gt;something&lt;/em&gt; in the background —
and Pipenv doesn’t tell you what happens in this phase.&lt;/p&gt;
&lt;table border="1" class="table table-striped table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="4%"&gt;
&lt;col width="26%"&gt;
&lt;col width="10%"&gt;
&lt;col width="10%"&gt;
&lt;col width="21%"&gt;
&lt;col width="7%"&gt;
&lt;col width="7%"&gt;
&lt;col width="7%"&gt;
&lt;col width="7%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Task&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Action&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Measurement
method&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Environment&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Cache&lt;/th&gt;
&lt;th class="head" colspan="4"&gt;Times in seconds&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;Attempt 1&lt;/th&gt;
&lt;th class="head"&gt;Attempt 2&lt;/th&gt;
&lt;th class="head"&gt;Attempt 3&lt;/th&gt;
&lt;th class="head"&gt;Average&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;virtualenv&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Remote&lt;/td&gt;
&lt;td&gt;(not applicable)&lt;/td&gt;
&lt;td&gt;3.911&lt;/td&gt;
&lt;td&gt;4.052&lt;/td&gt;
&lt;td&gt;3.914&lt;/td&gt;
&lt;td&gt;3.959&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;pip install Nikola&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Remote&lt;/td&gt;
&lt;td&gt;Removed&lt;/td&gt;
&lt;td&gt;11.562&lt;/td&gt;
&lt;td&gt;11.943&lt;/td&gt;
&lt;td&gt;11.773&lt;/td&gt;
&lt;td&gt;11.759&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;pip install Nikola&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Remote&lt;/td&gt;
&lt;td&gt;Kept&lt;/td&gt;
&lt;td&gt;7.404&lt;/td&gt;
&lt;td&gt;7.681&lt;/td&gt;
&lt;td&gt;7.569&lt;/td&gt;
&lt;td&gt;7.551&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;4&lt;/td&gt;
&lt;td&gt;pipenv install Nikola&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Remote&lt;/td&gt;
&lt;td rowspan="3"&gt;Removed&lt;/td&gt;
&lt;td&gt;67.536&lt;/td&gt;
&lt;td&gt;62.973&lt;/td&gt;
&lt;td&gt;71.305&lt;/td&gt;
&lt;td&gt;67.271&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;42.6&lt;/td&gt;
&lt;td&gt;40.5&lt;/td&gt;
&lt;td&gt;39.6&lt;/td&gt;
&lt;td&gt;40.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;13.667&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;5&lt;/td&gt;
&lt;td&gt;adding Django to an environment&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Remote&lt;/td&gt;
&lt;td rowspan="3"&gt;Kept (only Nikola in cache)&lt;/td&gt;
&lt;td&gt;39.576&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;39.576&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;6&lt;/td&gt;
&lt;td&gt;adding Django to another environment&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Remote&lt;/td&gt;
&lt;td rowspan="3"&gt;Kept (both in cache)&lt;/td&gt;
&lt;td&gt;37.978&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;37.978&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;30.2&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;30.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;7&lt;/td&gt;
&lt;td&gt;pipenv install Django&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Remote&lt;/td&gt;
&lt;td rowspan="3"&gt;Removed&lt;/td&gt;
&lt;td&gt;20.612&lt;/td&gt;
&lt;td&gt;20.666&lt;/td&gt;
&lt;td&gt;20.665&lt;/td&gt;
&lt;td&gt;20.648&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;6.6&lt;/td&gt;
&lt;td&gt;6.4&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;6.333&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;8&lt;/td&gt;
&lt;td&gt;pipenv install Django (new env)&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Remote&lt;/td&gt;
&lt;td rowspan="3"&gt;Kept&lt;/td&gt;
&lt;td&gt;17.615&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;17.615&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;3.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;9&lt;/td&gt;
&lt;td&gt;pipenv install Nikola&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Remote&lt;/td&gt;
&lt;td rowspan="3"&gt;Partial&lt;/td&gt;
&lt;td&gt;61.507&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;61.507&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;38.40&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;38.40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;10&lt;/td&gt;
&lt;td&gt;pipenv install Django&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Local&lt;/td&gt;
&lt;td rowspan="3"&gt;Removed&lt;/td&gt;
&lt;td&gt;73.933&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;73.933&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;virtualenv&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Local&lt;/td&gt;
&lt;td&gt;(not applicable)&lt;/td&gt;
&lt;td&gt;5.864&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;5.864&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;pip install Nikola (cached)&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Local&lt;/td&gt;
&lt;td&gt;Kept&lt;/td&gt;
&lt;td&gt;10.951&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;td&gt;10.951&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;13&lt;/td&gt;
&lt;td&gt;pipenv install Nikola&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;Local&lt;/td&gt;
&lt;td rowspan="3"&gt;Partial, after interruption&lt;/td&gt;
&lt;td&gt;607.647&lt;/td&gt;
&lt;td colspan="2"&gt;(10m 7s)&lt;/td&gt;
&lt;td&gt;607.647&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;├─ locking/installing from lockfile&lt;/td&gt;
&lt;td&gt;stopwatch&lt;/td&gt;
&lt;td&gt;590.85&lt;/td&gt;
&lt;td colspan="2"&gt;(9m 50s)&lt;/td&gt;
&lt;td&gt;590.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;└─ Pipfile.lock install&lt;/td&gt;
&lt;td&gt;pipenv&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td colspan="2"&gt; &lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;pipenv install&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;time&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;Local&lt;/td&gt;
&lt;td&gt;Kept&lt;/td&gt;
&lt;td&gt;31.399&lt;/td&gt;
&lt;td colspan="2"&gt;(L/I: 10.51 s)&lt;/td&gt;
&lt;td&gt;31.399&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="alternatives-and-new-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id25"&gt;Alternatives and new tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python packaging is something with the state of which nobody seems to be
satisfied. As such, there are many new contenders for the role of “best new
packaging tool”. Apart from Pipenv, there are &lt;a class="reference external" href="https://github.com/ofek/hatch"&gt;Hatch&lt;/a&gt; (by Ofek Lev) and &lt;a class="reference external" href="https://github.com/sdispater/poetry"&gt;Poetry&lt;/a&gt;
(by Sébastien Eustace). Both are listed in the “official” tutorial as alternate
options.&lt;/p&gt;
&lt;div class="section" id="hatch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id26"&gt;Hatch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hatch&lt;/strong&gt; tries to take care of &lt;em&gt;everything&lt;/em&gt; in the packaging process. This is
mostly an asset, as it helps replace other tools. However, it can also be
argued that it adds a single point of failure. Hatch works on already standard
files, such as requirements.txt and setup.py, so it can be replaced with
something else quite easily. It doesn’t use as much magic as Pipenv and is more
configurable.  Some choices made by
Hatch are questionable (such as manually parsing &lt;tt class="docutils literal"&gt;pkg/__init__.py&lt;/tt&gt; for a
version number, &lt;a class="reference external" href="https://github.com/ofek/hatch/pull/60"&gt;installing test suites to site-packages&lt;/a&gt; (a rather common oversight), or its shell feature which is as ugly as Pipenv’s), and it does
not do anything to manage dependencies.  It doesn’t necessarily work for the
Django use case I mentioned earlier, or for end-users of software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poetry"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id27"&gt;Poetry&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Poetry&lt;/strong&gt; is somewhere in between. Its main aim is close to Pipenv, but it
also makes it possible to distribute things to PyPI. It tries really hard to
hide that it uses Pip behind the scenes. Its README comes with an extensive
&lt;a class="reference external" href="https://github.com/sdispater/poetry#what-about-pipenv"&gt;“What about Pipenv?”&lt;/a&gt;
section, which I recommend reading — it has a few more examples of bad Pipenv
features.  Poetry claims to use the standardized (PEP 518) &lt;tt class="docutils literal"&gt;pyproject.toml&lt;/tt&gt;
file to replace the usual lot of files. Unfortunately, the only thing that is
standardized is the file name and syntax. Poetry uses custom &lt;tt class="docutils literal"&gt;[tool.poetry]&lt;/tt&gt;
sections, which means that one needs Poetry to fully use the packages created
with it, leading to vendor lock-in. (The aforementioned Hatch tool also
produces a &lt;tt class="docutils literal"&gt;pyproject.tmpl&lt;/tt&gt;, which contains a &lt;tt class="docutils literal"&gt;metadata&lt;/tt&gt; section…) There is
a &lt;tt class="docutils literal"&gt;build&lt;/tt&gt; feature to produce a sdist with setup.py and friends.&lt;/p&gt;
&lt;p&gt;In a simple &lt;tt class="docutils literal"&gt;poetry add Nikola&lt;/tt&gt; test, it took 24.4s/15.1s/15.3s to resolve
dependencies (according to Poetry’s own count, Remote environment, caches
removed), complete with reassuring output and no quiet lockups.  Not as good as
pip, but it’s more reasonable than Pipenv.  Also, the codebase and its layout
are rather convoluted. Poetry produces packages instead of just managing
dependencies, so it’s generally more useful than Pipenv.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-is-here-to-stay"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But in all the talk about new tools, we’re forgetting about the old ones, and
they do their job well — so well in fact, that the new tools still need them
under the covers.&lt;/p&gt;
&lt;p&gt;Pip is fast. It does its job well enough. It lacks support for splitting
packages between production and development (as Pipenv and Poetry do). This
means that &lt;tt class="docutils literal"&gt;pip freeze&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pip install&lt;/tt&gt; are instant, at the cost of (a)
needing two separate environments, or (b) installing development dependencies
in production (which &lt;em&gt;should&lt;/em&gt; only be a waste of HDD space and nothing more in
a well-architected system).&lt;/p&gt;
&lt;p&gt;The virtualenv management features can be provided by virtualenvwrapper. That
tool’s main advantage is the shell script implementation, which means that
&lt;tt class="docutils literal"&gt;workon foo&lt;/tt&gt; activates the &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt; virtualenv without spawning a new
subshell (an issue with Pipenv, Hatch, and Poetry, that I already covered when
describing Pipenv’s operation in the &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly"&gt;Running scripts (badly)&lt;/a&gt; chapter.) An
argument often raised by Pipenv proponents is that one does not need to concern
itself with creating the virtualenv, and doesn’t need to care where it is.
Unfortuntately, many tools require this knowledge from their user, or force a
specific location, or require it to be different to the home directory.&lt;/p&gt;
&lt;p&gt;And for a reasonable project template with release automation — well, I have my
own entry in that category, called (rather unoriginally) the &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project
Template (PyPT)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, setup.py files are not ideal, since they use &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; code and a function
execution, making access to meta information hard (&lt;tt class="docutils literal"&gt;./setup.py egg_info&lt;/tt&gt;
creates tool-accessible text files). Their main advantage is that they are the
&lt;em&gt;only&lt;/em&gt; format that is widely supported — pip is the de-facto default
Python package manager (which is pre-installed on Windows and Mac), and other
tools would require installation/bootstrapping first.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-break-neck-pace-of-pipenv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good packaging tool is stable. In other words, it doesn’t change often, and
it strives to support existing environments. It wouldn’t be fun to re-download
everything on your system, because someone decided that &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; is now called
&lt;tt class="docutils literal"&gt;/stuff&lt;/tt&gt;, and all the files in &lt;tt class="docutils literal"&gt;/usr&lt;/tt&gt; would become forgotten and not
removed. Well, this is what Pipenv did:&lt;/p&gt;
&lt;table border="1" class="table table-striped table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="11%"&gt;
&lt;col width="89%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Date/Time (UTC)&lt;/th&gt;
&lt;th class="head"&gt;Event&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;2017-01-31 22:01&lt;/td&gt;
&lt;td&gt;v3.2.14 released. &lt;tt class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/tt&gt; creates &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;./.venv&lt;/span&gt;&lt;/tt&gt; (eg. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foo/.venv&lt;/span&gt;&lt;/tt&gt;). Last version with the original behavior of pipenv.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2017-02-01 05:36&lt;/td&gt;
&lt;td&gt;v3.3.0 released. &lt;tt class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/tt&gt; creates &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo&lt;/span&gt;&lt;/tt&gt; (to be precise, &lt;tt class="docutils literal"&gt;$WORKON_HOME/foo&lt;/tt&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2017-02-01 06:10&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/178"&gt;Issue #178&lt;/a&gt; is reported regarding the behavior change.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2017-02-01 06:18&lt;/td&gt;
&lt;td&gt;Kenneth Reitz responds: “no plans for making it configurable.” and closes the issue.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2017-02-02 03:05&lt;/td&gt;
&lt;td&gt;Kenneth Reitz responds: “added &lt;tt class="docutils literal"&gt;PIPENV_VENV_IN_PROJECT&lt;/tt&gt; mode for classic operation. Not released yet.”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2017-02-02 04:29&lt;/td&gt;
&lt;td&gt;v3.3.3 released. The default is still uses a “remote” location, but &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; can now be used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2017-03-02 13:48&lt;/td&gt;
&lt;td&gt;v3.5.0 released. The new default path is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$WORKON_HOME/foo-HASH&lt;/span&gt;&lt;/tt&gt;, eg. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo-7pl2iuUI&lt;/span&gt;&lt;/tt&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Over the course of a month, the location of the virtualenv changed twice. If
the user didn’t read the changelog and didn’t manually intervene (also of note,
the option name was mentioned in the issue and in v3.3.4’s changelog), they
would have a stale &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; directory, since the new scheme was adopted for
them. And then, after switching to v3.5.0, they would have a stale virtualenv
hidden somewhere in their home directory, because pipenv decided to add hashes.&lt;/p&gt;
&lt;p&gt;Also, this is not configurable. One cannot disable the hashes in paths, even
though &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/589"&gt;users&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/1049"&gt;wanted&lt;/a&gt; to. It would also help people
who want to mix Pipenv and virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Pipenv is a very &lt;strong&gt;opinionated&lt;/strong&gt; tool, and if the dev team changes their mind,
the old way is not supported.&lt;/p&gt;
&lt;p&gt;Pipenv moves fast and doesn’t care if anything breaks. As an example, between
2018-03-13 13:21 and 2018-03-14 13:44 (a little over 24 hours), Pipenv had 10
releases, ranging from v11.6.2 to v11.7.3. The &lt;a class="reference external" href="https://github.com/pypa/pipenv/blob/25df09c171a548fd71d4df735767bf763a653b83/HISTORY.txt"&gt;changelog&lt;/a&gt; is rather unhelpful
when it comes to informing users what happened in each of the releases.&lt;/p&gt;
&lt;p&gt;Extra reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://journal.kennethreitz.org/entry/r-python"&gt;Kenneth Reitz, A Letter to /r/python (with some notes about bipolar disorder)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reddit comment threads for the letter: &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kdfd6/kenneth_reitz_a_letter_to_rpython_with_some_notes/"&gt;first&lt;/a&gt; and &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kjv8x/a_letter_to_rpython_kenneth_reitzs_journal/"&gt;second&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id30"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pipenv, contrary to popular belief and (now removed) propaganda, is not an
officially recommended tool of Python.org. It merely has a tutorial written
about it on packaging.python.org (page run by the PyPA).&lt;/li&gt;
&lt;li&gt;Pipenv solves one use case reasonably well, but fails at many others, because
it forces a particular workflow on its users.&lt;/li&gt;
&lt;li&gt;Pipenv does not handle any parts of packaging (cannot produce sdists and
wheels).  Users who want to upload to PyPI need to manage a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file
manually, alongside and independently of Pipenv.&lt;/li&gt;
&lt;li&gt;Pipenv produces lockfiles, which are useful for reproducibility, at the cost
of installation speed. The speed is a noticeable issue with the tool. &lt;tt class="docutils literal"&gt;pip
freeze&lt;/tt&gt; is good enough for this, even if there are no dependency classes
(production vs development) and no hashes (which
have minor benefits)&lt;/li&gt;
&lt;li&gt;Hatch attempts to replace many packaging tools, but some of its practices and
ideas can be questionable.&lt;/li&gt;
&lt;li&gt;Poetry supports the same niche Pipenv does, while also adding the ability to
create packages and improving over many gripes of Pipenv. A notable issue is
the use of a custom all-encompassing file format, which makes switching tools
more difficult (vendor lock-in).&lt;/li&gt;
&lt;li&gt;Pip, setup.py, and virtualenv — the traditional, tried-and-true tools — are
still available, undergoing constant development. Using them can lead to a
simpler, better experience.  Also of note, tools like virtualenvwrapper
can manage virtualenvs better than the aforementioned new Python tools,
because it is based on shell scripts (which can modify the enivironment).&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;On a side note, the tutorial explains nothing. A prospective user only learns it’s similar to npm or bundler (what does that mean?), installs one package, and runs a &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; file through &lt;tt class="docutils literal"&gt;pipenv run&lt;/tt&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id5"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Note that one can’t change the file on PyPI after uploading it, so this would only be protection against rogue PyPI admins or a MitM attack (in which case you’ve got bigger problems anyways).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id6"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Fortunately, it looks in the parent directories for Pipfiles as well. Otherwise, you might end up with one environment for &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt; and another for &lt;tt class="docutils literal"&gt;foo/foo&lt;/tt&gt; and yet another for &lt;tt class="docutils literal"&gt;foo/docs&lt;/tt&gt; and so on…&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id8"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The interruption happened by mistake due to the RAM disk running out of space, but it was actually a good thing to have happened.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</guid><pubDate>Tue, 17 Jul 2018 17:40:00 GMT</pubDate></item><item><title>Teleperypetie, czyli jak mój operator nie chciał moich pieniędzy</title><link>https://chriswarrick.com/pl/blog/2017/09/22/mobile-phone-woes-or-how-my-carrier-didnt-want-my-money/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Wykorzystałem 0,99 GB z 1 GB pakietu. Musiałem dokupić dodatkowy transfer. Mój (były) pomarańczowy operator oferuje pakiet 1 GB za okazyjną cenę 15 zł. (U innych operatorów jest taniej, nawet o połowę)&lt;/p&gt;
&lt;p&gt;Jak go włączyć? Można wysłać SMS-a albo zadzwonić do automatycznego biura obsługi. Więc dzwonimy.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;blockquote&gt;&lt;p&gt;Witamy w Orendż, sieci numer jeden!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Reasumując, mamy w Polsce:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pomarańczową &lt;em&gt;Sieć Numer Jeden&lt;/em&gt;,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Najlepszą Sieć&lt;/em&gt; koloru &lt;a class="reference external" href="https://www.t-mobile.com/company/legal-notices/trademarks.html"&gt;magenta™,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Najchętniej Wybieraną Sieć w Polsce&lt;/em&gt;, czyli fioletową,&lt;/li&gt;
&lt;li&gt;oraz sieć zielona, której reklamy mają epileptyczne migające kolory orkaszone sloganem &lt;em&gt;Brawo Ty!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Oraz oczywiście &lt;a class="reference external" href="https://pl.wikipedia.org/wiki/Operator_wirtualny#Wirtualni_operatorzy_na_rynku_polskim"&gt;kilkadziesiąt MVNO i marek alternatywnych&lt;/a&gt;.
I wszyscy — niezależnie, czy są numer jeden, czy najlepsi, et cetera — kochają swoich klientów, dbają o najwyższą jakość usług i zadowolenie klienta, a ich nadrzędnym celem jest obniżenie rachunków klientów.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A nie, przepraszam.&lt;/em&gt; Ich celem jest maksymalizacja zysków, a słowo &lt;em&gt;kochają&lt;/em&gt; nie ma racji bytu.&lt;/p&gt;
&lt;p&gt;Po kolejnych trzech reklamach docieramy do menu głównego. Dotarcie do opcji &lt;em&gt;jednorazowe pakiety internetowe&lt;/em&gt; trochę zajęło. Wybieram pakiet 1 GB. &lt;em&gt;Wygranko?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Usługa zostanie aktywowana o północy.&lt;/p&gt;
&lt;footer&gt;Pan Robot z Infolinii, w gąszczu innych nieistotnych informacji&lt;/footer&gt;
&lt;/blockquote&gt;&lt;p&gt;A gdyby tego było mało, otrzymałem jeszcze dwa SMS-y: (pisownia oryginalna)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Otrzymalismy prosbe o wlaczenie uslugi Pakiet 1 GB jednorazowy. Usluge wlaczymy &lt;em&gt;[dzisiaj]&lt;/em&gt;. Oplata za usluge wynosi 15 zl. Pozdrawiamy, Orange&lt;/li&gt;
&lt;li&gt;Usluga Pakiet 1 GB jednorazowy wlaczymy w ciagu 24 godzin. Pozdrawiamy, Orange&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sieć Numer Jeden, a nawet nie potrafi jasno i dokładnie określić daty uruchomienia usługi? I do tego usługi bardzo prostej która nie wymaga od nic żadnej dodatkowej pracy? Usługa zostanie uruchomiona:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dzisiaj. (Najwcześniej — teraz, najpóźniej — sekundę przed północą.)&lt;/li&gt;
&lt;li&gt;O północy.&lt;/li&gt;
&lt;li&gt;W ciągu 24 godzin. (Najwcześniej — teraz, najpóźniej — jutro o tej samej porze.)&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="https://chriswarrick.com/images/20170922-orange-time-graph.svg" class="align-center" alt="Graficzna reprezentacja możliwości czasu uruchomienia usługi."&gt;&lt;p&gt;Pół godziny później, kiedy mój telefon mówi, że zużyłem ponad 1 GB, Sieć Numer Jeden ostrzega mnie, że wykorzystałem 80% „standardowego” pakietu. Android i Pomarańczowi chyba mają inną definicję gigabajta — trzeba przyznać, że to Sieć Numer Jeden ma lepszą.&lt;/p&gt;
&lt;p&gt;Dziesięć godzin później licznik Androida pokazuje 1,36 GB. Sieć Numer Jeden informuje mnie, że właśnie wykorzystałem 1 GB, aktywował się lejek — 16 kb/s w jednej wiadomości, 16kB/s w kolejnej. (Jak zwykle rozdźwięk pomiędzy SMS-ami wysłanymi w tym samym czasie. Chociaż oba limity są równie tragiczne.) Fast.com podaje 52 Kbps. Cytując reklamy sieci zielonej — &lt;em&gt;Brawo Wy!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Drogi Pomarańczowy operatorze Sieci Numer Jeden!&lt;/strong&gt; Czy aktywowanie tak prostej — wręcz prymitywnej — a niewątpliwie popularnej usługi wymaga odczekania do północy? Czy nie moglibyście włączyć pakietu w chwili złożenia dyspozycji? I dlaczego w waszych komunikatach są trzy różne czasy oczekiwania i dwa limity prędkości?&lt;/p&gt;
&lt;p&gt;Opuściłem Sieć Numer Jeden. I jestem zadowolony — płacę mniej za więcej.&lt;/p&gt;&lt;/div&gt;</description><category>mobile</category><category>Orange</category><category>phone</category><category>telecom</category><guid>https://chriswarrick.com/pl/blog/2017/09/22/mobile-phone-woes-or-how-my-carrier-didnt-want-my-money/</guid><pubDate>Fri, 22 Sep 2017 14:00:00 GMT</pubDate></item><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/li&gt;
&lt;li&gt;the program is not in the &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; your process gets&lt;/li&gt;
&lt;li&gt;the hard-coded path is not correct on the end user’s system&lt;/li&gt;
&lt;li&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/li&gt;
&lt;li&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/li&gt;
&lt;li&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id5" id="id1"&gt;[1]&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;tt class="docutils literal"&gt;os&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;shutil&lt;/tt&gt;. Your language of
choice can also handle things like networking (don’t call &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;tt class="docutils literal"&gt;fork()&lt;/tt&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;tt class="docutils literal"&gt;execve()&lt;/tt&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id6" id="id2"&gt;[2]&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id7" id="id3"&gt;[3]&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id8" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;directly, by calling &lt;tt class="docutils literal"&gt;fork()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;posix_spawn()&lt;/tt&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;through the shell (&lt;tt class="docutils literal"&gt;sh&lt;/tt&gt;), usually by calling &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt;. As Linux’s
manpage for &lt;tt class="docutils literal"&gt;system(3)&lt;/tt&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt; library function uses &lt;tt class="docutils literal"&gt;fork(2)&lt;/tt&gt; to create a child process that executes the shell command specified in command using &lt;tt class="docutils literal"&gt;execl(3)&lt;/tt&gt; as follows:&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_19b640166d574e49be3892a47f1d3c99-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/tt&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_94d658d08aa5472d926c6c2354f02ebe-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_94d658d08aa5472d926c6c2354f02ebe-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_94d658d08aa5472d926c6c2354f02ebe-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a name="rest_code_f8e1667972d74b4284d07cfd0053708f-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;quotes and escapes&lt;/li&gt;
&lt;li&gt;expanding expressions in braces&lt;/li&gt;
&lt;li&gt;expanding variables&lt;/li&gt;
&lt;li&gt;wildcards (glob, &lt;tt class="docutils literal"&gt;*&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;redirections and pipes (&lt;tt class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;command substitution (backticks or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;running multiple commands on the same line (&lt;tt class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="dl-horizontal docutils"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;Perform fork-exec by yourself, or use &lt;tt class="docutils literal"&gt;posix_spawn()&lt;/tt&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;Use the subprocess module. Always pass &lt;tt class="docutils literal"&gt;shell=False&lt;/tt&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;tt class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/tt&gt; (and not &lt;tt class="docutils literal"&gt;_shell&lt;/tt&gt;), but note it takes &lt;tt class="docutils literal"&gt;*args&lt;/tt&gt; and not a list. Never use &lt;tt class="docutils literal"&gt;os.system&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;os.popen&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;Pass arrays to &lt;tt class="docutils literal"&gt;IO.popen&lt;/tt&gt;. Pass multiple arguments to &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/tt&gt;). Never use &lt;tt class="docutils literal"&gt;%x{command}&lt;/tt&gt; or backticks.&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;Pass arrays to &lt;tt class="docutils literal"&gt;Runtime.exec&lt;/tt&gt;. Pass multiple arguments or list to &lt;tt class="docutils literal"&gt;ProcessBuilder&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;All the standard methods go through the shell. Try &lt;tt class="docutils literal"&gt;escapeshellcmd()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;escapeshellarg()&lt;/tt&gt; — or better, switch to Python. Or anything, really.&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;os/exec&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;os.StartProcess&lt;/tt&gt; are safe.&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;Use &lt;tt class="docutils literal"&gt;child_process.execFile&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;child_process.spawn&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;shell&lt;/tt&gt; set to false.&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;tt class="docutils literal"&gt;fork()&lt;/tt&gt; on Windows. Instead, &lt;tt class="docutils literal"&gt;CreateProcess()&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;ShellExecute()&lt;/tt&gt;, or lower-level &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/tt&gt; functions are used. &lt;tt class="docutils literal"&gt;cmd.exe
/c&lt;/tt&gt; is called in shell calls.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The function that does the real work is &lt;tt class="docutils literal"&gt;execve()&lt;/tt&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;tt class="docutils literal"&gt;execl()&lt;/tt&gt; does the last two.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Quoted from &lt;tt class="docutils literal"&gt;execve(2)&lt;/tt&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;An alternative is &lt;tt class="docutils literal"&gt;posix_spawn()&lt;/tt&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Misja Gynvaela 11 (stream anglojęzyczny): reverse-engineering bajtkodu Pythona</title><link>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Gynvael Coldwind jest badaczem bezpieczeństwa pracującym w Google, który organizuje cotygodniowe livestreamy na tematy bezpieczeństwa i programowania &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;po polsku&lt;/a&gt; i  &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;po angielsku&lt;/a&gt;). Częścią streamów są misje — w skrócie, zadania w stylu CTF-owym dotyczące inżynierii wstecznej. Wczorajsza misja była o elfickim — znaczy o Paint’cie — znaczy o programowaniu w Pythonie i jego bajtkodzie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-9"&gt;&lt;/a&gt;files.
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-19"&gt;&lt;/a&gt;Good luck!
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a name="rest_code_2b72123b4de04060b89ef91d727c7466-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;p&gt;Kod firmware:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-3"&gt;&lt;/a&gt;co_flags 67
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-4"&gt;&lt;/a&gt;co_name check_password
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a name="rest_code_a470553ecb0c4fa7aaec88052ebdc707-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Dla niewtajemniczonych to może wyglądać na &lt;em&gt;elficki&lt;/em&gt;. W rzeczywistości jest to bajtkod Pythona — zestaw instrukcji używany przez maszynę wirtualną Pythona (CPython 2.7.) Python, podobnie jak wiele innych języków, używa kompilatora do tłumaczenia kodu źródłowego czytelnego dla ludzi na coś bardziej odpowiedniego dla komputerów. Kod Pythona tłumaczony jest na bajtkod, który jest wykonywany przez maszynę wirtualną CPythona. Bajtkod CPythona może być używany na różnym sprzęcie, podczas gdy kod maszynowy nie może. Z drugiej strony kod maszynowy jest zazwyczaj szybszy niż języki oparte na maszynach wirtualnych i bajtkodzie. (Java i C# działają tak jak Python, C jest tłumaczone prosto do kodu maszynowego)&lt;/p&gt;
&lt;p&gt;To jest wewnętrzna reprezentacja funkcji Pythona. Pierwsze kilka linii to zmienne należące do obiektu &lt;tt class="docutils literal"&gt;f.__code__&lt;/tt&gt; naszej funkcji. Wiemy, że funkcja:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ma 1 argument&lt;/li&gt;
&lt;li&gt;ma 7 stałych: None, długi ciąg cyfr hex, i liczby: 89, 255, 115 ,50.&lt;/li&gt;
&lt;li&gt;ma &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flagi&lt;/a&gt; ustawione na 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). Jest to “standardowa” wartość używana przez większość nieskomplikowanych funkcji.&lt;/li&gt;
&lt;li&gt;nazywa się &lt;tt class="docutils literal"&gt;check_password&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;używa następujących zmiennych globalnych lub nazw atrybutów: &lt;tt class="docutils literal"&gt;decode&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;len&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;all&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;ma 4 zmienne lokalne&lt;/li&gt;
&lt;li&gt;używa stosu o rozmiarze 6&lt;/li&gt;
&lt;li&gt;jej zmienne nazywają się &lt;tt class="docutils literal"&gt;s&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;good&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cs&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cg&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Są dwa sposoby na rozwiązanie tego zadania: można spróbować zreasemblować wyjście &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; przy pomocy modułu &lt;tt class="docutils literal"&gt;opcode&lt;/tt&gt; lub odtworzyć funkcję ręcznie, używając bajtkodu. Wybrałem tę drugą opcję.&lt;/p&gt;
&lt;div class="section" id="reverse-engineering-bajtkodu-pythona-reczne-odtwarzanie-funkcji"&gt;
&lt;h2&gt;Reverse-engineering bajtkodu Pythona: ręczne odtwarzanie funkcji&lt;/h2&gt;
&lt;p&gt;Zacząłem od odtworzenia oryginalnego pliku z firmware’em. Utworzyłem pustą funkcję i napisałem trochę kodu, który wypisuje zawartość &lt;tt class="docutils literal"&gt;__code__&lt;/tt&gt; i wyjście &lt;tt class="docutils literal"&gt;dis.dis&lt;/tt&gt;. Dodałem też kolorowanie wyjścia, by łatwiej się czytało:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_7e3519e576ad482eacd3a4a8b675e621-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli uruchomimy ten solver, otrzymamy następujące wyjście (tekst w nawiasach kwadratowych dopisany przeze mnie):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 się zgadza]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-5"&gt;&lt;/a&gt;co_names ()              [0/6 się zgadza]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-6"&gt;&lt;/a&gt;co_nlocals 1             [powinno być 4]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-7"&gt;&lt;/a&gt;co_stacksize 1           [powinno być 6]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 się zgadza]
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a name="rest_code_e1ad0af9b91c4c3baded450bb45e3d7d-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy (przy pomocy kolorów, których tu nie ma), że &lt;tt class="docutils literal"&gt;co_argcount&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;co_flags&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;co_name&lt;/tt&gt; są ustawione poprawnie. Mamy też jedną ze zmiennych (&lt;tt class="docutils literal"&gt;None&lt;/tt&gt;, jest w każdej funkcji) i jedną nazwę zmiennej (nazwę argumentu &lt;tt class="docutils literal"&gt;s&lt;/tt&gt;). Widzimy wyjście &lt;tt class="docutils literal"&gt;dis.dis()&lt;/tt&gt;. O ile jest podobne do tego z zadania, to jest kilka zauważalnych różnic: nie ma &lt;tt class="docutils literal"&gt;7&lt;/tt&gt; na początku (numer linii), a instrukcje &lt;tt class="docutils literal"&gt;LOAD_CONST&lt;/tt&gt; nie miały niczego w nawiasach (tylko porównania i pętle coś miały). To utrudnia czytanie bajtkodu, ale to jest wciąż możliwe. (Początkowo chciałem sobie pomóc narzędziem &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt;, ale nie jest trudno to zrobić ręcznie. Użyłem &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; do ostatecznego sprawdzenia po ręcznej „konwersji”)&lt;/p&gt;
&lt;p&gt;Zatrzymajmy się na chwilę i spójrzmy na stałe i nazwy. Po długim stringu pojawia się &lt;tt class="docutils literal"&gt;hex&lt;/tt&gt;, a jedną ze stałych jest &lt;tt class="docutils literal"&gt;decode&lt;/tt&gt;. To znaczy, że musimy użyć &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/tt&gt; by utworzyć (byte)string z pewną informacją. Odpowiedzi do misji są czytelne dla ludzi, a ten string nie jest — więc musimy zrobić coś więcej.&lt;/p&gt;
&lt;p&gt;Spróbujmy odtworzyć oryginalny kod misji. VM Pythona opiera się na stosie. W bajtkodzie powyżej widzimy, że instrukcje przyjmują 0 lub 1 argument. Niektóre z nich dodają obiekty na stos, inne wykonują akcje i usuwają rzeczy ze stosu. Większość nazw instrukcji jest łatwa do zrozumienia, ale pełna lista jest dostępna w &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacji modułu dis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instrukcje takie jak &lt;tt class="docutils literal"&gt;LOAD&lt;/tt&gt; czy &lt;tt class="docutils literal"&gt;STORE&lt;/tt&gt; odwołują się do indeksów w krotkach constants/names/varnames. Aby było łatwiej, oto “tabelka” tych indeksów:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-1"&gt;&lt;/a&gt;constants
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a name="rest_code_b1e42ce4b4ff4e09a82bbb590642d266-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;p&gt;W celu poprawienia czytelności, użyję “nowe” wyjście &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; z nazwami w nawiasach poniżej:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_d20ed91a74254a13a20095ed9b368af3-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a name="rest_code_d20ed91a74254a13a20095ed9b368af3-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a name="rest_code_d20ed91a74254a13a20095ed9b368af3-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a name="rest_code_d20ed91a74254a13a20095ed9b368af3-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # funkcja pobiera 1 argument ze stosu
&lt;a name="rest_code_d20ed91a74254a13a20095ed9b368af3-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;p&gt;Jak wcześniej zgadywałem, pierwsza linia funkcji wygląda tak:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_88c80f0b3de44d16ab8e5f1075dd975e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_88c80f0b3de44d16ab8e5f1075dd975e-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli jeszcze raz uruchomimy solver, zobaczymy że pierwsze 12 bajtów w bajtkodzie zgadza się z treścią misji. Widzimy też, że &lt;tt class="docutils literal"&gt;varnames&lt;/tt&gt; jest wypełnione w połowie, dodaliśmy dwie stałe, i jedną nazwę. Następne kilka linii wygląda tak:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a name="rest_code_6deb2d6a49c545039d48e4c6d24b174b-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy że umieszczamy obiekt globalny na stosie i wywołujemy go z jednym argumentem. W obu przypadkach, obiekt globalny ma indeks 1, czyli &lt;tt class="docutils literal"&gt;len&lt;/tt&gt;. Dwa argumenty to &lt;tt class="docutils literal"&gt;s&lt;/tt&gt; i &lt;tt class="docutils literal"&gt;good&lt;/tt&gt;. Umieszczamy obie długości na stosie i je porównujemy. Jeśli porównanie się nie uda (są równe), przeskakujemy do instrukcji zaczynającej się na bajcie 43, w przeciwnym razie kontynuujemy wykonywanie, by załadować drugi global (False) i go zwrócić. Ta ściana tekstu tłumaczy się na następujący prosty kod:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e4a668cc66da446f95bb312a1356faad-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_e4a668cc66da446f95bb312a1356faad-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e4a668cc66da446f95bb312a1356faad-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a name="rest_code_e4a668cc66da446f95bb312a1356faad-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# newr&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Popatrzmy się jeszcze raz na nasze nazwy. Widzimy, że brakuje &lt;tt class="docutils literal"&gt;all&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;. Można zauważyć pewien znany wzorzec: iterujemy po obu stringach na raz (używając &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;), wykonujemy obliczenia na podstawie kodów znaków (&lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;) i sprawdzamy czy wszystkie (&lt;tt class="docutils literal"&gt;all&lt;/tt&gt;) wyniki (zazwyczaj porównania) są prawdziwe.&lt;/p&gt;
&lt;p&gt;Oto bajtkod z dopisanymi wartościami i komentarzami które tłumaczą, co się gdzie dzieje:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Początek iteracji: iter()
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # początek iteracji pętli for (jeśli koniec iteratora, skocz +52 bajty do pozycji 117)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # rozpakuj sekwencję (a, b = sequence)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = wartość z s
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = wartość z good
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [odejmij 89 od wartości na górze stosu]
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND z wartością na górze stosu]
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # porównaj dwie wartości na stosie
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # dodaj wartość umieszczoną na górze sotosu do listy góra-1; usuń górę stosu (dopisz do listy tworzonej w list comprehension)
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # przeskocz na początek pętli
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # po pętli: wywołaj all([wynik list comprehension])
&lt;a name="rest_code_2d755efb62464699a76478e982dd777c-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # zwróć wartość zwróconą przez all()
&lt;/pre&gt;&lt;p&gt;Możemy teraz zapisać pełną odpowiedź.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b5853d60cfd44792baf81cdb26181b9d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_b5853d60cfd44792baf81cdb26181b9d-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b5853d60cfd44792baf81cdb26181b9d-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_b5853d60cfd44792baf81cdb26181b9d-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_b5853d60cfd44792baf81cdb26181b9d-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b5853d60cfd44792baf81cdb26181b9d-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Ostatecznie, wyjście &lt;tt class="docutils literal"&gt;dis.dis()&lt;/tt&gt; zgadza się z tekstem z misji (za wyjątkiem usuniętych wartości, ale ID się zgadzają), nasze zmienne &lt;tt class="docutils literal"&gt;co_*&lt;/tt&gt; są zielone, i możemy rozwiązać prawdziwą zagadkę!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Na marginesie:&lt;/strong&gt; zadanie używa list comprehension. Możesz chcieć ją zoptymalizować, usunąć nawiasy kwadratowe, i otrzymać generator expression. W ten sposób zadanie stałoby się trudniejsze, gdyż wymagałoby pracy również z wewnętrznym obiektem kodu generatora:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_4967f3fae75e4f3d9dc39ed9c1a7c263-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a name="rest_code_4967f3fae75e4f3d9dc39ed9c1a7c263-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_4967f3fae75e4f3d9dc39ed9c1a7c263-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;BINARY_*&lt;/tt&gt; i &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt; zniknęły z nowego listingu. Możesz zobaczyć &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;zmodyfikowany kod&lt;/a&gt; (który różni się dwoma bajtami) i &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;wyjście solvera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na marginesie marginesu: zna ktoś jakieś dobre tłumaczenie &lt;tt class="docutils literal"&gt;list comprehension&lt;/tt&gt;? Polska język trudna język.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rozwiazywanie-prawdziwej-zagadki"&gt;
&lt;h2&gt;Rozwiązywanie prawdziwej zagadki&lt;/h2&gt;
&lt;p&gt;Rozwiązałem dodatkową część zagadki. Jej &lt;em&gt;prawdziwym&lt;/em&gt; celem było odzyskanie hasła — tekstu, dla którego &lt;tt class="docutils literal"&gt;check_password()&lt;/tt&gt; zwróci True.&lt;/p&gt;
&lt;p&gt;Ta część jest dosyć nudna. Zbudowałem słownik, w którym przypisałem każdy bajt (0…255) do wyniku obliczeń wykonywanych w pętli funkcji &lt;tt class="docutils literal"&gt;check_password()&lt;/tt&gt;. Potem użyłem jej do odzyskania oryginalnego tekstu.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_727166575ab449c5af2e88b410ed0f3b-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Hasło brzmi:&lt;/strong&gt; &lt;tt class="docutils literal"&gt;huh, that actually worked!&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-co-chodzilo-z-tym-paintem"&gt;
&lt;h2&gt;O co chodziło z tym Paintem?&lt;/h2&gt;
&lt;blockquote&gt;Wczorajsza misja była o elfickim — &lt;strong&gt;znaczy o Paint’cie&lt;/strong&gt; — znaczy o programowaniu w Pythonie i bytecode.&lt;footer&gt;niżej podpisany, w leadzie tego posta&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Większość moich czytelników była zdziwiona wspomnieniem programu Paint. Stali widzowie polskich streamów Gynvaela pamiętają film Python 101, który opublikował 1 kwietnia 2016. Zobacz &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;oryginalny film&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;wyjaśnienie&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;kod&lt;/a&gt; (po polsku) &lt;strong&gt;Uwaga, spoilery.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;W tym dowcipie primaaprilisowym, Gynvael uczył podstaw Pythona. Pierwsza część dotyczyła pisania bytecodu ręcznie. Druga (ok. 12 minuty) dotyczyła rysowania swoich własnych modułów Pythona. W programie Paint. Tak, Paint, prostym programie graficznym dołączonym do Windowsa. Narysował swój własny moduł Pythona w Paint’cie i zapisał jako BMP. Wyglądało to tak (powiększony PNG poniżej; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;pobierz gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;Jak to działa? Są trzy powody:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python może importować kod z pliku ZIP (dopisanego do sys.path). Niektóre narzędzia które tworzą pliki &lt;tt class="docutils literal"&gt;.exe&lt;/tt&gt; z kodu Pythona używają tej metody; stary format &lt;tt class="docutils literal"&gt;.egg&lt;/tt&gt; również używał ZIPów w ten sposób.&lt;/li&gt;
&lt;li&gt;Pliki BMP mają nagłówki na początku pliku.&lt;/li&gt;
&lt;li&gt;Pliki ZIP mają nagłówki na końcu pliku.&lt;/li&gt;
&lt;li&gt;Więc jeden plik może być jednocześnie poprawnym plikiem BMP i poprawnym ZIPem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wziąłem kod &lt;tt class="docutils literal"&gt;check_password&lt;/tt&gt; i umieściłem go w pliku &lt;tt class="docutils literal"&gt;mission11.py&lt;/tt&gt; (wcześniej zacytowanym). Potem skompilowałem do &lt;tt class="docutils literal"&gt;.pyc&lt;/tt&gt; i utworzyłem z niego &lt;tt class="docutils literal"&gt;.zip&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c591b860a9a346bcb26350ba5162b29c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c591b860a9a346bcb26350ba5162b29c-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c591b860a9a346bcb26350ba5162b29c-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c591b860a9a346bcb26350ba5162b29c-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_c591b860a9a346bcb26350ba5162b29c-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_c591b860a9a346bcb26350ba5162b29c-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Ponieważ nie jestem ekspertem w żadnym z formatów, uruchomiłem maszynę wirtualną z Windowsem i na ślepo &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;przekopiowałem parametry użyte przez Gynvaela&lt;/a&gt; do otwarcia pliku ZIP (nazwanego &lt;tt class="docutils literal"&gt;.raw&lt;/tt&gt;) w IrfanView i zapisałem jako &lt;tt class="docutils literal"&gt;.bmp&lt;/tt&gt;. Zmieniłem rozmiar na 83×2, ponieważ mój ZIP miał 498 bajty (3 BPP * 83 px * 2 px = 498 bytes) — dzięki temu i odpowiedniemu rozmiarowi plików, mogłem nie dodawać komentarzy i edytowaniu ZIPa. Dostałem ten obrazek (znowu PNG; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;pobierz mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;Plik &lt;tt class="docutils literal"&gt;.bmp&lt;/tt&gt; można uruchomić! Używamy tego kodu:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_96c7bd72c50741b6a355a6da179ce217-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_96c7bd72c50741b6a355a6da179ce217-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_96c7bd72c50741b6a355a6da179ce217-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_96c7bd72c50741b6a355a6da179ce217-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_96c7bd72c50741b6a355a6da179ce217-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_96c7bd72c50741b6a355a6da179ce217-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;
&lt;a name="rest_code_96c7bd72c50741b6a355a6da179ce217-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I dostajemy to:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="materialy"&gt;
&lt;h2&gt;Materiały&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (pełny kod solvera)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (używane w notatce na marginesie dot. vs list comprehensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py, kod użyty w pliku BMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, plik uruchamiający moduł BMP/ZIP&lt;/a&gt; (na bazie utworzonego przez Gynvaela)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacja modułu dis&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dzięki za misję (i pomysł z BMP), Gynvael!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item><item><title>Setting up a Python development environment</title><link>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Setting up Python is usually simple, but there are some places where newcomers
(and experienced users) need to be careful. What versions are there? What’s the
difference between Python, CPython, Anaconda, PyPy? Those and many other
questions may stump new developers, or people wanting to use Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note: this guide is opinionated.&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#glossary-and-questions" id="id2"&gt;Glossary and questions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#python-versions-2-vs-3" id="id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-run-multiple-pythons-on-the-same-machine" id="id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#implementations" id="id5"&gt;Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions" id="id6"&gt;Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-make-exe-files-from-python-programs" id="id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#where-to-learn-python-where-to-get-help" id="id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-python" id="id9"&gt;Installing Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#windows" id="id10"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#macos" id="id11"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#linux-and-other-unix-like-oses" id="id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-packages" id="id13"&gt;Installing packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#user-installs" id="id14"&gt;User installs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#virtual-environments" id="id15"&gt;Virtual environments&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#tools-and-management" id="id16"&gt;Tools and management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installation-and-usage" id="id17"&gt;Installation and usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#upgrading-and-moving" id="id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#packages-with-c-extensions-binary" id="id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#other-stuff" id="id20"&gt;Other stuff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#editors-and-ides" id="id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#update-history" id="id22"&gt;Update history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="glossary-and-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id2"&gt;Glossary and questions&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="python-versions-2-vs-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Python community has undergone sort of a &lt;em&gt;schism&lt;/em&gt; in recent years. Python
3, released in 2008, broke backwards compatibility: deprecated some bad
constructs and libraries (eg. &lt;tt class="docutils literal"&gt;raw_input()&lt;/tt&gt; became &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; and the
original Python 2 function that ran code input by users is gone; &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;
became a function; many things that returned lists now are iterators — &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;range&lt;/tt&gt;), and completely remodelled strings (which are now Unicode by
default, and the interpreter behavior is stricter when the wrong type is used)&lt;/p&gt;
&lt;p&gt;For new code, you should use Python 3. &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Most popular packages support Python 3&lt;/a&gt;, and many of them support both Pythons at
the same time. The early bugs were ironed out in the first few point releases,
some features that made porting easier were added (back).&lt;/p&gt;
&lt;p&gt;But what if you end up needing Python 2 later? No problem: you can learn the
differences in a short time, and with the help of a few libraries (eg. &lt;tt class="docutils literal"&gt;six&lt;/tt&gt;)
you can easily write code that is compatible with Python 2 and 3 at the same
time, using the same codebase (most libraries out there do that).&lt;/p&gt;
&lt;p&gt;Python 2 will go EOL and lose official support and updates in 2020.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/Python2orPython3"&gt;Python 2 or Python 3 on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-run-multiple-pythons-on-the-same-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes. Note that multiple Python interpreters are completely separate: they have
their own pip and packages, and you can’t run Python 2 code in a Python 3
interpreter. You need to specify which interpreter to use when installing
packages and running some scripts (eg. &lt;tt class="docutils literal"&gt;pip2&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;It’s best to limit yourself to the latest Python 2 and 3 versions. Python is
backwards-compatible within the major release, so Python 2.7 runs code
written with older 2.x versions in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id5"&gt;Implementations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A programming language is an abstract construct. To run code written in that
language, an interpreter or compiler needs to be written. In Python’s case,
there’s a plethora of implementations. Some of them are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;CPython&lt;/strong&gt; is the reference implementation. This is the implementation
distributed on &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt; and as part of many operating systems.
Most Python features are first implemented in CPython, and then they are
ported to other implementations.  If you don’t know what to choose, use
CPython.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyPy&lt;/strong&gt; is a fast implementation, written in a subset of Python. It’s compatible with
Python 2.7 and 3.5 (beta support). It can run all pure Python code, and many
extension libraries that use CFFI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IronPython&lt;/strong&gt; is a .NET CLR implementation. It can integrate with .NET code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jython&lt;/strong&gt; is a Java JVM implementation. It can integrate with Java code, as
well as other JVM languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Implementations on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="distributions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id6"&gt;Distributions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are also Python (CPython) distributions. They ship the CPython
interpreter and add some extra packages/features.  They are maintained by other
communities or corporate entities.&lt;/p&gt;
&lt;p&gt;The most popular third-party distribution is &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum Analytics. It’s popular
for data scientists, and includes over 100 packages, with extra pre-built
binaries available from the &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; package manager.&lt;/p&gt;
&lt;p&gt;I personally recommend to avoid Anaconda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Most packages have binary wheels for Windows, macOS and Linux (yes, Linux!)
making the installation as simple as &lt;tt class="docutils literal"&gt;pip install numpy&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You waste disk space for packages Anaconda installs that you won’t ever need.&lt;/li&gt;
&lt;li&gt;It’s provided by some random for-profit company.&lt;/li&gt;
&lt;li&gt;I’ve seen bugs that were not reproducible outside of Anaconda.&lt;/li&gt;
&lt;li&gt;You can still do data science using the official distribution. There’s
nothing special about Anaconda.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDistributions"&gt;Python distributions on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-make-exe-files-from-python-programs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, you can. There are tools for this — &lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is the best one. Note that you usually need to
run it on the destination operating system. And remember that “compiling” to
exe files like that &lt;strong&gt;is not&lt;/strong&gt; a security measure — your source code is still
easily recoverable. (It’s not a security measure in other languages either,
even if getting source code back might be more expensive/tricky in those.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-learn-python-where-to-get-help"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of learning material is important. If you get a bad book, it might
discourage you from learning (because it’s boring), or may teach you
bad/outdated practices.&lt;/p&gt;
&lt;p&gt;If you can already program in another language, I recommend the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official
Python tutorial&lt;/a&gt;. For newcomers to
programming, I recommend &lt;a class="reference external" href="http://greenteapress.com/wp/think-python-2e/"&gt;Think Python&lt;/a&gt; or &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff
with Python&lt;/a&gt;.  They teach Python 3, and
(mostly) best practices.&lt;/p&gt;
&lt;p&gt;If you need help, try &lt;tt class="docutils literal"&gt;#python&lt;/tt&gt; on freenode IRC, the &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/tutor"&gt;Tutor&lt;/a&gt; or &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list"&gt;Python-list&lt;/a&gt; mailing lists, or a bunch of other communities. (I’m a regular on &lt;tt class="docutils literal"&gt;#python&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id9"&gt;Installing Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This guide will focus on installing CPython 2.7 and 3.x (latest), using the standard
distribution. This choice is satisfactory for most people. Third-party
distributions, while handy in some cases, are not needed for most. (See
&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions"&gt;Distributions&lt;/a&gt; for arguments)&lt;/p&gt;
&lt;p&gt;Throughout this guide, I’ll refer to the Python interpreter executable as
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt;. The exact name depends on your system and desired version. On most
OSes, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is Python 2 and &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; is 3; &lt;tt class="docutils literal"&gt;python2&lt;/tt&gt; should also
exist.  On Arch Linux, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is Python 3. On Windows, use the &lt;tt class="docutils literal"&gt;py&lt;/tt&gt;
launcher.&lt;/p&gt;
&lt;div class="section" id="windows"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id10"&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Download the installer(s): &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those installers come with &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, and modern Python 3.x versions come with
the &lt;tt class="docutils literal"&gt;py&lt;/tt&gt; launcher.  You can use that launcher to pick a specific Python
version, eg.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &amp;lt;package&amp;gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-2&lt;/span&gt; somefile.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-2.7&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py&lt;/tt&gt; (default system version)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s recommended for most use, and mandatory for upgrading pip.&lt;/p&gt;
&lt;p&gt;The 32-bit versions are more versatile. Most packages support both (the only
exception I’m aware of is Tensorflow, which only allows 64-bit Python 3.5 as of
now).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="macos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id11"&gt;macOS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS ships with Python 2.7.10 (as of macOS Sierra). It’s not the latest
version; it’s good enough for most people, but I still recommend installing
your own (the system Python doesn’t include &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, for example). You can
install the latest 2.7 version, as well as Python 3, using a package manager. I
recommend Homebrew — it’s the most popular solution, and lets you install many
other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use the python.org installers: they do not have uninstallers, so you
will have outdated versions lying around after some time. There is no
auto-update as well.  &lt;strong&gt;DO NOT&lt;/strong&gt; attempt to remove the system-installed Python,
this will only damage your system and you’ll need to reinstall.&lt;/p&gt;
&lt;p&gt;If you already have a package manager installed (MacPorts, Fink), don’t install
a new one and just use the existing one.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;brew install python python3&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You should now have &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To update Homebrew and Python, run &lt;tt class="docutils literal"&gt;brew update&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-and-other-unix-like-oses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On Linux, there usually are good enough packages in your OS repositories. You
should be able to install the appropriate package for Python (2 and/or 3).
Most (if not all) distributions require Python — &lt;strong&gt;do not&lt;/strong&gt; remove the
pre-installed packages, and be careful not to overwrite them with something
newer.&lt;/p&gt;
&lt;p&gt;If the version that ships with your distribution is too old, there are some
options. There might be some repositories with better versions, eg. the
&lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes PPA&lt;/a&gt;
for Ubuntu. Then there’s the other option of compiling Python manually. The
instructions depend on your exact requirements, but here’s a summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download the &lt;a class="reference external" href="https://www.python.org/downloads/source/"&gt;source distribution from Python.org&lt;/a&gt; and unpack it. Go into the unpacked source directory.&lt;/li&gt;
&lt;li&gt;Ensure you’ve got a functional C compiler and Python’s dependencies. You can
usually use your system’s package manager to install the build dependencies
of your system Python. Some dependencies are optional (eg. &lt;tt class="docutils literal"&gt;sqlite3&lt;/tt&gt;
requires SQLite headers).&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=/opt/python3.6&lt;/span&gt;&lt;/tt&gt; and then &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;. (You may add other options to both. It will
take a while.)&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;make altinstall&lt;/tt&gt; as root. Avoid &lt;tt class="docutils literal"&gt;make install&lt;/tt&gt;, as it can override
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt; executables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, you can try &lt;tt class="docutils literal"&gt;pyenv&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;pythonz&lt;/tt&gt; — tools that can be used to install and manage different Python versions. Remember: compiling Python should be considered a &lt;strong&gt;last resort&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id13"&gt;Installing packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install third-party packages, you should use pip, the Python package
manager. If you’re using Windows or macOS (from Homebrew), pip is included with
your copy of Python.  If you’re on Linux and installed Python from a system
repository, install the correct system package (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-pip&lt;/span&gt;&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/tt&gt;). If you compiled your own Python, pip is also included.&lt;/p&gt;
&lt;p&gt;To run pip, use &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt; (Windows), &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt; (other platforms),
or the short &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt; commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEVER use sudo pip.&lt;/strong&gt; This can cause numerous problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conflicts between packages installed by pip and your system package
manager&lt;/li&gt;
&lt;li&gt;pip modifying system packages, leading to issues when updating them, or
breaking dependencies&lt;/li&gt;
&lt;li&gt;no isolation between package versions, which is sometimes needed to satisfy
dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package install is specific to the Python interpreter used to run
&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;. Packages installed to a virtualenv are separate from system packages;
packages installed for “global” Python 2.7 are separate from 3.6 packages.
Virtual environments generally don’t use the system packages, unless
specifically enabled during creation.&lt;/p&gt;
&lt;p&gt;Some distros have popular packages in their repositories. Sometimes they’re
good; in other cases they’re terribly outdated or they lack important
components, making package managers angry and sick of supporting a 2-year-old
version. (Especially since most bugs are closed with “we’ve fixed that long
ago”)&lt;/p&gt;
&lt;div class="section" id="user-installs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id14"&gt;User installs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a small scale, you can install packages with pip for a single user.  Use
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; PACKAGE&lt;/tt&gt; to do this. If your package installs &lt;a class="reference external" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/"&gt;scripts&lt;/a&gt;,
they will be installed to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/tt&gt; on Linux, and
&lt;tt class="docutils literal"&gt;~/Library/Python/X.Y/bin&lt;/tt&gt; on macOS (X.Y is Python version), or you can use
&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; if the package supports it.&lt;/p&gt;
&lt;p&gt;For most people and projects, virtual environments are better. There are,
however, use cases for putting some packages user-wide — if you don’t work on
projects, but instead are doing one-off research projects, those are better
suited by user-wide installs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id15"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Virtual environments are the best way to install and manage Python packages.
Advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Isolation of projects and their requirements: if one app/package requires
library version X, but another requires version Y, they can live in separate
virtual environments&lt;/li&gt;
&lt;li&gt;Independent from system-wide packages&lt;/li&gt;
&lt;li&gt;Lightweight (an empty virtualenv is about 10 MB)&lt;/li&gt;
&lt;li&gt;Simple to re-create in any place (&lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt; → &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tools-and-management"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id16"&gt;Tools and management&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are two tools to facilitate creation of virtual environments: the older
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; project, and the newer
&lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module. The &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module is shipped with Python 3.x; some
distributions may put it in a separate package or remove it altogether. I
recommend using &lt;strong&gt;virtualenv&lt;/strong&gt; — it’s compatible with more Python versions
(it’s better to use the same tool for both Pythons) and cannot be broken by
incompetent OS package maintainers (&lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; fails on Debian due to no
&lt;tt class="docutils literal"&gt;ensurepip&lt;/tt&gt;; there is a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/tt&gt; package that fixes it but that’s
hard to discover)&lt;/p&gt;
&lt;p&gt;There are multiple schools of thought regarding virtualenv placement and
content. Myself, I use &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to manage virtualenvs
and put them in &lt;tt class="docutils literal"&gt;~/virtualenvs&lt;/tt&gt;. Other people put virtualenvs inside their
git repositories (but they &lt;em&gt;must&lt;/em&gt; be in &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt;) Virtualenvs should only contain packages
installed with &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; so they can be recreated quickly.&lt;/p&gt;
&lt;p&gt;I also use the &lt;tt class="docutils literal"&gt;virtualenvwrapper&lt;/tt&gt; plugin for Oh My Zsh, which also
activates virtualenvs with the same name as a git repo, or the environment
named by a &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-and-usage"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id17"&gt;Installation and usage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install virtualenv user-wide, use &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/tt&gt;. You can
then use it with &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; virtualenv DIRECTORY&lt;/tt&gt;. You may pass extra
options, eg. interpreter to use (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; python3&lt;/tt&gt;). Sometimes you need to install
virtualenv for every Python version; usually, one copy is enough.&lt;/p&gt;
&lt;p&gt;How to use them? This is a subject of heated debate in the Python community.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some people believe that activating (&lt;tt class="docutils literal"&gt;source bin/activate&lt;/tt&gt; on *nix;
&lt;tt class="docutils literal"&gt;Scripts\activate&lt;/tt&gt; on Windows) is the right thing to do and simplifies work.&lt;/li&gt;
&lt;li&gt;Others think that you should use &lt;tt class="docutils literal"&gt;bin/python&lt;/tt&gt; (or other scripts in that
directory) directly, as activation only changes &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; and some helper
variables — those variables are not mandatory for operation, running
the correct &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is.&lt;/li&gt;
&lt;li&gt;Others still think &lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;virtualenvs should be used in subshells&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, if activating virtualenvs works in your environment, you should
do it — it’s the most convenient option. There are, however, cases when
activation fails, or is otherwise impossible — calling &lt;tt class="docutils literal"&gt;bin/python&lt;/tt&gt; directly
is your best bet in that case. If you are working inside shell scripts, do not
activate virtualenvs.  I’m not a fan of the subshell option, because it
complicates stuff if you work on multiple projects, and requires tracking usage
manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrading-and-moving"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Upgrading the system Python may make your virtualenvs unusable.
For patch version upgrades, you can just update symlinks (see &lt;a class="reference external" href="https://github.com/Kwpolska/scripts/blob/master/fix-venvs.sh"&gt;fix-venvs.sh&lt;/a&gt;).
However, if the minor version changes, it’s best to re-create the virtualenv
(you need to create &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; ahead of time).&lt;/p&gt;
&lt;p&gt;You cannot move a virtualenv between directories/machines or rename
virtualenvs. You need to use &lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt;, create a new
virtualenv, and run &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt; (you can then delete
the old environment with a simple &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packages-with-c-extensions-binary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The situation improved drastically in the past year or so. Nowadays, almost
all packages have a pre-compiled package available in PyPI. Those packages work
for Windows, macOS, and Linux. There are packages for some of the most
common &lt;em&gt;offenders&lt;/em&gt;, including Pillow, lxml, PyQt5, numpy… However, there might
still be packages without wheels on PyPI.&lt;/p&gt;
&lt;p&gt;If there is no wheel for a package and you are on Windows, check out &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph
Gohlke’s unofficial binaries&lt;/a&gt;.
If you can’t find any wheels online, you would have to resort to compiling it
manually — this requires installing Visual Studio (Visual C++) in a version
that matches your Python, and it’s kind of a pain to do.&lt;/p&gt;
&lt;p&gt;If you are not on Windows, you must install a C compiler and toolchain.
If you get a warning about missing &lt;tt class="docutils literal"&gt;Python.h&lt;/tt&gt;, install the appropriate development
package — for example, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-dev&lt;/span&gt;&lt;/tt&gt;) on Debian/Ubuntu,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-devel&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-devel&lt;/span&gt;&lt;/tt&gt; on RHEL/Fedora. The package you’re trying
to install might have other dependencies that you need to install (the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-dev(el)&lt;/span&gt;&lt;/tt&gt; part is important, too)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id20"&gt;Other stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re working on a project, use &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-e&lt;/span&gt; .&lt;/tt&gt; inside the project
directory to install the package in your environment in development (editable)
mode. This loads code directly from your repository — you don’t need to
re-install on every change; you might need to re-install when your version
number changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="editors-and-ides"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another important thing a developer should take care of is the choice of an
editor. This is an important decision, and is the reason for many holy wars in
the programmer community.&lt;/p&gt;
&lt;p&gt;A good editor should have syntax highlighting for all languages you need to
work with. It should also have features like visual block/multiple selections,
sophisticated find-and-replace, file finding, code completion, and many more minor
but helpful features.&lt;/p&gt;
&lt;p&gt;Then there’s the difference between IDEs and text editors. Text editors are
simpler, whereas IDEs try to include many extra things not necessarily related
to writing code. IDEs often use more resources, but you won’t notice it with a
modern computer (especially with a SSD).&lt;/p&gt;
&lt;p&gt;The best IDE out there is &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from
JetBrains. It has both a free Community and paid Professional edition. The
JetBrains folks are experts at IDEs — they have fully-fledged tools for many
languages. Their Python solution offers a plethora of options that aid
programmers in their work.  Also, if you work with Java, or otherwise more than
one IDEA-supported language, then install IntelliJ IDEA and the Python plugin
(which has the same features as PyCharm).  Students can get &lt;a class="reference external" href="https://www.jetbrains.com/student/"&gt;free
Professional/Ultimate licenses for JetBrains products&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also spend a lot of time in &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; (&lt;a class="reference external" href="https://neovim.io/"&gt;neovim&lt;/a&gt;/&lt;a class="reference external" href="http://vimr.org/"&gt;VimR&lt;/a&gt; to be precise). Vim is the
most powerful text editor out there, and with the right set of plugins it can
beat IDEs at speed and productivity. Vim has a steep learning curve, but it’s
worth it — you can do large changes with just a few keystrokes. Vim is
considered so good that many IDEs (Visual Studio, IntelliJ IDEA/PyCharm) have
Vim emulation plugins.&lt;/p&gt;
&lt;p&gt;Another option is &lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; — it’s
a text editor, but can offer many IDE-like features with the right set of
plugins. It’s Electron-based architecture, or effectively being based on top of
Google’s Chromium, is unfortunate and can lead to terrible performance on
lower-end machines, and on higher-end ones in some cases. (In my experience,
it’s better than Atom.) You can also try &lt;a class="reference external" href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; ($80).&lt;/p&gt;
&lt;p&gt;But really, almost any editor will do. But please &lt;strong&gt;avoid&lt;/strong&gt; IDLE, the editor
included with Python. It lacks some of the most basic things — it doesn’t even
have an option to show line numbers. Not to mention its ugliness. Also, don’t
use Notepad and TextEdit. Those are too simple, and Notepad has encoding
issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id22"&gt;Update history&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;2017-07-19&lt;/dt&gt;
&lt;dd&gt;Better description of problems caused by using sudo pip.&lt;/dd&gt;
&lt;dt&gt;2017-07-10&lt;/dt&gt;
&lt;dd&gt;Added notes about not removing built-in Pythons.&lt;/dd&gt;
&lt;dt&gt;2017-07-07&lt;/dt&gt;
&lt;dd&gt;Spelling fixes and updates to the virtualenv usage section.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</guid><pubDate>Mon, 03 Jul 2017 10:40:00 GMT</pubDate></item><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id3" id="id1"&gt;[1]&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id4" id="id2"&gt;[2]&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mirroring&lt;/li&gt;
&lt;li&gt;screen resolution&lt;/li&gt;
&lt;li&gt;dock position and icon size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item><item><title>Unix locales vs Unicode (‘ascii’ codec can’t encode character…)</title><link>https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You might get unusual errors about Unicode and inability to convert
to ASCII. Programs might just crash at random. Those are often simple to fix —
all you need is correct locale configuration.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p class="lead"&gt;Has this ever happened to you?&lt;/p&gt;
&lt;pre class="code pytb"&gt;&lt;a name="rest_code_c2aa229922a248458f2e1eb7c1f2c3b9-1"&gt;&lt;/a&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;a name="rest_code_c2aa229922a248458f2e1eb7c1f2c3b9-2"&gt;&lt;/a&gt;  File &lt;span class="nb"&gt;"aogonek.py"&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_c2aa229922a248458f2e1eb7c1f2c3b9-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0105&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c2aa229922a248458f2e1eb7c1f2c3b9-4"&gt;&lt;/a&gt;&lt;span class="gr"&gt;UnicodeEncodeError&lt;/span&gt;: &lt;span class="n"&gt;'ascii' codec can't encode character '\u0105' in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_a59661c51e7f4691bbb1e129b00ff75e-1"&gt;&lt;/a&gt;Nikola: Could not guess locale for language en, using locale C
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_3da3dde386414ac181b03bdfee66a89c-1"&gt;&lt;/a&gt;Input: ą
&lt;a name="rest_code_3da3dde386414ac181b03bdfee66a89c-2"&gt;&lt;/a&gt;Desired ascii(): '\u0105'
&lt;a name="rest_code_3da3dde386414ac181b03bdfee66a89c-3"&gt;&lt;/a&gt;Real ascii(): '\udcc4\udc85'
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_1bd51653a7834ab49c81055248b04049-1"&gt;&lt;/a&gt;perl: warning: Setting locale failed.
&lt;a name="rest_code_1bd51653a7834ab49c81055248b04049-2"&gt;&lt;/a&gt;perl: warning: Please check that your locale settings:
&lt;a name="rest_code_1bd51653a7834ab49c81055248b04049-3"&gt;&lt;/a&gt;    [...]
&lt;a name="rest_code_1bd51653a7834ab49c81055248b04049-4"&gt;&lt;/a&gt;    are supported and installed on your system.
&lt;a name="rest_code_1bd51653a7834ab49c81055248b04049-5"&gt;&lt;/a&gt;perl: warning: Falling back to the standard locale ("C").
&lt;/pre&gt;&lt;p class="lead"&gt;All those errors have the same root cause: incorrect locale configuration.
To fix them all, you need to generate the missing locales and set them.&lt;/p&gt;
&lt;div class="section" id="check-currently-used-locale"&gt;
&lt;h2&gt;Check currently used locale&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;locale&lt;/tt&gt; command (without arguments) should tell you which locales you’re
currently using.  (The list might be shorter on your end)&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-1"&gt;&lt;/a&gt;$ locale
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_CTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NUMERIC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_COLLATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-7"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MONETARY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-8"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MESSAGES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-9"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_PAPER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-10"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TELEPHONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MEASUREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_IDENTIFICATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_4a65c327705d4939ade3fd5778cad052-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If any of those is set to &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;POSIX&lt;/tt&gt;, has a different encoding than
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;UTF-8&lt;/span&gt;&lt;/tt&gt; (sometimes spelled &lt;tt class="docutils literal"&gt;utf8&lt;/tt&gt;) is empty (with the exception of
&lt;tt class="docutils literal"&gt;LC_ALL&lt;/tt&gt;), or if you see any errors, you need to reconfigure your locale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="check-locale-availability-and-install-missing-locales"&gt;
&lt;h2&gt;Check locale availability and install missing locales&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is check locale availability. To do this, run
&lt;tt class="docutils literal"&gt;locale &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;. This will produce a list of all installed locales.  You can use
&lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; to get a more reasonable list.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_69167f7fb18b4c0dac7d034668239cc7-1"&gt;&lt;/a&gt;$ locale -a | grep -i utf
&lt;a name="rest_code_69167f7fb18b4c0dac7d034668239cc7-2"&gt;&lt;/a&gt;&amp;lt;lists all UTF-8 locales&amp;gt;
&lt;a name="rest_code_69167f7fb18b4c0dac7d034668239cc7-3"&gt;&lt;/a&gt;$ locale -a | grep -i utf | grep -i en_US
&lt;a name="rest_code_69167f7fb18b4c0dac7d034668239cc7-4"&gt;&lt;/a&gt;en_US.UTF-8
&lt;/pre&gt;&lt;p&gt;The best locale to use is the one for your language, with the UTF-8 encoding.
The locale will be used by some console apps for output. I’m going to use
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;en_US.UTF-8&lt;/span&gt;&lt;/tt&gt; in this guide.&lt;/p&gt;
&lt;p&gt;If you can’t see any UTF-8 locales, or no appropriate locale setting for your
language of choice, you might need to generate those. The required actions
depend on your distro/OS.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Debian, Ubuntu, and derivatives: install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;language-pack-en-base&lt;/span&gt;&lt;/tt&gt;, run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;dpkg-reconfigure&lt;/span&gt; locales&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;RHEL, CentOS, Fedora: install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;glibc-langpack-en&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: uncomment relevant entries in &lt;tt class="docutils literal"&gt;/etc/locale.gen&lt;/tt&gt; and run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;locale-gen&lt;/span&gt;&lt;/tt&gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Locale"&gt;(wiki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For other OSes, refer to the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need a UTF-8 locale to ensure compatibility with software. Avoid the &lt;tt class="docutils literal"&gt;C&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;POSIX&lt;/tt&gt; locales (it’s ASCII) and locales with other encodings (those
aren’t used by ~anyone these days)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-system-wide"&gt;
&lt;h2&gt;Configure system-wide&lt;/h2&gt;
&lt;p&gt;On some systems, you may be able to configure locale system-wide.  Check your
system documentation for details. If your system has systemd, run&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b7e07f2e57054206ad4d44f94748a2c2-1"&gt;&lt;/a&gt;sudo localectl set-locale LANG=en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configure-for-a-single-user"&gt;
&lt;h2&gt;Configure for a single user&lt;/h2&gt;
&lt;p&gt;If your environment does not allow system-wide locale configuration (macOS,
shared server with generated but unconfigured locales), or if you want to
ensure it’s always configured independently of system settings.&lt;/p&gt;
&lt;p&gt;To do this, you need to edit the configuration file for your shell. If you’re
using bash, it’s &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; on macOS). For zsh users,
&lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt;.  Add this line (or equivalent in your shell):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_7f2a60073f7c4d138f8f805f7d1e3159-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/pre&gt;&lt;p&gt;That should be enough. Note that those settings don’t apply to programs
not launched through a shell.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;&lt;strong&gt;Python/Windows corner:&lt;/strong&gt; Python 3.7 will fix this on Unix by assuming UTF-8
if it encounters the C locale.  On Windows, Python 3.6 is using UTF-8
interactively, but not when using shell redirections to files or pipes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post was brought to you by ą — U+0105 LATIN SMALL LETTER A WITH OGONEK.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/</guid><pubDate>Sun, 18 Jun 2017 18:40:00 GMT</pubDate></item><item><title>Apple’s new pricing strategy: don't buy the 12″ MacBook</title><link>https://chriswarrick.com/pl/blog/2017/06/08/apples-new-pricing-strategy-dont-buy-the-12-macbook/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;On Monday, Apple announced some changes to its Mac lineup. All MacBooks (even
the Air) got CPU upgrades, and the starting price of a MacBook Pro (13″, no
Touch Bar) went down to US$1299. Which makes the 12-inch model effectively
pointless.&lt;/p&gt;
&lt;p&gt;A quick spec comparison reveals that the Pro comes with a much better CPU, GPU,
screen, camera — the only drawback is the storage space.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If you look at the cheapest MacBook in each category, you end up with this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;13″ Air, $999&lt;/li&gt;
&lt;li&gt;12″, &lt;strong&gt;$1299&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;13″ Pro, &lt;strong&gt;$1299&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;13″ Pro with Touch Bar, $1799&lt;/li&gt;
&lt;li&gt;15″ Pro with Touch Bar, $1299&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, this is correct: a 12″ MacBook costs the same as a 13″ Pro. But is it really true? Let's compare the specs:&lt;/p&gt;
&lt;table border="1" class="table table-striped docutils"&gt;
&lt;colgroup&gt;
&lt;col width="31%"&gt;
&lt;col width="29%"&gt;
&lt;col width="40%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Device&lt;/th&gt;
&lt;th class="head"&gt;MacBook (12″)&lt;/th&gt;
&lt;th class="head"&gt;MacBook Pro (13″, no Touch Bar)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel Core m3, 1.2 GHz&lt;/td&gt;
&lt;td&gt;Intel Core i5, 2.3 GHz ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Memory&lt;/td&gt;
&lt;td&gt;8 GB&lt;/td&gt;
&lt;td&gt;8 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Storage&lt;/td&gt;
&lt;td&gt;256 GB ★&lt;/td&gt;
&lt;td&gt;128 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Ports&lt;/td&gt;
&lt;td&gt;1 USB-C&lt;/td&gt;
&lt;td&gt;2 Thunderbolt 3 (USB-C) ★★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Camera&lt;/td&gt;
&lt;td&gt;480p&lt;/td&gt;
&lt;td&gt;720p ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Screen size&lt;/td&gt;
&lt;td&gt;12″&lt;/td&gt;
&lt;td&gt;13″ ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;External displays&lt;/td&gt;
&lt;td&gt;1×4K&lt;/td&gt;
&lt;td&gt;1×5K/2×4K/2×UHD ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;Intel HD Graphics 615&lt;/td&gt;
&lt;td&gt;Intel Iris Plus Graphics 640 ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Size (height×width×depth)&lt;/td&gt;
&lt;td&gt;0.35–1.31×28.05×19.65 cm&lt;/td&gt;
&lt;td&gt;1.49×30.41×21.24 cm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Weight&lt;/td&gt;
&lt;td&gt;0.92 kg ★&lt;/td&gt;
&lt;td&gt;1.37 kg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Available in Gold/Rose Gold&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For $0 extra, you can get a device with a &lt;strong&gt;much&lt;/strong&gt; better CPU, 2 Thunderbolt 3 ports, a (slightly) larger screen, a better front-facing camera, support for larger/more displays. The “price” for this? Only less storage space, 0.45 kg (roughly 1 lb) of weight. And no gold color options.&lt;/p&gt;
&lt;p&gt;To me, this screams “don’t buy the 12-inch thing” — you can get much more &lt;em&gt;computer&lt;/em&gt; for the same price. And the CPUs in those computers are pretty poor. Last year’s base model is beaten in &lt;a class="reference external" href="https://browser.primatelabs.com/mac-benchmarks"&gt;benchmarks&lt;/a&gt; by much older (and cheaper) machines, eg. 2014’s MacBook Air, 11″ base model in single-core benchmarks and upgraded 2015 Airs in multi-core benchmarks.&lt;/p&gt;
&lt;p&gt;And even if you don’t care about the CPU, there are also other things, like the better camera, or two ports that support more devices. If you want a computer that lets you stay productive, and want a Mac, don’t even try buying the 12″ MacBook &lt;strong&gt;Abomination&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/08/apples-new-pricing-strategy-dont-buy-the-12-macbook/</guid><pubDate>Thu, 08 Jun 2017 17:35:00 GMT</pubDate></item><item><title>Structuring and automating a Python project with the Python Project Template</title><link>https://chriswarrick.com/pl/blog/2017/04/09/python-project-template-structure-and-automation/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;To create a project that other people can use and contribute to, you need to
follow a specific directory structure. Moreover, releasing a new version should
be as simple and painless as possible. For my projects, I use a template that
has the structure already in place, and comes with automation for almost every
part of a release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project Template&lt;/a&gt; is my approach to this. It comes with a good (IMO) structure and automation.&lt;/p&gt;
&lt;p&gt;What does it include? A whole lot of things. Documentation, Sphinx
configuration, a simple test suite, a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file, some AUR stuff, and
perhaps the most important part — the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. It can automate a lot
of tasks that are part of a release.&lt;/p&gt;
&lt;p&gt;You see, releasing a package is error-prone. There are a lot of things that can go wrong:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Version numbers. They may appear in code comments, Sphinx configuration,
README files and documentation, and setup.py. Some people claim to have
“solutions” for this. Most of those solutions don’t work right — either they
import a file from the project (which may break if &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; is too
magical), read a file from that place (which might not get included
properly), or use some setuptools extension to get the version from VCS or
whatever (which needs to be installed before the package). Using &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; to
fix the version numbers is much simpler.&lt;/li&gt;
&lt;li&gt;Forgetting about changelogs.&lt;/li&gt;
&lt;li&gt;Not updating translations or other important files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve had quite a few botched releases in the &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; project. I wrote a
&lt;a class="reference external" href="http://getnikola.github.io/releng/checklist.html"&gt;checklist&lt;/a&gt; to prevent things like those. You may notice that the most
prominent step is to run a &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. This step replaced 21 others —
now the checklist only talks about writing announcements, sending e-mails,
updating the website, and doing some GitHub stuff that is not yet automated.&lt;/p&gt;
&lt;p&gt;The template promotes a &lt;em&gt;release early, release often&lt;/em&gt; workflow: since making a
new release requires almost no human intervention, you might as well do it
every time you make a bunch of changes. In my projects, &lt;em&gt;everything&lt;/em&gt; gets
automated, and it might as well be possible in yours.&lt;/p&gt;
&lt;div class="section" id="the-complete-feature-list-as-of-v2-1-5"&gt;
&lt;h2&gt;The complete feature list (as of v2.1.5)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pre-configured Sphinx with:&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;CONTRIBUTING.rst&lt;/tt&gt; guide (used by GitHub when sending a pull request or an issue)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;LICENSE.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;an empty &lt;tt class="docutils literal"&gt;CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;a bare-bones &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt; page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The exact same files in &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;, which are fragile and &lt;strong&gt;MAY NOT&lt;/strong&gt; be modified
as they are replaced with copies in &lt;tt class="docutils literal"&gt;/docs&lt;/tt&gt; by the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;template.py&lt;/tt&gt; files in the Python package directory&lt;/li&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file that could be good enough for people, and that supports
&lt;tt class="docutils literal"&gt;entry_points&lt;/tt&gt; (see &lt;a class="reference external" href="https://go.chriswarrick.com/entry_points"&gt;https://go.chriswarrick.com/entry_points&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests/&lt;/tt&gt; containing some &lt;em&gt;Is My Python Sane?&lt;/em&gt;-style tests (using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;An automated global update script (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.pypt/PYPT-UPDATE&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Entry points configuration ready to be uncommented (and a matching
&lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; file)&lt;/li&gt;
&lt;li&gt;Add-ons for Qt users (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/Qt&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;A sample hook for AUR updates (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/AUR&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;PKGBUILDs for the Arch Linux User Repository (AUR)&lt;/li&gt;
&lt;li&gt;A state-of-the-art &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script, the operations of which are:&lt;ul&gt;
&lt;li&gt;querying the user for version number, commit message and changes&lt;/li&gt;
&lt;li&gt;updating &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;bumping the version number in all the files, changing dates where necessary&lt;/li&gt;
&lt;li&gt;copying over &lt;tt class="docutils literal"&gt;/docs/README.rst&lt;/tt&gt;,  &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/docs/CONTRIBUTING.rst&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;locale generation (via the &lt;tt class="docutils literal"&gt;.pypt/localegen&lt;/tt&gt; script)&lt;/li&gt;
&lt;li&gt;running &lt;tt class="docutils literal"&gt;import $PROJECTLC&lt;/tt&gt; and the test suite&lt;/li&gt;
&lt;li&gt;uploading a source distribution and a wheel to PyPI&lt;/li&gt;
&lt;li&gt;Making a Git commit and tagging the release&lt;/li&gt;
&lt;li&gt;creating a GitHub Releases entry&lt;/li&gt;
&lt;li&gt;updating the AUR packages (by using hooks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;
&lt;a href="https://github.com/Kwpolska/python-project-template" class="btn btn-lg btn-primary"&gt;&lt;i class="fab fa-github"&gt;&lt;/i&gt; Check it out on GitHub&lt;/a&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/04/09/python-project-template-structure-and-automation/</guid><pubDate>Sun, 09 Apr 2017 09:00:00 GMT</pubDate></item><item><title>CSV is not a standard</title><link>https://chriswarrick.com/pl/blog/2017/04/07/csv-is-not-a-standard/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;CSV is not a standard. What does that really mean for anyone using that format?
The file’s recipient may be unable to read it the way you intended. Separators,
decimal marks, escaping and encodings are all problems — and Excel does them
all pretty badly.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;So first, some people might claim that &lt;a class="reference external" href="http://www.ietf.org/rfc/rfc4180.txt"&gt;RFC 4180&lt;/a&gt; is the CSV standard. Those
people also have not read the document they’re referring to. It states:&lt;/p&gt;
&lt;blockquote&gt;
This memo provides information for the Internet community.  It does
not specify an Internet standard of any kind.&lt;/blockquote&gt;
&lt;p&gt;The problem with this is the fact that a &lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt; file does not mean much. There
are a few problems. The first question is,&lt;/p&gt;
&lt;blockquote&gt;
What is the field separator? Is it a comma or a semicolon?&lt;/blockquote&gt;
&lt;p&gt;Hey, wait a minute, doesn’t the file format/extension stand for
&lt;em&gt;comma-separated values&lt;/em&gt;? Yes, it does. But that does not matter in the
slightest. You see, Microsoft Excel — which most people will use to read/write
their CSV files — makes this decision based on the user locale settings. If the
OS is set to a locale where the comma is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Decimal_mark#Hindu.E2.80.93Arabic_numeral_system"&gt;decimal mark&lt;/a&gt; (eg. most of
Europe), the list separator is set to &lt;tt class="docutils literal"&gt;;&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;,&lt;/tt&gt; — and Excel uses
that.&lt;/p&gt;
&lt;p&gt;Of course, there’s also the TSV data format — those are tab-separated values.
And some people might name their TSV files &lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To read files saved in a different locale, or with a different separator, Excel
users need to change the file extension to &lt;tt class="docutils literal"&gt;.txt&lt;/tt&gt;, or go to Data → Get
External Data → From Text &lt;a class="reference external" href="https://support.office.com/en-us/article/Text-Import-Wizard-c5b02af6-fda1-4440-899f-f78bafe41857"&gt;(documentation)&lt;/a&gt; and use the import wizard. You
can’t double-click on files.&lt;/p&gt;
&lt;p&gt;On a side note, Apple Numbers guesses the format — one of the few things it
gets right. LibreOffice always asks the user to pick import settings, but by
default it uses tab AND comma AND semicolon for CSV files, which brings its own
host of problems.&lt;/p&gt;
&lt;p&gt;Here’s a quick test:&lt;/p&gt;
&lt;blockquote&gt;
What does &lt;tt class="docutils literal"&gt;foo;bar,baz;quux&lt;/tt&gt; mean? What about &lt;tt class="docutils literal"&gt;foo,bar;baz,quux&lt;/tt&gt;?&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;LibreOffice assumes it’s (Chinese) UTF-16 text, but after telling it the real encoding, both
files contain &lt;strong&gt;4 columns&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Microsoft Excel says one of the files contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other contains &lt;strong&gt;2 columns&lt;/strong&gt;
(which is which depends on locale)&lt;/li&gt;
&lt;li&gt;Apple Numbers says the first file contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other
contains &lt;strong&gt;2 columns&lt;/strong&gt; if set to English, and both files contain &lt;strong&gt;3
columns&lt;/strong&gt; if set to Polish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But let’s get back to gotchas:&lt;/p&gt;
&lt;blockquote&gt;
What is the decimal mark? Is it a dot or a comma?&lt;/blockquote&gt;
&lt;p&gt;That’s a direct consequence of the previous question. However, one can’t simply
assume &lt;tt class="docutils literal"&gt;comma/dot&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;semicolon/comma&lt;/tt&gt;, because users might do crazy
stuff.&lt;/p&gt;
&lt;blockquote&gt;
What is used to escape rows containing the field separator? Quotes?
Backslashes?  What is used to escape the escape character?&lt;/blockquote&gt;
&lt;p&gt;Excel, for example, puts some things in &lt;tt class="docutils literal"&gt;"quotes"&lt;/tt&gt;. If a literal quote
character appears in the spreadsheet, it’s represented as &lt;tt class="docutils literal"&gt;""&lt;/tt&gt;, and
the entire cell is quoted as well. But there might be programs that use
backslashes for escapes, or even bad code that does not consider the need of
escaping like this, with tragic results.&lt;/p&gt;
&lt;p&gt;There’s still one more thing to cover: encodings. You see, even though the TSV
format effectively solves the issues I named before, both CSV and TSV suffer
from one problem:&lt;/p&gt;
&lt;blockquote&gt;
Which encoding to use when reading this file?&lt;/blockquote&gt;
&lt;p&gt;I already mentioned that LibreOffice believed my sample file was UTF-16,
containing Chinese text — in reality, this file was UTF-8 (or ASCII).&lt;/p&gt;
&lt;p&gt;What does Microsoft Excel do then? It looks like it follows &lt;em&gt;System locale for
non-Unicode programs&lt;/em&gt;. While there is an encoding option hidden in the Save
dialog, it does not seem to affect the output. So what does that mean? You
can’t expect a CSV file that contains characters outside of your system locale
— or outside of ASCII if you’re working with people around the world — to look
right. Unless you’re on &lt;a class="reference external" href="https://answers.microsoft.com/en-us/msoffice/forum/msoffice_install-mso_win10/announcing-october-feature-update-for-office-2016/927eea90-eea3-479a-a78a-45f7612460e1"&gt;Excel 2016&lt;/a&gt; and Office 365 — if you have the October
2016 update, you can read and write UTF-8 files. But if you’re using an older
version of Excel, or you’re using a non-Office 365 license, tough luck.&lt;/p&gt;
&lt;p&gt;So, to reiterate: CSV can mean a lot of things. And you can’t trust it to work
well most of the time, unless you’re dealing with people in one country, all
using the same locale settings and software. Which is pretty unlikely. TSV
can work around most of the problems, but encodings are still troublesome.&lt;/p&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/04/07/csv-is-not-a-standard/</guid><pubDate>Fri, 07 Apr 2017 18:00:00 GMT</pubDate></item></channel></rss>