<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o Python)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/python.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Tue, 17 Jan 2023 23:53:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How to improve Python packaging, or why fourteen tools are at least twelve too many</title><link>https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;There is an area of Python that many developers have problems with. This is an area that has seen many different solutions pop up over the years, with many different opinions, wars, and attempts to solve it. Many have complained about the packaging ecosystem and tools making their lives harder. Many beginners are confused about virtual environments. But does it have to be this way? Are the current solutions to packaging problems any good? And is the organization behind most of the packaging tools and standards part of the problem itself?&lt;/p&gt;
&lt;p&gt;Join me on a journey through packaging in Python and elsewhere. We’ll start by describing the classic packaging stack (involving setuptools and friends), the scientific stack (with conda), and some of the modern/alternate tools, such as Pipenv, Poetry, Hatch, or PDM. We’ll also look at some examples of packaging and dependency-related workflows seen elsewhere (Node.js and .NET). We’ll also take a glimpse at a possible future (with a venv-less workflow with PDM), and see if the PyPA agrees with the vision and insights of eight thousand users.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;nav class="contents alert alert-primary" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#the-plethora-of-tools" id="toc-entry-1"&gt;The plethora of tools&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#the-classic-stack" id="toc-entry-2"&gt;The classic stack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#and-a-few-extensions" id="toc-entry-3"&gt;…and a few extensions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#the-scientific-stack-and-conda" id="toc-entry-4"&gt;The scientific stack and conda&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#the-new-tools" id="toc-entry-5"&gt;The new tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#tooling-proliferation-and-the-python-package-authority" id="toc-entry-6"&gt;Tooling proliferation and the Python Package Authority&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#does-python-really-need-virtual-environments" id="toc-entry-7"&gt;Does Python really need virtual environments?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-to-use-python-from-a-virtual-environment" id="toc-entry-8"&gt;How to use Python from a virtual environment?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-are-system-pythons-and-virtual-environments-related" id="toc-entry-9"&gt;How are (system) Pythons and virtual environments related?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-to-manage-virtual-environments" id="toc-entry-10"&gt;How to manage virtual environments?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-everyone-else-is-doing-it" id="toc-entry-11"&gt;How everyone else is doing it&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#javascript-node-js-with-npm" id="toc-entry-12"&gt;JavaScript/Node.js (with npm)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-is-node-better-than-python" id="toc-entry-13"&gt;How is Node better than Python?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#other-packaging-topics" id="toc-entry-14"&gt;Other packaging topics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#c-net-with-dotnet-cli-msbuild" id="toc-entry-15"&gt;C#/.NET (with dotnet CLI/MSBuild)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-is-net-better-than-python" id="toc-entry-16"&gt;How is .NET better than Python?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#other-packaging-topics-1" id="toc-entry-17"&gt;Other packaging topics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#other-languages-and-ecosystems" id="toc-entry-18"&gt;Other languages and ecosystems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#are-those-ecosystems-tools-perfect" id="toc-entry-19"&gt;Are those ecosystems’ tools perfect?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#pep-582-the-future-of-python-packaging" id="toc-entry-20"&gt;PEP 582: the future of Python packaging?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#enabling-the-future-on-your-own-machine" id="toc-entry-21"&gt;Enabling the future on your own machine&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#is-this-the-perfect-thing" id="toc-entry-22"&gt;Is this the perfect thing?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#pypa-versus-reality-packaging-survey-results-and-pypa-reaction" id="toc-entry-23"&gt;PyPA versus reality: packaging survey results and PyPA reaction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#summary" id="toc-entry-24"&gt;Summary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnotes" id="toc-entry-25"&gt;Footnotes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="the-plethora-of-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-1" role="doc-backlink"&gt;The plethora of tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many packaging-related tools in Python. All of them with different authors, lineages, and often different opinions, although most of them are now unified under the Python Packaging Authority (PyPA) umbrella. Let’s take a look at them.&lt;/p&gt;
&lt;section id="the-classic-stack"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-2" role="doc-backlink"&gt;The classic stack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The classic Python packaging stack consists of many semi-related tools. Setuptools, probably the oldest tool of the group, and itself based on &lt;code class="docutils literal"&gt;distutils&lt;/code&gt;, which is part of the standard library (although it will be removed in Python 3.12), is responsible for installing a single package. It previously used &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; files to do its job, which required arbitrary code execution. It then added support for non-executable metadata specification formats: &lt;code class="docutils literal"&gt;setup.cfg&lt;/code&gt;, and also &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; (partially still in beta). However, you aren’t supposed to use &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; files directly these days, you’re supposed to be using pip. Pip installs packages, usually from the PyPI, but it can also support other sources (such as git repositories or the local filesystem). But where does pip install things? The default used to be to install globally and system-wide, which meant you could introduce conflicts between packages installed by pip and apt (or whatever the system package manager is). Even with a user-wide install (which pip is likely to attempt these days), you can still end up with conflicts, and you can also have conflicts in which package A requests X version 1.0.0, but package B expects X version 2.0.0—but A and B are not at all related and could live separately with their preferred version of X. Enter &lt;code class="docutils literal"&gt;venv&lt;/code&gt;, a standard library descendant of &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt;, which can create a lightweight virtual environment for packages to live in. This virtual environment gives you the separation from system packages and from different environments, but it is still tied to the system Python in some ways (and if the system Python disappears, the virtual environment stops working).&lt;/p&gt;
&lt;p&gt;A few extra tools would be used in a typical packaging workflow. The &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; package enhances Setuptools with the ability to generate wheels, which are ready-to-install (without running &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;). Wheels can either be pure-Python and be installed anywhere, or they can contain pre-compiled extension modules (things written in C) for a given OS and Python (and there’s even a standard that allows building and distributing one wheel for all typical Linux distros). The &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; package should be an implementation detail, something existing inside Setuptools and/or pip, but users need to be aware of it if they want to make wheels on their system, because virtual environments produced by &lt;code class="docutils literal"&gt;venv&lt;/code&gt; do not have &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; installed. Regular users who do not maintain their own packages may sometimes be told that pip is using something legacy because &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; is not installed, which is not a good user experience. Package authors also need &lt;code class="docutils literal"&gt;twine&lt;/code&gt;, whose sole task is uploading source distributions or wheels, created with other tools, to PyPI (and there’s not much more to say about that tool).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="and-a-few-extensions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-3" role="doc-backlink"&gt;…and a few extensions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the years, there have been a few tools that are based on things from the classic stack. For example, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/code&gt; can simplify dependency management. While &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; lets you produce a file with everything installed in your environment, there is no way to specify the dependencies you need, and get a lock file with specific versions and transitive dependencies (without installing and freezing everything), there is no easy way to skip development dependencies (e.g. IPython) when you &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt;, and there is no workflow to update all your dependencies with just pip. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/code&gt; adds two tools, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; which takes in &lt;code class="docutils literal"&gt;requirements.in&lt;/code&gt; files with the packages you care about, and produces a &lt;code class="docutils literal"&gt;requrirements.txt&lt;/code&gt; with pinned versions of them and all transitive dependencies; and also &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-sync&lt;/span&gt;&lt;/code&gt;, which can install &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; and removes things not listed in it.&lt;/p&gt;
&lt;p&gt;Another tool that might come in useful is &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, which can help you manage (create and activate) virtual environments in a central location. It has a few bells and whistles (such as custom hooks to do actions on every virtualenv creation), although for basic usage, you could replace it with a single-line shell function.&lt;/p&gt;
&lt;p&gt;Yet another tool that works alongside the classic toolset is &lt;code class="docutils literal"&gt;pipx&lt;/code&gt;, which creates and manages virtual environments for apps written in Python. You tell it to &lt;code class="docutils literal"&gt;pipx install Nikola&lt;/code&gt;, and it will create a virtual environment somewhere, install Nikola into it, and put a script for launching it in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;. While you could do it all yourself with venv and some symlinks, pipx can take care of this, and you don’t need to remember where the virtual environment is.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-scientific-stack-and-conda"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-4" role="doc-backlink"&gt;The scientific stack and conda&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The scientific Python community have had their own tools for many years. The conda tool can manage environments and packages. It doesn’t use PyPI and wheels, but rather packages from conda channels (which are prebuilt, and expect an Anaconda-distributed Python). Back in the day, when there were no wheels, this was the easiest way to get things installed on Windows; this is not as much of a problem now with binary wheels on PyPI—but the Anaconda stack is still popular in the scientific world. Conda packages can be built with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;conda-build&lt;/span&gt;&lt;/code&gt;, which is separate, but closely related to &lt;code class="docutils literal"&gt;conda&lt;/code&gt; itself. Conda packages are not compatible with &lt;code class="docutils literal"&gt;pip&lt;/code&gt; in any way, they do not follow the packaging standards used by other tools. Is this good? No, because it makes integrating the two worlds harder, but also yes, because many problems that apply to scientific packages (and their C/C++ extension modules, and their high-performance numeric libraries, and other things) do not apply to other uses of Python, so having a separate tool lets people focusing the other uses simplify their workflows.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-new-tools"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-5" role="doc-backlink"&gt;The new tools&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A few years ago, new packaging tools appeared. Now, there were lots of “new fancy tools” introduced in the past, with setuptools extending distutils, then distribute forking setuptools, then distribute being merged back…&lt;/p&gt;
&lt;p&gt;The earliest “new tool” was Pipenv. Pipenv had really terrible and misleading marketing, and it merged pip and venv, in that Pipenv would create a venv and install packages in it (from &lt;code class="docutils literal"&gt;Pipfile&lt;/code&gt; or &lt;code class="docutils literal"&gt;Pipfile.lock&lt;/code&gt;). Pipenv can place the venv in the project folder, or hide it somewhere in the project folder (the latter is the default). However, Pipenv does not handle any packages related to packaging your code, so it’s useful only for developing non-installable applications (Django sites, for example). If you’re a library developer, you need setuptools anyway.&lt;/p&gt;
&lt;p&gt;The second new tool was Poetry. It manages environments and dependencies in a similar way to Pipenv, but it can also build &lt;code class="docutils literal"&gt;.whl&lt;/code&gt; files with your code, and it can upload wheels and source distributions to PyPI. This means it has pretty much all the features the other tools have, except you need just one tool. However, Poetry is opinionated, and its opinions are sometimes incompatible with the rest of the packaging scene. Poetry uses the &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; standard, but it does not follow the standard specifying how metadata should be represented in a &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; file (PEP 621), instead using a custom &lt;code class="docutils literal"&gt;[tool.poetry]&lt;/code&gt; table. This is partly because Poetry came out before PEP 621, but the PEP was accepted over 2 years ago—the biggest compatibility problem is Poetry’s node-inspired &lt;code class="docutils literal"&gt;~&lt;/code&gt; and &lt;code class="docutils literal"&gt;^&lt;/code&gt; dependency version markers, which are not compatible with PEP 508 (the dependency specification standard). Poetry can package C extension modules, although it uses setuptools’ infrastructure for this (and requires a custom &lt;code class="docutils literal"&gt;build.py&lt;/code&gt; script).&lt;/p&gt;
&lt;p&gt;Another similar tool is Hatch. This tool can also manage environments (it allows multiple environments per project, but it does not allow to put them in the project directory), and it can manage packages (but without lockfile support). Hatch can also be used to package a project (with PEP 621-compliant &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; files) and upload it to PyPI. It does not support C extension modules.&lt;/p&gt;
&lt;p&gt;A tool that tries to be a simpler re-imagining of Setuptools is Flit. It can build and install a package using a &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; file. It also supports uploads to PyPI. It lacks support for C extension modules, and it expects you to manage environments on your own.&lt;/p&gt;
&lt;p&gt;There’s one more interesting (albeit not popular or well-known) tool. This tool is PDM. It can manage venvs (but it defaults to the saner &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; location), manage dependencies, and it uses a standards-compliant &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt;. There’s also a curious little feature called PEP 582 support, which we’ll talk about later.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="tooling-proliferation-and-the-python-package-authority"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-6" role="doc-backlink"&gt;Tooling proliferation and the Python Package Authority&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The previous sections mentioned 14 (fourteen!) distinct tools. As we’ll discover soon, that’s at least 12 too many. Let’s try to compare them.&lt;/p&gt;
&lt;p&gt;First, let’s define nine things that we would expect packaging tools to do:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Manage environments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Package/develop apps&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Package libraries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Package C extension modules&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install in editable mode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lock dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support pyproject.toml files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upload to PyPI&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div style="font-size: 90%"&gt;&lt;table class="table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Tool&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Maintainer&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Use-case&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;# of supported features&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;# of partially supported features&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;# of unsupported features&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;setuptools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Making things installable&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (pyproject.toml partially in beta, installing—only setuptools-based sdists)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Installing packages&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Locking dependencies only manually)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;venv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Creating virtual environments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Creating environments)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;wheel&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Building wheels in setuptools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Building wheels in setuptools)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Twine&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Uploading to PyPI&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Uploading to PyPI)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip-tools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Jazzband&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing requirements files&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (Locking dependencies, installing packages)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;virtualenvwrapper&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Doug Hellmann&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing virtual environments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Managing environments)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pipx&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Installing Python command-line tools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (Installing packages, editable installs)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Managing environments)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;conda&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Anaconda, Inc.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing environments and dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3 (Managing environments, installing things)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4 (Manual locking, packaging requires conda-build)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (pyproject.toml and PyPI)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing dependencies for apps&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3 (Managing environments, installing and locking)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Developing apps)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Poetry&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Sébastien Eustace et al.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging and managing dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (pyproject.toml, C extensions)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Flit&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging pure-Python projects&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Installing only flit packages)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Hatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging and managing dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (C extensions, locking dependencies)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;PDM&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Frost Ming&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging and managing dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (C extensions)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;details style="margin-bottom: 1rem"&gt;
&lt;summary style="background: rgba(0, 170, 221, 10%); padding: .25rem; border-radius: .25rem"&gt;Expand table with more details about support for each feature&lt;/summary&gt;
&lt;div style="font-size: 90%; margin-top: .5rem"&gt;&lt;table class="table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Tool&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F1 (Envs)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F2 (Install)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F3 (Apps)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F4 (Libraries)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F5 (Extensions)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F6 (Editable)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F7 (Lock)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F8 (pyproject.toml)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F9 (Upload)&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;setuptools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only if authoring the package, direct use not recommended&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Beta&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No (can build sdist)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Manually&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;venv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only creating environments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;wheel&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No (can build wheels)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Twine&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip-tools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;virtualenvwrapper&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pipx&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Sort of&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;conda&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes (from conda channels)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Develop (conda-build is a separate tool)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;With conda-build&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;With conda-build&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Manually&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only develop&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Poetry&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Sort of (custom build.py script)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes, but using custom fields&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Flit&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only if authoring the package&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Hatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;PDM&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;You should pay close attention to the Maintainer column in the table. The vast majority of them are maintained by PyPA, the Python Packaging Authority. Even more curiously, the two tools that have the most “Yes” values (Poetry and PDM) are not maintained by the PyPA, but instead other people completely independent of them and not participating in the working group. So, is the working group successful, if it cannot produce one fully-featured tool? Is the group successful if it has multiple projects with overlapping responsibilities? Should the group focus their efforts on standards like &lt;a class="reference external" href="https://peps.python.org/pep-0517/"&gt;PEP 517&lt;/a&gt;, which is a common API for packaging tools, and which also encourages the creation of even more incompatible and competing tools?&lt;/p&gt;
&lt;p&gt;Most importantly: which tool should a beginner use? The PyPA has a few guides and tutorials, one is &lt;a class="reference external" href="https://packaging.python.org/en/latest/tutorials/installing-packages/"&gt;using pip + venv&lt;/a&gt;, another is &lt;a class="reference external" href="https://packaging.python.org/en/latest/tutorials/managing-dependencies/"&gt;using pipenv&lt;/a&gt; (why would you still do that?), and &lt;a class="reference external" href="https://packaging.python.org/en/latest/tutorials/packaging-projects/"&gt;another tutorial&lt;/a&gt; that lets you pick between Hatchling (hatch’s build backend), setuptools, Flit, and PDM, without explaining the differences between them—and without using any environment tools, and without using Hatch’s/PDM’s build and PyPI upload features (instead opting to use &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; build&lt;/code&gt; and &lt;code class="docutils literal"&gt;twine&lt;/code&gt;). The concept of virtual environments can be very confusing for beginners, and managing virtual environments is difficult if everyone has incompatible opinions about it.&lt;/p&gt;
&lt;p&gt;It is also notable that &lt;a class="reference external" href="https://peps.python.org/pep-0020/"&gt;PEP 20&lt;/a&gt;, the Zen of Python, states this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python packaging definitely does not follow it &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. There are 14 ways, and none of them is obvious or the only good one. All in all, this is an unsalvageable mess. Why can’t Python pick one tool? What does the competition do? We’ll look at this in a minute. But first, let’s talk about the elephant in the room: Python virtual environments.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="does-python-really-need-virtual-environments"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-7" role="doc-backlink"&gt;Does Python really need virtual environments?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python relies on virtual environments for separation between projects. Virtual environments (aka virtualenvs or venvs) are folders with symlinks to a system-installed Python, and their own set of site-packages. There are a few problems with them:&lt;/p&gt;
&lt;section id="how-to-use-python-from-a-virtual-environment"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-8" role="doc-backlink"&gt;How to use Python from a virtual environment?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two ways to do this. The first one is to activate it, by running the activate shell script installed in the environment’s bin directory. Another is to run the python executable (or any other script in the bin directory) directly from the venv. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Activating venvs directly is more convenient for developers, but it also has some problems. Sometimes, activation fails to work, due to the shell caching the location of things in &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt;. Also, beginners are taught to &lt;code class="docutils literal"&gt;activate&lt;/code&gt; and run &lt;code class="docutils literal"&gt;python&lt;/code&gt;, which means they might be confused and try to use activate in scripts or cronjobs (but in those environments, you should not activate venvs, and instead use the Python executable directly). Virtual environment activation is more state you need to be aware of, and if you forget about it, or if it breaks, you might end up messing up your user-wide (or worse, system-wide) Python packages.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-are-system-pythons-and-virtual-environments-related"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-9" role="doc-backlink"&gt;How are (system) Pythons and virtual environments related?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The virtual environment depends very tightly on the (system/global/pyenv-installed) Python used to create it. This is good for disk-space reasons (clean virtual environments don’t take up very much space), but this also makes the environment more fragile. If the Python used to create the environment is removed, the virtual environment stops working. If you fully manage your own Python, then it’s probably not going to happen, but if you depend on a system Python, upgrading packages on your OS might end up replacing Python 3.10 with Python 3.11. Some distributions (e.g. Ubuntu) would only make a jump like this on a new distribution release (so you can plan ahead), some of them (e.g. Arch) are rolling-release and a regular system upgrade may include a new Python, whereas some (e.g. Homebrew) make it even worse by using paths that include the patch Python version (3.x.y), which cause virtual environments to break much more often.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-to-manage-virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-10" role="doc-backlink"&gt;How to manage virtual environments?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The original virtualenv tool, and its simplified standard library rewrite venv, allow you to put a virtual environment anywhere in the file system, as long as you have write privileges there. This has led to people and tools inventing their own standards. Virtualenvwrapper stores environments in a central location, and does not care about their contents. Pipenv and poetry allow you to choose (either a central location or the .venv directory in the project), and environments are tied to a project (they will use the project-specific environment if you’re in the project directory). Hatch stores environments in a central location, and it allows you to have multiple environments per project (but there is no option to share environments between projects).&lt;/p&gt;
&lt;p&gt;Brett Cannon has recently done &lt;a class="reference external" href="https://snarky.ca/classifying-python-virtual-environment-workflows/"&gt;a survey&lt;/a&gt;, and it has shown the community is split on their workflows: some people use a central location, some put them in the project directory, some people have multiple environments with different Python versions, some people reuse virtualenvs between projects… Everyone has different needs, and different opinions. For example, I use a central directory (~/virtualenvs) and reuse environments when working on Nikola (sharing the same environment between development and 4 Nikola sites). But on the other hand, when deploying web apps, the venv lives in the project folder, because this venv needs to be used by processes running as different users (me, root, or the service account for the web server, which might have interactive login disabled, or whose home directory may be set to something ephemeral).&lt;/p&gt;
&lt;p&gt;So: &lt;strong&gt;does Python need virtual environments?&lt;/strong&gt; Perhaps looking how other languages handle this problem can help us figure this out for Python?&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="how-everyone-else-is-doing-it"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-11" role="doc-backlink"&gt;How everyone else is doing it&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ll look at two ecosystems. We’ll start with &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#javascript-node-js-with-npm"&gt;JavaScript/Node.js (with npm)&lt;/a&gt;, and then we’ll look at the &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#c-net-with-dotnet-cli-msbuild"&gt;C#/.NET (with dotnet CLI/MSBuild)&lt;/a&gt; ecosystem for comparison. We’ll demonstrate a sample flow of making a project, installing dependencies in it, and running things. If you’re familiar with those ecosystems and want to skip the examples, continue with &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-is-node-better-than-python"&gt;How is Node better than Python?&lt;/a&gt; and &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#are-those-ecosystems-tools-perfect"&gt;Are those ecosystems’ tools perfect?&lt;/a&gt;. Otherwise, read on.&lt;/p&gt;
&lt;section id="javascript-node-js-with-npm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-12" role="doc-backlink"&gt;JavaScript/Node.js (with npm)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two tools for dealing with packages in the Node world, namely npm and Yarn. The npm CLI tool is shipped with Node, so we’ll focus on it.&lt;/p&gt;
&lt;p&gt;Let’s create a project:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_49f34cbf0a344caab7bc29223180c3c1-1" name="rest_code_49f34cbf0a344caab7bc29223180c3c1-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_49f34cbf0a344caab7bc29223180c3c1-1"&gt;&lt;/a&gt;$ mkdir mynpmproject
&lt;a id="rest_code_49f34cbf0a344caab7bc29223180c3c1-2" name="rest_code_49f34cbf0a344caab7bc29223180c3c1-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_49f34cbf0a344caab7bc29223180c3c1-2"&gt;&lt;/a&gt;$ cd mynpmproject
&lt;a id="rest_code_49f34cbf0a344caab7bc29223180c3c1-3" name="rest_code_49f34cbf0a344caab7bc29223180c3c1-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_49f34cbf0a344caab7bc29223180c3c1-3"&gt;&lt;/a&gt;$ npm init
&lt;a id="rest_code_49f34cbf0a344caab7bc29223180c3c1-4" name="rest_code_49f34cbf0a344caab7bc29223180c3c1-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_49f34cbf0a344caab7bc29223180c3c1-4"&gt;&lt;/a&gt;…answer a few questions…
&lt;a id="rest_code_49f34cbf0a344caab7bc29223180c3c1-5" name="rest_code_49f34cbf0a344caab7bc29223180c3c1-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_49f34cbf0a344caab7bc29223180c3c1-5"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_49f34cbf0a344caab7bc29223180c3c1-6" name="rest_code_49f34cbf0a344caab7bc29223180c3c1-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_49f34cbf0a344caab7bc29223180c3c1-6"&gt;&lt;/a&gt;package.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve got a package.json file, which has some metadata about our project (name, version, description, license). Let’s install a dependency:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-1" name="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-1"&gt;&lt;/a&gt;$ npm install --save is-even
&lt;a id="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-2" name="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-3" name="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-3"&gt;&lt;/a&gt;added 5 packages, and audited 6 packages in 2s
&lt;a id="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-4" name="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-5" name="rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_b31a26fc7109437dbcb4828a6f6fc7a2-5"&gt;&lt;/a&gt;found 0 vulnerabilities
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The mere existence of an &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; package is questionable; the fact that it includes four dependencies is yet another, and the fact that it depends on &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; is even worse. But this post isn’t about &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; or the Node ecosystem’s tendency to use tiny packages for everything (but I wrote one about this topic &lt;a class="reference external" href="https://chriswarrick.com/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/"&gt;before&lt;/a&gt;). Let’s look at what we have in the filesystem:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_bb9f3408eef44817b49824023d2cffe0-1" name="rest_code_bb9f3408eef44817b49824023d2cffe0-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_bb9f3408eef44817b49824023d2cffe0-1"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_bb9f3408eef44817b49824023d2cffe0-2" name="rest_code_bb9f3408eef44817b49824023d2cffe0-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_bb9f3408eef44817b49824023d2cffe0-2"&gt;&lt;/a&gt;node_modules/  package.json  package-lock.json
&lt;a id="rest_code_bb9f3408eef44817b49824023d2cffe0-3" name="rest_code_bb9f3408eef44817b49824023d2cffe0-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_bb9f3408eef44817b49824023d2cffe0-3"&gt;&lt;/a&gt;$ ls node_modules
&lt;a id="rest_code_bb9f3408eef44817b49824023d2cffe0-4" name="rest_code_bb9f3408eef44817b49824023d2cffe0-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_bb9f3408eef44817b49824023d2cffe0-4"&gt;&lt;/a&gt;is-buffer/  is-even/  is-number/  is-odd/  kind-of/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s also take a peek at the &lt;code class="docutils literal"&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code json"&gt;&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-1" name="rest_code_6b14c8d7984c43cca435a713e2130d10-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-2" name="rest_code_6b14c8d7984c43cca435a713e2130d10-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mynpmproject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-3" name="rest_code_6b14c8d7984c43cca435a713e2130d10-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-4" name="rest_code_6b14c8d7984c43cca435a713e2130d10-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-5" name="rest_code_6b14c8d7984c43cca435a713e2130d10-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-6" name="rest_code_6b14c8d7984c43cca435a713e2130d10-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-7" name="rest_code_6b14c8d7984c43cca435a713e2130d10-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-8" name="rest_code_6b14c8d7984c43cca435a713e2130d10-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-9" name="rest_code_6b14c8d7984c43cca435a713e2130d10-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-10" name="rest_code_6b14c8d7984c43cca435a713e2130d10-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-11" name="rest_code_6b14c8d7984c43cca435a713e2130d10-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-12" name="rest_code_6b14c8d7984c43cca435a713e2130d10-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"is-even"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.0"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-13" name="rest_code_6b14c8d7984c43cca435a713e2130d10-13" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_6b14c8d7984c43cca435a713e2130d10-14" name="rest_code_6b14c8d7984c43cca435a713e2130d10-14" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_6b14c8d7984c43cca435a713e2130d10-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code class="docutils literal"&gt;package.json&lt;/code&gt; file now lists the dependency, and we’ve also got a lock file (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;package-lock.json&lt;/span&gt;&lt;/code&gt;), which records all the dependency versions used for this install. If this file is kept in the repository, any future attempts to &lt;code class="docutils literal"&gt;npm install&lt;/code&gt; will use the dependency versions listed in this file, ensuring everything will work the same as it did originally (unless one of those packages were to get removed from the registry).&lt;/p&gt;
&lt;p&gt;Let’s try writing a trivial program using the module and try running it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-1" name="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-1"&gt;&lt;/a&gt;$ cat index.js
&lt;a id="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-2" name="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-2"&gt;&lt;/a&gt;var isEven = require('is-even');
&lt;a id="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-3" name="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-3"&gt;&lt;/a&gt;console.log(isEven(0));
&lt;a id="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-4" name="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-5" name="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-5"&gt;&lt;/a&gt;$ node index.js
&lt;a id="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-6" name="rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3be668e2bf9a4f6e9039a8b1c0bc2afe-6"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s try removing &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; to demonstrate how badly designed this package is:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-1" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-1"&gt;&lt;/a&gt;$ rm -rf node_modules/is-odd
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-2" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-2"&gt;&lt;/a&gt;$ node index.js
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-3" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-3"&gt;&lt;/a&gt;node:internal/modules/cjs/loader:998
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-4" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-4"&gt;&lt;/a&gt;  throw err;
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-5" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-5"&gt;&lt;/a&gt;  ^
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-6" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-7" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-7"&gt;&lt;/a&gt;Error: Cannot find module 'is-odd'
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-8" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-8"&gt;&lt;/a&gt;Require stack:
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-9" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-9"&gt;&lt;/a&gt;- /tmp/mynpmproject/node_modules/is-even/index.js
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-10" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-10"&gt;&lt;/a&gt;- /tmp/mynpmproject/index.js
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-11" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-11"&gt;&lt;/a&gt;    at Module._resolveFilename (node:internal/modules/cjs/loader:995:15)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-12" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-12"&gt;&lt;/a&gt;    at Module._load (node:internal/modules/cjs/loader:841:27)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-13" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-13" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-13"&gt;&lt;/a&gt;    at Module.require (node:internal/modules/cjs/loader:1061:19)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-14" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-14" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-14"&gt;&lt;/a&gt;    at require (node:internal/modules/cjs/helpers:103:18)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-15" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-15" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-15"&gt;&lt;/a&gt;    at Object.&amp;lt;anonymous&amp;gt; (/tmp/mynpmproject/node_modules/is-even/index.js:10:13)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-16" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-16" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-16"&gt;&lt;/a&gt;    at Module._compile (node:internal/modules/cjs/loader:1159:14)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-17" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-17" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-17"&gt;&lt;/a&gt;    at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-18" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-18" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-18"&gt;&lt;/a&gt;    at Module.load (node:internal/modules/cjs/loader:1037:32)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-19" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-19" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-19"&gt;&lt;/a&gt;    at Module._load (node:internal/modules/cjs/loader:878:12)
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-20" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-20" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-20"&gt;&lt;/a&gt;    at Module.require (node:internal/modules/cjs/loader:1061:19) {
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-21" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-21" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-21"&gt;&lt;/a&gt;  code: 'MODULE_NOT_FOUND',
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-22" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-22" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-22"&gt;&lt;/a&gt;  requireStack: [
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-23" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-23" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-23"&gt;&lt;/a&gt;    '/tmp/mynpmproject/node_modules/is-even/index.js',
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-24" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-24" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-24"&gt;&lt;/a&gt;    '/tmp/mynpmproject/index.js'
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-25" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-25" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-25"&gt;&lt;/a&gt;  ]
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-26" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-26" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-26"&gt;&lt;/a&gt;}
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-27" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-27" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_28b1b4fda4744b309cd4f3b26927277e-28" name="rest_code_28b1b4fda4744b309cd4f3b26927277e-28" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_28b1b4fda4744b309cd4f3b26927277e-28"&gt;&lt;/a&gt;Node.js v18.12.1
&lt;/pre&gt;&lt;/div&gt;
&lt;section id="how-is-node-better-than-python"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-13" role="doc-backlink"&gt;How is Node better than Python?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Badly designed packages aside, we can see an important difference from Python in that there is &lt;strong&gt;no virtual environment&lt;/strong&gt;, and all the packages live in the project directory. If we fix the &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; directory by running &lt;code class="docutils literal"&gt;npm install&lt;/code&gt;, we can see that I can run the script from somewhere else on the file system:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-1" name="rest_code_3a832ff55816406da4e3633dbf014140-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-1"&gt;&lt;/a&gt;$ pwd
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-2" name="rest_code_3a832ff55816406da4e3633dbf014140-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-2"&gt;&lt;/a&gt;/tmp/mynpmproject
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-3" name="rest_code_3a832ff55816406da4e3633dbf014140-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-3"&gt;&lt;/a&gt;$ npm install
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-4" name="rest_code_3a832ff55816406da4e3633dbf014140-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-5" name="rest_code_3a832ff55816406da4e3633dbf014140-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-5"&gt;&lt;/a&gt;added 1 package, and audited 6 packages in 436ms
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-6" name="rest_code_3a832ff55816406da4e3633dbf014140-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-7" name="rest_code_3a832ff55816406da4e3633dbf014140-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-7"&gt;&lt;/a&gt;found 0 vulnerabilities
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-8" name="rest_code_3a832ff55816406da4e3633dbf014140-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-8"&gt;&lt;/a&gt;$ node /tmp/mynpmproject/index.js
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-9" name="rest_code_3a832ff55816406da4e3633dbf014140-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-9"&gt;&lt;/a&gt;true
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-10" name="rest_code_3a832ff55816406da4e3633dbf014140-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-10"&gt;&lt;/a&gt;$ cd ~
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-11" name="rest_code_3a832ff55816406da4e3633dbf014140-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-11"&gt;&lt;/a&gt;$ node /tmp/mynpmproject/index.js
&lt;a id="rest_code_3a832ff55816406da4e3633dbf014140-12" name="rest_code_3a832ff55816406da4e3633dbf014140-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_3a832ff55816406da4e3633dbf014140-12"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;If you try to do that with a Python tool…&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If you’re using a manually managed venv, you need to remember to activate it, or to use the appropriate Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re using something fancier, it might be tied to the current working directory, and it may expect you to change into that directory, or to pass an argument pointing at that directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can also run my code as &lt;code class="docutils literal"&gt;root&lt;/code&gt;, and as an unprivileged &lt;code class="docutils literal"&gt;nginx&lt;/code&gt; user, without any special preparation (like telling pipenv/poetry to put their venv in the project directory, or running them as the other users):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-1" name="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_03f64aaaec3a4d5f921b82042ae1c33d-1"&gt;&lt;/a&gt;$ su -
&lt;a id="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-2" name="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_03f64aaaec3a4d5f921b82042ae1c33d-2"&gt;&lt;/a&gt;# node /tmp/mynpmproject/index.js
&lt;a id="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-3" name="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_03f64aaaec3a4d5f921b82042ae1c33d-3"&gt;&lt;/a&gt;true
&lt;a id="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-4" name="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_03f64aaaec3a4d5f921b82042ae1c33d-4"&gt;&lt;/a&gt;# sudo -u nginx node /tmp/mynpmproject/index.js
&lt;a id="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-5" name="rest_code_03f64aaaec3a4d5f921b82042ae1c33d-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_03f64aaaec3a4d5f921b82042ae1c33d-5"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;If you try to do that with a Python tool…&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If you’re using a manually managed venv, you can use its Python as another user (assuming it has the right permissions).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your tool puts the venv in the project directory, this will work too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your tool puts the venv in some weird place in your home folder, the other users will get their own venvs. The &lt;code class="docutils literal"&gt;uwsgi&lt;/code&gt; user on Fedora uses &lt;code class="docutils literal"&gt;/run/uwsgi&lt;/code&gt; as its home directory, and &lt;code class="docutils literal"&gt;/run&lt;/code&gt; is ephemeral (tmpfs), so a reboot forces you to reinstall things.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can even try to change the name of our project:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_e848bb84b4ef48b0abc4121c65effe95-1" name="rest_code_e848bb84b4ef48b0abc4121c65effe95-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e848bb84b4ef48b0abc4121c65effe95-1"&gt;&lt;/a&gt;$ cd /tmp
&lt;a id="rest_code_e848bb84b4ef48b0abc4121c65effe95-2" name="rest_code_e848bb84b4ef48b0abc4121c65effe95-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e848bb84b4ef48b0abc4121c65effe95-2"&gt;&lt;/a&gt;$ mv mynpmproject mynodeproject
&lt;a id="rest_code_e848bb84b4ef48b0abc4121c65effe95-3" name="rest_code_e848bb84b4ef48b0abc4121c65effe95-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e848bb84b4ef48b0abc4121c65effe95-3"&gt;&lt;/a&gt;$ node /tmp/mynodeproject/index.js
&lt;a id="rest_code_e848bb84b4ef48b0abc4121c65effe95-4" name="rest_code_e848bb84b4ef48b0abc4121c65effe95-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e848bb84b4ef48b0abc4121c65effe95-4"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;If you try to do that with a Python tool…&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If you’re using a manually managed venv, and it lives in a central directory, all is well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you or your tool places the venv in the project directory, the venv is now broken, and you need to recreate it (hope you have a recent &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your tool puts the venv in some weird place in your home folder, it may decide that this is a different project, which means it will recreate it, and you’ll have an unused virtual environment somewhere on your filesystem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-packaging-topics"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-14" role="doc-backlink"&gt;Other packaging topics&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Some packages may expose executable scripts (with the &lt;code class="docutils literal"&gt;bin&lt;/code&gt; property). Those can be run in three ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Installed globally using &lt;code class="docutils literal"&gt;npm install &lt;span class="pre"&gt;-g&lt;/span&gt;&lt;/code&gt;, which would put the script in a global location that’s likely in &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; (e.g. &lt;code class="docutils literal"&gt;/usr/local/bin&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installed locally using &lt;code class="docutils literal"&gt;npm install&lt;/code&gt;, and executed with the &lt;code class="docutils literal"&gt;npx&lt;/code&gt; tool or manually by running the script in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node_packages/.bin&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not installed at all, but executed using the &lt;code class="docutils literal"&gt;npx&lt;/code&gt; tool, which will install it into a cache and run it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, if we wanted to publish our thing, we can just run &lt;code class="docutils literal"&gt;npm publish&lt;/code&gt; (after logging in with &lt;code class="docutils literal"&gt;npm login&lt;/code&gt;).&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="c-net-with-dotnet-cli-msbuild"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-15" role="doc-backlink"&gt;C#/.NET (with dotnet CLI/MSBuild)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In modern .NET, the One True Tool is the dotnet CLI, which uses MSBuild for most of the heavy lifting. (In the classic .NET Framework, the duties were split between MSBuild and NuGet.exe, but let’s focus on the modern workflow.)&lt;/p&gt;
&lt;p&gt;Let’s create a project:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-1" name="rest_code_ceb08ebd569a4e668e0db2107e174557-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-1"&gt;&lt;/a&gt;$ mkdir mydotnetproject
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-2" name="rest_code_ceb08ebd569a4e668e0db2107e174557-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-2"&gt;&lt;/a&gt;$ cd mydotnetproject
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-3" name="rest_code_ceb08ebd569a4e668e0db2107e174557-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-3"&gt;&lt;/a&gt;$ dotnet new console
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-4" name="rest_code_ceb08ebd569a4e668e0db2107e174557-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-4"&gt;&lt;/a&gt;The template "Console App" was created successfully.
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-5" name="rest_code_ceb08ebd569a4e668e0db2107e174557-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-6" name="rest_code_ceb08ebd569a4e668e0db2107e174557-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-6"&gt;&lt;/a&gt;Processing post-creation actions...
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-7" name="rest_code_ceb08ebd569a4e668e0db2107e174557-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-7"&gt;&lt;/a&gt;Running 'dotnet restore' on /tmp/mydotnetproject/mydotnetproject.csproj...
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-8" name="rest_code_ceb08ebd569a4e668e0db2107e174557-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-8"&gt;&lt;/a&gt;  Determining projects to restore...
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-9" name="rest_code_ceb08ebd569a4e668e0db2107e174557-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-9"&gt;&lt;/a&gt;  Restored /tmp/mydotnetproject/mydotnetproject.csproj (in 92 ms).
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-10" name="rest_code_ceb08ebd569a4e668e0db2107e174557-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-10"&gt;&lt;/a&gt;Restore succeeded.
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-11" name="rest_code_ceb08ebd569a4e668e0db2107e174557-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-11"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_ceb08ebd569a4e668e0db2107e174557-12" name="rest_code_ceb08ebd569a4e668e0db2107e174557-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ceb08ebd569a4e668e0db2107e174557-12"&gt;&lt;/a&gt;mydotnetproject.csproj  obj/  Program.cs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get three things: a &lt;code class="docutils literal"&gt;mydotnetproject.csproj&lt;/code&gt; file, which defines a few properties of our project; &lt;code class="docutils literal"&gt;Program.cs&lt;/code&gt;, which is a hello world program, and &lt;code class="docutils literal"&gt;obj/&lt;/code&gt;, which contains a few files you don’t need to care about.&lt;/p&gt;
&lt;p&gt;Let’s try adding a dependency. For a pointless example, but slightly more reasonable than the JS one, we’ll use &lt;code class="docutils literal"&gt;AutoFixture&lt;/code&gt;, which brings in a dependency on &lt;code class="docutils literal"&gt;Fare&lt;/code&gt;. If we run &lt;code class="docutils literal"&gt;dotnet add package AutoFixture&lt;/code&gt;, we get some console output, and our &lt;code class="docutils literal"&gt;mydotnetproject.csproj&lt;/code&gt; now looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code xml"&gt;&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-1" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-2" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-3" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-3"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-4" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-4"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-5" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net6.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-6" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-6"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;ImplicitUsings&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/ImplicitUsings&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-7" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-7"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-8" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-8"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-9" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-10" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-10"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-11" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-11"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"AutoFixture"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.17.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-12" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-12"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-13" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-13" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_9d0a3fa102dc4e998af7530262f0722c-14" name="rest_code_9d0a3fa102dc4e998af7530262f0722c-14" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_9d0a3fa102dc4e998af7530262f0722c-14"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first &lt;code class="docutils literal"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; specifies what our project is (Exe = something you can run), specifies the target framework (.NET 6.0 &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;), and enables a few opt-in features of C#. The second &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; was inserted when we installed AutoFixture.&lt;/p&gt;
&lt;p&gt;We can now write a pointless program in C#. Here’s our new &lt;code class="docutils literal"&gt;Program.cs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-1" name="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-2" name="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-3" name="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-4" name="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-4"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-5" name="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-5"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-6" name="rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0c16b59880f44fb0a4ef3c2f3feadb1d-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Math is working"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Math is broken"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(We could just use C#’s/.NET’s built-in random number generator, AutoFixture is complete overkill here—it’s meant for auto-generating test data, with support for arbitrary classes and other data structures, and we’re just getting two random ints here. I’m using AutoFixture for this example, because it’s simple to use and demonstrate, and because it gets us a transitive dependency.)&lt;/p&gt;
&lt;p&gt;And now, we can run it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_2064269cd88e4ee4bfcc62c4b6034751-1" name="rest_code_2064269cd88e4ee4bfcc62c4b6034751-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2064269cd88e4ee4bfcc62c4b6034751-1"&gt;&lt;/a&gt;$ dotnet run
&lt;a id="rest_code_2064269cd88e4ee4bfcc62c4b6034751-2" name="rest_code_2064269cd88e4ee4bfcc62c4b6034751-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2064269cd88e4ee4bfcc62c4b6034751-2"&gt;&lt;/a&gt;Math is working
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want something that can be run outside of the project, and possibly without .NET installed on the system, we can use dotnet publish. The most basic scenario:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-1" name="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ad221997d9cf4eb98d9baf08cb4ec906-1"&gt;&lt;/a&gt;$ dotnet publish
&lt;a id="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-2" name="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ad221997d9cf4eb98d9baf08cb4ec906-2"&gt;&lt;/a&gt;$ ls bin/Debug/net6.0/publish
&lt;a id="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-3" name="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ad221997d9cf4eb98d9baf08cb4ec906-3"&gt;&lt;/a&gt;AutoFixture.dll*  Fare.dll*  mydotnetproject*  mydotnetproject.deps.json  mydotnetproject.dll  mydotnetproject.pdb  mydotnetproject.runtimeconfig.json
&lt;a id="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-4" name="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ad221997d9cf4eb98d9baf08cb4ec906-4"&gt;&lt;/a&gt;$ du -h bin/Debug/net6.0/publish
&lt;a id="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-5" name="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ad221997d9cf4eb98d9baf08cb4ec906-5"&gt;&lt;/a&gt;424K    bin/Debug/net6.0/publish
&lt;a id="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-6" name="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ad221997d9cf4eb98d9baf08cb4ec906-6"&gt;&lt;/a&gt;$ bin/Debug/net6.0/publish/mydotnetproject
&lt;a id="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-7" name="rest_code_ad221997d9cf4eb98d9baf08cb4ec906-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ad221997d9cf4eb98d9baf08cb4ec906-7"&gt;&lt;/a&gt;Math is working
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that we’ve got a few files related to our project, as well as &lt;code class="docutils literal"&gt;AutoFixture.dll&lt;/code&gt; and &lt;code class="docutils literal"&gt;Fare.dll&lt;/code&gt;, which are our dependencies (&lt;code class="docutils literal"&gt;Fare.dll&lt;/code&gt; is a dependency of &lt;code class="docutils literal"&gt;AutoFixture.dll&lt;/code&gt;). Now, let’s try to remove &lt;code class="docutils literal"&gt;AutoFixture.dll&lt;/code&gt; from the published distribution:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_199831d18273430986798ce2fb0425c4-1" name="rest_code_199831d18273430986798ce2fb0425c4-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_199831d18273430986798ce2fb0425c4-1"&gt;&lt;/a&gt;$ rm bin/Debug/net6.0/publish/AutoFixture.dll
&lt;a id="rest_code_199831d18273430986798ce2fb0425c4-2" name="rest_code_199831d18273430986798ce2fb0425c4-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_199831d18273430986798ce2fb0425c4-2"&gt;&lt;/a&gt;$ bin/Debug/net6.0/publish/mydotnetproject
&lt;a id="rest_code_199831d18273430986798ce2fb0425c4-3" name="rest_code_199831d18273430986798ce2fb0425c4-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_199831d18273430986798ce2fb0425c4-3"&gt;&lt;/a&gt;Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'AutoFixture, Version=4.17.0.0, Culture=neutral, PublicKeyToken=b24654c590009d4f'. The system cannot find the file specified.
&lt;a id="rest_code_199831d18273430986798ce2fb0425c4-4" name="rest_code_199831d18273430986798ce2fb0425c4-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_199831d18273430986798ce2fb0425c4-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_199831d18273430986798ce2fb0425c4-5" name="rest_code_199831d18273430986798ce2fb0425c4-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_199831d18273430986798ce2fb0425c4-5"&gt;&lt;/a&gt;File name: 'AutoFixture, Version=4.17.0.0, Culture=neutral, PublicKeyToken=b24654c590009d4f'
&lt;a id="rest_code_199831d18273430986798ce2fb0425c4-6" name="rest_code_199831d18273430986798ce2fb0425c4-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_199831d18273430986798ce2fb0425c4-6"&gt;&lt;/a&gt;[1]    45060 IOT instruction (core dumped)  bin/Debug/net6.0/publish/mydotnetproject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also try a more advanced scenario:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-1" name="rest_code_418ddd2cb6594228b5190399144ae085-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-1"&gt;&lt;/a&gt;$ rm -rf bin obj  # clean up, just in case
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-2" name="rest_code_418ddd2cb6594228b5190399144ae085-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-2"&gt;&lt;/a&gt;$ dotnet publish --sc -r linux-x64 -p:PublishSingleFile=true -o myoutput
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-3" name="rest_code_418ddd2cb6594228b5190399144ae085-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-3"&gt;&lt;/a&gt;Microsoft (R) Build Engine version 17.0.1+b177f8fa7 for .NET
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-4" name="rest_code_418ddd2cb6594228b5190399144ae085-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-4"&gt;&lt;/a&gt;Copyright (C) Microsoft Corporation. All rights reserved.
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-5" name="rest_code_418ddd2cb6594228b5190399144ae085-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-6" name="rest_code_418ddd2cb6594228b5190399144ae085-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-6"&gt;&lt;/a&gt;  Determining projects to restore...
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-7" name="rest_code_418ddd2cb6594228b5190399144ae085-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-7"&gt;&lt;/a&gt;  Restored /tmp/mydotnetproject/mydotnetproject.csproj (in 4.09 sec).
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-8" name="rest_code_418ddd2cb6594228b5190399144ae085-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-8"&gt;&lt;/a&gt;  mydotnetproject -&amp;gt; /tmp/mydotnetproject/bin/Debug/net6.0/linux-x64/mydotnetproject.dll
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-9" name="rest_code_418ddd2cb6594228b5190399144ae085-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-9"&gt;&lt;/a&gt;  mydotnetproject -&amp;gt; /tmp/mydotnetproject/myoutput/
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-10" name="rest_code_418ddd2cb6594228b5190399144ae085-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-10"&gt;&lt;/a&gt;$ ls myoutput
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-11" name="rest_code_418ddd2cb6594228b5190399144ae085-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-11"&gt;&lt;/a&gt;mydotnetproject*  mydotnetproject.pdb
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-12" name="rest_code_418ddd2cb6594228b5190399144ae085-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-12"&gt;&lt;/a&gt;$ myoutput/mydotnetproject
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-13" name="rest_code_418ddd2cb6594228b5190399144ae085-13" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-13"&gt;&lt;/a&gt;Math is working
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-14" name="rest_code_418ddd2cb6594228b5190399144ae085-14" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-14"&gt;&lt;/a&gt;$ du -h myoutput/*
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-15" name="rest_code_418ddd2cb6594228b5190399144ae085-15" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-15"&gt;&lt;/a&gt;62M     myoutput/mydotnetproject
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-16" name="rest_code_418ddd2cb6594228b5190399144ae085-16" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-16"&gt;&lt;/a&gt;12K     myoutput/mydotnetproject.pdb
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-17" name="rest_code_418ddd2cb6594228b5190399144ae085-17" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-17"&gt;&lt;/a&gt;$ file -k myoutput/mydotnetproject
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-18" name="rest_code_418ddd2cb6594228b5190399144ae085-18" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-18"&gt;&lt;/a&gt;myoutput/mydotnetproject: ELF 64-bit LSB pie executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=47637c667797007d777f4322729d89e7fa53a870, for GNU/Linux 2.6.32, stripped, too many notes (256)\012- data
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-19" name="rest_code_418ddd2cb6594228b5190399144ae085-19" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-19"&gt;&lt;/a&gt;$ file -k myoutput/mydotnetproject.pdb
&lt;a id="rest_code_418ddd2cb6594228b5190399144ae085-20" name="rest_code_418ddd2cb6594228b5190399144ae085-20" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_418ddd2cb6594228b5190399144ae085-20"&gt;&lt;/a&gt;myoutput/mydotnetproject.pdb: Microsoft Roslyn C# debugging symbols version 1.0\012- data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have a single output file that contains our program, its dependencies, and parts of the .NET runtime. We also get debugging symbols if we want to run our binary with a .NET debugger and see the associated source code. (There are ways to make the binary file smaller, and we can move most arguments of &lt;code class="docutils literal"&gt;dotnet publish&lt;/code&gt; to the .csproj file, but this post is about Python, not .NET, so I’m not going to focus on them too much.)&lt;/p&gt;
&lt;section id="how-is-net-better-than-python"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-16" role="doc-backlink"&gt;How is .NET better than Python?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I’m not going to bore you with the same demonstrations I’ve already shown when discussing &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#how-is-node-better-than-python"&gt;How is Node better than Python?&lt;/a&gt;, but:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;You can run built .NET projects as any user, from anywhere in the filesystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All you need to run your code is the output directory (publishing is optional, but useful to have a cleaner output, to simplify deployment, and to possibly enable compilation to native code).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you do publish in single-executable mode, you can just distribute the single executable, and your users don’t even need to have .NET installed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You do not need to manage environments, you do not need special tools to run your code, you do not need to think about the current working directory when running code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-packaging-topics-1"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-17" role="doc-backlink"&gt;Other packaging topics&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Locking dependencies is disabled by default, but if you add &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;RestorePackagesWithLockFile&amp;gt;true&amp;lt;/RestorePackagesWithLockFile&amp;gt;&lt;/span&gt;&lt;/code&gt; to the &lt;code class="docutils literal"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; in your &lt;code class="docutils literal"&gt;.csproj&lt;/code&gt; file, you can enable it (and get a &lt;code class="docutils literal"&gt;packages.lock.json&lt;/code&gt; file in output).&lt;/p&gt;
&lt;p&gt;Regarding &lt;a class="reference external" href="https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools"&gt;command line tools&lt;/a&gt;, .NET has support for those as well. They can be installed globally or locally, and may be accessed via $PATH or via the &lt;code class="docutils literal"&gt;dotnet&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;As for publishing your package to NuGet.org or to another repository, you might want to look at the &lt;a class="reference external" href="https://learn.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli"&gt;full docs&lt;/a&gt; for more details, but the short version is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Add some metadata to the &lt;code class="docutils literal"&gt;.csproj&lt;/code&gt; file (e.g. &lt;code class="docutils literal"&gt;PackageId&lt;/code&gt; and &lt;code class="docutils literal"&gt;Version&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;dotnet pack&lt;/code&gt; to get a &lt;code class="docutils literal"&gt;.nupkg&lt;/code&gt; file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;dotnet nuget push&lt;/code&gt; to upload the &lt;code class="docutils literal"&gt;.nupkg&lt;/code&gt; file (passing the file name and an API key)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once again, everything is done with a single &lt;code class="docutils literal"&gt;dotnet&lt;/code&gt; tool. The .NET IDEs (in particular, Visual Studio and Rider) do offer friendly GUI versions of many features. Some of those GUIs might be doings things slightly differently behind the scenes, but this is transparent to the user (and the backend is still MSBuild or a close derivative of it). I can take a CLI-created project, add a dependency from Rider, and publish an executable from VS, and everything will work the same. And perhaps XML files aren’t as cool as TOML, but they’re still easy to work with in this case.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="other-languages-and-ecosystems"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-18" role="doc-backlink"&gt;Other languages and ecosystems&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While we have explored two tools for two languages in depth, there are also other languages that deserve at least a mention. In the &lt;strong&gt;Java&lt;/strong&gt; world, the two most commonly used tools are Maven and Gradle. Both tools can be used to manage dependencies and build artifacts that can be executed or distributed further (things like JAR files). Other tools with support for building Java projects exist, but most people just pick one of the two. The community of &lt;strong&gt;Scala&lt;/strong&gt;, which is another JVM-based language, prefers sbt (which can be used for plain Java as well), but there are also Maven or Gradle users in that community. Finally, two new-ish languages which are quite popular in the recent times, &lt;strong&gt;Go&lt;/strong&gt; and &lt;strong&gt;Rust&lt;/strong&gt;, have first-party tooling integrated with the rest of the toolchain. The &lt;code class="docutils literal"&gt;go&lt;/code&gt; command-line tool can accomplish many build/dependency/packaging tasks. Rust’s &lt;code class="docutils literal"&gt;cargo&lt;/code&gt;, which ships with the standard distribution of Rust, handles dependencies, builds, running code and tests, as well as publishing your stuff to a registry.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="are-those-ecosystems-tools-perfect"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-19" role="doc-backlink"&gt;Are those ecosystems’ tools perfect?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not always, they have their deficiencies as well. In the Node ecosystem, packages may execute arbitrary code on install, which can be a security risk (there are some known examples, like a npm package &lt;a class="reference external" href="https://arstechnica.com/information-technology/2022/03/sabotage-code-added-to-popular-npm-package-wiped-files-in-russia-and-belarus/"&gt;wiping hard drives in Russia and Belarus&lt;/a&gt;, or another one &lt;a href="https://arstechnica.com/information-technology/2018/11/hacker-backdoors-widely-used-open-source-software-to-steal-bitcoin/"&gt;stealing &lt;s&gt;imaginary Internet money&lt;/s&gt; Bitcoin&lt;/a&gt;). Binary packages are not distributed on the npm registry directly, they’re either built with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node-gyp&lt;/span&gt;&lt;/code&gt;, or have prebuilt packages downloaded via &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node-pre-gyp&lt;/span&gt;&lt;/code&gt; (which is a third-party tool).&lt;/p&gt;
&lt;p&gt;In the .NET ecosystem, the tools also create an &lt;code class="docutils literal"&gt;obj&lt;/code&gt; directory with temporary files. Those temporary files are tied to the environment they’re running in, and while the tooling will usually re-create them if something changes, it can sometimes fail and leave you with confusing errors (which can generally be solved by removing the &lt;code class="docutils literal"&gt;bin&lt;/code&gt; and &lt;code class="docutils literal"&gt;obj&lt;/code&gt; directories). If a package depends on native code (which is not already available on the target OS as part of a shared library), it must include binary builds in the NuGet package for all the platforms it supports, as there is &lt;a class="reference external" href="https://github.com/NuGet/Home/issues/9631"&gt;no standard way&lt;/a&gt; to allow building something from source.&lt;/p&gt;
&lt;p&gt;You can also find deficiencies in the tools for the other languages mentioned. Some people think Maven is terrible because it uses XML and Gradle is the way to go, and others think Gradle’s use of a Groovy-based DSL makes things much harder than they need to be and prefer Maven instead.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="pep-582-the-future-of-python-packaging"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-20" role="doc-backlink"&gt;PEP 582: the future of Python packaging?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recall that when introducing PDM, I mentioned &lt;a class="reference external" href="https://peps.python.org/pep-0582/"&gt;PEP 582&lt;/a&gt;. This PEP defines a &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory. This directory would be taken into consideration by Python when looking for imports. It would behave similarly to &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;. Since there will be no symlinks to the system Python, it will resolve the issues with moving the virtual environment. Because the packages live in the project, there is no problem with sharing a project directory between multiple system users. It might even be possible for different computers (but with the same Python version and OS) to share the &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory (in some specific cases). The proposed &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory structure has &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;lib/python3.10/site-packages/&lt;/span&gt;&lt;/code&gt; subfolders, which still makes the “reinstall on Python upgrade” step mandatory, but it doesn’t apply to minor version upgrades, and if you’re dealing with a pure-Python dependency tree, &lt;code class="docutils literal"&gt;mv __pypackages__/lib/python3.10 __pypackages__/lib/python3.11&lt;/code&gt; might just work. This structure does make sense for binary dependencies, or for dependencies necessary only on older Python versions, as it allows you to use multiple Python versions with the same project directory. The PEP does not say anything about sharing &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; between projects, but you could probably solve that problem with symlinks (assuming the tooling doesn’t care if the directory is a symlink, and it shouldn’t care IMO).&lt;/p&gt;
&lt;p&gt;While PEP 582 is a great vision, and it would simplify many package-related workflows, it hasn’t seen much care from the powers-that-be. The PEP was proposed in May 2018, and there’s even &lt;a class="reference external" href="https://github.com/kushaldas/pep582/blob/main/pep582.py"&gt;a usable implementation&lt;/a&gt; that’s less than 50 lines of code, there &lt;a class="reference external" href="https://discuss.python.org/t/pep-582-python-local-packages-directory/963/"&gt;hasn’t been much progress&lt;/a&gt; on having it accepted and implemented in Python proper. However, PDM does not care, and it allows you to enable the future on your own machine.&lt;/p&gt;
&lt;section id="enabling-the-future-on-your-own-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-21" role="doc-backlink"&gt;Enabling the future on your own machine&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s enable the future on my own machine. That will require one simple command:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_ba3da8e637d64d89bcc6fe83732bf1aa-1" name="rest_code_ba3da8e637d64d89bcc6fe83732bf1aa-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_ba3da8e637d64d89bcc6fe83732bf1aa-1"&gt;&lt;/a&gt;$ eval "$(pdm --pep582)"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, we can initialize our project and install requests into it. Let’s try:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-1" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-1"&gt;&lt;/a&gt;$ mkdir mypdmproject
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-2" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-2"&gt;&lt;/a&gt;$ cd mypdmproject
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-3" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-3"&gt;&lt;/a&gt;$ pdm init
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-4" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-4"&gt;&lt;/a&gt;Creating a pyproject.toml for PDM...
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-5" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-5"&gt;&lt;/a&gt;Please enter the Python interpreter to use
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-6" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-6"&gt;&lt;/a&gt;0. /usr/bin/python (3.11)
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-7" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-7"&gt;&lt;/a&gt;1. /usr/bin/python3.11 (3.11)
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-8" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-8"&gt;&lt;/a&gt;2. /usr/bin/python2.7 (2.7)
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-9" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-9"&gt;&lt;/a&gt;Please select (0): 1
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-10" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-10"&gt;&lt;/a&gt;Using Python interpreter: /usr/bin/python3.11 (3.11)
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-11" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-11"&gt;&lt;/a&gt;Would you like to create a virtualenv with /usr/bin/python3.11? [y/n] (y): n
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-12" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-12"&gt;&lt;/a&gt;You are using the PEP 582 mode, no virtualenv is created.
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-13" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-13" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-13"&gt;&lt;/a&gt;For more info, please visit https://peps.python.org/pep-0582/
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-14" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-14" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-14"&gt;&lt;/a&gt;Is the project a library that will be uploaded to PyPI [y/n] (n): n
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-15" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-15" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-15"&gt;&lt;/a&gt;License(SPDX name) (MIT):
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-16" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-16" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-16"&gt;&lt;/a&gt;Author name (Chris Warrick):
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-17" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-17" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-17"&gt;&lt;/a&gt;Author email (…):
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-18" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-18" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-18"&gt;&lt;/a&gt;Python requires('*' to allow any) (&amp;gt;=3.11):
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-19" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-19" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-19"&gt;&lt;/a&gt;Changes are written to pyproject.toml.
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-20" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-20" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-20"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-21" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-21" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-21"&gt;&lt;/a&gt;pyproject.toml
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-22" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-22" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-22"&gt;&lt;/a&gt;$ pdm add requests
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-23" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-23" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-23"&gt;&lt;/a&gt;Adding packages to default dependencies: requests
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-24" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-24" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-24"&gt;&lt;/a&gt;🔒 Lock successful
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-25" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-25" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-25"&gt;&lt;/a&gt;Changes are written to pdm.lock.
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-26" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-26" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-26"&gt;&lt;/a&gt;Changes are written to pyproject.toml.
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-27" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-27" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-27"&gt;&lt;/a&gt;Synchronizing working set with lock file: 5 to add, 0 to update, 0 to remove
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-28" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-28" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-28"&gt;&lt;/a&gt;
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-29" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-29" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-29"&gt;&lt;/a&gt;  ✔ Install charset-normalizer 2.1.1 successful
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-30" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-30" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-30"&gt;&lt;/a&gt;  ✔ Install certifi 2022.12.7 successful
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-31" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-31" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-31"&gt;&lt;/a&gt;  ✔ Install idna 3.4 successful
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-32" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-32" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-32"&gt;&lt;/a&gt;  ✔ Install requests 2.28.1 successful
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-33" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-33" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-33"&gt;&lt;/a&gt;  ✔ Install urllib3 1.26.13 successful
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-34" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-34" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-34"&gt;&lt;/a&gt;
&lt;a id="rest_code_68d71f8e9c684173a571d6fd36c1237f-35" name="rest_code_68d71f8e9c684173a571d6fd36c1237f-35" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_68d71f8e9c684173a571d6fd36c1237f-35"&gt;&lt;/a&gt;🎉 All complete!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, so good (I’m not a fan of emoji in terminals, but that’s my only real complaint here.) Our &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code toml"&gt;&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-1" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[tool.pdm]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-2" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-3" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;[project]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-4" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-5" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-6" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-7" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-8" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Chris Warrick"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"…"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-9" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-10" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-11" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"requests&amp;gt;=2.28.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-12" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-13" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-13" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;requires-python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&amp;gt;=3.11"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c7a57a62023c4fea8e216a788b4ce196-14" name="rest_code_c7a57a62023c4fea8e216a788b4ce196-14" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c7a57a62023c4fea8e216a788b4ce196-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we try to look into our file structure, we have this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-1" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-1"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-2" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-2"&gt;&lt;/a&gt;pdm.lock  __pypackages__/  pyproject.toml
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-3" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-3"&gt;&lt;/a&gt;$ ls __pypackages__
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-4" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-4"&gt;&lt;/a&gt;3.11/
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-5" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-5"&gt;&lt;/a&gt;$ ls __pypackages__/3.11
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-6" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-6"&gt;&lt;/a&gt;bin/  include/  lib/
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-7" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-7"&gt;&lt;/a&gt;$ ls __pypackages__/3.11/lib
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-8" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-8"&gt;&lt;/a&gt;certifi/             certifi-2022.12.7.dist-info/
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-9" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-9"&gt;&lt;/a&gt;idna/                idna-3.4.dist-info/
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-10" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-10"&gt;&lt;/a&gt;charset_normalizer/  charset_normalizer-2.1.1.dist-info/
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-11" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-11"&gt;&lt;/a&gt;requests/            requests-2.28.1.dist-info/
&lt;a id="rest_code_66aa73abe4eb46a4a92d36f145999c43-12" name="rest_code_66aa73abe4eb46a4a92d36f145999c43-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_66aa73abe4eb46a4a92d36f145999c43-12"&gt;&lt;/a&gt;urllib3/             urllib3-1.26.13.dist-info/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll write a simple Python program (let’s call it &lt;code class="docutils literal"&gt;mypdmproject.py&lt;/code&gt;) that makes a HTTP request using &lt;code class="docutils literal"&gt;requests&lt;/code&gt;. It will also print &lt;code class="docutils literal"&gt;requests.__file__&lt;/code&gt; so we’re sure it isn’t using some random system copy: &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-1" name="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e9f7449f886f4a5e86fd025f46bd43e1-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;a id="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-2" name="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e9f7449f886f4a5e86fd025f46bd43e1-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-3" name="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e9f7449f886f4a5e86fd025f46bd43e1-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://chriswarrick.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-4" name="rest_code_e9f7449f886f4a5e86fd025f46bd43e1-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e9f7449f886f4a5e86fd025f46bd43e1-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_4d2611ec0f264210aef3441676923a08-1" name="rest_code_4d2611ec0f264210aef3441676923a08-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_4d2611ec0f264210aef3441676923a08-1"&gt;&lt;/a&gt;$ python mypdmproject.py
&lt;a id="rest_code_4d2611ec0f264210aef3441676923a08-2" name="rest_code_4d2611ec0f264210aef3441676923a08-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_4d2611ec0f264210aef3441676923a08-2"&gt;&lt;/a&gt;/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py
&lt;a id="rest_code_4d2611ec0f264210aef3441676923a08-3" name="rest_code_4d2611ec0f264210aef3441676923a08-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_4d2611ec0f264210aef3441676923a08-3"&gt;&lt;/a&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s finally try the tests we’ve done in the other languages. Requests is useless without urllib3, so let’s remove it &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-5" id="footnote-reference-5" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;5&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; and see how well it works.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-1" name="rest_code_0b734f1c5123417497946bcd69ec504b-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-1"&gt;&lt;/a&gt;$ rm -rf __pypackages__/3.11/lib/urllib3*
&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-2" name="rest_code_0b734f1c5123417497946bcd69ec504b-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-2"&gt;&lt;/a&gt;$ python mypdmproject.py
&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-3" name="rest_code_0b734f1c5123417497946bcd69ec504b-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-3"&gt;&lt;/a&gt;Traceback (most recent call last):
&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-4" name="rest_code_0b734f1c5123417497946bcd69ec504b-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-4"&gt;&lt;/a&gt;  File "/tmp/mypdmproject/mypdmproject.py", line 1, in &amp;lt;module&amp;gt;
&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-5" name="rest_code_0b734f1c5123417497946bcd69ec504b-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-5"&gt;&lt;/a&gt;    import requests
&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-6" name="rest_code_0b734f1c5123417497946bcd69ec504b-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-6"&gt;&lt;/a&gt;  File "/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py", line 43, in &amp;lt;module&amp;gt;
&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-7" name="rest_code_0b734f1c5123417497946bcd69ec504b-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-7"&gt;&lt;/a&gt;    import urllib3
&lt;a id="rest_code_0b734f1c5123417497946bcd69ec504b-8" name="rest_code_0b734f1c5123417497946bcd69ec504b-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_0b734f1c5123417497946bcd69ec504b-8"&gt;&lt;/a&gt;ModuleNotFoundError: No module named 'urllib3'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, can we try with a different directory? How about a different user?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-1" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-1" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-1"&gt;&lt;/a&gt;$ pdm install
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-2" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-2" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-2"&gt;&lt;/a&gt;Synchronizing working set with lock file: 1 to add, 0 to update, 0 to remove
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-3" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-3" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-4" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-4" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-4"&gt;&lt;/a&gt;  ✔ Install urllib3 1.26.13 successful
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-5" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-5" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-6" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-6" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-6"&gt;&lt;/a&gt;🎉 All complete!
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-7" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-7" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-7"&gt;&lt;/a&gt;$ pwd
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-8" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-8" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-8"&gt;&lt;/a&gt;/tmp/mypdmproject
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-9" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-9" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-9"&gt;&lt;/a&gt;$ cd ~
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-10" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-10" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-10"&gt;&lt;/a&gt;$ python /tmp/mypdmproject/mypdmproject.py
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-11" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-11" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-11"&gt;&lt;/a&gt;/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-12" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-12" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-12"&gt;&lt;/a&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-13" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-13" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-13"&gt;&lt;/a&gt;# su -s /bin/bash -c 'eval "$(/tmp/pdmvenv/bin/pdm --pep582 bash)"; python /tmp/mypdmproject/mypdmproject.py' - nobody
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-14" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-14" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-14"&gt;&lt;/a&gt;su: warning: cannot change directory to /nonexistent: No such file or directory
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-15" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-15" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-15"&gt;&lt;/a&gt;/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py
&lt;a id="rest_code_15b4b94272ef48978b9d8c834ecf60d5-16" name="rest_code_15b4b94272ef48978b9d8c834ecf60d5-16" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_15b4b94272ef48978b9d8c834ecf60d5-16"&gt;&lt;/a&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is looking pretty good. An independent project manages to do what the big Authority failed to do over so many years.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="is-this-the-perfect-thing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-22" role="doc-backlink"&gt;Is this the perfect thing?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Well, almost. There are two things that I have complaints about. The first one is the &lt;code class="docutils literal"&gt;pdm &lt;span class="pre"&gt;--pep582&lt;/span&gt;&lt;/code&gt; hack, but hopefully, the PyPA gets its act together and gets it into Python core soon. However, another important problem is the lack of separation from system site-packages. Avid readers of footnotes &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-6" id="footnote-reference-6" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;6&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; might have noticed I had to use a Docker container in my PDM experiments, because requests is very commonly found in system &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/code&gt; (especially when using system Pythons, which have requests because of some random package, or because it was unbundled from pip). &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-7" id="footnote-reference-7" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;7&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; This can break things in ways you don’t expect, because you might end up importing and depending on system-wide things, or mixing system-wide and local packages (if you don’t install an extra requirement, but those packages are present system-wide, then you might end up using an extra you haven’t asked for). This is an important problem—a good solution would be to disable system site-packages if a &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory is in use.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="pypa-versus-reality-packaging-survey-results-and-pypa-reaction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-23" role="doc-backlink"&gt;PyPA versus reality: packaging survey results and PyPA reaction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some time ago, the PSF ran a survey on packaging. Over 8000 people responded. &lt;a class="reference external" href="https://drive.google.com/file/d/1U5d5SiXLVkzDpS0i1dJIA4Hu5Qg704T9/view"&gt;The users have spoken:&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Most people think packaging is too complex.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An overwhelming majority prefers using just a single tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most people also think the existence of multiple tools is not beneficial for the Python packaging ecosystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtually everyone would prefer a clearly defined official workflow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Over 50% of responses think tools for other ecosystems are better at managing dependencies and installing packages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next step after this survey was for the packaging community to &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420"&gt;discuss its results&lt;/a&gt; and try to come up with a new packaging strategy. The first post from Shamika Mohanan (the Packaging Project Manager at PSF) that triggered the discussion also focused heavily on the users’ vision to unify packaging tools and to have One True Tool. This discussion was open to people involved with the packaging world; many participants of the discussion are involved with PyPA, and I don’t think I’ve seen a single comment from the people behind Poetry or PDM.&lt;/p&gt;
&lt;p&gt;Most of the thread ended up being discussion of binary extensions, including discussions of how to help tool proliferation by making it possible for tools that aren’t setuptools to build binary extensions. There was also a lot of focus on the scientific community’s issues with &lt;a class="reference external" href="https://pypackaging-native.github.io/"&gt;libraries with native code&lt;/a&gt;, heavily rooted in C/C++, and with attempts to replace Conda with new PyPA-approved tools. The “unified tool” for everyone else was mentioned in some posts, but they were certainly the minority.&lt;/p&gt;
&lt;p&gt;Some PyPA members talked about a UX analysis, and that they expect the unified tool to be re-exporting functionality from existing tools—which immediately raises the question: which tools should it export functionality from and why? Is &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;unified-packaging-tool&lt;/span&gt;&lt;/code&gt; going to bring in all fourteen? Is the fact that users are unhappy with what they have, and many of them would be happy with something lke npm/dotnet/cargo, not enough to determine the UX direction of the unified tool?&lt;/p&gt;
&lt;p&gt;Some of them are also against breaking existing workflows. Is a unified packaging tool going to work for every single user? Definitely not. But are there that many distinct basic workflows? If we ignore things that border on bikeshedding, such as src vs no-src, or venv locations, are there that many workflows to consider? Someone making a library and someone making an application do have different needs (e.g. with regard to publishing the package or acceptable dependency versions). Someone working with C extensions (or extensions using something like Cython) may have different needs, but their needs would usually be a superset of the needs of someone working on a pure-Python project. The scientific community might have more specialized needs, related to complex non-Python parts, but I am positive many of their points could be solved by the unified tool as well, even if it’s not by the time this tool reaches v1.0. It is also possible that the scientific community might prefer to stay with Conda, or with some evolution of it that brings it closer in line with the Unified Packaging Tool but also solves the scientists’ needs better than a tool also solving the non-scientists’ needs can.&lt;/p&gt;
&lt;p&gt;Then there’s a discussion about the existing tools and which one is the tool for the future. The maintainer of Hatch (Ofek Lev) says that &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/4"&gt;Hatch can provide the “unified UX”&lt;/a&gt;. But do the maintainers of Poetry or PDM agree? Poetry seems to be far more active than Hatch, going by GitHub issues, and it’s also worth noting that Hatch’s bus factor is 1 (with Ofek Lev responsible for 542 out of 576 commits to the master branch). &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/46"&gt;Russell Keith-Magee from BeeWare&lt;/a&gt; has highlighted the fact that tooling aside, the PyPA does a bad job at communicating things. Russell mentioned that one of PyPA tutorials now uses Hatch, but there is no way to know if the PyPA considers Hatch to be the future, are people supposed to migrate onto Hatch, and is Flit, another recent PyPA tool, now useless? Russell also makes good points about focusing efforts: should people focus on helping Hatch support extension modules (which, according to the Hatch maintainer, is the last scenario requiring setuptools; other participants note that you can already build native code without setuptools), or should people focus on improving setuptools compatibility with PEP 517?&lt;/p&gt;
&lt;p&gt;There were also some people stating their opinions on unifying things in various ways—and many of them are &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/136"&gt;against&lt;/a&gt; &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/137"&gt;unifying&lt;/a&gt; things. There were some voices of reason, like that of Russell Keith-Magee, or of &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/140"&gt;Simon Notley&lt;/a&gt;, who correctly noticed the thread fails to resolve problems of developers, who are confused about packaging, and don’t understand the different choices available and how they interoperate. Simon does agree that native dependencies are important and happen often in Python projects (and so do I), but the users who responded to the survey had something else in mind — as exemplified by the discussion opening post, mentioning the user expecting the simplicity of Rust’s cargo, and by the survey results. 70% of the survey respondents also use &lt;code class="docutils literal"&gt;npm&lt;/code&gt;, so many Python users have already seen the simpler workflows. The survey respondents were also asked to rank a few focus areas based on importance. “Making Python packaging better serve common use cases and workflows” was ranked first out of the provided options &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-8" id="footnote-reference-8" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;8&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; by 3248 participants. “Supporting a wider range of use cases (e.g. edge cases, etc.)” was ranked first by 379 people, and it was the least important in the minds of 2989 people.&lt;/p&gt;
&lt;p&gt;One more point that highlights the detachment of packaging folk from reality was mentioned by Anderson Bravalheri. To Anderson, a new unified tool would be &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/133"&gt;disrespectful of the work&lt;/a&gt; the maintainers of the existing tools put into maintaining them, and disrespectful of users who had to adapt to the packaging mess. This point is completely absurd. Was the replacement of MS-DOS/Windows 9x and Classic Mac OS with Windows NT and &lt;s&gt;Mac OS X&lt;/s&gt; &lt;s&gt;OS X&lt;/s&gt; macOS disrespectful to their respective designers, and the users who had to adapt to manually configuring minutiae, figuring out how to get all your software and hardware to run with weird limitations that were necessary in the 1980s, and the system crashing every once in a while? Was the replacement of horses with cars disrespectful to horses, and the people who were removing horse manure from the streets? Was the replacement of the Ford Model T with faster, safer, more efficient, and easier to use cars disrespectful to Henry Ford? Technology comes and goes, and sometimes, getting an improvement means we need to get rid of the old stuff. This applies outside of technology, too—you could come up with many examples of change in the world, which might have put some people out of power, but has greatly improved the lives of millions of people (the fall of communism in Europe, for example). Also, going back to the technology world of today, this sentiment suggests Anderson is far too attached to the software they write—is this a healthy approach?&lt;/p&gt;
&lt;p&gt;Nobody raised PEP 582 or the complexity of virtual environments. It might not be visible from the ivory towers of packaging tool maintainers, who have years of experience dealing with them, but it certainly does exist for regular people, for people who think the Python provided by their Linux distro is good enough, and especially for people for whom Python is their introduction to programming.&lt;/p&gt;
&lt;p&gt;I would like to once again highlight: that’s not just the opinion of one random rambling Chris. The opinion that Python packaging needs to be simplified and unified is held by about half of the 8774 people who took the survey.&lt;/p&gt;
&lt;p&gt;But here’s one more interesting thing: Discourse, the platform that the discussion was held on, shows the number of times a link was clicked. Granted, this count might not be always accurate, but if we assume it is, the link to the results summary was clicked only 14 times (as of 2023-01-14 21:20 UTC). The discussion has 28 participants and 2.2k views. If we believe the link click counter, &lt;strong&gt;half of the discussion participants did not even bother reading what the people think&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt="/images/python-packaging/discourse-link-clicks.png" class="align-center" src="https://chriswarrick.com/images/python-packaging/discourse-link-clicks.png"&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-24" role="doc-backlink"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python packaging is a mess, and it always has been. There are tons of tools, mostly incompatible with each other, and no tool can solve &lt;em&gt;all&lt;/em&gt; problems (especially no tool from the PyPA). PDM is really close to the ideal, since it can do away with the overhead of managing virtual environments—which is hopefully the future of Python packaging, or the 2010s of Node.js packaging. Perhaps in a few years, Python developers (and more importantly, Python learners!) will be able to just &lt;code class="docutils literal"&gt;pip install&lt;/code&gt; (or &lt;code class="docutils literal"&gt;pdm install&lt;/code&gt;?) what they need, without worrying about some “virtual environment” thing, that is separate but not quite from a system Python, and that is not a virtual machine. Python needs less tools, not more.&lt;/p&gt;
&lt;p&gt;Furthermore, I consider that the PyPA must be destroyed. The strategy discussion highlights the fact that they are unable to make Python packaging work the way the users expect. The PyPA should focus on producing one good tool, and on getting PEP 582 into Python. A good way to achieve this would be to put its resources behind PDM. The issues with native code and binary wheels are important, but plain-Python workflows, or workflows with straightforward binary dependencies, are much more common, and need to be improved. This improvement needs to happen now.&lt;/p&gt;
&lt;p&gt;Discuss in the comments below, on &lt;a class="reference external" href="https://news.ycombinator.com/item?id=34390585"&gt;Hacker News&lt;/a&gt;, or on &lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/10cnx5i/how_to_improve_python_packaging_or_why_fourteen/"&gt;Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-25" role="doc-backlink"&gt;Footnotes&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Funnily enough, the aphorism itself fails at “one obvious way to do it”. It is with dashes set in two different ways (with spaces after but not before, and with spaces before but not after), and none of them is the correct one (most English style guides prefer no spaces, but some allow spaces on both sides).&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Apologies for the slight Linux focus of this post; all the points I make apply on Windows as well, but perhaps with some slightly different names and commands.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;There’s a new major version of .NET every year, with the even-numbered versions being LTS. Those are far less revolutionary than the Python 2 → 3 transition, and after you jump on the modern .NET train, upgrading a project to the new major version is fairly simple (possibly even just bumping the version number).&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;And to be extra sure, I used a clean &lt;code class="docutils literal"&gt;python:latest&lt;/code&gt; Docker container, since requests is so commonly found in system site packages.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-5" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-5"&gt;5&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;A little caveat here, I also had to remove the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;dist-info&lt;/span&gt;&lt;/code&gt; folder, so that PDM would know it needs to be reinstalled.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-6" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-6"&gt;6&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Yes, that’s you!&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-7" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-7"&gt;7&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Also, why is there no good HTTP client library in Python’s standard library? Is the “standard library is where packages go to die” argument still relevant, if requests had four releases in 2022, and urllib3 had six, and most of the changes were minor?&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-8" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-8"&gt;8&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;I have removed the “Other” option, and shifted all options ranked below it by one place, since we don’t know what the other thing was and how it related to the options presented (the free-form responses were removed from the public results spreadsheet to preserve the users’ anonymity). In the event a respondent left some of the options without a number, the blank options were not considered neither first nor last.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2023/01/15/how-to-improve-python-packaging/</guid><pubDate>Sun, 15 Jan 2023 13:45:00 GMT</pubDate></item><item><title>Python Hackery: merging signatures of two Python functions</title><link>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Today’s blog post is going to contain fairly advanced Python hackery. We’ll
take two functions — one is a wrapper for the other, but also adds some
positional arguments.  And we’ll change the signature displayed everywhere from
the uninformative &lt;code class="docutils literal"&gt;f(new_arg, *args, **kwargs)&lt;/code&gt; to something more
appropriate.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This blog post was inspired by F4D3C0D3 on #python (freenode IRC). I also took
some inspiration from
Gynvael Coldwind’s classic &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;Python 101&lt;/a&gt; (April Fools) video. (Audio and some comments are in Polish, but even if you don’t speak the language, it’s still worth it to click through the time bar and see some (fairly unusual) magic happen.)&lt;/p&gt;
&lt;section id="starting-point"&gt;
&lt;h2&gt;Starting point&lt;/h2&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-1" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-2" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""This is old's docstring."""&lt;/span&gt;
&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-3" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-3" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-4" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-4" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-5" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-5" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-6" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-6" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-7" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-7" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_0284ff8a8ac643c383cc8403b1568db6-8" name="rest_code_0284ff8a8ac643c383cc8403b1568db6-8" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_0284ff8a8ac643c383cc8403b1568db6-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s test it.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code pycon"&gt;&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-1" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-2" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;a b&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-3" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-3" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-4" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-4" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;!a b&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-5" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-5" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' - '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-6" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-6" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;ab - !ab&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-7" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-7" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-7"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-8" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-8" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function old in module __main__:&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-9" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-9" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-10" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-10" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;old(foo, bar)&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-11" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-11" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;    This is old's docstring.&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-12" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-12" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-13" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-13" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-13"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-14" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-14" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-14"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function new in module __main__:&lt;/span&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-15" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-15" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-15"&gt;&lt;/a&gt;
&lt;a id="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-16" name="rest_code_b8a9ba9aeda648da8524d34d01bb9bae-16" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_b8a9ba9aeda648da8524d34d01bb9bae-16"&gt;&lt;/a&gt;&lt;span class="go"&gt;new(prefix, foo, *args, **kwargs)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last line is not exactly informative — it doesn’t tell us that we need to
pass &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as an argument.  Sure, you could define &lt;code class="docutils literal"&gt;new&lt;/code&gt; as just &lt;code class="docutils literal"&gt;(prefix, foo,
bar)&lt;/code&gt; — but that means every change to &lt;code class="docutils literal"&gt;old&lt;/code&gt; requires editing &lt;code class="docutils literal"&gt;new&lt;/code&gt; as
well. So, not ideal. Let’s try to fix this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-existing-infrastructure-functools-wraps"&gt;
&lt;h2&gt;The existing infrastructure: functools.wraps&lt;/h2&gt;
&lt;p&gt;First, let’s start with the basic facility Python already has.  The standard
library already comes with &lt;code class="docutils literal"&gt;functools.wraps&lt;/code&gt; and
&lt;code class="docutils literal"&gt;functools.update_wrapper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you’ve never heard of those two functions, here’s a crash course:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-1" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-2" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-2"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-3" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-3" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-4" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-4" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-4"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Inside wrapper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-5" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-5" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-6" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-6" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-7" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-7" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-8" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-8" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-9" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-9" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-10" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-10" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-10"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Square a number."""&lt;/span&gt;
&lt;a id="rest_code_ae98c76dcea0465a8e6c446d08780ea2-11" name="rest_code_ae98c76dcea0465a8e6c446d08780ea2-11" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_ae98c76dcea0465a8e6c446d08780ea2-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we try to inspect the &lt;code class="docutils literal"&gt;square&lt;/code&gt; function, we’ll see the original name, arguments,
annotations, and the docstring.  If we ran this code again, but with the
&lt;code class="docutils literal"&gt;@functools.wraps(f)&lt;/code&gt; line commented out, we would only see &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrapper(*args,&lt;/span&gt;
**kwargs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This approach gives us a hint of what we need to do.  However, if we apply
&lt;code class="docutils literal"&gt;wraps&lt;/code&gt; (or &lt;code class="docutils literal"&gt;update_wrapper&lt;/code&gt;, which is what &lt;code class="docutils literal"&gt;wraps&lt;/code&gt; ends up calling)
to our function, it will only have &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as arguments, and its
name will be displayed as &lt;code class="docutils literal"&gt;old&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, let’s take a look at &lt;a class="reference external" href="https://github.com/python/cpython/blob/4fe8dc68577f9e22aaf24db08fb6647277c42d4c/Lib/functools.py#L27-L79"&gt;functools.update_wrapper&lt;/a&gt;. What does it do? Two things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;copy some attributes from the old function to the new one
(&lt;code class="docutils literal"&gt;__module__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__name__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__qualname__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__doc__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update &lt;code class="docutils literal"&gt;__dict__&lt;/code&gt; of the new function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;wrapper.__wrapped__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we try to experiment with it — by changing the list of things to copy, for
example — we’ll find out that the annotations, the docstring, and the displayed name come from
the copied attributes, but the signature itself is apparently taken from &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Further investigation reveals this fact about &lt;code class="docutils literal"&gt;inspect.signature&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;inspect.signature(callable, *, follow_wrapped=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New in version 3.5:&lt;/em&gt; &lt;code class="docutils literal"&gt;follow_wrapped&lt;/code&gt; parameter. Pass &lt;code class="docutils literal"&gt;False&lt;/code&gt; to get a signature of callable specifically (&lt;code class="docutils literal"&gt;callable.__wrapped__&lt;/code&gt; will not be used to unwrap decorated callables.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so, this is our &lt;strong&gt;end goal:&lt;/strong&gt;&lt;/p&gt;
&lt;p class="lead"&gt;Craft a function with a specific signature (that merges &lt;code class="docutils literal"&gt;old&lt;/code&gt; and &lt;code class="docutils literal"&gt;new&lt;/code&gt;) and set it as &lt;code class="docutils literal"&gt;new.__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But first, we need to talk about parallel universes.&lt;/p&gt;
&lt;p&gt;Or actually, code objects.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="defining-a-function-programmatically"&gt;
&lt;h2&gt;Defining a function programmatically&lt;/h2&gt;
&lt;p&gt;Let’s try an experiment.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code pycon"&gt;&lt;a id="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-1" name="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a id="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-2" name="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__wrapped__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a id="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-3" name="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-3" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-4" name="rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-4" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_adc8668f3ae84f0eba5ead1730c9e0cd-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;foo(x, y)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, there are two ways to do this.  The first one would be to generate a string
with the signature and just use &lt;code class="docutils literal"&gt;eval&lt;/code&gt; to get a &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt; function. But
that would be cheating, and honestly, quite boring. (The inspect module could
help us with preparing the string.)  The second one? Create code objects
manually.&lt;/p&gt;
&lt;section id="code-objects"&gt;
&lt;h3&gt;Code objects&lt;/h3&gt;
&lt;p&gt;To create a function, we’ll need the &lt;code class="docutils literal"&gt;types&lt;/code&gt; module. &lt;code class="docutils literal"&gt;types.FunctionType&lt;/code&gt;
gives us a function, but it asks us for a code object. As the &lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html"&gt;docs&lt;/a&gt; state,
&lt;em&gt;Code objects represent byte-compiled executable Python code, or bytecode.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create one by
hand, we’ll need &lt;code class="docutils literal"&gt;types.CodeType&lt;/code&gt;. Well, not exactly by hand — we’ll end up doing a three-way merge between
&lt;code class="docutils literal"&gt;source&lt;/code&gt; (&lt;code class="docutils literal"&gt;old&lt;/code&gt;), &lt;code class="docutils literal"&gt;dest&lt;/code&gt; (&lt;code class="docutils literal"&gt;new&lt;/code&gt;) and &lt;code class="docutils literal"&gt;def &lt;span class="pre"&gt;_blank():&lt;/span&gt; pass&lt;/code&gt; (a function
that does nothing).&lt;/p&gt;
&lt;p&gt;Let’s look at the docstring for &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_337a301e294143e69b28f128ae4af0ae-1" name="rest_code_337a301e294143e69b28f128ae4af0ae-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_337a301e294143e69b28f128ae4af0ae-1"&gt;&lt;/a&gt;code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
&lt;a id="rest_code_337a301e294143e69b28f128ae4af0ae-2" name="rest_code_337a301e294143e69b28f128ae4af0ae-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_337a301e294143e69b28f128ae4af0ae-2"&gt;&lt;/a&gt;    constants, names, varnames, filename, name, firstlineno,
&lt;a id="rest_code_337a301e294143e69b28f128ae4af0ae-3" name="rest_code_337a301e294143e69b28f128ae4af0ae-3" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_337a301e294143e69b28f128ae4af0ae-3"&gt;&lt;/a&gt;    lnotab[, freevars[, cellvars]])
&lt;a id="rest_code_337a301e294143e69b28f128ae4af0ae-4" name="rest_code_337a301e294143e69b28f128ae4af0ae-4" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_337a301e294143e69b28f128ae4af0ae-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_337a301e294143e69b28f128ae4af0ae-5" name="rest_code_337a301e294143e69b28f128ae4af0ae-5" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_337a301e294143e69b28f128ae4af0ae-5"&gt;&lt;/a&gt;Create a code object.  Not for the faint of heart.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of the arguments end up being fields of a code objects (name starts with
&lt;code class="docutils literal"&gt;co_&lt;/code&gt;).  For each
function &lt;code class="docutils literal"&gt;f&lt;/code&gt;, its code object is &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt;. You can find the filename in
&lt;code class="docutils literal"&gt;f.__code__.co_filename&lt;/code&gt;, for example. The meaning of all fields can be
found in docs for the &lt;a class="reference external" href="https://docs.python.org/3/library/inspect.html#types-and-members"&gt;inspect module&lt;/a&gt;. We’ll be
interested in the following three fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;argcount&lt;/code&gt; — number of arguments (not including keyword only arguments, * or ** args)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;kwonlyargcount&lt;/code&gt; — number of keyword only arguments (not including ** arg)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;varnames&lt;/code&gt; — tuple of names of arguments and local variables&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all the other fields, we’ll copy them from the appropriate function (one of
the three).  We don’t expect anyone to call the wrapped function directly; as
long as &lt;code class="docutils literal"&gt;help&lt;/code&gt; and &lt;code class="docutils literal"&gt;inspect&lt;/code&gt; members don’t crash when they look into it,
we’re fine.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="everything-you-need-to-know-about-function-arguments"&gt;
&lt;h3&gt;Everything you need to know about function arguments&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code pycon"&gt;&lt;a id="rest_code_761d3ab6998c44179c08b4f307aa1930-1" name="rest_code_761d3ab6998c44179c08b4f307aa1930-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_761d3ab6998c44179c08b4f307aa1930-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a id="rest_code_761d3ab6998c44179c08b4f307aa1930-2" name="rest_code_761d3ab6998c44179c08b4f307aa1930-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_761d3ab6998c44179c08b4f307aa1930-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfullargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_761d3ab6998c44179c08b4f307aa1930-3" name="rest_code_761d3ab6998c44179c08b4f307aa1930-3" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_761d3ab6998c44179c08b4f307aa1930-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;FullArgSpec(args=['a', 'b', 'c'], varargs=None, varkw=None, defaults=(1, 2), kwonlyargs=['d'], kwonlydefaults={'d': 3}, annotations={})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A function signature has the following syntax:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Any positional (non-optional) arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable positional arguments (&lt;code class="docutils literal"&gt;*x&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varargs&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arguments with defaults (keyword-maybe arguments); their value is stored in &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt; left-to-right&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keyword-only arguments (after an asterisk); their values are stored in a dictionary.  Cannot be used if &lt;code class="docutils literal"&gt;varargs&lt;/code&gt; are defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable keyword arguments (&lt;code class="docutils literal"&gt;**y&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varkw&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’re going to make one assumption: we aren’t going to support a &lt;code class="docutils literal"&gt;source&lt;/code&gt;
function that uses variable arguments of any kind.  So, our final signature
will be composed like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That will be saved into &lt;code class="docutils literal"&gt;co_names&lt;/code&gt;.  The first two arguments are counts —
the first one is &lt;code class="docutils literal"&gt;len(1+2+3+4)&lt;/code&gt; and the other is &lt;code class="docutils literal"&gt;len(5+6)&lt;/code&gt;. The remaining
arguments to &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt; will be either safe minimal defaults, or things taken from
one of the three functions.&lt;/p&gt;
&lt;p&gt;We’ll also need to do one more thing: we must ensure &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt;,
&lt;code class="docutils literal"&gt;__kwdefaults__&lt;/code&gt;, and &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt; are all in the right places.
That’s also a fairly simple thing to do (it requires more tuple/dict merging).
And with that, we’re done.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="final-results"&gt;
&lt;h2&gt;Final results&lt;/h2&gt;
&lt;p&gt;Before I show you the code, let’s test it out:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_3dd66fad600a422bbb47e63534909ff7-1" name="rest_code_3dd66fad600a422bbb47e63534909ff7-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_3dd66fad600a422bbb47e63534909ff7-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# old defined as before&lt;/span&gt;
&lt;a id="rest_code_3dd66fad600a422bbb47e63534909ff7-2" name="rest_code_3dd66fad600a422bbb47e63534909ff7-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_3dd66fad600a422bbb47e63534909ff7-2"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@merge_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3dd66fad600a422bbb47e63534909ff7-3" name="rest_code_3dd66fad600a422bbb47e63534909ff7-3" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_3dd66fad600a422bbb47e63534909ff7-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_3dd66fad600a422bbb47e63534909ff7-4" name="rest_code_3dd66fad600a422bbb47e63534909ff7-4" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_3dd66fad600a422bbb47e63534909ff7-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the end result — &lt;code class="docutils literal"&gt;help(new)&lt;/code&gt; says:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_f5e4ec7fe3c94549bf3bbaddad384163-1" name="rest_code_f5e4ec7fe3c94549bf3bbaddad384163-1" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_f5e4ec7fe3c94549bf3bbaddad384163-1"&gt;&lt;/a&gt;new(prefix, foo, bar)
&lt;a id="rest_code_f5e4ec7fe3c94549bf3bbaddad384163-2" name="rest_code_f5e4ec7fe3c94549bf3bbaddad384163-2" href="https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/#rest_code_f5e4ec7fe3c94549bf3bbaddad384163-2"&gt;&lt;/a&gt;    This is old's docstring.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We did it!&lt;/p&gt;
&lt;p class="lead"&gt;The code is available on &lt;a class="reference external" href="https://github.com/Kwpolska/merge_args"&gt;GitHub&lt;/a&gt; and on &lt;a class="reference external" href="https://pypi.org/project/merge-args/"&gt;PyPI&lt;/a&gt; (&lt;code class="docutils literal"&gt;pip install merge_args&lt;/code&gt;).
There’s also an extensive test suite.&lt;/p&gt;
&lt;p&gt;PS. you might be interested in another related post of mine, in which I
reverse-engineer the compilation of a function: &lt;a class="reference external" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/"&gt;Gynvael’s Mission 11 (en): Python bytecode reverse-engineering&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</guid><pubDate>Thu, 20 Sep 2018 13:52:20 GMT</pubDate></item><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;section id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;The best tool that can be used to create virtual environments is the
&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; module, which is part of
the standard library since Python 3.3.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;venv&lt;/code&gt; is built into Python, and most users don’t need to install anything.
However, Debian/Ubuntu users will need to run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/code&gt; to make it work (due to Debian not installing some components
that &lt;code class="docutils literal"&gt;venv&lt;/code&gt; needs by default). &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The alternative (and original, and previously standard) virtual environment tool is &lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt;. It works with Python 2.7, and has a couple
extra fetures (that you generally won’t need). virtualenv can be installed with your system package manager, or &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Which one to use? Probably &lt;code class="docutils literal"&gt;venv&lt;/code&gt;. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;code class="docutils literal"&gt;env&lt;/code&gt;, you need to run the &lt;code class="docutils literal"&gt;venv&lt;/code&gt;
tool with the Python you want to use in that environment.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-1" name="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-1" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_5c73b2685dc14ff4b71d67cc31d6962d-1"&gt;&lt;/a&gt;Linux:   $ python3 -m venv env
&lt;a id="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-2" name="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-2" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_5c73b2685dc14ff4b71d67cc31d6962d-2"&gt;&lt;/a&gt;Windows: &amp;gt; py -m venv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or, if you’re using &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_04890efca875419885b83c3c44fe19fc-1" name="rest_code_04890efca875419885b83c3c44fe19fc-1" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_04890efca875419885b83c3c44fe19fc-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;a id="rest_code_04890efca875419885b83c3c44fe19fc-2" name="rest_code_04890efca875419885b83c3c44fe19fc-2" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_04890efca875419885b83c3c44fe19fc-2"&gt;&lt;/a&gt;&amp;gt; py -m virtualenv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, you will end up with a folder named &lt;code class="docutils literal"&gt;env&lt;/code&gt; that contains folders
named &lt;code class="docutils literal"&gt;bin&lt;/code&gt; (&lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; on Windows — contains executables and scripts
installed by packages, including
&lt;code class="docutils literal"&gt;python&lt;/code&gt;), &lt;code class="docutils literal"&gt;lib&lt;/code&gt; (contains code), and &lt;code class="docutils literal"&gt;include&lt;/code&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;setuptools&lt;/code&gt;, but &lt;code class="docutils literal"&gt;venv&lt;/code&gt; does not ship with
&lt;code class="docutils literal"&gt;wheel&lt;/code&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick: &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_4575b021c614415a875bd94b897298a1-1" name="rest_code_4575b021c614415a875bd94b897298a1-1" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_4575b021c614415a875bd94b897298a1-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a id="rest_code_4575b021c614415a875bd94b897298a1-2" name="rest_code_4575b021c614415a875bd94b897298a1-2" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_4575b021c614415a875bd94b897298a1-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;section id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Have one global place for them, like &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store them in each project’s directory, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option can be easier to manage, there are tools that can help manage
those (eg. &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, shell auto-activation scripts, or the
&lt;code class="docutils literal"&gt;workon&lt;/code&gt; functions described below).  The second option is equally easy to
work with, but comes with one caveat — you must add the venv directory to your
&lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; file (or &lt;code class="docutils literal"&gt;.git/info/exclude&lt;/code&gt; if you don’t want to commit
changes to &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;), since you don’t want it in your repository (it’s
binary bloat, and works only on your machine).&lt;/p&gt;
&lt;p&gt;If you pick the global virtual environment store option, you can use the following short
function (put it in &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt; / &lt;code class="docutils literal"&gt;.zshrc&lt;/code&gt; / your shell configuration file)
to get a simple way to activate an environment (by running &lt;code class="docutils literal"&gt;workon foo&lt;/code&gt;).
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; also has a &lt;code class="docutils literal"&gt;workon&lt;/code&gt; feature, although I don’t think
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; is really necessary and too helpful — the &lt;code class="docutils literal"&gt;workon&lt;/code&gt;
feature is handy though, and so here’s a way to do it without
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-1" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-1"&gt;&lt;/a&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/virtualenvs
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-2" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-3" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-3"&gt;&lt;/a&gt; &lt;span class="k"&gt;function&lt;/span&gt; workon &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-4" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-4"&gt;&lt;/a&gt;     &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-5" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-5"&gt;&lt;/a&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for PowerShell fans, here’s a &lt;code class="docutils literal"&gt;workon.ps1&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_7052ffc5748142f9af2644d3bef28fd2-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_7052ffc5748142f9af2644d3bef28fd2-1" name="rest_code_7052ffc5748142f9af2644d3bef28fd2-1"&gt;&lt;/a&gt; &lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$home\virtualenvs"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_7052ffc5748142f9af2644d3bef28fd2-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_7052ffc5748142f9af2644d3bef28fd2-2" name="rest_code_7052ffc5748142f9af2644d3bef28fd2-2"&gt;&lt;/a&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"$WORKON_HOME\&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="s2"&gt;\Scripts\activate.ps1"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for cmd.exe fans… you should switch to PowerShell, it’s a very nice and
friendly shell (though perhaps requiring some effort to learn how to be
productive with it).&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;activation (run &lt;code class="docutils literal"&gt;source env/bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;env\Scripts\activate&lt;/code&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly. (After installing
scripts, &lt;code class="docutils literal"&gt;hash &lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/code&gt; may be necessary on *nix to use them.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;executing &lt;code class="docutils literal"&gt;env/bin/python&lt;/code&gt; (&lt;code class="docutils literal"&gt;env\Scripts\python&lt;/code&gt;) and other scripts directly, as
activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is, and that
method is failsafe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-1" name="rest_code_a4573a228eed478fb587036b3bba59c7-1" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-2" name="rest_code_a4573a228eed478fb587036b3bba59c7-2" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-3" name="rest_code_a4573a228eed478fb587036b3bba59c7-3" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-4" name="rest_code_a4573a228eed478fb587036b3bba59c7-4" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-5" name="rest_code_a4573a228eed478fb587036b3bba59c7-5" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-6" name="rest_code_a4573a228eed478fb587036b3bba59c7-6" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-7" name="rest_code_a4573a228eed478fb587036b3bba59c7-7" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-8" name="rest_code_a4573a228eed478fb587036b3bba59c7-8" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-9" name="rest_code_a4573a228eed478fb587036b3bba59c7-9" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-10" name="rest_code_a4573a228eed478fb587036b3bba59c7-10" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-11" name="rest_code_a4573a228eed478fb587036b3bba59c7-11" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-12" name="rest_code_a4573a228eed478fb587036b3bba59c7-12" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-13" name="rest_code_a4573a228eed478fb587036b3bba59c7-13" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-14" name="rest_code_a4573a228eed478fb587036b3bba59c7-14" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-15" name="rest_code_a4573a228eed478fb587036b3bba59c7-15" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-16" name="rest_code_a4573a228eed478fb587036b3bba59c7-16" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-17" name="rest_code_a4573a228eed478fb587036b3bba59c7-17" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-17"&gt;&lt;/a&gt;## Windows, updating pip/setuptools/wheel ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-18" name="rest_code_a4573a228eed478fb587036b3bba59c7-18" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-18"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\python -m pip install -U pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt;, calling it as
&lt;code class="docutils literal"&gt;./manage.py&lt;/code&gt; requires activation, or you can run
&lt;code class="docutils literal"&gt;venv/bin/python manage.py&lt;/code&gt;.)&lt;/p&gt;
&lt;section id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option of &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt; does not work and is deprecated.) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-1" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-1" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-2" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-2" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-3" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-3" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-4" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-4" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;p&gt;To manage those &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files in a more orgnized yet still simple
way, you might be interested in &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;section id="im-using-virtualenv-do-i-need-to-install-it-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;I’m using virtualenv. Do I need to install it for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;code class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/code&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful. (The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is tied to the Python version it’s
installed in.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;code class="docutils literal"&gt;sudo pip&lt;/code&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider using &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; instead.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The thing you’re actually installing is &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; if you want to upgrade the package manager itself.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes (I’m looking at you Homebrew) after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item><item><title>Pipenv: promises a lot, delivers very little</title><link>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Pipenv is a Python packaging tool that does one thing reasonably well — application dependency management. However, it is also plagued by issues, limitations and a break-neck development process. In the past, Pipenv’s promotional material was highly misleading as to its purpose and backers.&lt;/p&gt;
&lt;p&gt;In this post, I will explore the problems with Pipenv. Was it really
recommended by Python.org? Can everyone — or at least, the vast majority
of people — benefit from it?&lt;/p&gt;
&lt;p&gt;(This post has been updated in February 2020 and May 2020 to reflect the
current state of Pipenv.)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;nav class="contents alert alert-primary" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#a-2020-update-updated" id="toc-entry-1"&gt;A 2020 update (updated)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#officially-recommended-tool-or-how-we-got-here" id="toc-entry-2"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-does" id="toc-entry-3"&gt;What pipenv does&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#application-dependencies" id="toc-entry-4"&gt;Application dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly" id="toc-entry-5"&gt;Running scripts (badly)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#finishing-it-all-up" id="toc-entry-6"&gt;Finishing it all up&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-doesnt-do" id="toc-entry-7"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#setup-py-source-distributions-and-wheels" id="toc-entry-8"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#working-outside-of-the-project-root" id="toc-entry-9"&gt;Working outside of the project root&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#nikola" id="toc-entry-10"&gt;Nikola&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-part-where-i-try-to-measure-times" id="toc-entry-11"&gt;The part where I try to measure times&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#alternative-tools" id="toc-entry-12"&gt;Alternative tools&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-tools-locking-and-hashing-and-that-is-all" id="toc-entry-13"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#poetry-better-but-still-not-convincing" id="toc-entry-14"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-is-here-to-stay" id="toc-entry-15"&gt;Pip is here to stay!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv" id="toc-entry-16"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#conclusion" id="toc-entry-17"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="a-2020-update-updated"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-1" role="doc-backlink"&gt;A 2020 update (updated)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This blog post was written in 2018, and it’s still pretty accurate when it
comes to the criticisms of Pipenv, but something else happened since then.&lt;/p&gt;
&lt;p class="lead"&gt;No release was made between November 2018 and May 2020. Pipenv was effectively
dead for 1.5 years, and the state of Pipenv maintenance is alarming.&lt;/p&gt;
&lt;p&gt;A release of Pipenv was made in late 2018 (aptly named v2018.11.26). But then,
there was silence. New commits were made (on the order of 600-700 by the end of
the year). People asked for new releases, in more or less strong words, &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/3742"&gt;in May
2019&lt;/a&gt;, then &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/3978"&gt;in October&lt;/a&gt;, and again &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/4058"&gt;in December&lt;/a&gt;. Many people — including yours
truly, in this post — considered Pipenv dead. On 13th December 2019, the current
maintainer claimed &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/4058#issuecomment-565550646"&gt;a new release is almost finished&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pipenv 2019/2020 was vaporware for five months. Not much progress was made since the
December post until March 2020, when an issue from 2018 was renamed the &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/3369"&gt;March 2020
Release Tracking Issue&lt;/a&gt;. Some
progress was happening, and many release dates were given, but delays stacked
up. March became April. The first beta release was promised by 21st April, it
was delayed until the 29th. The final release was scheduled for a week from
that, but it didn’t happen. Finally, Beta 2 came out on 20th May 2020, and the
final release landed as v2020.5.28.&lt;/p&gt;
&lt;p&gt;If you read further into the post, you’ll encounter a chapter titled &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv"&gt;The
break-neck pace of Pipenv&lt;/a&gt;. Am I being a hypocrite right now? No, not at all.
Projects that are being depended on, such as a package manager, should have
clear policies about how they’re maintained. A new release when the maintainer
feels like adding a feature is too often. A new release every 1.5 years is not
often enough. And silence from maintainers, when faced with questions about
releases, is simply unacceptable.  Pip, for example, has updates every few
months in a fairly stable pace (with the exception of emergency bugfix
releases), and pip has years of development behind it, unlike the fairly new
Pipenv.&lt;/p&gt;
&lt;p&gt;And even if the May release was successful, you can’t be sure about any future
releases, and what will happen with Pipenv. At the same time, Pipenv isn’t a
good tool, as this post tries to explain — those criticisms are still valid,
since they are at the core of what Pipenv is. Instead, perhaps consider using
&lt;strong&gt;pip-tools&lt;/strong&gt; for locking dependencies? It does one thing, and one thing well.
It doesn’t enforce any specific structures on users, and supports any workflow
you have. (If you don’t need to lock dependencies, &lt;strong&gt;pip + venv&lt;/strong&gt; will
suffice.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="officially-recommended-tool-or-how-we-got-here"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-2" role="doc-backlink"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pipenv’s README used to have a version of the above line in their README for
many months: it was added on  &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6e06fc451767a57e6fccb828c74a1412f6cef687"&gt;2017-08-31&lt;/a&gt; and eventually disappeared on &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/47debed9a1c2a3649bef4d59a3f1cf01bf059522"&gt;2018-05-19&lt;/a&gt;. For a short while (2018-05-16), it was clarified (&lt;em&gt;managing application dependencies&lt;/em&gt;, and &lt;em&gt;PyPA&lt;/em&gt; instead of &lt;em&gt;Python.org&lt;/em&gt;), and for about 15 minutes, the tagline called Pipenv &lt;em&gt;the world’s worst&lt;/em&gt; or &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6d77e4a0551528d5d72d81e8a15da4722ad82f26"&gt;something&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/1c956d37e6ad20babdb5021610b2ed2c9c4203f2"&gt;along&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/e3c72e167d21b921bd3bd89d4217b04628919bb2"&gt;these&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/fe78628903948013e8687d1a3be9fd4da2b6bd3d"&gt;lines&lt;/a&gt; (this coming from the maintainer).&lt;/p&gt;
&lt;p&gt;The README tagline claimed that Pipenv is the be-all, end-all of Python
packaging. The problem is: it isn’t that. There are some use cases that benefit
from Pipenv, but for many others, trying to use that tool will only lead to
frustration. We will explore this issue later.&lt;/p&gt;
&lt;p&gt;Another issue with this tagline was the &lt;em&gt;Python.org&lt;/em&gt; and &lt;em&gt;official&lt;/em&gt; parts. The
thing that made it “official” was a &lt;a class="reference external" href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;short tutorial&lt;/a&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; on packaging.python.org,
which is the PyPA’s packaging user guide. Also of note is the &lt;em&gt;Python.org&lt;/em&gt;
domain used. It makes it sound as if Pipenv was endorsed by the Python core
team. PyPA (Python Packaging Authority) is a separate organization — they are
responsible for the packaging parts (including pypi.org, setuptools, pip,
wheel, virtualenv, etc.) of Python. This made the endorsement misleading. Of
course, PyPA is a valued part of the Python world; an endorsement by the core
team — say, &lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html"&gt;inclusion in official Python distributions&lt;/a&gt; — is something far more
important.&lt;/p&gt;
&lt;p&gt;This tagline has led to many discussions and flamewars, perhaps with &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/"&gt;this
Reddit thread from May&lt;/a&gt; being the most heated and most important. The change
was the direct result of this Reddit thread. I recommend reading this thread in
full.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-pipenv-does"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-3" role="doc-backlink"&gt;What pipenv does&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve already learned that Pipenv is used to &lt;em&gt;manage application dependencies&lt;/em&gt;.
Let’s learn what that term really means.&lt;/p&gt;
&lt;section id="application-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-4" role="doc-backlink"&gt;Application dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is an example use case for Pipenv:
I’m working on a website based on Django.  I create &lt;code class="docutils literal"&gt;~/git/website&lt;/code&gt; and run
&lt;code class="docutils literal"&gt;pipenv install Django&lt;/code&gt; in that directory.  Pipenv:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;automatically creates a virtualenv somewhere in my home directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;writes a Pipfile, which lists Django as my dependency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;installs Django using pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;proceeds to write &lt;code class="docutils literal"&gt;Pipfile.lock&lt;/code&gt;, which stores the exact version and source file hash &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; of each package installed (including &lt;code class="docutils literal"&gt;pytz&lt;/code&gt;, Django’s dependency).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part of the process was the most time consuming. At one point, while
locking the dependency versions, Pipenv hangs for 46 seconds. This is one of
Pipenv’s notable issues: &lt;strong&gt;it’s slow.&lt;/strong&gt; Of course, this isn’t the only one,
but it defintely doesn’t help. Losing 46 seconds isn’t much, but when we get to
the longer waits in the timing test section later, we’ll see something that
could easily discourage users from using a package.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="running-scripts-badly"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-5" role="doc-backlink"&gt;Running scripts (badly)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But let’s continue with our workflow. &lt;code class="docutils literal"&gt;pipenv run &lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject
foobanizer&lt;/code&gt; is what I must use now, which is rather unwieldy to type, and
requires running pipenv even for the smallest things. (The &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt; script
has &lt;code class="docutils literal"&gt;/usr/bin/env python&lt;/code&gt; in its shebang.) I can run &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; to get
a new shell which runs the &lt;code class="docutils literal"&gt;activate&lt;/code&gt; script by default, giving you the worst
of both worlds when it comes to virtualenv activation: the unwieldiness of a
new shell, and the activate script, which the proponents of the shell spawning
dislike.&lt;/p&gt;
&lt;p&gt;Using &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; means spawning a new subshell, executing the shell
startup scripts (eg. &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt;), and requiring you to exit with &lt;code class="docutils literal"&gt;exit&lt;/code&gt; or
^D. If you type &lt;code class="docutils literal"&gt;deactivate&lt;/code&gt;, you are working with an extra shell, but now
outside of the virtualenv. Or you can use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--fancy&lt;/span&gt;&lt;/code&gt; mode that manipulates
&lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; before launching the subshell, but it requires a specific shell
configuration, in which &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; is not overridden in non-login shells — and
also often changing the config of your terminal emulator to run a login shell,
as many of the Linux terminals don’t do it.&lt;/p&gt;
&lt;p&gt;Now, why does all this happen? Because a command cannot manipulate the
environment of the shell it spawns. This means that Pipenv must pretend what it
does is a reasonable thing instead of a workaround. This can be solved with
manual activation using &lt;code class="docutils literal"&gt;source $(pipenv &lt;span class="pre"&gt;--venv)/bin/activate&lt;/span&gt;&lt;/code&gt; (can be made
into a neat alias), or shell wrappers (similar to what virtualenvwrapper does).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="finishing-it-all-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-6" role="doc-backlink"&gt;Finishing it all up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Anyway, I want a blog on my site. I want to write them in Markdown syntax, so I
run &lt;code class="docutils literal"&gt;pipenv install Markdown&lt;/code&gt;, and a few long seconds later, it’s added to
both Pipfiles.  Another thing I can do is &lt;code class="docutils literal"&gt;pipenv install &lt;span class="pre"&gt;--dev&lt;/span&gt; ipython&lt;/code&gt; and
get a handy shell for tinkering, but it will be marked as a development
dependency — so, not installed in production. That last part is an important
advantage of using Pipenv.&lt;/p&gt;
&lt;p&gt;When I’m done working on my website, I commit both Pipfiles to my git
repository, and push it to the remote server. Then I can clone it to, say,
&lt;code class="docutils literal"&gt;/srv/website&lt;/code&gt;. Now I can just &lt;code class="docutils literal"&gt;pipenv install&lt;/code&gt; to get all the production
packages installed (but not the development ones — Django, pytz, Markdown will
be installed, but IPython and all its million dependencies won’t). There’s just
one caveat: by default, the virtualenv will still be created in the current
user’s home directory. This is a problem in this case, since it needs to be
accessible by &lt;a class="reference external" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/"&gt;nginx and uWSGI&lt;/a&gt;, which do not have access to my (or root’s)
home directory, and don’t have a home directory of their own.  This can be
solved with &lt;code class="docutils literal"&gt;export PIPENV_VENV_IN_PROJECT=1&lt;/code&gt;. But note that I will now need
to export this environment variable every time I work with the app in &lt;code class="docutils literal"&gt;/srv&lt;/code&gt;
via Pipenv. The tool supports loading &lt;code class="docutils literal"&gt;.env&lt;/code&gt; files, &lt;strong&gt;but&lt;/strong&gt; only when
running &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; and &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;. You can’t use it to configure
Pipenv. And to run my app with nginx/uWSGI, I will need to know the exact virtualenv
path anyway, since I can’t use &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt; as part of uWSGI configuration.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-pipenv-doesnt-do"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-7" role="doc-backlink"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The workflow I mentioned above looks pretty reasonable, right? There are some
deficiencies, but other than that, it seems to work well. The main issue with
Pipenv is: &lt;strong&gt;it works with one workflow, and one workflow only.&lt;/strong&gt; Try to do
anything else, and you end up facing multiple obstacles.&lt;/p&gt;
&lt;section id="setup-py-source-distributions-and-wheels"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-8" role="doc-backlink"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pipenv only concerns itself with managing dependencies. &lt;strong&gt;It isn’t a packaging
tool.&lt;/strong&gt; If you want your thing up on PyPI, Pipenv won’t help you with anything.
You still need to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; with &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;, because the
Pipfile format only specifies the dependencies and runtime requirements (Python
version), there is no place in it for the package name, and Pipenv does not
mandate/expect you to install your project. It can come in handy to manage the
development environment (as a &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; replacement, or something
used to write said file), but if your project has a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;, you still
need to manually manage &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;. Pipenv can’t create wheels on its
own either. And &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; is going to be a lot faster than Pipenv ever
will be.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="working-outside-of-the-project-root"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-9" role="doc-backlink"&gt;Working outside of the project root&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another issue with Pipenv is the use of the working directory to select
the virtual environment. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; Let’s say I’m a library author.  A user of my &lt;code class="docutils literal"&gt;foobar&lt;/code&gt;
library has just reported a bug and attached a &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; file that lets me
reproduce the issue. I download that file to &lt;code class="docutils literal"&gt;~/Downloads&lt;/code&gt; on my filesystem.
With plain old virtualenv, I can easily confirm the reproduction in a spare
shell with:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code shell"&gt;&lt;a id="rest_code_79d05029b31447828191ea0781847cbf-1" name="rest_code_79d05029b31447828191ea0781847cbf-1" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_79d05029b31447828191ea0781847cbf-1"&gt;&lt;/a&gt;$ ~/virtualenvs/foobar/bin/python ~/Downloads/repro.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then I can launch my fancy IDE to fix the bug.  I don’t have to &lt;code class="docutils literal"&gt;cd&lt;/code&gt; into
the project. But with Pipenv, I can’t really do that.  If I put the virtualenv
in &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; with the command line option, I can type
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv/bin/python&lt;/span&gt; ~/Downloads/repro.py&lt;/code&gt;. If I use the
centralized directory + hashes thing, Tab completion becomes mandatory, if I
haven’t memorized the hash.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code shell"&gt;&lt;a id="rest_code_5180a2536524463fb61045f858161009-1" name="rest_code_5180a2536524463fb61045f858161009-1" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_5180a2536524463fb61045f858161009-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a id="rest_code_5180a2536524463fb61045f858161009-2" name="rest_code_5180a2536524463fb61045f858161009-2" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_5180a2536524463fb61045f858161009-2"&gt;&lt;/a&gt;$ pipenv run python ~/Downloads/repro.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What if I had two &lt;code class="docutils literal"&gt;.py&lt;/code&gt; files, or &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; otherwise depended on being in
the current working directory?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code shell"&gt;&lt;a id="rest_code_48548daf585c44e2ae3bda64c591062d-1" name="rest_code_48548daf585c44e2ae3bda64c591062d-1" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_48548daf585c44e2ae3bda64c591062d-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a id="rest_code_48548daf585c44e2ae3bda64c591062d-2" name="rest_code_48548daf585c44e2ae3bda64c591062d-2" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_48548daf585c44e2ae3bda64c591062d-2"&gt;&lt;/a&gt;$ pipenv shell
&lt;a id="rest_code_48548daf585c44e2ae3bda64c591062d-3" name="rest_code_48548daf585c44e2ae3bda64c591062d-3" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_48548daf585c44e2ae3bda64c591062d-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a id="rest_code_48548daf585c44e2ae3bda64c591062d-4" name="rest_code_48548daf585c44e2ae3bda64c591062d-4" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_48548daf585c44e2ae3bda64c591062d-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a id="rest_code_48548daf585c44e2ae3bda64c591062d-5" name="rest_code_48548daf585c44e2ae3bda64c591062d-5" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_48548daf585c44e2ae3bda64c591062d-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;  &lt;span class="c1"&gt;# (not deactivate!)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This is becoming ugly fairly quickly.&lt;/strong&gt; Also, with virtualenvwrapper, I can
do this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code shell"&gt;&lt;a id="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-1" name="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-1" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a id="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-2" name="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-2" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-2"&gt;&lt;/a&gt;$ workon foobar
&lt;a id="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-3" name="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-3" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a id="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-4" name="rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-4" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#rest_code_66c9d4d9a8564c1e8ade95b5d96b0bfd-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And let’s not forget that Pipenv doesn’t help me to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;,
distribute code, or manage releases.  It just manages dependencies.  And it
does it pretty badly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nikola"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-10" role="doc-backlink"&gt;Nikola&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m a co-maintainer of a static site generator, &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt;.  As part of this, I have the following places where
I need to run Nikola:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-site&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-plugins&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-themes&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/website&lt;/code&gt; (this blog)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;/Volumes/RAMDisk/n&lt;/code&gt; (demo site, used for testing and created when needed, on a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RAM_drive"&gt;RAM disk&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That list is long.  End users of Nikola probably don’t have a list that long,
but they might just have more than one Nikola site.  For me, and for the
aforementioned users, Pipenv does not work.  To use Pipenv, all those
repositories would need to live in one directory. I would also need to have a
&lt;em&gt;separate&lt;/em&gt; Pipenv environment for &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;nikola-users&lt;/span&gt;&lt;/code&gt;, because that needs Django.
Moreover, the Pipfile would have to be symlinked from &lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt; if we
were to make use of those in the project.  So, I would have a &lt;code class="docutils literal"&gt;~/nikola&lt;/code&gt;
directory just to make Pipenv happy, do testing/bug reproduction on a SSD (and
wear it out faster), and so on… Well, I could also use the virtualenv directly.
But in that case, Pipenv loses its usefulness, and makes my workflow more
complicated. I can’t use &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, because I would need to hack a
fuzzy matching system onto it, or memorize the random string appended to my
virtualenv name.  All because Pipenv relies on the current directory too much.&lt;/p&gt;
&lt;p&gt;Nikola end users who want to use Pipenv will also have a specific directory
structure forced on them. What if the site serves as docs for a project, and
lives inside another project’s repo? Two virtualenvs, 100 megabytes wasted.
Or worse, Nikola ends up in the other project’s Pipfile, which is technically
good for our download stats, but not really good for the other project’s
contributors.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-part-where-i-try-to-measure-times"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-11" role="doc-backlink"&gt;The part where I try to measure times&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pipenv is famous for being slow.  But how slow is it really?
I put it to the test.  I used two test environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Remote: a DigitalOcean VPS, the cheapest option (1 vCPU), Python 3.6/Fedora
28, in Frankfurt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local: my 2015 13” MacBook Pro (base model), Python 3.7, on a rather slow
Internet connection (10 Mbps on a good day, and the test was not performed on
one of them)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both were runninng Pipenv 2018.7.1, installed from pip.&lt;/p&gt;
&lt;p&gt;And with the following cache setups:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Removed: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.cache/pipenv&lt;/span&gt;&lt;/code&gt; removed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Partial: &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/depcache-py*.json&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/hash-cache/&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kept: no changes done from previous run&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, turns out Pipenv likes doing strange things with caching and locking.  A
look at the Activity Monitor hinted that there is network activity going on
when Pipenv displays its &lt;em&gt;Locking [packages] dependencies...&lt;/em&gt; line and
hangs. Now, the docs don’t tell you that. The most atrocious example was a
local Nikola install that was done in two runs: the first &lt;code class="docutils literal"&gt;pipenv install
Nikola&lt;/code&gt; run was interrupted &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; right after it was done installing packages,
so the cache had all the necessary wheels in it. The install took 10 minutes
and 7 seconds, 9:50 of which were taken by locking dependencies and installing
the locked dependencies — so, roughly nine and a half minutes were spent
staring at a static screen, with the tool doing &lt;em&gt;something&lt;/em&gt; in the background —
and Pipenv doesn’t tell you what happens in this phase.&lt;/p&gt;
&lt;p&gt;(Updated 2018-07-22: In the pipenv measurements: the first entry is the total
time of pipenv executon. The second is the long wait for pipenv to do its
“main” job: locking dependencies and installing them. The timing starts when
pipenv starts locking dependencies and ends when the prompt appears. The third
item is pipenv’s reported installation time.  So, pipenv install ⊇ locking/installing ⊇ Pipfile.lock install.)&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Task&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Action&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Measurement
method&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Environment&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Cache&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" colspan="4"&gt;&lt;p&gt;Times in seconds&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Attempt 1&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 2&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 3&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Average&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.911&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4.052&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.914&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.959&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.562&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.943&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.773&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.759&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.404&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.681&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.569&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.551&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.536&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;62.973&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;71.305&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.271&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;42.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.9&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13.667&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to an environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (only Nikola in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to another environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (both in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.612&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.666&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.665&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.648&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.333&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django (new env)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;9&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola (cached)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial, after interruption&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(10m 7s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(9m 50s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(L/I: 10.51 s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
&lt;section id="alternative-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-12" role="doc-backlink"&gt;Alternative tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python packaging is something with the state of which nobody seems to be
satisfied. As such, there are many new contenders for the role of “best new
packaging tool”.&lt;/p&gt;
&lt;p&gt;Two popular alternatives packaging tools are &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; (by Vincent Driessen
and Jazzband) and &lt;a class="reference external" href="https://github.com/sdispater/poetry"&gt;Poetry&lt;/a&gt; (by Sébastien Eustace).&lt;/p&gt;
&lt;section id="pip-tools-locking-and-hashing-and-that-is-all"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-13" role="doc-backlink"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pip-tools&lt;/strong&gt; contains two tools. The first one is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt;. It locks
dependencies in &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files, and that’s all it does. It allows
updating dependencies in the file based on what’s on PyPI. You can optionally
add hashes to that file. The second tool is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-sync&lt;/span&gt;&lt;/code&gt;. It will synchronize
your virtualenv and the requirements file: it will delete packages not in that
file, so that you don’t work with stuff not declared in requirements, and will
ensure versions match the requirements file.  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; takes roughly
10-20 seconds to run in the Nikola repo with a clean pip-tools cache (but with
the pip cache intact).&lt;/p&gt;
&lt;p&gt;Its speed is fairly reasonable, and it does not try to be the be-all-end-all
tool for development. It handles a specific task, does it well, and does not
try to handle tasks it should not. Pip-tools lets you work with venvs in any
way you like, and it does not require anything specific. Unlike Pipenv and
Poetry, you can install it into the virtualenvs that need it, and not
system-wide.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="poetry-better-but-still-not-convincing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-14" role="doc-backlink"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Poetry&lt;/strong&gt; is somewhere in between. Its main aim is close to Pipenv, but it
also makes it possible to distribute things to PyPI. It tries really hard to
hide that it uses Pip behind the scenes. Its README comes with an extensive
&lt;a class="reference external" href="https://github.com/sdispater/poetry#what-about-pipenv"&gt;“What about Pipenv?”&lt;/a&gt;
section, which I recommend reading — it has a few more examples of bad Pipenv
features.  Poetry claims to use the standardized (PEP 518) &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt;
file to replace the usual lot of files. Unfortunately, the only thing that is
standardized is the file name and syntax. Poetry uses custom &lt;code class="docutils literal"&gt;[tool.poetry]&lt;/code&gt;
sections, which means that one needs Poetry to fully use the packages created
with it, leading to vendor lock-in. There is a &lt;code class="docutils literal"&gt;build&lt;/code&gt; feature to produce a
sdist with setup.py and friends.&lt;/p&gt;
&lt;p&gt;In February 2020, in a simple &lt;code class="docutils literal"&gt;poetry add Nikola&lt;/code&gt; test, it took &lt;strong&gt;about a
minute&lt;/strong&gt; (55.1/50.8/53.6 s) to resolve dependencies (according to Poetry’s own
count, Local environment, Poetry cache removed), complete with reassuring output and
no quiet lockups.  Not as good as pip, but it’s more reasonable than Pipenv.
Also, the codebase and its layout are rather convoluted, and the docs are very
sparse and lacking. Poetry produces packages instead of just managing
dependencies, so it’s generally more useful than Pipenv. That said, I am not
convinced by that tool either.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="pip-is-here-to-stay"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-15" role="doc-backlink"&gt;Pip is here to stay!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But in all the talk about new tools, we’re forgetting about the old ones, and
they do their job well — so well in fact, that the new tools still need them
under the covers.&lt;/p&gt;
&lt;p&gt;Pip is fast. It does its job well enough. It lacks support for splitting
packages between production and development (as Pipenv and Poetry do). This
means that &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip install&lt;/code&gt; are instant, at the cost of (a)
needing two separate environments, or (b) installing development dependencies
in production (which &lt;em&gt;should&lt;/em&gt; only be a waste of HDD space and nothing more in
a well-architected system). But at the same time, pip-tools can help keep the
environments separate, as long as you take some time to write separate
&lt;code class="docutils literal"&gt;requirements.in&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The virtualenv management features can be provided by virtualenvwrapper. That
tool’s main advantage is the shell script implementation, which means that
&lt;code class="docutils literal"&gt;workon foo&lt;/code&gt; activates the &lt;code class="docutils literal"&gt;foo&lt;/code&gt; virtualenv without spawning a new
subshell (an issue with Pipenv and Poetry, that I already covered when
describing Pipenv’s operation in the &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly"&gt;Running scripts (badly)&lt;/a&gt; chapter.) An
argument often raised by Pipenv proponents is that one does not need to concern
itself with creating the virtualenv, and doesn’t need to care where it is.
Unfortuntately, many tools require this knowledge from their user, or force a
specific location, or require it to be different to the home directory.&lt;/p&gt;
&lt;p&gt;And for a reasonable project template with release automation — well, I have my
own entry in that category, called (rather unoriginally) the &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project
Template (PyPT)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, setup.py files are not ideal, since they use &lt;code class="docutils literal"&gt;.py&lt;/code&gt; code and a function
execution, making access to meta information hard (&lt;code class="docutils literal"&gt;./setup.py egg_info&lt;/code&gt;
creates tool-accessible text files). Their main advantage is that they are the
&lt;em&gt;only&lt;/em&gt; format that is widely supported — pip is the de-facto default
Python package manager (which is pre-installed on Windows and Mac), and other
tools would require installation/bootstrapping first.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-break-neck-pace-of-pipenv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-16" role="doc-backlink"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good packaging tool is stable. In other words, it doesn’t change often, and
it strives to support existing environments. It wouldn’t be fun to re-download
everything on your system, because someone decided that &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; is now called
&lt;code class="docutils literal"&gt;/stuff&lt;/code&gt;, and all the files in &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; would become forgotten and not
removed. Well, this is what Pipenv did:&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Date/Time (UTC)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Event&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-01-31 22:01&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.2.14 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;./.venv&lt;/span&gt;&lt;/code&gt; (eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foo/.venv&lt;/span&gt;&lt;/code&gt;). Last version with the original behavior of pipenv.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 05:36&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.0 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo&lt;/span&gt;&lt;/code&gt; (to be precise, &lt;code class="docutils literal"&gt;$WORKON_HOME/foo&lt;/code&gt;).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/178"&gt;Issue #178&lt;/a&gt; is reported regarding the behavior change.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:18&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “no plans for making it configurable.” and closes the issue.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 03:05&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “added &lt;code class="docutils literal"&gt;PIPENV_VENV_IN_PROJECT&lt;/code&gt; mode for classic operation. Not released yet.”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 04:29&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.3 released. The default is still uses a “remote” location, but &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; can now be used.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-03-02 13:48&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.5.0 released. The new default path is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$WORKON_HOME/foo-HASH&lt;/span&gt;&lt;/code&gt;, eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo-7pl2iuUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Over the course of a month, the location of the virtualenv changed twice. If
the user didn’t read the changelog and didn’t manually intervene (also of note,
the option name was mentioned in the issue and in v3.3.4’s changelog), they
would have a stale &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; directory, since the new scheme was adopted for
them. And then, after switching to v3.5.0, they would have a stale virtualenv
hidden somewhere in their home directory, because pipenv decided to add hashes.&lt;/p&gt;
&lt;p&gt;Also, this is not configurable. One cannot disable the hashes in paths, even
though &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/589"&gt;users&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/1049"&gt;wanted&lt;/a&gt; to. It would also help people
who want to mix Pipenv and virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Pipenv is a very &lt;strong&gt;opinionated&lt;/strong&gt; tool, and if the dev team changes their mind,
the old way is not supported.&lt;/p&gt;
&lt;p&gt;Pipenv moves fast and doesn’t care if anything breaks. As an example, between
2018-03-13 13:21 and 2018-03-14 13:44 (a little over 24 hours), Pipenv had 10
releases, ranging from v11.6.2 to v11.7.3. The &lt;a class="reference external" href="https://github.com/pypa/pipenv/blob/25df09c171a548fd71d4df735767bf763a653b83/HISTORY.txt"&gt;changelog&lt;/a&gt; is rather unhelpful
when it comes to informing users what happened in each of the releases.&lt;/p&gt;
&lt;p&gt;Extra reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://web.archive.org/web/20180717140106/https://journal.kennethreitz.org/entry/r-python"&gt;Kenneth Reitz, A Letter to /r/python (with some notes about bipolar disorder)&lt;/a&gt; (replaced with Wayback Machine link on 2020-02-07)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reddit comment threads for the letter: &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kdfd6/kenneth_reitz_a_letter_to_rpython_with_some_notes/"&gt;first&lt;/a&gt; and &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kjv8x/a_letter_to_rpython_kenneth_reitzs_journal/"&gt;second&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#toc-entry-17" role="doc-backlink"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pipenv, contrary to popular belief and (now removed) propaganda, is not an
officially recommended tool of Python.org. It merely has a tutorial written
about it on packaging.python.org (page run by the PyPA).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv solves one use case reasonably well, but fails at many others, because
it forces a particular workflow on its users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv does not handle any parts of packaging (cannot produce sdists and
wheels).  Users who want to upload to PyPI need to manage a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file
manually, alongside and independently of Pipenv.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv produces lockfiles, which are useful for reproducibility, at the cost
of installation speed. The speed is a noticeable issue with the tool. &lt;code class="docutils literal"&gt;pip
freeze&lt;/code&gt; is good enough for this, even if there are no dependency classes
(production vs development) and no hashes (which
have minor benefits) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-2" id="footnote-reference-5" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hatch attempts to replace many packaging tools, but some of its practices and
ideas can be questionable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Poetry supports the same niche Pipenv does, while also adding the ability to
create packages and improving over many gripes of Pipenv. A notable issue is
the use of a custom all-encompassing file format, which makes switching tools
more difficult (vendor lock-in).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pip, setup.py, and virtualenv — the traditional, tried-and-true tools — are
still available, undergoing constant development. Using them can lead to a
simpler, better experience.  Also of note, tools like virtualenvwrapper
can manage virtualenvs better than the aforementioned new Python tools,
because it is based on shell scripts (which can modify the enivironment).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;On a side note, the tutorial explains nothing. A prospective user only learns it’s similar to npm or bundler (what does that mean?), installs one package, and runs a &lt;code class="docutils literal"&gt;.py&lt;/code&gt; file through &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="backrefs"&gt;(&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-reference-2"&gt;1&lt;/a&gt;,&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-reference-5"&gt;2&lt;/a&gt;)&lt;/span&gt;
&lt;p&gt;Note that one can’t change the file on PyPI after uploading it, so this would only be protection against rogue PyPI admins or a MitM attack (in which case you’ve got bigger problems anyways). &lt;a class="reference external" href="https://github.com/nedbat/coveragepy/issues/679#issuecomment-406396761"&gt;Also, the feature is fairly broken.&lt;/a&gt;&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Fortunately, it looks in the parent directories for Pipfiles as well. Otherwise, you might end up with one environment for &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and another for &lt;code class="docutils literal"&gt;foo/foo&lt;/code&gt; and yet another for &lt;code class="docutils literal"&gt;foo/docs&lt;/code&gt; and so on…&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The interruption happened by mistake due to the RAM disk running out of space, but it was actually a good thing to have happened.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;hr class="docutils"&gt;
&lt;p class="alert alert-info"&gt;&lt;strong&gt;Other discussion threads:&lt;/strong&gt; &lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/a3h81m/pipenv_promises_a_lot_delivers_very_little/"&gt;r/Python&lt;/a&gt;, &lt;a class="reference external" href="https://news.ycombinator.com/item?id=18612590"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</guid><pubDate>Tue, 17 Jul 2018 17:40:00 GMT</pubDate></item><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;nav class="contents right-toc" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="toc-entry-1"&gt;Use the right tool for the job&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="toc-entry-2"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="toc-entry-3"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="toc-entry-4"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="toc-entry-5"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-1" role="doc-backlink"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is not in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; your process gets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the hard-coded path is not correct on the end user’s system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-2" role="doc-backlink"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;code class="docutils literal"&gt;grep&lt;/code&gt;, &lt;code class="docutils literal"&gt;sed&lt;/code&gt; and
&lt;code class="docutils literal"&gt;awk&lt;/code&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;code class="docutils literal"&gt;os&lt;/code&gt; or &lt;code class="docutils literal"&gt;shutil&lt;/code&gt;. Your language of
choice can also handle things like networking (don’t call &lt;code class="docutils literal"&gt;curl&lt;/code&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-3" role="doc-backlink"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;code class="docutils literal"&gt;execve()&lt;/code&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;directly, by calling &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;through the shell (&lt;code class="docutils literal"&gt;sh&lt;/code&gt;), usually by calling &lt;code class="docutils literal"&gt;system()&lt;/code&gt;. As Linux’s
manpage for &lt;code class="docutils literal"&gt;system(3)&lt;/code&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;system()&lt;/code&gt; library function uses &lt;code class="docutils literal"&gt;fork(2)&lt;/code&gt; to create a child process that executes the shell command specified in command using &lt;code class="docutils literal"&gt;execl(3)&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_e71564f4691a48188e447221d8122897-1" name="rest_code_e71564f4691a48188e447221d8122897-1" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_e71564f4691a48188e447221d8122897-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_88dc479a55d446cda1d87cc16a8c2fdc-1" name="rest_code_88dc479a55d446cda1d87cc16a8c2fdc-1" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_88dc479a55d446cda1d87cc16a8c2fdc-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a id="rest_code_88dc479a55d446cda1d87cc16a8c2fdc-2" name="rest_code_88dc479a55d446cda1d87cc16a8c2fdc-2" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_88dc479a55d446cda1d87cc16a8c2fdc-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a id="rest_code_88dc479a55d446cda1d87cc16a8c2fdc-3" name="rest_code_88dc479a55d446cda1d87cc16a8c2fdc-3" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_88dc479a55d446cda1d87cc16a8c2fdc-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-1" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-1" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-2" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-2" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-3" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-3" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-4" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-4" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-5" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-5" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-6" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-6" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-7" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-7" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-8" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-8" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-9" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-9" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-10" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-10" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-11" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-11" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-12" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-12" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-13" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-13" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-14" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-14" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-15" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-15" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-16" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-16" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-17" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-17" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-18" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-18" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-19" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-19" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-20" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-20" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-21" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-21" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-22" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-22" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-23" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-23" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-24" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-24" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-25" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-25" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-26" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-26" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-27" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-27" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-28" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-28" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-29" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-29" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-30" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-30" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-31" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-31" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-31"&gt;&lt;/a&gt;
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-32" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-32" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-33" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-33" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a id="rest_code_7428b1a6137f45e6ac3586759ca1eb82-34" name="rest_code_7428b1a6137f45e6ac3586759ca1eb82-34" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_7428b1a6137f45e6ac3586759ca1eb82-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;quotes and escapes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding expressions in braces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wildcards (glob, &lt;code class="docutils literal"&gt;*&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redirections and pipes (&lt;code class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command substitution (backticks or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running multiple commands on the same line (&lt;code class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-4" role="doc-backlink"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="simple dl-horizontal"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Perform fork-exec by yourself, or use &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;code class="docutils literal"&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the subprocess module. Always pass &lt;code class="docutils literal"&gt;shell=False&lt;/code&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;code class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/code&gt; (and not &lt;code class="docutils literal"&gt;_shell&lt;/code&gt;), but note it takes &lt;code class="docutils literal"&gt;*args&lt;/code&gt; and not a list. Never use &lt;code class="docutils literal"&gt;os.system&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.popen&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;IO.popen&lt;/code&gt;. Pass multiple arguments to &lt;code class="docutils literal"&gt;system()&lt;/code&gt; (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/code&gt;). Never use &lt;code class="docutils literal"&gt;%x{command}&lt;/code&gt; or backticks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;Runtime.exec&lt;/code&gt;. Pass multiple arguments or list to &lt;code class="docutils literal"&gt;ProcessBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All the standard methods go through the shell. Try &lt;code class="docutils literal"&gt;escapeshellcmd()&lt;/code&gt;, &lt;code class="docutils literal"&gt;escapeshellarg()&lt;/code&gt; — or better, switch to Python. Or anything, really.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;os/exec&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.StartProcess&lt;/code&gt; are safe.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use &lt;code class="docutils literal"&gt;child_process.execFile&lt;/code&gt; or &lt;code class="docutils literal"&gt;child_process.spawn&lt;/code&gt; with &lt;code class="docutils literal"&gt;shell&lt;/code&gt; set to false.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;section id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-5" role="doc-backlink"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; on Windows. Instead, &lt;code class="docutils literal"&gt;CreateProcess()&lt;/code&gt;,
&lt;code class="docutils literal"&gt;ShellExecute()&lt;/code&gt;, or lower-level &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/code&gt; functions are used. &lt;code class="docutils literal"&gt;cmd.exe
/c&lt;/code&gt; is called in shell calls.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The function that does the real work is &lt;code class="docutils literal"&gt;execve()&lt;/code&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;code class="docutils literal"&gt;execl()&lt;/code&gt; does the last two.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Quoted from &lt;code class="docutils literal"&gt;execve(2)&lt;/code&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;An alternative is &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Misja Gynvaela 11 (stream anglojęzyczny): reverse-engineering bajtkodu Pythona</title><link>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Gynvael Coldwind jest badaczem bezpieczeństwa pracującym w Google, który organizuje cotygodniowe livestreamy na tematy bezpieczeństwa i programowania &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;po polsku&lt;/a&gt; i  &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;po angielsku&lt;/a&gt;). Częścią streamów są misje — w skrócie, zadania w stylu CTF-owym dotyczące inżynierii wstecznej. Wczorajsza misja była o elfickim — znaczy o Paint’cie — znaczy o programowaniu w Pythonie i jego bajtkodzie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-1" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-2" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-3" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-4" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-5" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-6" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-7" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-8" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-9" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-9"&gt;&lt;/a&gt;files.
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-10" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-11" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-11" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-12" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-12" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-13" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-13" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-14" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-14" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-15" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-15" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-16" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-16" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-17" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-17" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-18" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-18" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-19" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-19" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-19"&gt;&lt;/a&gt;Good luck!
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-20" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-20" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-21" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-21" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-22" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-22" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-23" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-23" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-24" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-24" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-25" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-25" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-26" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-26" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a id="rest_code_e644a1da148e4c0496430bc2a68b3f42-27" name="rest_code_e644a1da148e4c0496430bc2a68b3f42-27" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e644a1da148e4c0496430bc2a68b3f42-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod firmware:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-1" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-2" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-3" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-3"&gt;&lt;/a&gt;co_flags 67
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-4" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-4"&gt;&lt;/a&gt;co_name check_password
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-5" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-6" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-7" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-8" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-9" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-10" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-11" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-11" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-12" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-12" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-13" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-13" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-14" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-14" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-15" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-15" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-16" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-16" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-17" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-17" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-18" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-18" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-19" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-19" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-20" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-20" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-21" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-21" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-22" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-22" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-23" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-23" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-24" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-24" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-25" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-25" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-26" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-26" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-27" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-27" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-28" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-28" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-29" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-29" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-30" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-30" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-31" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-31" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-32" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-32" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-33" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-33" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-34" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-34" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-35" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-35" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-36" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-36" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-37" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-37" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-38" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-38" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-39" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-39" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-40" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-40" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-41" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-41" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-42" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-42" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-43" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-43" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-44" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-44" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-45" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-45" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-46" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-46" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-47" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-47" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-48" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-48" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-49" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-49" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-50" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-50" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-51" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-51" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-52" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-52" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a id="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-53" name="rest_code_f9b4e8b41d7746b9b34d78d989ea3260-53" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f9b4e8b41d7746b9b34d78d989ea3260-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dla niewtajemniczonych to może wyglądać na &lt;em&gt;elficki&lt;/em&gt;. W rzeczywistości jest to bajtkod Pythona — zestaw instrukcji używany przez maszynę wirtualną Pythona (CPython 2.7.) Python, podobnie jak wiele innych języków, używa kompilatora do tłumaczenia kodu źródłowego czytelnego dla ludzi na coś bardziej odpowiedniego dla komputerów. Kod Pythona tłumaczony jest na bajtkod, który jest wykonywany przez maszynę wirtualną CPythona. Bajtkod CPythona może być używany na różnym sprzęcie, podczas gdy kod maszynowy nie może. Z drugiej strony kod maszynowy jest zazwyczaj szybszy niż języki oparte na maszynach wirtualnych i bajtkodzie. (Java i C# działają tak jak Python, C jest tłumaczone prosto do kodu maszynowego)&lt;/p&gt;
&lt;p&gt;To jest wewnętrzna reprezentacja funkcji Pythona. Pierwsze kilka linii to zmienne należące do obiektu &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt; naszej funkcji. Wiemy, że funkcja:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ma 1 argument&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma 7 stałych: None, długi ciąg cyfr hex, i liczby: 89, 255, 115 ,50.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flagi&lt;/a&gt; ustawione na 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). Jest to “standardowa” wartość używana przez większość nieskomplikowanych funkcji.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nazywa się &lt;code class="docutils literal"&gt;check_password&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;używa następujących zmiennych globalnych lub nazw atrybutów: &lt;code class="docutils literal"&gt;decode&lt;/code&gt;, &lt;code class="docutils literal"&gt;len&lt;/code&gt;, &lt;code class="docutils literal"&gt;False&lt;/code&gt;, &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma 4 zmienne lokalne&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;używa stosu o rozmiarze 6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jej zmienne nazywają się &lt;code class="docutils literal"&gt;s&lt;/code&gt;, &lt;code class="docutils literal"&gt;good&lt;/code&gt;, &lt;code class="docutils literal"&gt;cs&lt;/code&gt;, &lt;code class="docutils literal"&gt;cg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Są dwa sposoby na rozwiązanie tego zadania: można spróbować zreasemblować wyjście &lt;code class="docutils literal"&gt;dis&lt;/code&gt; przy pomocy modułu &lt;code class="docutils literal"&gt;opcode&lt;/code&gt; lub odtworzyć funkcję ręcznie, używając bajtkodu. Wybrałem tę drugą opcję.&lt;/p&gt;
&lt;section id="reverse-engineering-bajtkodu-pythona-reczne-odtwarzanie-funkcji"&gt;
&lt;h2&gt;Reverse-engineering bajtkodu Pythona: ręczne odtwarzanie funkcji&lt;/h2&gt;
&lt;p&gt;Zacząłem od odtworzenia oryginalnego pliku z firmware’em. Utworzyłem pustą funkcję i napisałem trochę kodu, który wypisuje zawartość &lt;code class="docutils literal"&gt;__code__&lt;/code&gt; i wyjście &lt;code class="docutils literal"&gt;dis.dis&lt;/code&gt;. Dodałem też kolorowanie wyjścia, by łatwiej się czytało:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-1" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-2" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-3" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-4" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-5" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-6" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-7" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-8" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-9" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-10" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-11" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-11" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-12" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-12" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-13" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-13" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-14" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-14" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-15" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-15" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-16" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-16" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-17" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-17" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-18" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-18" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-19" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-19" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-20" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-20" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-21" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-21" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-22" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-22" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-23" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-23" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-24" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-24" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-25" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-25" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-26" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-26" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-26"&gt;&lt;/a&gt;
&lt;a id="rest_code_bcba5c60e9934c388a2beaa6571acf33-27" name="rest_code_bcba5c60e9934c388a2beaa6571acf33-27" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_bcba5c60e9934c388a2beaa6571acf33-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jeśli uruchomimy ten solver, otrzymamy następujące wyjście (tekst w nawiasach kwadratowych dopisany przeze mnie):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-1" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-2" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 się zgadza]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-3" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-4" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-5" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-5"&gt;&lt;/a&gt;co_names ()              [0/6 się zgadza]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-6" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-6"&gt;&lt;/a&gt;co_nlocals 1             [powinno być 4]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-7" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-7"&gt;&lt;/a&gt;co_stacksize 1           [powinno być 6]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-8" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 się zgadza]
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-9" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a id="rest_code_300c8264a2344bb0b7013d278d7d8fdd-10" name="rest_code_300c8264a2344bb0b7013d278d7d8fdd-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_300c8264a2344bb0b7013d278d7d8fdd-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Widzimy (przy pomocy kolorów, których tu nie ma), że &lt;code class="docutils literal"&gt;co_argcount&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_flags&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_name&lt;/code&gt; są ustawione poprawnie. Mamy też jedną ze zmiennych (&lt;code class="docutils literal"&gt;None&lt;/code&gt;, jest w każdej funkcji) i jedną nazwę zmiennej (nazwę argumentu &lt;code class="docutils literal"&gt;s&lt;/code&gt;). Widzimy wyjście &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt;. O ile jest podobne do tego z zadania, to jest kilka zauważalnych różnic: nie ma &lt;code class="docutils literal"&gt;7&lt;/code&gt; na początku (numer linii), a instrukcje &lt;code class="docutils literal"&gt;LOAD_CONST&lt;/code&gt; nie miały niczego w nawiasach (tylko porównania i pętle coś miały). To utrudnia czytanie bajtkodu, ale to jest wciąż możliwe. (Początkowo chciałem sobie pomóc narzędziem &lt;code class="docutils literal"&gt;diff&lt;/code&gt;, ale nie jest trudno to zrobić ręcznie. Użyłem &lt;code class="docutils literal"&gt;diff&lt;/code&gt; do ostatecznego sprawdzenia po ręcznej „konwersji”)&lt;/p&gt;
&lt;p&gt;Zatrzymajmy się na chwilę i spójrzmy na stałe i nazwy. Po długim stringu pojawia się &lt;code class="docutils literal"&gt;hex&lt;/code&gt;, a jedną ze stałych jest &lt;code class="docutils literal"&gt;decode&lt;/code&gt;. To znaczy, że musimy użyć &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/code&gt; by utworzyć (byte)string z pewną informacją. Odpowiedzi do misji są czytelne dla ludzi, a ten string nie jest — więc musimy zrobić coś więcej.&lt;/p&gt;
&lt;p&gt;Spróbujmy odtworzyć oryginalny kod misji. VM Pythona opiera się na stosie. W bajtkodzie powyżej widzimy, że instrukcje przyjmują 0 lub 1 argument. Niektóre z nich dodają obiekty na stos, inne wykonują akcje i usuwają rzeczy ze stosu. Większość nazw instrukcji jest łatwa do zrozumienia, ale pełna lista jest dostępna w &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacji modułu dis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instrukcje takie jak &lt;code class="docutils literal"&gt;LOAD&lt;/code&gt; czy &lt;code class="docutils literal"&gt;STORE&lt;/code&gt; odwołują się do indeksów w krotkach constants/names/varnames. Aby było łatwiej, oto “tabelka” tych indeksów:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-1" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-1"&gt;&lt;/a&gt;constants
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-2" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-3" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-4" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-5" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-6" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-7" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-8" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-9" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-10" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a id="rest_code_58b96c5b48704e7cb84d3d5e1896257a-11" name="rest_code_58b96c5b48704e7cb84d3d5e1896257a-11" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_58b96c5b48704e7cb84d3d5e1896257a-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;W celu poprawienia czytelności, użyję “nowe” wyjście &lt;code class="docutils literal"&gt;dis&lt;/code&gt; z nazwami w nawiasach poniżej:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_497a2d93f1214eaebcc0ecd360499c0d-1" name="rest_code_497a2d93f1214eaebcc0ecd360499c0d-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_497a2d93f1214eaebcc0ecd360499c0d-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a id="rest_code_497a2d93f1214eaebcc0ecd360499c0d-2" name="rest_code_497a2d93f1214eaebcc0ecd360499c0d-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_497a2d93f1214eaebcc0ecd360499c0d-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a id="rest_code_497a2d93f1214eaebcc0ecd360499c0d-3" name="rest_code_497a2d93f1214eaebcc0ecd360499c0d-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_497a2d93f1214eaebcc0ecd360499c0d-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a id="rest_code_497a2d93f1214eaebcc0ecd360499c0d-4" name="rest_code_497a2d93f1214eaebcc0ecd360499c0d-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_497a2d93f1214eaebcc0ecd360499c0d-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # funkcja pobiera 1 argument ze stosu
&lt;a id="rest_code_497a2d93f1214eaebcc0ecd360499c0d-5" name="rest_code_497a2d93f1214eaebcc0ecd360499c0d-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_497a2d93f1214eaebcc0ecd360499c0d-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak wcześniej zgadywałem, pierwsza linia funkcji wygląda tak:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_8a58139614694cc8b80ea32c27ef8810-1" name="rest_code_8a58139614694cc8b80ea32c27ef8810-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8a58139614694cc8b80ea32c27ef8810-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_8a58139614694cc8b80ea32c27ef8810-2" name="rest_code_8a58139614694cc8b80ea32c27ef8810-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_8a58139614694cc8b80ea32c27ef8810-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jeśli jeszcze raz uruchomimy solver, zobaczymy że pierwsze 12 bajtów w bajtkodzie zgadza się z treścią misji. Widzimy też, że &lt;code class="docutils literal"&gt;varnames&lt;/code&gt; jest wypełnione w połowie, dodaliśmy dwie stałe, i jedną nazwę. Następne kilka linii wygląda tak:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-1" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-2" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-3" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-4" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-5" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-6" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-7" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-8" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-9" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a id="rest_code_e01a00916a6a4d86bfebd149b684f53e-10" name="rest_code_e01a00916a6a4d86bfebd149b684f53e-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_e01a00916a6a4d86bfebd149b684f53e-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Widzimy że umieszczamy obiekt globalny na stosie i wywołujemy go z jednym argumentem. W obu przypadkach, obiekt globalny ma indeks 1, czyli &lt;code class="docutils literal"&gt;len&lt;/code&gt;. Dwa argumenty to &lt;code class="docutils literal"&gt;s&lt;/code&gt; i &lt;code class="docutils literal"&gt;good&lt;/code&gt;. Umieszczamy obie długości na stosie i je porównujemy. Jeśli porównanie się nie uda (są równe), przeskakujemy do instrukcji zaczynającej się na bajcie 43, w przeciwnym razie kontynuujemy wykonywanie, by załadować drugi global (False) i go zwrócić. Ta ściana tekstu tłumaczy się na następujący prosty kod:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_0dd6a6ab225441babc646f91cb11afa2-1" name="rest_code_0dd6a6ab225441babc646f91cb11afa2-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_0dd6a6ab225441babc646f91cb11afa2-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_0dd6a6ab225441babc646f91cb11afa2-2" name="rest_code_0dd6a6ab225441babc646f91cb11afa2-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_0dd6a6ab225441babc646f91cb11afa2-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_0dd6a6ab225441babc646f91cb11afa2-3" name="rest_code_0dd6a6ab225441babc646f91cb11afa2-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_0dd6a6ab225441babc646f91cb11afa2-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a id="rest_code_0dd6a6ab225441babc646f91cb11afa2-4" name="rest_code_0dd6a6ab225441babc646f91cb11afa2-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_0dd6a6ab225441babc646f91cb11afa2-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# newr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Popatrzmy się jeszcze raz na nasze nazwy. Widzimy, że brakuje &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;. Można zauważyć pewien znany wzorzec: iterujemy po obu stringach na raz (używając &lt;code class="docutils literal"&gt;zip&lt;/code&gt;), wykonujemy obliczenia na podstawie kodów znaków (&lt;code class="docutils literal"&gt;ord&lt;/code&gt;) i sprawdzamy czy wszystkie (&lt;code class="docutils literal"&gt;all&lt;/code&gt;) wyniki (zazwyczaj porównania) są prawdziwe.&lt;/p&gt;
&lt;p&gt;Oto bajtkod z dopisanymi wartościami i komentarzami które tłumaczą, co się gdzie dzieje:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-1" name="rest_code_368c5e88343b40f889ccc0778f06422b-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-2" name="rest_code_368c5e88343b40f889ccc0778f06422b-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-3" name="rest_code_368c5e88343b40f889ccc0778f06422b-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-4" name="rest_code_368c5e88343b40f889ccc0778f06422b-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-5" name="rest_code_368c5e88343b40f889ccc0778f06422b-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-6" name="rest_code_368c5e88343b40f889ccc0778f06422b-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-7" name="rest_code_368c5e88343b40f889ccc0778f06422b-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Początek iteracji: iter()
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-8" name="rest_code_368c5e88343b40f889ccc0778f06422b-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # początek iteracji pętli for (jeśli koniec iteratora, skocz +52 bajty do pozycji 117)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-9" name="rest_code_368c5e88343b40f889ccc0778f06422b-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # rozpakuj sekwencję (a, b = sequence)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-10" name="rest_code_368c5e88343b40f889ccc0778f06422b-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = wartość z s
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-11" name="rest_code_368c5e88343b40f889ccc0778f06422b-11" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = wartość z good
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-12" name="rest_code_368c5e88343b40f889ccc0778f06422b-12" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-13" name="rest_code_368c5e88343b40f889ccc0778f06422b-13" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-14" name="rest_code_368c5e88343b40f889ccc0778f06422b-14" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-15" name="rest_code_368c5e88343b40f889ccc0778f06422b-15" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-16" name="rest_code_368c5e88343b40f889ccc0778f06422b-16" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [odejmij 89 od wartości na górze stosu]
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-17" name="rest_code_368c5e88343b40f889ccc0778f06422b-17" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-18" name="rest_code_368c5e88343b40f889ccc0778f06422b-18" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND z wartością na górze stosu]
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-19" name="rest_code_368c5e88343b40f889ccc0778f06422b-19" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-20" name="rest_code_368c5e88343b40f889ccc0778f06422b-20" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR z wartością na górze stosu]
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-21" name="rest_code_368c5e88343b40f889ccc0778f06422b-21" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-22" name="rest_code_368c5e88343b40f889ccc0778f06422b-22" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR z wartością na górze stosu]
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-23" name="rest_code_368c5e88343b40f889ccc0778f06422b-23" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-24" name="rest_code_368c5e88343b40f889ccc0778f06422b-24" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-25" name="rest_code_368c5e88343b40f889ccc0778f06422b-25" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-26" name="rest_code_368c5e88343b40f889ccc0778f06422b-26" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # porównaj dwie wartości na stosie
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-27" name="rest_code_368c5e88343b40f889ccc0778f06422b-27" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # dodaj wartość umieszczoną na górze sotosu do listy góra-1; usuń górę stosu (dopisz do listy tworzonej w list comprehension)
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-28" name="rest_code_368c5e88343b40f889ccc0778f06422b-28" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # przeskocz na początek pętli
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-29" name="rest_code_368c5e88343b40f889ccc0778f06422b-29" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # po pętli: wywołaj all([wynik list comprehension])
&lt;a id="rest_code_368c5e88343b40f889ccc0778f06422b-30" name="rest_code_368c5e88343b40f889ccc0778f06422b-30" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_368c5e88343b40f889ccc0778f06422b-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # zwróć wartość zwróconą przez all()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Możemy teraz zapisać pełną odpowiedź.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d77101da7a7b4193b31f1a385404ce2b-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_d77101da7a7b4193b31f1a385404ce2b-1" name="rest_code_d77101da7a7b4193b31f1a385404ce2b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d77101da7a7b4193b31f1a385404ce2b-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_d77101da7a7b4193b31f1a385404ce2b-2" name="rest_code_d77101da7a7b4193b31f1a385404ce2b-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d77101da7a7b4193b31f1a385404ce2b-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_d77101da7a7b4193b31f1a385404ce2b-3" name="rest_code_d77101da7a7b4193b31f1a385404ce2b-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d77101da7a7b4193b31f1a385404ce2b-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_d77101da7a7b4193b31f1a385404ce2b-4" name="rest_code_d77101da7a7b4193b31f1a385404ce2b-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d77101da7a7b4193b31f1a385404ce2b-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_d77101da7a7b4193b31f1a385404ce2b-5" name="rest_code_d77101da7a7b4193b31f1a385404ce2b-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d77101da7a7b4193b31f1a385404ce2b-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_d77101da7a7b4193b31f1a385404ce2b-6" name="rest_code_d77101da7a7b4193b31f1a385404ce2b-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Ostatecznie, wyjście &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt; zgadza się z tekstem z misji (za wyjątkiem usuniętych wartości, ale ID się zgadzają), nasze zmienne &lt;code class="docutils literal"&gt;co_*&lt;/code&gt; są zielone, i możemy rozwiązać prawdziwą zagadkę!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Na marginesie:&lt;/strong&gt; zadanie używa list comprehension. Możesz chcieć ją zoptymalizować, usunąć nawiasy kwadratowe, i otrzymać generator expression. W ten sposób zadanie stałoby się trudniejsze, gdyż wymagałoby pracy również z wewnętrznym obiektem kodu generatora:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_c671327057a3490397b29a814882f36a-1" name="rest_code_c671327057a3490397b29a814882f36a-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c671327057a3490397b29a814882f36a-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a id="rest_code_c671327057a3490397b29a814882f36a-2" name="rest_code_c671327057a3490397b29a814882f36a-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c671327057a3490397b29a814882f36a-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_c671327057a3490397b29a814882f36a-3" name="rest_code_c671327057a3490397b29a814882f36a-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c671327057a3490397b29a814882f36a-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;BINARY_*&lt;/code&gt; i &lt;code class="docutils literal"&gt;ord&lt;/code&gt; zniknęły z nowego listingu. Możesz zobaczyć &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;zmodyfikowany kod&lt;/a&gt; (który różni się dwoma bajtami) i &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;wyjście solvera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na marginesie marginesu: zna ktoś jakieś dobre tłumaczenie &lt;code class="docutils literal"&gt;list comprehension&lt;/code&gt;? Polska język trudna język.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rozwiazywanie-prawdziwej-zagadki"&gt;
&lt;h2&gt;Rozwiązywanie prawdziwej zagadki&lt;/h2&gt;
&lt;p&gt;Rozwiązałem dodatkową część zagadki. Jej &lt;em&gt;prawdziwym&lt;/em&gt; celem było odzyskanie hasła — tekstu, dla którego &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt; zwróci True.&lt;/p&gt;
&lt;p&gt;Ta część jest dosyć nudna. Zbudowałem słownik, w którym przypisałem każdy bajt (0…255) do wyniku obliczeń wykonywanych w pętli funkcji &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt;. Potem użyłem jej do odzyskania oryginalnego tekstu.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-1" name="rest_code_1f2b3cccfa144fc883814755e268c329-1" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-2" name="rest_code_1f2b3cccfa144fc883814755e268c329-2" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-3" name="rest_code_1f2b3cccfa144fc883814755e268c329-3" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-4" name="rest_code_1f2b3cccfa144fc883814755e268c329-4" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-5" name="rest_code_1f2b3cccfa144fc883814755e268c329-5" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-6" name="rest_code_1f2b3cccfa144fc883814755e268c329-6" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-7" name="rest_code_1f2b3cccfa144fc883814755e268c329-7" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-8" name="rest_code_1f2b3cccfa144fc883814755e268c329-8" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-9" name="rest_code_1f2b3cccfa144fc883814755e268c329-9" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-10" name="rest_code_1f2b3cccfa144fc883814755e268c329-10" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-11" name="rest_code_1f2b3cccfa144fc883814755e268c329-11" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-11"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1f2b3cccfa144fc883814755e268c329-12" name="rest_code_1f2b3cccfa144fc883814755e268c329-12" href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_1f2b3cccfa144fc883814755e268c329-12"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Hasło brzmi:&lt;/strong&gt; &lt;code class="docutils literal"&gt;huh, that actually worked!&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="o-co-chodzilo-z-tym-paintem"&gt;
&lt;h2&gt;O co chodziło z tym Paintem?&lt;/h2&gt;
&lt;blockquote&gt;Wczorajsza misja była o elfickim — &lt;strong&gt;znaczy o Paint’cie&lt;/strong&gt; — znaczy o programowaniu w Pythonie i bytecode.&lt;footer&gt;niżej podpisany, w leadzie tego posta&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Większość moich czytelników była zdziwiona wspomnieniem programu Paint. Stali widzowie polskich streamów Gynvaela pamiętają film Python 101, który opublikował 1 kwietnia 2016. Zobacz &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;oryginalny film&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;wyjaśnienie&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;kod&lt;/a&gt; (po polsku) &lt;strong&gt;Uwaga, spoilery.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;W tym dowcipie primaaprilisowym, Gynvael uczył podstaw Pythona. Pierwsza część dotyczyła pisania bytecodu ręcznie. Druga (ok. 12 minuty) dotyczyła rysowania swoich własnych modułów Pythona. W programie Paint. Tak, Paint, prostym programie graficznym dołączonym do Windowsa. Narysował swój własny moduł Pythona w Paint’cie i zapisał jako BMP. Wyglądało to tak (powiększony PNG poniżej; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;pobierz gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;Jak to działa? Są trzy powody:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python może importować kod z pliku ZIP (dopisanego do sys.path). Niektóre narzędzia które tworzą pliki &lt;code class="docutils literal"&gt;.exe&lt;/code&gt; z kodu Pythona używają tej metody; stary format &lt;code class="docutils literal"&gt;.egg&lt;/code&gt; również używał ZIPów w ten sposób.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pliki BMP mają nagłówki na początku pliku.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pliki ZIP mają nagłówki na końcu pliku.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Więc jeden plik może być jednocześnie poprawnym plikiem BMP i poprawnym ZIPem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wziąłem kod &lt;code class="docutils literal"&gt;check_password&lt;/code&gt; i umieściłem go w pliku &lt;code class="docutils literal"&gt;mission11.py&lt;/code&gt; (wcześniej zacytowanym). Potem skompilowałem do &lt;code class="docutils literal"&gt;.pyc&lt;/code&gt; i utworzyłem z niego &lt;code class="docutils literal"&gt;.zip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_15960fbfd87a4605bf7cf3b6ca8962db-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-1" name="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_15960fbfd87a4605bf7cf3b6ca8962db-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-2" name="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_15960fbfd87a4605bf7cf3b6ca8962db-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-3" name="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_15960fbfd87a4605bf7cf3b6ca8962db-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-4" name="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_15960fbfd87a4605bf7cf3b6ca8962db-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-5" name="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_15960fbfd87a4605bf7cf3b6ca8962db-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-6" name="rest_code_15960fbfd87a4605bf7cf3b6ca8962db-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Ponieważ nie jestem ekspertem w żadnym z formatów, uruchomiłem maszynę wirtualną z Windowsem i na ślepo &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;przekopiowałem parametry użyte przez Gynvaela&lt;/a&gt; do otwarcia pliku ZIP (nazwanego &lt;code class="docutils literal"&gt;.raw&lt;/code&gt;) w IrfanView i zapisałem jako &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt;. Zmieniłem rozmiar na 83×2, ponieważ mój ZIP miał 498 bajty (3 BPP * 83 px * 2 px = 498 bytes) — dzięki temu i odpowiedniemu rozmiarowi plików, mogłem nie dodawać komentarzy i edytowaniu ZIPa. Dostałem ten obrazek (znowu PNG; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;pobierz mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;Plik &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt; można uruchomić! Używamy tego kodu:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-1" name="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-2" name="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-3" name="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-4" name="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-5" name="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-6" name="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-7"&gt;&lt;code data-line-number="7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-7" name="rest_code_9d7e839a6ec34fc0bc5a0bb64228d756-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;I dostajemy to:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/section&gt;
&lt;section id="materialy"&gt;
&lt;h2&gt;Materiały&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (pełny kod solvera)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (używane w notatce na marginesie dot. vs list comprehensions)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py, kod użyty w pliku BMP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, plik uruchamiający moduł BMP/ZIP&lt;/a&gt; (na bazie utworzonego przez Gynvaela)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacja modułu dis&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dzięki za misję (i pomysł z BMP), Gynvael!&lt;/p&gt;
&lt;/section&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>Python hackery</category><category>Python internals</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item><item><title>Setting up a Python development environment</title><link>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Setting up Python is usually simple, but there are some places where newcomers
(and experienced users) need to be careful. What versions are there? What’s the
difference between Python, CPython, Anaconda, PyPy? Those and many other
questions may stump new developers, or people wanting to use Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note: this guide is opinionated.&lt;/p&gt;
&lt;nav class="contents right-toc" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#glossary-and-questions" id="toc-entry-1"&gt;Glossary and questions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#python-versions-2-vs-3" id="toc-entry-2"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-run-multiple-pythons-on-the-same-machine" id="toc-entry-3"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#implementations" id="toc-entry-4"&gt;Implementations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions" id="toc-entry-5"&gt;Distributions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-make-exe-files-from-python-programs" id="toc-entry-6"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#where-to-learn-python-where-to-get-help" id="toc-entry-7"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-python" id="toc-entry-8"&gt;Installing Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#windows" id="toc-entry-9"&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#macos" id="toc-entry-10"&gt;macOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#linux-and-other-unix-like-oses" id="toc-entry-11"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-packages" id="toc-entry-12"&gt;Installing packages&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#user-installs" id="toc-entry-13"&gt;User installs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#virtual-environments" id="toc-entry-14"&gt;Virtual environments&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#tools-and-management" id="toc-entry-15"&gt;Tools and management&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installation-and-usage" id="toc-entry-16"&gt;Installation and usage&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#upgrading-and-moving" id="toc-entry-17"&gt;Upgrading and moving&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#packages-with-c-extensions-binary" id="toc-entry-18"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#other-stuff" id="toc-entry-19"&gt;Other stuff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#editors-and-ides" id="toc-entry-20"&gt;Editors and IDEs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#update-history" id="toc-entry-21"&gt;Update history&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="glossary-and-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-1" role="doc-backlink"&gt;Glossary and questions&lt;/a&gt;&lt;/h2&gt;
&lt;section id="python-versions-2-vs-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-2" role="doc-backlink"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Python community has undergone sort of a &lt;em&gt;schism&lt;/em&gt; in recent years. Python
3, released in 2008, broke backwards compatibility: deprecated some bad
constructs and libraries (eg. &lt;code class="docutils literal"&gt;raw_input()&lt;/code&gt; became &lt;code class="docutils literal"&gt;input()&lt;/code&gt; and the
original Python 2 function that ran code input by users is gone; &lt;code class="docutils literal"&gt;print()&lt;/code&gt;
became a function; many things that returned lists now are iterators — &lt;code class="docutils literal"&gt;zip&lt;/code&gt;,
&lt;code class="docutils literal"&gt;range&lt;/code&gt;), and completely remodelled strings (which are now Unicode by
default, and the interpreter behavior is stricter when the wrong type is used)&lt;/p&gt;
&lt;p&gt;For new code, you should use Python 3. &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Most popular packages support Python 3&lt;/a&gt;, and many of them support both Pythons at
the same time. The early bugs were ironed out in the first few point releases,
some features that made porting easier were added (back).&lt;/p&gt;
&lt;p&gt;But what if you end up needing Python 2 later? No problem: you can learn the
differences in a short time, and with the help of a few libraries (eg. &lt;code class="docutils literal"&gt;six&lt;/code&gt;)
you can easily write code that is compatible with Python 2 and 3 at the same
time, using the same codebase (most libraries out there do that).&lt;/p&gt;
&lt;p&gt;Python 2 will go EOL and lose official support and updates in 2020.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/Python2orPython3"&gt;Python 2 or Python 3 on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="can-i-run-multiple-pythons-on-the-same-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-3" role="doc-backlink"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes. Note that multiple Python interpreters are completely separate: they have
their own pip and packages, and you can’t run Python 2 code in a Python 3
interpreter. You need to specify which interpreter to use when installing
packages and running some scripts (eg. &lt;code class="docutils literal"&gt;pip2&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip3&lt;/code&gt; or &lt;code class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It’s best to limit yourself to the latest Python 2 and 3 versions. Python is
backwards-compatible within the major release, so Python 2.7 runs code
written with older 2.x versions in mind.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="implementations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-4" role="doc-backlink"&gt;Implementations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A programming language is an abstract construct. To run code written in that
language, an interpreter or compiler needs to be written. In Python’s case,
there’s a plethora of implementations. Some of them are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt; is the reference implementation. This is the implementation
distributed on &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt; and as part of many operating systems.
Most Python features are first implemented in CPython, and then they are
ported to other implementations.  If you don’t know what to choose, use
CPython.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PyPy&lt;/strong&gt; is a fast implementation, written in a subset of Python. It’s compatible with
Python 2.7 and 3.5 (beta support). It can run all pure Python code, and many
extension libraries that use CFFI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;IronPython&lt;/strong&gt; is a .NET CLR implementation. It can integrate with .NET code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jython&lt;/strong&gt; is a Java JVM implementation. It can integrate with Java code, as
well as other JVM languages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Implementations on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="distributions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-5" role="doc-backlink"&gt;Distributions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are also Python (CPython) distributions. They ship the CPython
interpreter and add some extra packages/features.  They are maintained by other
communities or corporate entities.&lt;/p&gt;
&lt;p&gt;The most popular third-party distribution is &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum Analytics. It’s popular
for data scientists, and includes over 100 packages, with extra pre-built
binaries available from the &lt;code class="docutils literal"&gt;conda&lt;/code&gt; package manager.&lt;/p&gt;
&lt;p&gt;I personally recommend to avoid Anaconda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Most packages have binary wheels for Windows, macOS and Linux (yes, Linux!)
making the installation as simple as &lt;code class="docutils literal"&gt;pip install numpy&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You waste disk space for packages Anaconda installs that you won’t ever need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s provided by some random for-profit company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ve seen bugs that were not reproducible outside of Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can still do data science using the official distribution. There’s
nothing special about Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDistributions"&gt;Python distributions on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="can-i-make-exe-files-from-python-programs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-6" role="doc-backlink"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, you can. There are tools for this — &lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is the best one. Note that you usually need to
run it on the destination operating system. And remember that “compiling” to
exe files like that &lt;strong&gt;is not&lt;/strong&gt; a security measure — your source code is still
easily recoverable. (It’s not a security measure in other languages either,
even if getting source code back might be more expensive/tricky in those.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-to-learn-python-where-to-get-help"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-7" role="doc-backlink"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of learning material is important. If you get a bad book, it might
discourage you from learning (because it’s boring), or may teach you
bad/outdated practices.&lt;/p&gt;
&lt;p&gt;If you can already program in another language, I recommend the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official
Python tutorial&lt;/a&gt;. For newcomers to
programming, I recommend &lt;a class="reference external" href="http://greenteapress.com/wp/think-python-2e/"&gt;Think Python&lt;/a&gt; or &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff
with Python&lt;/a&gt;.  They teach Python 3, and
(mostly) best practices.&lt;/p&gt;
&lt;p&gt;If you need help, try &lt;code class="docutils literal"&gt;#python&lt;/code&gt; on freenode IRC, the &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/tutor"&gt;Tutor&lt;/a&gt; or &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list"&gt;Python-list&lt;/a&gt; mailing lists, or a bunch of other communities. (I’m a regular on &lt;code class="docutils literal"&gt;#python&lt;/code&gt;)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="installing-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-8" role="doc-backlink"&gt;Installing Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This guide will focus on installing CPython 2.7 and 3.x (latest), using the standard
distribution. This choice is satisfactory for most people. Third-party
distributions, while handy in some cases, are not needed for most. (See
&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions"&gt;Distributions&lt;/a&gt; for arguments)&lt;/p&gt;
&lt;p&gt;Throughout this guide, I’ll refer to the Python interpreter executable as
&lt;code class="docutils literal"&gt;python&lt;/code&gt;. The exact name depends on your system and desired version. On most
OSes, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 2 and &lt;code class="docutils literal"&gt;python3&lt;/code&gt; is 3; &lt;code class="docutils literal"&gt;python2&lt;/code&gt; should also
exist.  On Arch Linux, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 3. On Windows, use the &lt;code class="docutils literal"&gt;py&lt;/code&gt;
launcher.&lt;/p&gt;
&lt;section id="windows"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-9" role="doc-backlink"&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Download the installer(s): &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those installers come with &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, and modern Python 3.x versions come with
the &lt;code class="docutils literal"&gt;py&lt;/code&gt; launcher.  You can use that launcher to pick a specific Python
version, eg.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2&lt;/span&gt; somefile.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2.7&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py&lt;/code&gt; (default system version)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s recommended for most use, and mandatory for upgrading pip.&lt;/p&gt;
&lt;p&gt;The 32-bit versions are more versatile. Most packages support both (the only
exception I’m aware of is Tensorflow, which only allows 64-bit Python 3.5 as of
now).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="macos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-10" role="doc-backlink"&gt;macOS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS ships with Python 2.7.10 (as of macOS Sierra). It’s not the latest
version; it’s good enough for most people, but I still recommend installing
your own (the system Python doesn’t include &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, for example). You can
install the latest 2.7 version, as well as Python 3, using a package manager. I
recommend Homebrew — it’s the most popular solution, and lets you install many
other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use the python.org installers: they do not have uninstallers, so you
will have outdated versions lying around after some time. There is no
auto-update as well.  &lt;strong&gt;DO NOT&lt;/strong&gt; attempt to remove the system-installed Python,
this will only damage your system and you’ll need to reinstall.&lt;/p&gt;
&lt;p&gt;If you already have a package manager installed (MacPorts, Fink), don’t install
a new one and just use the existing one.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;brew install python python3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should now have &lt;code class="docutils literal"&gt;python&lt;/code&gt;, &lt;code class="docutils literal"&gt;python3&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To update Homebrew and Python, run &lt;code class="docutils literal"&gt;brew update&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="linux-and-other-unix-like-oses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-11" role="doc-backlink"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On Linux, there usually are good enough packages in your OS repositories. You
should be able to install the appropriate package for Python (2 and/or 3).
Most (if not all) distributions require Python — &lt;strong&gt;do not&lt;/strong&gt; remove the
pre-installed packages, and be careful not to overwrite them with something
newer.&lt;/p&gt;
&lt;p&gt;If the version that ships with your distribution is too old, there are some
options. There might be some repositories with better versions, eg. the
&lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes PPA&lt;/a&gt;
for Ubuntu. Then there’s the other option of compiling Python. There
are some tools to help with this, like &lt;code class="docutils literal"&gt;pyenv&lt;/code&gt; or &lt;code class="docutils literal"&gt;pythonz&lt;/code&gt; (they can also
manage multiple Python versions), or you can do it manually.
The instructions depend on your exact requirements, but here’s a summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;a class="reference external" href="https://www.python.org/downloads/source/"&gt;source distribution from Python.org&lt;/a&gt; and unpack it. Go into the unpacked source directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure you’ve got a functional C compiler and Python’s dependencies. You can
usually use your system’s package manager to install the build dependencies
of your system Python. Some dependencies are optional (eg. &lt;code class="docutils literal"&gt;sqlite3&lt;/code&gt;
requires SQLite headers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=/opt/python3.6&lt;/span&gt;&lt;/code&gt; and then &lt;code class="docutils literal"&gt;make&lt;/code&gt;. (You may add other options to both. It will
take a while.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;make altinstall&lt;/code&gt; as root. Avoid &lt;code class="docutils literal"&gt;make install&lt;/code&gt;, as it can override
&lt;code class="docutils literal"&gt;python&lt;/code&gt; executables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember: compiling Python should be considered a &lt;strong&gt;last resort&lt;/strong&gt;, unless you
have very specific Python version requirements.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="installing-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-12" role="doc-backlink"&gt;Installing packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install third-party packages, you should use pip, the Python package
manager. If you’re using Windows or macOS (from Homebrew), pip is included with
your copy of Python.  If you’re on Linux and installed Python from a system
repository, install the correct system package (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-pip&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/code&gt;). If you compiled your own Python, pip is also included.&lt;/p&gt;
&lt;p&gt;To run pip, use &lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (Windows), &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (other platforms),
or the short &lt;code class="docutils literal"&gt;pip&lt;/code&gt;/&lt;code class="docutils literal"&gt;pip3&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEVER use sudo pip.&lt;/strong&gt; This can cause numerous problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;conflicts between packages installed by pip and your system package
manager&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip modifying system packages, leading to issues when updating them, or
breaking dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no isolation between package versions, which is sometimes needed to satisfy
dependencies&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package install is specific to the Python interpreter used to run
&lt;code class="docutils literal"&gt;pip&lt;/code&gt;. Packages installed to a virtualenv are separate from system packages;
packages installed for “global” Python 2.7 are separate from 3.6 packages.
Virtual environments generally don’t use the system packages, unless
specifically enabled during creation.&lt;/p&gt;
&lt;p&gt;Some distros have popular packages in their repositories. Sometimes they’re
good; in other cases they’re terribly outdated or they lack important
components, making package managers angry and sick of supporting a 2-year-old
version. (Especially since most bugs are closed with “we’ve fixed that long
ago”)&lt;/p&gt;
&lt;section id="user-installs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-13" role="doc-backlink"&gt;User installs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a small scale, you can install packages with pip for a single user.  Use
&lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; PACKAGE&lt;/code&gt; to do this. If your package installs &lt;a class="reference external" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/"&gt;scripts&lt;/a&gt;,
they will be installed to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt; on Linux, and
&lt;code class="docutils literal"&gt;~/Library/Python/X.Y/bin&lt;/code&gt; on macOS (X.Y is Python version), or you can use
&lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/code&gt; if the package supports it.&lt;/p&gt;
&lt;p&gt;For most people and projects, virtual environments are better. There are,
however, use cases for putting some packages user-wide — if you don’t work on
projects, but instead are doing one-off research projects, those are better
suited by user-wide installs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-14" role="doc-backlink"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p class="lead"&gt;I wrote a newer, more detailed post about virtualenvs: &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/"&gt;Python Virtual
Environments in Five Minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Virtual environments are the best way to install and manage Python packages.
Advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Isolation of projects and their requirements: if one app/package requires
library version X, but another requires version Y, they can live in separate
virtual environments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Independent from system-wide packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lightweight (an empty virtualenv is about 10 MB)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple to re-create in any place (&lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; → &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="tools-and-management"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-15" role="doc-backlink"&gt;Tools and management&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are two tools to facilitate creation of virtual environments: the older
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; project, and the newer
&lt;code class="docutils literal"&gt;venv&lt;/code&gt; module. The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is shipped with Python 3.x; some
distributions may put it in a separate package or remove it altogether. Use
whichever works for you.  Virtualenv is compatible with more Python versions
and cannot be broken by incompetent OS package maintainers (&lt;code class="docutils literal"&gt;venv&lt;/code&gt; requires
an extra package on Debian).&lt;/p&gt;
&lt;p&gt;There are multiple schools of thought regarding virtualenv placement and
content. Myself, I use &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to manage virtualenvs
and put them in &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;. Other people put virtualenvs inside their
git repositories (but they &lt;em&gt;must&lt;/em&gt; be in &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;) Virtualenvs should only contain packages
installed with &lt;code class="docutils literal"&gt;pip&lt;/code&gt; so they can be recreated quickly.&lt;/p&gt;
&lt;p&gt;I also use the &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; plugin for Oh My Zsh, which also
activates virtualenvs with the same name as a git repo, or the environment
named by a &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; file.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="installation-and-usage"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-16" role="doc-backlink"&gt;Installation and usage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install virtualenv user-wide, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;. You can
then use it with &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; virtualenv DIRECTORY&lt;/code&gt;. You may pass extra
options, eg. interpreter to use (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; python3&lt;/code&gt;). Sometimes you need to install
virtualenv for every Python version; usually, one copy is enough.&lt;/p&gt;
&lt;p&gt;How to use them? This is a subject of heated debate in the Python community.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Some people believe that activating (&lt;code class="docutils literal"&gt;source bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;Scripts\activate&lt;/code&gt; on Windows) is the right thing to do and simplifies work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others think that you should use &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; (or other scripts in that
directory) directly, as activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper
variables — those variables are not mandatory for operation, running
the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others still think &lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;virtualenvs should be used in subshells&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, if activating virtualenvs works in your environment, you should
do it — it’s the most convenient option. There are, however, cases when
activation fails, or is otherwise impossible — calling &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; directly
is your best bet in that case. If you are working inside shell scripts, do not
activate virtualenvs.  I’m not a fan of the subshell option, because it
complicates stuff if you work on multiple projects, and requires tracking usage
manually.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="upgrading-and-moving"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-17" role="doc-backlink"&gt;Upgrading and moving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Upgrading the system Python may make your virtualenvs unusable.
For patch version upgrades, you can just update symlinks (see &lt;a class="reference external" href="https://github.com/Kwpolska/scripts/blob/master/fix-venvs.sh"&gt;fix-venvs.sh&lt;/a&gt;).
However, if the minor version changes, it’s best to re-create the virtualenv
(you need to create &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; ahead of time).&lt;/p&gt;
&lt;p&gt;You cannot move a virtualenv between directories/machines or rename
virtualenvs. You need to use &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;, create a new
virtualenv, and run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; (you can then delete
the old environment with a simple &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="packages-with-c-extensions-binary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-18" role="doc-backlink"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The situation improved drastically in the past year or so. Nowadays, almost
all packages have a pre-compiled package available in PyPI. Those packages work
for Windows, macOS, and Linux. There are packages for some of the most
common &lt;em&gt;offenders&lt;/em&gt;, including Pillow, lxml, PyQt5, numpy… However, there might
still be packages without wheels on PyPI.&lt;/p&gt;
&lt;p&gt;If there is no wheel for a package and you are on Windows, check out &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph
Gohlke’s unofficial binaries&lt;/a&gt;.
If you can’t find any wheels online, you would have to resort to compiling it
manually — this requires installing Visual Studio (Visual C++) in a version
that matches your Python, and it’s kind of a pain to do.&lt;/p&gt;
&lt;p&gt;If you are not on Windows, you must install a C compiler and toolchain.
If you get a warning about missing &lt;code class="docutils literal"&gt;Python.h&lt;/code&gt;, install the appropriate development
package — for example, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-dev&lt;/span&gt;&lt;/code&gt;) on Debian/Ubuntu,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-devel&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-devel&lt;/span&gt;&lt;/code&gt; on RHEL/Fedora. The package you’re trying
to install might have other dependencies that you need to install (the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-dev(el)&lt;/span&gt;&lt;/code&gt; part is important, too)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-19" role="doc-backlink"&gt;Other stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re working on a project, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-e&lt;/span&gt; .&lt;/code&gt; inside the project
directory to install the package in your environment in development (editable)
mode. This loads code directly from your repository — you don’t need to
re-install on every change; you might need to re-install when your version
number changes.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="editors-and-ides"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-20" role="doc-backlink"&gt;Editors and IDEs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another important thing a developer should take care of is the choice of an
editor. This is an important decision, and is the reason for many holy wars in
the programmer community.&lt;/p&gt;
&lt;p&gt;A good editor should have syntax highlighting for all languages you need to
work with. It should also have features like visual block/multiple selections,
sophisticated find-and-replace, file finding, code completion, and many more minor
but helpful features.&lt;/p&gt;
&lt;p&gt;Then there’s the difference between IDEs and text editors. Text editors are
simpler, whereas IDEs try to include many extra things not necessarily related
to writing code. IDEs often use more resources, but you won’t notice it with a
modern computer (especially with a SSD).&lt;/p&gt;
&lt;p&gt;The best IDE out there is &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from
JetBrains. It has both a free Community and paid Professional edition. The
JetBrains folks are experts at IDEs — they have fully-fledged tools for many
languages. Their Python solution offers a plethora of options that aid
programmers in their work.  Also, if you work with Java, or otherwise more than
one IDEA-supported language, then install IntelliJ IDEA and the Python plugin
(which has the same features as PyCharm).  Students can get &lt;a class="reference external" href="https://www.jetbrains.com/student/"&gt;free
Professional/Ultimate licenses for JetBrains products&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also spend a lot of time in &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; (&lt;a class="reference external" href="https://neovim.io/"&gt;neovim&lt;/a&gt;/&lt;a class="reference external" href="http://vimr.org/"&gt;VimR&lt;/a&gt; to be precise). Vim is the
most powerful text editor out there, and with the right set of plugins it can
beat IDEs at speed and productivity. Vim has a steep learning curve, but it’s
worth it — you can do large changes with just a few keystrokes. Vim is
considered so good that many IDEs (Visual Studio, IntelliJ IDEA/PyCharm) have
Vim emulation plugins.&lt;/p&gt;
&lt;p&gt;Another option is &lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; — it’s
a text editor, but can offer many IDE-like features with the right set of
plugins. It’s Electron-based architecture, or effectively being based on top of
Google’s Chromium, is unfortunate and can lead to terrible performance on
lower-end machines, and on higher-end ones in some cases. (In my experience,
it’s better than Atom.) You can also try &lt;a class="reference external" href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; ($80).&lt;/p&gt;
&lt;p&gt;But really, almost any editor will do. But please &lt;strong&gt;avoid&lt;/strong&gt; IDLE, the editor
included with Python. It lacks some of the most basic things — it doesn’t even
have an option to show line numbers. Not to mention its ugliness. Also, don’t
use Notepad and TextEdit. Those are too simple, and Notepad has encoding
issues.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="update-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-21" role="doc-backlink"&gt;Update history&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;2018-09-21&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Link to python-virtual-environments post.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-19&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Better description of problems caused by using sudo pip.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-10&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Added notes about not removing built-in Pythons.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-07&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Spelling fixes and updates to the virtualenv usage section.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</guid><pubDate>Mon, 03 Jul 2017 10:40:00 GMT</pubDate></item><item><title>Unix locales vs Unicode (‘ascii’ codec can’t encode character…)</title><link>https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;You might get unusual errors about Unicode and inability to convert
to ASCII. Programs might just crash at random. Those are often simple to fix —
all you need is correct locale configuration.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p class="lead"&gt;Has this ever happened to you?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code pytb"&gt;&lt;a id="rest_code_56a50d4d2bd74a369041a77d9ec6d688-1" name="rest_code_56a50d4d2bd74a369041a77d9ec6d688-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_56a50d4d2bd74a369041a77d9ec6d688-1"&gt;&lt;/a&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;a id="rest_code_56a50d4d2bd74a369041a77d9ec6d688-2" name="rest_code_56a50d4d2bd74a369041a77d9ec6d688-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_56a50d4d2bd74a369041a77d9ec6d688-2"&gt;&lt;/a&gt;  File &lt;span class="nb"&gt;"aogonek.py"&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_56a50d4d2bd74a369041a77d9ec6d688-3" name="rest_code_56a50d4d2bd74a369041a77d9ec6d688-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_56a50d4d2bd74a369041a77d9ec6d688-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0105&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_56a50d4d2bd74a369041a77d9ec6d688-4" name="rest_code_56a50d4d2bd74a369041a77d9ec6d688-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_56a50d4d2bd74a369041a77d9ec6d688-4"&gt;&lt;/a&gt;&lt;span class="gr"&gt;UnicodeEncodeError&lt;/span&gt;: &lt;span class="n"&gt;'ascii' codec can't encode character '\u0105' in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_fe72052f66154829b4dae5991429ea2d-1" name="rest_code_fe72052f66154829b4dae5991429ea2d-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fe72052f66154829b4dae5991429ea2d-1"&gt;&lt;/a&gt;Nikola: Could not guess locale for language en, using locale C
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_132023d284c246e09cd40ec41d1949e4-1" name="rest_code_132023d284c246e09cd40ec41d1949e4-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_132023d284c246e09cd40ec41d1949e4-1"&gt;&lt;/a&gt;Input: ą
&lt;a id="rest_code_132023d284c246e09cd40ec41d1949e4-2" name="rest_code_132023d284c246e09cd40ec41d1949e4-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_132023d284c246e09cd40ec41d1949e4-2"&gt;&lt;/a&gt;Desired ascii(): '\u0105'
&lt;a id="rest_code_132023d284c246e09cd40ec41d1949e4-3" name="rest_code_132023d284c246e09cd40ec41d1949e4-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_132023d284c246e09cd40ec41d1949e4-3"&gt;&lt;/a&gt;Real ascii(): '\udcc4\udc85'
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_1d9f86aaac744b50a15932d9560456fb-1" name="rest_code_1d9f86aaac744b50a15932d9560456fb-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_1d9f86aaac744b50a15932d9560456fb-1"&gt;&lt;/a&gt;perl: warning: Setting locale failed.
&lt;a id="rest_code_1d9f86aaac744b50a15932d9560456fb-2" name="rest_code_1d9f86aaac744b50a15932d9560456fb-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_1d9f86aaac744b50a15932d9560456fb-2"&gt;&lt;/a&gt;perl: warning: Please check that your locale settings:
&lt;a id="rest_code_1d9f86aaac744b50a15932d9560456fb-3" name="rest_code_1d9f86aaac744b50a15932d9560456fb-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_1d9f86aaac744b50a15932d9560456fb-3"&gt;&lt;/a&gt;    [...]
&lt;a id="rest_code_1d9f86aaac744b50a15932d9560456fb-4" name="rest_code_1d9f86aaac744b50a15932d9560456fb-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_1d9f86aaac744b50a15932d9560456fb-4"&gt;&lt;/a&gt;    are supported and installed on your system.
&lt;a id="rest_code_1d9f86aaac744b50a15932d9560456fb-5" name="rest_code_1d9f86aaac744b50a15932d9560456fb-5" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_1d9f86aaac744b50a15932d9560456fb-5"&gt;&lt;/a&gt;perl: warning: Falling back to the standard locale ("C").
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="lead"&gt;All those errors have the same root cause: incorrect locale configuration.
To fix them all, you need to generate the missing locales and set them.&lt;/p&gt;
&lt;section id="check-currently-used-locale"&gt;
&lt;h2&gt;Check currently used locale&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;locale&lt;/code&gt; command (without arguments) should tell you which locales you’re
currently using.  (The list might be shorter on your end)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code sh"&gt;&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-1" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-1"&gt;&lt;/a&gt;$ locale
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-2" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-3" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_CTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-4" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NUMERIC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-5" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-5" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-6" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-6" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_COLLATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-7" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-7" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-7"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MONETARY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-8" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-8" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-8"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MESSAGES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-9" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-9" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-9"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_PAPER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-10" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-10" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-10"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-11" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-11" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-12" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-12" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TELEPHONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-13" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-13" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MEASUREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-14" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-14" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_IDENTIFICATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-15" name="rest_code_8fb7fefadefd4fa899fc92e8ad25330c-15" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_8fb7fefadefd4fa899fc92e8ad25330c-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If any of those is set to &lt;code class="docutils literal"&gt;C&lt;/code&gt; or &lt;code class="docutils literal"&gt;POSIX&lt;/code&gt;, has a different encoding than
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;UTF-8&lt;/span&gt;&lt;/code&gt; (sometimes spelled &lt;code class="docutils literal"&gt;utf8&lt;/code&gt;) is empty (with the exception of
&lt;code class="docutils literal"&gt;LC_ALL&lt;/code&gt;), or if you see any errors, you need to reconfigure your locale.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="check-locale-availability-and-install-missing-locales"&gt;
&lt;h2&gt;Check locale availability and install missing locales&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is check locale availability. To do this, run
&lt;code class="docutils literal"&gt;locale &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/code&gt;. This will produce a list of all installed locales.  You can use
&lt;code class="docutils literal"&gt;grep&lt;/code&gt; to get a more reasonable list.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_fe9303b1e18c4740b59d995c522525e1-1" name="rest_code_fe9303b1e18c4740b59d995c522525e1-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fe9303b1e18c4740b59d995c522525e1-1"&gt;&lt;/a&gt;$ locale -a | grep -i utf
&lt;a id="rest_code_fe9303b1e18c4740b59d995c522525e1-2" name="rest_code_fe9303b1e18c4740b59d995c522525e1-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fe9303b1e18c4740b59d995c522525e1-2"&gt;&lt;/a&gt;&amp;lt;lists all UTF-8 locales&amp;gt;
&lt;a id="rest_code_fe9303b1e18c4740b59d995c522525e1-3" name="rest_code_fe9303b1e18c4740b59d995c522525e1-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fe9303b1e18c4740b59d995c522525e1-3"&gt;&lt;/a&gt;$ locale -a | grep -i utf | grep -i en_US
&lt;a id="rest_code_fe9303b1e18c4740b59d995c522525e1-4" name="rest_code_fe9303b1e18c4740b59d995c522525e1-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fe9303b1e18c4740b59d995c522525e1-4"&gt;&lt;/a&gt;en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The best locale to use is the one for your language, with the UTF-8 encoding.
The locale will be used by some console apps for output. I’m going to use
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;en_US.UTF-8&lt;/span&gt;&lt;/code&gt; in this guide.&lt;/p&gt;
&lt;p&gt;If you can’t see any UTF-8 locales, or no appropriate locale setting for your
language of choice, you might need to generate those. The required actions
depend on your distro/OS.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Debian, Ubuntu, and derivatives: install &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;language-pack-en-base&lt;/span&gt;&lt;/code&gt;, run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;dpkg-reconfigure&lt;/span&gt; locales&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RHEL, CentOS, Fedora: install &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;glibc-langpack-en&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux: uncomment relevant entries in &lt;code class="docutils literal"&gt;/etc/locale.gen&lt;/code&gt; and run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;locale-gen&lt;/span&gt;&lt;/code&gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Locale"&gt;(wiki)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For other OSes, refer to the documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need a UTF-8 locale to ensure compatibility with software. Avoid the &lt;code class="docutils literal"&gt;C&lt;/code&gt;
and &lt;code class="docutils literal"&gt;POSIX&lt;/code&gt; locales (it’s ASCII) and locales with other encodings (those
aren’t used by ~anyone these days)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="configure-system-wide"&gt;
&lt;h2&gt;Configure system-wide&lt;/h2&gt;
&lt;p&gt;On some systems, you may be able to configure locale system-wide.  Check your
system documentation for details. If your system has systemd, run&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_ba82894513404172a5c62cf84028ff17-1" name="rest_code_ba82894513404172a5c62cf84028ff17-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_ba82894513404172a5c62cf84028ff17-1"&gt;&lt;/a&gt;sudo localectl set-locale LANG=en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="configure-for-a-single-user"&gt;
&lt;h2&gt;Configure for a single user&lt;/h2&gt;
&lt;p&gt;If your environment does not allow system-wide locale configuration (macOS,
shared server with generated but unconfigured locales), or if you want to
ensure it’s always configured independently of system settings.&lt;/p&gt;
&lt;p&gt;To do this, you need to edit the configuration file for your shell. If you’re
using bash, it’s &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt; (or &lt;code class="docutils literal"&gt;.bash_profile&lt;/code&gt; on macOS). For zsh users,
&lt;code class="docutils literal"&gt;.zshrc&lt;/code&gt;.  Add this line (or equivalent in your shell):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code sh"&gt;&lt;a id="rest_code_44aa4d4e14764dbd8e479f542c3bfb57-1" name="rest_code_44aa4d4e14764dbd8e479f542c3bfb57-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_44aa4d4e14764dbd8e479f542c3bfb57-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should be enough. Note that those settings don’t apply to programs
not launched through a shell.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;&lt;strong&gt;Python/Windows corner:&lt;/strong&gt; Python 3.7 will fix this on Unix by assuming UTF-8
if it encounters the C locale.  On Windows, Python 3.6 is using UTF-8
interactively, but not when using shell redirections to files or pipes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post was brought to you by ą — U+0105 LATIN SMALL LETTER A WITH OGONEK.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/</guid><pubDate>Sun, 18 Jun 2017 18:40:00 GMT</pubDate></item><item><title>Structuring and automating a Python project with the Python Project Template</title><link>https://chriswarrick.com/pl/blog/2017/04/09/python-project-template-structure-and-automation/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;To create a project that other people can use and contribute to, you need to
follow a specific directory structure. Moreover, releasing a new version should
be as simple and painless as possible. For my projects, I use a template that
has the structure already in place, and comes with automation for almost every
part of a release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project Template&lt;/a&gt; is my approach to this. It comes with a good (IMO) structure and automation.&lt;/p&gt;
&lt;p&gt;What does it include? A whole lot of things. Documentation, Sphinx
configuration, a simple test suite, a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file, some AUR stuff, and
perhaps the most important part — the &lt;code class="docutils literal"&gt;release&lt;/code&gt; script. It can automate a lot
of tasks that are part of a release.&lt;/p&gt;
&lt;p&gt;You see, releasing a package is error-prone. There are a lot of things that can go wrong:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Version numbers. They may appear in code comments, Sphinx configuration,
README files and documentation, and setup.py. Some people claim to have
“solutions” for this. Most of those solutions don’t work right — either they
import a file from the project (which may break if &lt;code class="docutils literal"&gt;__init__.py&lt;/code&gt; is too
magical), read a file from that place (which might not get included
properly), or use some setuptools extension to get the version from VCS or
whatever (which needs to be installed before the package). Using &lt;code class="docutils literal"&gt;sed&lt;/code&gt; to
fix the version numbers is much simpler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forgetting about changelogs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not updating translations or other important files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve had quite a few botched releases in the &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; project. I wrote a
&lt;a class="reference external" href="http://getnikola.github.io/releng/checklist.html"&gt;checklist&lt;/a&gt; to prevent things like those. You may notice that the most
prominent step is to run a &lt;code class="docutils literal"&gt;release&lt;/code&gt; script. This step replaced 21 others —
now the checklist only talks about writing announcements, sending e-mails,
updating the website, and doing some GitHub stuff that is not yet automated.&lt;/p&gt;
&lt;p&gt;The template promotes a &lt;em&gt;release early, release often&lt;/em&gt; workflow: since making a
new release requires almost no human intervention, you might as well do it
every time you make a bunch of changes. In my projects, &lt;em&gt;everything&lt;/em&gt; gets
automated, and it might as well be possible in yours.&lt;/p&gt;
&lt;section id="the-complete-feature-list-as-of-v2-1-5"&gt;
&lt;h2&gt;The complete feature list (as of v2.1.5)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;pre-configured Sphinx with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;CONTRIBUTING.rst&lt;/code&gt; guide (used by GitHub when sending a pull request or an issue)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;LICENSE.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;an empty &lt;code class="docutils literal"&gt;CHANGELOG.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;README.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a bare-bones &lt;code class="docutils literal"&gt;index.rst&lt;/code&gt; page&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The exact same files in &lt;code class="docutils literal"&gt;/&lt;/code&gt;, which are fragile and &lt;strong&gt;MAY NOT&lt;/strong&gt; be modified
as they are replaced with copies in &lt;code class="docutils literal"&gt;/docs&lt;/code&gt; by the &lt;code class="docutils literal"&gt;release&lt;/code&gt; script&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__init__.py&lt;/code&gt;, &lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; and &lt;code class="docutils literal"&gt;template.py&lt;/code&gt; files in the Python package directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file that could be good enough for people, and that supports
&lt;code class="docutils literal"&gt;entry_points&lt;/code&gt; (see &lt;a class="reference external" href="https://go.chriswarrick.com/entry_points"&gt;https://go.chriswarrick.com/entry_points&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;tests/&lt;/code&gt; containing some &lt;em&gt;Is My Python Sane?&lt;/em&gt;-style tests (using &lt;code class="docutils literal"&gt;pytest&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An automated global update script (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;.pypt/PYPT-UPDATE&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Entry points configuration ready to be uncommented (and a matching
&lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add-ons for Qt users (in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/Qt&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A sample hook for AUR updates (in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/AUR&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PKGBUILDs for the Arch Linux User Repository (AUR)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A state-of-the-art &lt;code class="docutils literal"&gt;release&lt;/code&gt; script, the operations of which are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;querying the user for version number, commit message and changes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;updating &lt;code class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bumping the version number in all the files, changing dates where necessary&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;copying over &lt;code class="docutils literal"&gt;/docs/README.rst&lt;/code&gt;,  &lt;code class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/code&gt; and &lt;code class="docutils literal"&gt;/docs/CONTRIBUTING.rst&lt;/code&gt; to &lt;code class="docutils literal"&gt;/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locale generation (via the &lt;code class="docutils literal"&gt;.pypt/localegen&lt;/code&gt; script)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running &lt;code class="docutils literal"&gt;import $PROJECTLC&lt;/code&gt; and the test suite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;uploading a source distribution and a wheel to PyPI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making a Git commit and tagging the release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;creating a GitHub Releases entry&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;updating the AUR packages (by using hooks)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;
&lt;a href="https://github.com/Kwpolska/python-project-template" class="btn btn-lg btn-primary"&gt;&lt;i class="fab fa-github"&gt;&lt;/i&gt; Check it out on GitHub&lt;/a&gt;
&lt;/div&gt;&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/04/09/python-project-template-structure-and-automation/</guid><pubDate>Sun, 09 Apr 2017 09:00:00 GMT</pubDate></item><item><title>Code writing code: Python and Vim as development aids</title><link>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Recently I was working on some C# and Java code. And along the way, I used
Python and Vim to (re)write my code. A small Python script and a 6-keystroke
Vim macro did it faster and better than a human would.&lt;/p&gt;
&lt;p&gt;Every programmer should learn a good scripting language and use a programmable
editor like Vim. Why? Here are two examples, after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="episode-i-inotifypropertychanged-or-python-writing-c"&gt;
&lt;h2&gt;Episode I: &lt;code class="docutils literal"&gt;INotifyPropertyChanged&lt;/code&gt;, or Python writing C#&lt;/h2&gt;
&lt;p&gt;I was building a private C# weekend project (that turned into a weeklong
project) — and by the way, WPF and C# are quite pleasant (Windows Forms is a
trainwreck, though). One of the things I used in that project was a DataGrid
bound to a list of custom objects (a DataGrid is a table, basically). And in
order to use it, you need to use the &lt;code class="docutils literal"&gt;INotifyPropertyChanged&lt;/code&gt; interface &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms229614(v=vs.100).aspx"&gt;(MSDN)&lt;/a&gt;.
It involves doing something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-1" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-1"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// can also be a field&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-2" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-3" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;[JsonProperty]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-4" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-4"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-5" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-6" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-7" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-8" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-9" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-10" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-11" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="n"&gt;NotifyPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-12" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-13" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-14" name="rest_code_c3a0e2f4294e4b99ae682f7d69f21cf3-14"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;That’s 12 lines of code (excluding &lt;code class="docutils literal"&gt;[JsonProperty]&lt;/code&gt; which comes from the
Json.NET library) for that pattern. Oh: and I need to do that for &lt;strong&gt;every&lt;/strong&gt;
field/property of my class, because otherwise any changes to them would not be
reflected in the tables (and maybe one or two fields were &lt;em&gt;not&lt;/em&gt; in the table).&lt;/p&gt;
&lt;p&gt;Doing that by hand is really not feasible: you need to copy-paste this
large block 14 times and take care of 5 instances of the name (3 with
underscores, 2 without), 2 instances of the type, and the &lt;code class="docutils literal"&gt;[JsonProperty]&lt;/code&gt;
attribute (which does not appear on all properties).&lt;/p&gt;
&lt;p&gt;So, I used one of those intelligent computer things to do it for me. I wrote a
really simple &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script and ran it. And I ended up with all 14 fields built
for me.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py.html"&gt;code-writing-code/write_properties.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-1" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-2" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-3" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;public &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-4" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-4"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            get {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-5" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                return &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-6" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-7" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            set {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-8" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                if (value != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_) {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-9" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ = value;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-10" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    NotifyPropertyChanged("&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-11" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-12" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-13" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-14" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-15"&gt;&lt;code data-line-number="15"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-15" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[JsonProperty]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;        '&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-16"&gt;&lt;code data-line-number="16"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-16" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-16"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-17"&gt;&lt;code data-line-number="17"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-17" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-18"&gt;&lt;code data-line-number="18"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-18" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-19"&gt;&lt;code data-line-number="19"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-19" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-20"&gt;&lt;code data-line-number="20"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-20" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-21"&gt;&lt;code data-line-number="21"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-21" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-22"&gt;&lt;code data-line-number="22"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-22" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-23"&gt;&lt;code data-line-number="23"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-23" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-23"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-24"&gt;&lt;code data-line-number="24"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-24" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-25"&gt;&lt;code data-line-number="25"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-25" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-25"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'1 string name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-26"&gt;&lt;code data-line-number="26"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-26" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'0 int another'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-27"&gt;&lt;code data-line-number="27"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-27" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 12 fields omitted for brevity&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-28"&gt;&lt;code data-line-number="28"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-28" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-29"&gt;&lt;code data-line-number="29"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-29" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-30"&gt;&lt;code data-line-number="30"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-30" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-30"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-31"&gt;&lt;code data-line-number="31"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-31" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Private definitions (internal)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-32"&gt;&lt;code data-line-number="32"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-32" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-33"&gt;&lt;code data-line-number="33"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-33" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-33"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"        private &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ { get; set; }"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-34"&gt;&lt;code data-line-number="34"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-34" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-34"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-35"&gt;&lt;code data-line-number="35"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-35" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-35"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-36"&gt;&lt;code data-line-number="36"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-36" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Public definitions (with notifications)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-37"&gt;&lt;code data-line-number="37"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-37" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-37"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_227ae50df8e54f5db5e9278ab4d23a07-38"&gt;&lt;code data-line-number="38"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_227ae50df8e54f5db5e9278ab4d23a07-38" name="rest_code_227ae50df8e54f5db5e9278ab4d23a07-38"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;That script takes a list of properties and spits out a block of code, ready to
be pasted into the code. Visual Studio has a nice &lt;em&gt;Insert File as Text&lt;/em&gt;
feature, so redirecting the output to a file and using that option is enough.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="episode-ii-fixing-argument-order-or-vim-re-writing-java"&gt;
&lt;h2&gt;Episode II: Fixing argument order, or Vim (re)writing Java&lt;/h2&gt;
&lt;p&gt;Another project, &lt;a class="reference external" href="https://github.com/Kwpolska/numbernamer"&gt;Number Namer&lt;/a&gt;, written in Java, and it does what it says on
the tin: takes a number and writes it out as words, while being multilingual and
extensible. I used Eclipse for this project, because it looks good, is really
helpful with its code linting, and does not run slowly on my aging system (I’m
looking at you, IntelliJ IDEA aka PyCharm aka Android Studio…)&lt;/p&gt;
&lt;p&gt;And so, I was building a test suite, using &lt;a class="reference external" href="http://junit.org/"&gt;JUnit&lt;/a&gt;. It’s pretty
straightforward, and I remember the syntax from Python’s unittest (even though
I write tests with &lt;a class="reference external" href="http://pytest.org/"&gt;pytest&lt;/a&gt; nowadays). Or so I thought.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code java"&gt;&lt;a id="rest_code_a43eb06153544808b08eaacc774401a0-1" name="rest_code_a43eb06153544808b08eaacc774401a0-1" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a43eb06153544808b08eaacc774401a0-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (incorrect)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a43eb06153544808b08eaacc774401a0-2" name="rest_code_a43eb06153544808b08eaacc774401a0-2" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a43eb06153544808b08eaacc774401a0-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a43eb06153544808b08eaacc774401a0-3" name="rest_code_a43eb06153544808b08eaacc774401a0-3" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a43eb06153544808b08eaacc774401a0-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (fixed)                              ^ cursor&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a43eb06153544808b08eaacc774401a0-4" name="rest_code_a43eb06153544808b08eaacc774401a0-4" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a43eb06153544808b08eaacc774401a0-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see, the typical Python spelling is &lt;code class="docutils literal"&gt;self.assertEquals(actual,
expected)&lt;/code&gt;. Java adds a &lt;code class="docutils literal"&gt;String&lt;/code&gt; message parameter and it also swaps
&lt;code class="docutils literal"&gt;actual&lt;/code&gt; and &lt;code class="docutils literal"&gt;expected&lt;/code&gt;. Which I didn’t notice at first, and I wrote my
assertions incorrectly. While it doesn’t &lt;em&gt;really&lt;/em&gt; matter (it will still work),
the output looked a bit weird.&lt;/p&gt;
&lt;p&gt;And I noticed only when I finished writing my tests (and I had a typo in my
expected output). I wanted to fix them all — not manually, of course. So, I
closed this file, brought up Vim, searched for the motion I need (it’s
&lt;code class="docutils literal"&gt;t{char}&lt;/code&gt; — see &lt;code class="docutils literal"&gt;:help t&lt;/code&gt;). And I ended up with this
(cursor placed on the comma after the first argument):&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;kbd style="font-size: 2em;"&gt;dt,&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;t)&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;p&lt;/kbd&gt;
&lt;/div&gt;&lt;p&gt;What does this do, you may ask? It’s actually pretty self-explanatory:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;d&lt;/b&gt;elete &lt;b&gt;t&lt;/b&gt;ill comma, (go) &lt;b&gt;t&lt;/b&gt;ill closing parenthesis, &lt;b&gt;p&lt;/b&gt;aste.
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This fixes one line. Automatically. Make it a macro (wrap in &lt;code class="docutils literal"&gt;qq&lt;/code&gt; … &lt;code class="docutils literal"&gt;q&lt;/code&gt;,
use with &lt;code class="docutils literal"&gt;@q&lt;/code&gt;) and now you can run it on all lines, either by moving manually or by
searching for &lt;code class="docutils literal"&gt;,&lt;/code&gt; and pressing &lt;code class="docutils literal"&gt;n@q&lt;/code&gt; until you run out of lines.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Some of you might say “but VS/Eclipse/IDEA has an option for that somewhere” or
“[expensive tool] can do that” — and a Google search shows that there is an
Eclipse plugin to swap arguments and that I could also write a regex to solve
my second issue. Nevertheless, Python is a great tool in a programmer’s toolbox
— especially the interactive interpreter. And Vim is an awesome editor that can
accomplish magic in a few keystrokes — and there are many more things you can
do with it.&lt;/p&gt;
&lt;p class="lead"&gt;Go learn &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;Also: don’t even bother with VsVim or IdeaVim or any other Vim emulation
plugins, they work in unusual ways and often don’t give you everything — for
example, VsVim has a Vim visual mode (&lt;code class="docutils literal"&gt;v&lt;/code&gt; key) and Visual Studio selection
mode (mouse), and only one allows Vim keystrokes (the other will replace
selected text).&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</guid><pubDate>Fri, 27 May 2016 08:46:35 GMT</pubDate></item></channel></rss>