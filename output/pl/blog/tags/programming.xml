<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o programming)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Mon, 29 Apr 2024 16:50:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>PowerShell: the object-oriented shell you didn’t know you needed</title><link>https://chriswarrick.com/pl/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;PowerShell is an interactive shell and scripting language from Microsoft. It’s object-oriented — and that’s not just a buzzword, that’s a big difference to how the standard Unix shells work. And it is actually usable as an interactive shell.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;PowerShell is so nice, Microsoft made it twice.&lt;/p&gt;
&lt;p&gt;Specifically, there concurrently exist two products named PowerShell:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows PowerShell (5.1) is a built-in component of Windows. It is proprietary, Windows-only, and is based on the equally proprietary and equally Windows-only .NET Framework 4.x. It has a blue icon.&lt;/li&gt;
&lt;li&gt;PowerShell (7.x), formerly known as PowerShell Core, is a stand-alone application. It is MIT-licensed &lt;a href="https://github.com/PowerShell/PowerShell"&gt;(developed on GitHub)&lt;/a&gt;, available for Windows, Linux, and macOS, and is based on the equally MIT-licensed and equally multi-platform .NET (formerly .NET Core). It has a black icon.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows PowerShell development stopped when PowerShell (Core) came out. There are some niceties and commands missing in it, but it is still a fine option for trying it out or for when one can’t install PowerShell on a Windows system but need to solve something with code.&lt;/p&gt;
&lt;p&gt;All examples in this post should work in either version of PowerShell on any OS (unless explicitly noted otherwise).&lt;/p&gt;
&lt;p&gt;Install the modern PowerShell: &lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.4"&gt;Windows&lt;/a&gt;, &lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4"&gt;Linux&lt;/a&gt;, &lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.4"&gt;macOS&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Objects? In my shell?&lt;/h2&gt;
&lt;p&gt;Let’s try getting a directory listing. This is Microsoft land, so let’s try the DOS command for a directory listing — that would be &lt;code&gt;dir&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;

    &lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;

&lt;span class="n"&gt;Mode&lt;/span&gt;                 &lt;span class="n"&gt;LastWriteTime&lt;/span&gt;         &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;
&lt;span class="p"&gt;----&lt;/span&gt;                 &lt;span class="p"&gt;-------------&lt;/span&gt;         &lt;span class="p"&gt;------&lt;/span&gt; &lt;span class="p"&gt;----&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;----&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;                &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="n"&gt;-a&lt;/span&gt;&lt;span class="p"&gt;---&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;             &lt;span class="n"&gt;23&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;-a&lt;/span&gt;&lt;span class="p"&gt;---&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;              &lt;span class="n"&gt;7&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;-a&lt;/span&gt;&lt;span class="p"&gt;---&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;             &lt;span class="n"&gt;14&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;-a&lt;/span&gt;&lt;span class="p"&gt;---&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;              &lt;span class="n"&gt;0&lt;/span&gt; &lt;span class="n"&gt;newfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;-a&lt;/span&gt;&lt;span class="p"&gt;---&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;              &lt;span class="n"&gt;5&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This looks like a typical (if slightly verbose) file listing.&lt;/p&gt;
&lt;p&gt;Now, let’s try to do something useful with this. Let’s get the total size of all &lt;code&gt;.txt&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;In a Unix shell, one option is &lt;code&gt;du -bc *.txt&lt;/code&gt;. The arguments: &lt;code&gt;-b&lt;/code&gt; (&lt;code&gt;--bytes&lt;/code&gt;) gives the real byte size, and &lt;code&gt;-c&lt;/code&gt; (&lt;code&gt;--summarize&lt;/code&gt;) produces a total. The result is this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="mf"&gt;7&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="mf"&gt;14&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;helloworld&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="kr"&gt;new&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="mf"&gt;26&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="n"&gt;tal&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But how to get just the number? This requires text manipulation (getting the first word of the last line). Something like &lt;code&gt;du -bc *.txt | tail -n 1 | cut -f 1&lt;/code&gt; will do. There’s also &lt;code&gt;wc --total=only --bytes *.txt&lt;/code&gt; — but this is specific to GNU wc, so it won’t cut it on *BSD or macOS. Another option would be to parse the output of &lt;code&gt;ls -l&lt;/code&gt; — but that might not always be easy, and the output may contain something unexpected added by the specific &lt;code&gt;ls&lt;/code&gt; version or the user’s specific shell configuration.&lt;/p&gt;
&lt;p&gt;Let’s try something in PowerShell. If we do &lt;code&gt;$x = dir&lt;/code&gt;, we’ll have the output of the &lt;code&gt;dir&lt;/code&gt; command in &lt;code&gt;$x&lt;/code&gt;. Let’s try to analyse it further, is the first character a newline?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;
&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;

&lt;span class="n"&gt;Mode&lt;/span&gt;                 &lt;span class="n"&gt;LastWriteTime&lt;/span&gt;         &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;
&lt;span class="p"&gt;----&lt;/span&gt;                 &lt;span class="p"&gt;-------------&lt;/span&gt;         &lt;span class="p"&gt;------&lt;/span&gt; &lt;span class="p"&gt;----&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;----&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;                &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s interesting, we didn’t get the first character or the first line, we got the first &lt;em&gt;file&lt;/em&gt;. And if we try &lt;code&gt;$x[1]&lt;/code&gt;?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;

&lt;span class="n"&gt;Mode&lt;/span&gt;                 &lt;span class="n"&gt;LastWriteTime&lt;/span&gt;         &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;
&lt;span class="p"&gt;----&lt;/span&gt;                 &lt;span class="p"&gt;-------------&lt;/span&gt;         &lt;span class="p"&gt;------&lt;/span&gt; &lt;span class="p"&gt;----&lt;/span&gt;
&lt;span class="n"&gt;-a&lt;/span&gt;&lt;span class="p"&gt;---&lt;/span&gt;          &lt;span class="n"&gt;2024&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;04&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;29&lt;/span&gt;    &lt;span class="n"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;00&lt;/span&gt;             &lt;span class="n"&gt;23&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What if we try getting the &lt;code&gt;Length&lt;/code&gt; property out of that?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;
&lt;span class="n"&gt;23&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turns out that &lt;code&gt;dir&lt;/code&gt; returns an array of objects, and PowerShell knows how to format this array (and a single item from the array) into a nice table. What can we do with it? This:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Filter&lt;/span&gt; &lt;span class="s1"&gt;'*.txt'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Measure-Object&lt;/span&gt; &lt;span class="n"&gt;-Sum&lt;/span&gt;

&lt;span class="n"&gt;Count&lt;/span&gt;             &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;Average&lt;/span&gt;           &lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Sum&lt;/span&gt;               &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;26&lt;/span&gt;
&lt;span class="n"&gt;Maximum&lt;/span&gt;           &lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Minimum&lt;/span&gt;           &lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;StandardDeviation&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Property&lt;/span&gt;          &lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Filter&lt;/span&gt; &lt;span class="s1"&gt;'*.txt'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Measure-Object&lt;/span&gt; &lt;span class="n"&gt;-Sum&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;
&lt;span class="n"&gt;26&lt;/span&gt;
&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Filter&lt;/span&gt; &lt;span class="s1"&gt;'*.txt'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Measure-Object&lt;/span&gt; &lt;span class="n"&gt;-Sum&lt;/span&gt; &lt;span class="n"&gt;-Property&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;
&lt;span class="n"&gt;26&lt;/span&gt;
&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Recurse&lt;/span&gt; &lt;span class="n"&gt;-Filter&lt;/span&gt; &lt;span class="s1"&gt;'*.txt'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Measure-Object&lt;/span&gt; &lt;span class="n"&gt;-Sum&lt;/span&gt; &lt;span class="n"&gt;-Property&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;
&lt;span class="n"&gt;30&lt;/span&gt;
&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$measured&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Recurse&lt;/span&gt; &lt;span class="n"&gt;-Filter&lt;/span&gt; &lt;span class="s1"&gt;'*.txt'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Measure-Object&lt;/span&gt; &lt;span class="n"&gt;-Sum&lt;/span&gt; &lt;span class="n"&gt;-Property&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$measured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;$measured&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;
&lt;span class="n"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can iterate over all file objects, get their length (using &lt;code&gt;ForEach-Object&lt;/code&gt; and a lambda), and then use &lt;code&gt;Measure-Object&lt;/code&gt; to compute the sum (&lt;code&gt;Measure-Object&lt;/code&gt; returns an object, we need to get its &lt;code&gt;Sum&lt;/code&gt; property). We can replace the &lt;code&gt;ForEach-Object&lt;/code&gt; call with the &lt;code&gt;-Property&lt;/code&gt; argument in &lt;code&gt;Measure-Object&lt;/code&gt;. And if we want to look into subdirectories, we can easily add &lt;code&gt;-Recurse&lt;/code&gt; to &lt;code&gt;Get-ChildItem&lt;/code&gt;. We get actual integers we can do math on.&lt;/p&gt;
&lt;p&gt;You might have noticed I used &lt;code&gt;Get-ChildItem&lt;/code&gt; instead of &lt;code&gt;dir&lt;/code&gt; in the previous example. &lt;code&gt;Get-ChildItem&lt;/code&gt; is the full name of the command (&lt;em&gt;cmdlet&lt;/em&gt;). &lt;code&gt;dir&lt;/code&gt; is one of its aliases, alongside &lt;code&gt;gci&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; (Windows-only to avoid shadowing &lt;code&gt;/bin/ls&lt;/code&gt;). Many common commands have aliases defined for easier typing and ease of use — &lt;code&gt;Copy-Item&lt;/code&gt; can be written as &lt;code&gt;cp&lt;/code&gt; (for compatibility with Unix), &lt;code&gt;copy&lt;/code&gt; (for compatibility with MS-DOS), and &lt;code&gt;ci&lt;/code&gt;. In our examples, we could also use &lt;code&gt;measure&lt;/code&gt; for &lt;code&gt;Measure-Object&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; for &lt;code&gt;ForEach-Object&lt;/code&gt;. Those aliases are a nice thing to have for interactive use, but for scripts, it’s best to use the full names for readability, and to avoid depending on the environment for those aliases.&lt;/p&gt;
&lt;h2&gt;More filesystem operations&lt;/h2&gt;
&lt;h3&gt;Files per folder&lt;/h3&gt;
&lt;p&gt;There’s a photo collection in a &lt;code&gt;Photos&lt;/code&gt; folder, grouped into folders. The objective is to see how many &lt;code&gt;.jpg&lt;/code&gt; files are in each folder. Here’s the PowerShell solution:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;PS &lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;Photos&lt;/span&gt;&lt;span class="p"&gt;/*/*.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Group-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Sort-Object&lt;/span&gt; &lt;span class="n"&gt;-Property&lt;/span&gt; &lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="n"&gt;-Descending&lt;/span&gt;
&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;                      &lt;span class="nb"&gt;Group&lt;/span&gt;
&lt;span class="p"&gt;-----&lt;/span&gt; &lt;span class="p"&gt;----&lt;/span&gt;                      &lt;span class="p"&gt;-----&lt;/span&gt;
   &lt;span class="n"&gt;10&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;                   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Photos&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;img001&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Photos&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;img002&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Photos&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;img003&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;2&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;                   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Photos&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;img101&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:\&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Photos&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;img201&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jpg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Unix land, &lt;a href="https://stackoverflow.com/questions/15216370/how-to-count-number-of-files-in-each-directory"&gt;StackOverflow has a lot of solutions&lt;/a&gt;. The top solution is &lt;code&gt;du -a | cut -d/ -f2 | sort | uniq -c | sort -nr&lt;/code&gt; — a lot of tools mashed together, starting with a tool to check disk usage, and a lot of string manipulation. The second solution uses find, read, and shell globbing. The PowerShell solution is quite simple and obvious to anyone who has ever touched SQL.&lt;/p&gt;
&lt;p&gt;The above example works for one level of nesting. For more levels, given &lt;code&gt;Photos\one\two\three.jpg&lt;/code&gt;, use &lt;code&gt;Get-ChildItem -Filter '*.jpg' -Recurse Photos&lt;/code&gt;, and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Group by &lt;code&gt;$_.Directory.Name&lt;/code&gt; (same as before) to get &lt;code&gt;two&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Group by &lt;code&gt;Split-Path -Parent ([System.IO.Path]::GetRelativePath("$PWD/Photos", $_.FullName))&lt;/code&gt; to get &lt;code&gt;one/two&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Group by &lt;code&gt;([System.IO.Path]::GetRelativePath("$PWD/Photos", $_.FullName)).Split([System.IO.Path]::DirectorySeparatorChar)[0]&lt;/code&gt; to get &lt;code&gt;one&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(All of the above examples work for a single folder as well. The latter two examples don’t work on Windows PowerShell.)&lt;/p&gt;
&lt;h3&gt;Duplicate finder&lt;/h3&gt;
&lt;p&gt;Let’s build a simple tool to detect byte-for-byte duplicated files. &lt;code&gt;Get-FileHash&lt;/code&gt; is a shell built-in. We can use &lt;code&gt;Group-Object&lt;/code&gt; again, and &lt;code&gt;Where-Object&lt;/code&gt; to filter only matching objects. Computing the hash of every file is quite inefficient, so we’ll group by the file length first, and then ensure the hashes match. This gives us a nice pipeline of 6 commands:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="c"&gt;# Fully spelled out&lt;/span&gt;
&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Recurse&lt;/span&gt; &lt;span class="o"&gt;-File&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Group-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Where-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-gt&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Group &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Group-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-FileHash&lt;/span&gt; &lt;span class="n"&gt;-Algorithm&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Where-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-gt&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Using aliases&lt;/span&gt;
&lt;span class="nb"&gt;gci &lt;/span&gt;&lt;span class="n"&gt;-Recurse&lt;/span&gt; &lt;span class="o"&gt;-File&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;group &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;where &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-gt&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Group &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;group &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-FileHash&lt;/span&gt; &lt;span class="n"&gt;-Algorithm&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;where &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-gt&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Using less readable aliases&lt;/span&gt;
&lt;span class="nb"&gt;gci &lt;/span&gt;&lt;span class="n"&gt;-Recurse&lt;/span&gt; &lt;span class="o"&gt;-File&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;group &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-gt&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Group &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;group &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-FileHash&lt;/span&gt; &lt;span class="n"&gt;-Algorithm&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt; &lt;span class="o"&gt;-gt&lt;/span&gt; &lt;span class="n"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Serious Scripting: Software Bill of Materials&lt;/h2&gt;
&lt;p&gt;Software Bills of Materials (SBOMs) and supply chain security are all the rage these days. The boss wants to have something like that, i.e. a CSV file with a list of packages and versions, and only the direct production dependencies. Sure, there exist standards like SPDX, but the boss does not like those pesky “standards”. The backend is written in C#, and the frontend is written in Node.js. Since we care only about the production dependencies, we can look at the &lt;code&gt;.csproj&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files. For Node packages, we’ll also try to fetch the license name from the npm API (the API is a bit more complicated for NuGet, so we’ll keep it as a &lt;code&gt;TODO&lt;/code&gt; in this example).&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ErrorActionPreference&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Stop"&lt;/span&gt; &lt;span class="c"&gt;# stop execution on any error&lt;/span&gt;
&lt;span class="nb"&gt;Set-StrictMode&lt;/span&gt; &lt;span class="n"&gt;-Version&lt;/span&gt; &lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Get-CsprojPackages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[string]&lt;/span&gt;&lt;span class="nv"&gt;$Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Select-Xml&lt;/span&gt; &lt;span class="n"&gt;-Path&lt;/span&gt; &lt;span class="nv"&gt;$Path&lt;/span&gt; &lt;span class="n"&gt;-XPath&lt;/span&gt; &lt;span class="s1"&gt;'//PackageReference'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="no"&gt;[PSCustomObject]&lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;
        &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Include"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'nuget'&lt;/span&gt;
        &lt;span class="n"&gt;License&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'TODO'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Get-NodePackages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[string]&lt;/span&gt;&lt;span class="nv"&gt;$Path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$nameToVersion&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-Content&lt;/span&gt; &lt;span class="n"&gt;-Raw&lt;/span&gt; &lt;span class="nv"&gt;$Path&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$nameToVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;psobject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Properties&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="no"&gt;[PSCustomObject]&lt;/span&gt;&lt;span class="p"&gt;@{&lt;/span&gt;
      &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;
      &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;
      &lt;span class="n"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'node'&lt;/span&gt;
      &lt;span class="n"&gt;License&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Get-NodeLicense&lt;/span&gt; &lt;span class="n"&gt;-Name&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nb"&gt;Get-NodeLicense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;[string]&lt;/span&gt;&lt;span class="nv"&gt;$Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class="n"&gt;-TimeoutSec&lt;/span&gt; &lt;span class="n"&gt;3&lt;/span&gt;
      &lt;span class="s2"&gt;"https://registry.npmjs.org/$Name"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;license&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"???"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$csprojData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Recurse&lt;/span&gt; &lt;span class="n"&gt;-Filter&lt;/span&gt; &lt;span class="s1"&gt;'*.csproj'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Get-CsprojPackages&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nv"&gt;$nodeData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;@(&lt;/span&gt;&lt;span class="nb"&gt;Get-ChildItem&lt;/span&gt; &lt;span class="n"&gt;-Recurse&lt;/span&gt; &lt;span class="n"&gt;-Filter&lt;/span&gt; &lt;span class="s1"&gt;'package.json'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;Where-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="o"&gt;-notlike&lt;/span&gt; &lt;span class="s1"&gt;'*node_modules*'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
  &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Get-NodePackages&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nv"&gt;$allData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$csProjData&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$nodeData&lt;/span&gt;
&lt;span class="nv"&gt;$allData&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;ConvertTo-Csv&lt;/span&gt; &lt;span class="n"&gt;-NoTypeInformation&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Tee-Object&lt;/span&gt; &lt;span class="n"&gt;sbom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just like every well-written shell script starts with &lt;code&gt;set -euo pipefail&lt;/code&gt;, every PowerShell script should start with &lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4"&gt;&lt;code&gt;$ErrorActionPreference = "Stop"&lt;/code&gt;&lt;/a&gt; so that execution is stopped as soon as something goes wrong. Note that this does &lt;em&gt;not&lt;/em&gt; affect native commands, you still need to check &lt;code&gt;$LASTEXITCODE&lt;/code&gt;. Another useful early command is &lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/set-strictmode?view=powershell-7.4"&gt;&lt;code&gt;Set-StrictMode -Version 3.0&lt;/code&gt;&lt;/a&gt; to catch undefined variables.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;.csproj&lt;/code&gt; files, which are XML, we look for &lt;code&gt;PackageReference&lt;/code&gt; elements using XPath, and then build a PSCustomObject out of a hashmap — extracting the appropriate attributes from the &lt;code&gt;PackageReference&lt;/code&gt; nodes.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;package.json&lt;/code&gt;, we read the file, parse the JSON, and extract the properties of the &lt;code&gt;dependencies&lt;/code&gt; object (it’s a map of package names to versions). To get the license, we use &lt;code&gt;Invoke-RestMethod&lt;/code&gt;, which takes care of parsing JSON for us.&lt;/p&gt;
&lt;p&gt;In the main body of the script, we look for the appropriate files (skipping things under &lt;code&gt;node_modules&lt;/code&gt;) and call our parser functions. After retrieving all data, we concatenate the two arrays, convert to CSV, and use &lt;code&gt;Tee-Object&lt;/code&gt; to output to a file and to standard output. We get this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Source"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"License"&lt;/span&gt;
&lt;span class="s"&gt;"AWSSDK.S3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"3.7.307.24"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"nuget"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"TODO"&lt;/span&gt;
&lt;span class="s"&gt;"Microsoft.AspNetCore.SpaProxy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"7.0.17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"nuget"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"TODO"&lt;/span&gt;
&lt;span class="s"&gt;"@testing-library/jest-dom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^5.17.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"@testing-library/react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^13.4.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"@testing-library/user-event"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^13.5.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"@types/jest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^27.5.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"@types/node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^16.18.96"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"@types/react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^18.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"@types/react-dom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^18.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"react"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^18.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"react-dom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^18.3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"react-scripts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"5.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"MIT"&lt;/span&gt;
&lt;span class="s"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^4.9.5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Apache-2.0"&lt;/span&gt;
&lt;span class="s"&gt;"web-vitals"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"^2.1.4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Apache-2.0"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Could it be done in a different language? Certainly, but PowerShell is really easy to integrate with CI, e.g. &lt;a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-running-a-command-using-powershell-core"&gt;GitHub Actions&lt;/a&gt; or &lt;a href="https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/powershell-v2?view=azure-pipelines"&gt;Azure Pipelines&lt;/a&gt;. On Linux, you might be tempted to use Python — and you could get something done equally simply, as long as you don’t mind using the ugly &lt;code&gt;urllib.request&lt;/code&gt; library, or alternatively ensuring &lt;code&gt;requests&lt;/code&gt; is installed (and then you get into the hell that is Python package management).&lt;/p&gt;
&lt;h2&gt;Using .NET classes&lt;/h2&gt;
&lt;p&gt;PowerShell is built on top of .NET. This isn’t just the implementation technology — PowerShell gives access to everything the .NET standard library offers. For example, the alternate ways to group photos in multiple subdirectories we’ve explored above involve a call to a static method of the .NET &lt;code&gt;System.IO.Path&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;Other .NET types are also available. Need a HashSet? Here goes:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$set&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="no"&gt;[string]&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-Null&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;
&lt;span class="n"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$set&lt;/span&gt; &lt;span class="o"&gt;-contains&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;
&lt;span class="n"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$set&lt;/span&gt; &lt;span class="o"&gt;-contains&lt;/span&gt; &lt;span class="s2"&gt;"world"&lt;/span&gt;
&lt;span class="n"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is also possible to load any .NET DLL into PowerShell (as long as it’s compatible with the .NET version PowerShell is built against) and use it as usual from C# (although possibly with slightly ugly syntax).&lt;/p&gt;
&lt;h2&gt;Sick Windows Tricks&lt;/h2&gt;
&lt;p&gt;Microsoft supposedly killed off Internet Explorer last year. Attempting to launch &lt;code&gt;iexplore.exe&lt;/code&gt; will bring up Microsoft Edge. But you see, Internet Explorer is a crucial part of Windows, and has been so for over two decades. Software vendors have built software that depends on IE being there and being able to show web content. Some of them are using web views, but some of them prefer something else: COM.&lt;/p&gt;
&lt;p&gt;COM, or Component Object Model, is Microsoft’s thing for interoperability between different applications and/or components. COM is basically a way for classes offered by different vendors and potentially written in different languages to talk to one another. Under the hood, COM is C++ &lt;code&gt;vtable&lt;/code&gt;s plus standard reference counting and class loading/discovery mechanisms. The .NET Framework, and its successor .NET, have always included COM interoperability. The modern WinRT platform is COM on steroids.&lt;/p&gt;
&lt;p&gt;Coming back to Internet Explorer, it exposes some COM classes. They were &lt;em&gt;not&lt;/em&gt; removed with &lt;code&gt;iexplore.exe&lt;/code&gt;. This means you can bring up a regular Internet Explorer window in just two lines of PowerShell:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$ie&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;New-Object&lt;/span&gt; &lt;span class="n"&gt;-ComObject&lt;/span&gt; &lt;span class="n"&gt;InternetExplorer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;
&lt;span class="nv"&gt;$ie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Visible&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why would you do that? The &lt;code&gt;InternetExplorer.Application&lt;/code&gt; object lets you control the browser, e.g. you can use &lt;code&gt;$ie.Navigate("https://example.com/")&lt;/code&gt; to go to a page. Why would you want to launch IE in 2024? I don’t know, I guess you can use it to laugh in the faces of the Microsoft developers who removed the user-accessible shortcuts? But there definitely exist some legacy applications that expect a COM-controllable IE.&lt;/p&gt;
&lt;p&gt;We have already explored the possibility of using classes from .NET. .NET comes with a GUI framework named Windows Forms, &lt;a href="https://learn.microsoft.com/en-us/powershell/scripting/samples/creating-a-custom-input-box?view=powershell-7.4"&gt;which can be loaded from PowerShell and used to build a GUI.&lt;/a&gt; There is no form designer, so it requires manually defining and positioning controls, but it actually works.&lt;/p&gt;
&lt;p&gt;PowerShell can also do various Windows management tasks. It can manage boot settings, BitLocker, Hyper-V, networking, storage… For example, to get the percentage of disk space remaining:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Get-Volume&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;$((&lt;/span&gt;&lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SizeRemaining&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="nv"&gt;$c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Getting out of PowerShell land&lt;/h2&gt;
&lt;p&gt;As a shell, PowerShell can obviously launch subprocesses. Unlike something like Python, running a subprocess is as simple as running anything else. If you need to &lt;code&gt;git pull&lt;/code&gt;, you just type that. Or you can make PowerShell interact with non-PowerShell commands, reading output and passing arguments:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nv"&gt;$changes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-porcelain&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$LASTEXITCODE&lt;/span&gt; &lt;span class="o"&gt;-eq&lt;/span&gt; &lt;span class="n"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"Not a git repository"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$LASTEXITCODE&lt;/span&gt; &lt;span class="o"&gt;-ne&lt;/span&gt; &lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="s2"&gt;"Getting changes from git failed"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$null&lt;/span&gt; &lt;span class="o"&gt;-eq&lt;/span&gt; &lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"No changes found"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$untrackedFiles&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;@(&lt;/span&gt;
    &lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;`0&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;Where-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'?? '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c"&gt;# Alternate spelling for regex fans:&lt;/span&gt;
  &lt;span class="nv"&gt;$untrackedFilesForRegexFans&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;@(&lt;/span&gt;
    &lt;span class="nv"&gt;$changes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;`0&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;Where-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;-match&lt;/span&gt; &lt;span class="s1"&gt;'^\?\? '&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
    &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt; &lt;span class="o"&gt;-replace&lt;/span&gt; &lt;span class="s1"&gt;'^\?\? '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$untrackedFiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"Opening &lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$untrackedFiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; untracked files in VS Code"&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="nv"&gt;$untrackedFiles&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Write-Host&lt;/span&gt; &lt;span class="s2"&gt;"No untracked files"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I chose to compute untracked files with the help of standard .NET string manipulation methods, but there’s also a regex option. On a related note, there are three content check operators: &lt;code&gt;-match&lt;/code&gt; uses regex, &lt;code&gt;-like&lt;/code&gt; uses &lt;a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_wildcards?view=powershell-7.4"&gt;wildcards&lt;/a&gt;, and &lt;code&gt;-contains&lt;/code&gt; checks collection membership.&lt;/p&gt;
&lt;h2&gt;Profile script&lt;/h2&gt;
&lt;p&gt;I use a fairly small profile script that adds some behaviours I’m used to from Unix, and to make Tab completion show a menu. Here are the most basic bits:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="nb"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="n"&gt;-HistorySearchCursorMovesToEnd&lt;/span&gt;
&lt;span class="nb"&gt;Set-PSReadLineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Key&lt;/span&gt; &lt;span class="n"&gt;UpArrow&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;HistorySearchBackward&lt;/span&gt;
&lt;span class="nb"&gt;Set-PSReadLineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Key&lt;/span&gt; &lt;span class="n"&gt;DownArrow&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;HistorySearchForward&lt;/span&gt;
&lt;span class="nb"&gt;Set-PSReadlineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Key&lt;/span&gt; &lt;span class="n"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;DeleteCharOrExit&lt;/span&gt;
&lt;span class="nb"&gt;Set-PSReadlineKeyHandler&lt;/span&gt; &lt;span class="n"&gt;-Key&lt;/span&gt; &lt;span class="n"&gt;Tab&lt;/span&gt; &lt;span class="n"&gt;-Function&lt;/span&gt; &lt;span class="n"&gt;MenuComplete&lt;/span&gt;
&lt;span class="nb"&gt;Set-PSReadLineOption&lt;/span&gt; &lt;span class="n"&gt;-AddToHistoryHandler&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# Commands starting with space are not remembered.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$command&lt;/span&gt; &lt;span class="o"&gt;-like&lt;/span&gt; &lt;span class="s1"&gt;' *'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Apart from that, I use a few aliases and a pretty prompt with the help of &lt;a href="https://ohmyposh.dev/"&gt;oh-my-posh&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The unusual and sometimes confusing parts&lt;/h2&gt;
&lt;p&gt;PowerShell can be verbose. Some of its syntax is a little quirky, compared to other languages, e.g. the equality and logic operators (for example, &lt;code&gt;-eq&lt;/code&gt;, &lt;code&gt;-le&lt;/code&gt;, &lt;code&gt;-and&lt;/code&gt;). The aliases usually help with remembering commands, but they can’t always be depended on — &lt;code&gt;ls&lt;/code&gt; is defined as an alias only on Windows, and Windows PowerShell aliases &lt;code&gt;wget&lt;/code&gt; and &lt;code&gt;curl&lt;/code&gt; to &lt;code&gt;Invoke-WebRequest&lt;/code&gt;, even though all three have completely different command line arguments and outputs (this was removed in PowerShell).&lt;/p&gt;
&lt;p&gt;Moreover, the Unix/DOS aliases do not change the argument handling. &lt;code&gt;rm -rf foo&lt;/code&gt; is invalid. &lt;code&gt;rm -r foo&lt;/code&gt; is, since argument names can be abbreviated as long as the abbreviation is unambiguous. &lt;code&gt;rm -r -f foo&lt;/code&gt; is not valid, because &lt;code&gt;-f&lt;/code&gt; can be an abbreviation of &lt;code&gt;-Filter&lt;/code&gt; or &lt;code&gt;-Force&lt;/code&gt; (so &lt;code&gt;rm -r -fo foo&lt;/code&gt;) will do. &lt;code&gt;rm foo bar&lt;/code&gt; does not work, an array is needed: &lt;code&gt;rm foo,bar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\Windows\regedit.exe&lt;/code&gt; launches the Registry editor. &lt;code&gt;"C:\Program Files\Mozilla Firefox\firefox.exe"&lt;/code&gt; is a string. Launching something with spaces in its name requires the call operator: &lt;code&gt;&amp;amp; "C:\Program Files\Mozilla Firefox\firefox.exe"&lt;/code&gt;. PowerShell’s tab completion will add the &lt;code&gt;&amp;amp;&lt;/code&gt; if necessary.&lt;/p&gt;
&lt;p&gt;There are two function call syntaxes. Calling a function/cmdlet uses the shell-style syntax with argument names: &lt;code&gt;Some-Function -Arg1 value1 -Arg2 value2&lt;/code&gt;, and argument names can be abbreviated, and can sometimes be omitted. Calling a method requires a more traditional syntax: &lt;code&gt;$obj.SomeMethod(value1, value2)&lt;/code&gt;. Names are case-insensitive in either case.&lt;/p&gt;
&lt;p&gt;The escape character is the backtick. The backslash is the path separator in Windows, so making it an escape character would make everything painful on Windows. At least it makes it easy to write regex.&lt;/p&gt;
&lt;h2&gt;The ugliest part&lt;/h2&gt;
&lt;p&gt;The ugliest and the least intuitive part of PowerShell is the handling of single-element arrays. PowerShell &lt;em&gt;really&lt;/em&gt; wants to unpack them to a scalar. The command &lt;code&gt;(Get-ChildItem).Length&lt;/code&gt; will produce the number of files in the current directory — &lt;em&gt;unless&lt;/em&gt; there is exactly one file, in which case it will produce the single file’s size in bytes. And if there are zero items, instead of an empty array, PowerShell produces &lt;code&gt;$null&lt;/code&gt;. Sometimes, things will work out in the end (since many cmdlets are happy to get either as inputs), but sometimes, PowerShell must be asked to stop this madness and return an array: &lt;code&gt;@(Get-ChildItem).Length&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The previous example with &lt;code&gt;git status&lt;/code&gt; leverages its &lt;code&gt;--null&lt;/code&gt; argument to get zero-delimited data, so we expect either &lt;code&gt;$null&lt;/code&gt; or a single string according to the rules. If we didn’t want to use &lt;code&gt;--null&lt;/code&gt;, we would need to use &lt;code&gt;@(git status --porcelain)&lt;/code&gt; to always get an array (but we would also need to remove quotes that &lt;code&gt;git&lt;/code&gt; adds to paths that contain spaces).&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;PowerShell is a fine interactive shell and scripting language. While it does have some warts, it is more powerful than your usual Unix shell, and its strongly-typed, object-oriented code beats &lt;em&gt;stringly-typed&lt;/em&gt; &lt;code&gt;sh&lt;/code&gt; spaghetti any day.&lt;/p&gt;</description><guid>https://chriswarrick.com/pl/blog/2024/04/29/powershell-the-object-oriented-shell-you-didnt-know-you-needed/</guid><pubDate>Mon, 29 Apr 2024 16:45:00 GMT</pubDate></item><item><title>Writing a Console App in C# for Fun and Profit</title><link>https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;I recently wrote a simple console app in C#. This post tells you more about the language, the .NET ecosystem, and why you should write your next app in it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="what-is-the-app"&gt;
&lt;h2&gt;What is the app?&lt;/h2&gt;
&lt;p&gt;The app is called Gitco.NET. It’s basically a rewrite of a previous Ruby script. It shows a console menu with Git branches, allowing things like filtering and toggling the display of remote branches. Simple, but quite convenient for working with Git in a terminal. I rewrote it in C# for better Windows compatibility — but the new version works on Linux and macOS equally well, can be distributed as a single executable, and is also unit-tested.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-c"&gt;
&lt;h2&gt;What is C#?&lt;/h2&gt;
&lt;p&gt;C# is a modern, high-level language designed by Microsoft in 2000, heavily inspired by (and competing with) Java.&lt;/p&gt;
&lt;section id="the-obligatory-hello-world-program"&gt;
&lt;h3&gt;The obligatory hello world program&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_90a344487dab41c98d9adfa9345ff4c9-1" name="rest_code_90a344487dab41c98d9adfa9345ff4c9-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90a344487dab41c98d9adfa9345ff4c9-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just one line is enough. This program requires C# 10 and .NET 6, the latest versions of the language and the framework (and the implicit usings feature enabled).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-slightly-less-cool-version-of-the-hello-world-program"&gt;
&lt;h3&gt;The slightly less cool version of the hello world program&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-1" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-2" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-3" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-4" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-5" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-6" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-7" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-8" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-9" name="rest_code_19ee63c6ce614eacbd91a0ac1a058cde-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_19ee63c6ce614eacbd91a0ac1a058cde-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve got four lines of code (plus four lines of braces &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; ). We can see the &lt;code class="docutils literal"&gt;using&lt;/code&gt; directive to import everything from the &lt;code class="docutils literal"&gt;System&lt;/code&gt; namespace, the definition of a &lt;code class="docutils literal"&gt;class&lt;/code&gt;, a &lt;code class="docutils literal"&gt;Main&lt;/code&gt; method, and a call to &lt;code class="docutils literal"&gt;Console.WriteLine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ll talk more about C# later, highlighting some of the cooler things seen in Gitco.NET.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-is-net"&gt;
&lt;h2&gt;What is .NET?&lt;/h2&gt;
&lt;p&gt;The term “.NET” had quite a lot of meanings over the past two decades. Microsoft accounts were once called .NET Passport, and Windows Server 2003 was almost called “Windows Server .NET 2003”. Another thing called .NET was the .NET Framework. .NET Framework is a heavily integrated component of Windows, and it’s basically what was used to run C# (and F#, and VB.NET) — it includes the virtual machine (CLR, Core Language Runtime), a lot of libraries (Framework Class Library), and a lot of Windows-specific things (such as COM, Windows Forms, WPF).&lt;/p&gt;
&lt;p&gt;Microsoft’s .NET Framework is proprietary and tied to Windows. An open-source, independent re-implementation of .NET is Mono. At one point, some GNOME apps were written in Mono and Gtk#. Mono was also used in Xamarin, which can be used to write Android and iOS apps in C#.&lt;/p&gt;
&lt;p&gt;But then came out .NET Core, which is Microsoft’s open-source .NET with a new runtime (CoreCLR), new set of libraries (CoreFX), and multi-platform compatibility (Linux and macOS). After a few years, .NET Core got renamed to .NET (around the time it had pretty good feature parity with the classic .NET Framework). With the new .NET, you can build console apps, web apps (using ASP.NET Core, which is a pretty cool framework), mobile apps (soon using MAUI), and desktop apps (there are a few options).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gitco-net-code-tour"&gt;
&lt;h2&gt;Gitco.NET code tour&lt;/h2&gt;
&lt;p&gt;Let’s go on a little tour of the more interesting parts of the code.&lt;/p&gt;
&lt;section id="snippet-1"&gt;
&lt;h3&gt;Snippet 1&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-1" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ExtractBranchListFromGitOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-2" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitOutput&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-3" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-4" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceLineEndings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-5" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-6" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-7" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-8" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-9" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;.];&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-10" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-11" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-11" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-12" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-12" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remotePrefix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-13" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-13" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-14" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-14" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-15" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-15" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-16" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-16" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="sc"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-17" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-17" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-18" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-18" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-19" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-19" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-20" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-20" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isCurrent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-21" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-21" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-22" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-22" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-23" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-23" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThenBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-24" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-24" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DistinctBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_93ac5d8fc2324caea46a207ba7ff4501-25" name="rest_code_93ac5d8fc2324caea46a207ba7ff4501-25" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_93ac5d8fc2324caea46a207ba7ff4501-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This snippet defines a fairly standard pipeline that goes from &lt;code class="docutils literal"&gt;git&lt;/code&gt; output (a single string) to a list of parsed objects. This pipeline is a function (or a static method, to be more precise). This function uses expression-bodied members: since we can fit the entire pipeline in a single expression, we can skip the braces and the &lt;code class="docutils literal"&gt;return&lt;/code&gt; keyword, and instead use a more compact syntax with an arrow (&lt;code class="docutils literal"&gt;=&amp;gt;&lt;/code&gt;). After some cleanups and sanitization of the string, we split the string by the &lt;code class="docutils literal"&gt;\n&lt;/code&gt; character, and the type of our pipeline changes from &lt;code class="docutils literal"&gt;string&lt;/code&gt; to &lt;code class="docutils literal"&gt;string[]&lt;/code&gt; (an array of strings). We then use five operations from the &lt;code class="docutils literal"&gt;System.Linq&lt;/code&gt; namespace. Those operations are extension methods for enumerables (&lt;code class="docutils literal"&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;) — adding &lt;code class="docutils literal"&gt;using System.Linq;&lt;/code&gt; at the top of your program adds those methods to any enumerables (including arrays, lists, dictionaries, sets…).&lt;/p&gt;
&lt;p&gt;The first operation is a &lt;code class="docutils literal"&gt;Select&lt;/code&gt;. LINQ methods are inspired by SQL; the more typical name for this one would be &lt;code class="docutils literal"&gt;map&lt;/code&gt;. (Similarly, &lt;code class="docutils literal"&gt;Where&lt;/code&gt; is LINQ’s name for &lt;code class="docutils literal"&gt;filter&lt;/code&gt;.) The logic inside &lt;code class="docutils literal"&gt;Select&lt;/code&gt; is written in a multi-line anonymous function (lambda), with braces (so there’s a &lt;code class="docutils literal"&gt;return&lt;/code&gt;) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. Inside that anonymous function, there are a few niceties, such as &lt;code class="docutils literal"&gt;var&lt;/code&gt; (type inference for variables), slicing (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;[2..]&lt;/span&gt;&lt;/code&gt;), as well as some more LINQ in string manipulations (&lt;code class="docutils literal"&gt;.First()&lt;/code&gt; and &lt;code class="docutils literal"&gt;.Skip(2)&lt;/code&gt;, which do what they say on the tin).&lt;/p&gt;
&lt;p&gt;The next three operations are fairly straightforward sorting, and extracting unique values. Those use single-expression lambdas, which don’t use &lt;code class="docutils literal"&gt;return&lt;/code&gt;. The pipeline ends with converting &lt;code class="docutils literal"&gt;IEnumerable&amp;lt;Branch&amp;gt;&lt;/code&gt; (which appeared at the &lt;code class="docutils literal"&gt;.Select()&lt;/code&gt; stage) into a &lt;code class="docutils literal"&gt;List&amp;lt;Branch&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="snippet-2"&gt;
&lt;h3&gt;Snippet 2&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-1" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BranchDisplay&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterAndNumberBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-2" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-3" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-4" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchWidth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-5" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CultureInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvariantCulture&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-6" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numberFormatString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;$"{{0,{branchWidth}}}. "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-7" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-8" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-9" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-10" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-11" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-11" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numberFormatString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-12" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-12" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-13" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-13" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-14" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-14" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-15" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-15" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-16" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-16" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branchDisplay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-17" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-17" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchDisplay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_1006aafe9a8d4a83b8f29572e65e8570-18" name="rest_code_1006aafe9a8d4a83b8f29572e65e8570-18" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_1006aafe9a8d4a83b8f29572e65e8570-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function adds numbers to the branch list, and then filters branches based on the user’s query. The first thing to notice is the second argument: &lt;code class="docutils literal"&gt;string? filter&lt;/code&gt;. C# has support for nullable types, which means the compiler warns you if you use a possibly null value somewhere it isn’t expected &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. &lt;code class="docutils literal"&gt;numberFormatString&lt;/code&gt; uses an interpolated string, in which &lt;code class="docutils literal"&gt;{branchWidth}&lt;/code&gt; will be replaced with the variable defined before. In the LINQ expression, you can see two interesting things: one is a two-argument lambda for &lt;code class="docutils literal"&gt;Select&lt;/code&gt;, and argument names, which can be optionally passed to functions and constructors for readability or to set parameters out of order.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="snippet-3"&gt;
&lt;h3&gt;Snippet 3&lt;/h3&gt;
&lt;p&gt;How much boilerplate do you need to define an immutable data class with a constructor, value equality, and a string representation?&lt;/p&gt;
&lt;p&gt;Exactly zero:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-1" name="rest_code_50a74ce809234c549fd698c3606971e6-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-2" name="rest_code_50a74ce809234c549fd698c3606971e6-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-3" name="rest_code_50a74ce809234c549fd698c3606971e6-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-4" name="rest_code_50a74ce809234c549fd698c3606971e6-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-4"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-5" name="rest_code_50a74ce809234c549fd698c3606971e6-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-6" name="rest_code_50a74ce809234c549fd698c3606971e6-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-7" name="rest_code_50a74ce809234c549fd698c3606971e6-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-7"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-8" name="rest_code_50a74ce809234c549fd698c3606971e6-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-8"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-9" name="rest_code_50a74ce809234c549fd698c3606971e6-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-9"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_50a74ce809234c549fd698c3606971e6-10" name="rest_code_50a74ce809234c549fd698c3606971e6-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_50a74ce809234c549fd698c3606971e6-10"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(If you want things to be mutable, you do need to write some more code. Still, all you need for encapsulated properties is &lt;code class="docutils literal"&gt;int Foo { get; set; }&lt;/code&gt;, which is miles better than having to write out getters and setters by hand, as you would do in Java.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="dependency-management"&gt;
&lt;h2&gt;Dependency management&lt;/h2&gt;
&lt;p&gt;Gitco.NET is a fairly simple thing, and it doesn’t need any third-party libraries, it can do its job with just the standard library.&lt;/p&gt;
&lt;p&gt;However, Gitco.NET has a test suite. .NET doesn’t ship with a unit testing framework. There are three popular options, I picked xUnit (which is the most popular). I created the test project with a template, and then added a reference to the main code (under test). I ended up with the following project file (&lt;code class="docutils literal"&gt;gitco.NET.Tests.csproj&lt;/code&gt;):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code xml"&gt;&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-1" name="rest_code_9f0b331556384a5da824446f47232cd3-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-2" name="rest_code_9f0b331556384a5da824446f47232cd3-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-3" name="rest_code_9f0b331556384a5da824446f47232cd3-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-4" name="rest_code_9f0b331556384a5da824446f47232cd3-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net6.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-5" name="rest_code_9f0b331556384a5da824446f47232cd3-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ImplicitUsings&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/ImplicitUsings&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-6" name="rest_code_9f0b331556384a5da824446f47232cd3-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;LangVersion&amp;gt;&lt;/span&gt;10.0&lt;span class="nt"&gt;&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-7" name="rest_code_9f0b331556384a5da824446f47232cd3-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-8" name="rest_code_9f0b331556384a5da824446f47232cd3-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;IsPackable&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/IsPackable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-9" name="rest_code_9f0b331556384a5da824446f47232cd3-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-10" name="rest_code_9f0b331556384a5da824446f47232cd3-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-11" name="rest_code_9f0b331556384a5da824446f47232cd3-11" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-12" name="rest_code_9f0b331556384a5da824446f47232cd3-12" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Test.Sdk"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"17.1.0"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-13" name="rest_code_9f0b331556384a5da824446f47232cd3-13" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"xunit"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"2.4.1"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-14" name="rest_code_9f0b331556384a5da824446f47232cd3-14" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"xunit.runner.visualstudio"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"2.4.3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-15" name="rest_code_9f0b331556384a5da824446f47232cd3-15" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime;&lt;span class="w"&gt; &lt;/span&gt;build;&lt;span class="w"&gt; &lt;/span&gt;native;&lt;span class="w"&gt; &lt;/span&gt;contentfiles;&lt;span class="w"&gt; &lt;/span&gt;analyzers;&lt;span class="w"&gt; &lt;/span&gt;buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-16" name="rest_code_9f0b331556384a5da824446f47232cd3-16" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-17" name="rest_code_9f0b331556384a5da824446f47232cd3-17" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-18" name="rest_code_9f0b331556384a5da824446f47232cd3-18" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"coverlet.collector"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.1.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-19" name="rest_code_9f0b331556384a5da824446f47232cd3-19" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime;&lt;span class="w"&gt; &lt;/span&gt;build;&lt;span class="w"&gt; &lt;/span&gt;native;&lt;span class="w"&gt; &lt;/span&gt;contentfiles;&lt;span class="w"&gt; &lt;/span&gt;analyzers;&lt;span class="w"&gt; &lt;/span&gt;buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-20" name="rest_code_9f0b331556384a5da824446f47232cd3-20" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-21" name="rest_code_9f0b331556384a5da824446f47232cd3-21" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-22" name="rest_code_9f0b331556384a5da824446f47232cd3-22" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-23" name="rest_code_9f0b331556384a5da824446f47232cd3-23" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-24" name="rest_code_9f0b331556384a5da824446f47232cd3-24" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-25" name="rest_code_9f0b331556384a5da824446f47232cd3-25" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ProjectReference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"..\gitco.NET\gitco.NET.csproj"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-26" name="rest_code_9f0b331556384a5da824446f47232cd3-26" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-27" name="rest_code_9f0b331556384a5da824446f47232cd3-27" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_9f0b331556384a5da824446f47232cd3-28" name="rest_code_9f0b331556384a5da824446f47232cd3-28" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_9f0b331556384a5da824446f47232cd3-28"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah, it’s an XML file. But it’s pretty straightforward: there’s a &lt;code class="docutils literal"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; with some project configuration, and two &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&amp;gt;&lt;/code&gt; tags. One of them has &lt;code class="docutils literal"&gt;&amp;lt;PackageReference&amp;gt;&lt;/code&gt; tags, which specify third-party dependencies to use. The other has a &lt;code class="docutils literal"&gt;&amp;lt;ProjectReference&amp;gt;&lt;/code&gt; to the main code, pointing at its &lt;code class="docutils literal"&gt;.csproj&lt;/code&gt; file. (Note that this split is arbitrary, you can have as many &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; tags as you want, you could have just one with both package and project references.)&lt;/p&gt;
&lt;p&gt;How does this work? Quite simply, and transparently to the developer. Building the project will lead to packages being &lt;em&gt;restored&lt;/em&gt; (fetched from NuGet, or copied from the local NuGet cache). There are no “virtual environments” to manage, there aren’t 10 competing package managers. Visual Studio will also expect both projects to be part of one solution, which is something you’d likely do anyway for convenient access to both at the same time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tooling"&gt;
&lt;h2&gt;Tooling&lt;/h2&gt;
&lt;section id="dotnet-cli"&gt;
&lt;h3&gt;dotnet CLI&lt;/h3&gt;
&lt;p&gt;.NET has a CLI for performing typical build and project configuration tasks. You can &lt;code class="docutils literal"&gt;dotnet build&lt;/code&gt; a project, you can &lt;code class="docutils literal"&gt;dotnet run&lt;/code&gt; it, you can &lt;code class="docutils literal"&gt;dotnet test&lt;/code&gt; things, and you can &lt;code class="docutils literal"&gt;dotnet publish&lt;/code&gt;. The CLI figures out what to do, it restores the dependencies if needed, it handles the compilation of your code. If you type &lt;code class="docutils literal"&gt;dotnet test&lt;/code&gt; in a directory with your solution file (&lt;code class="docutils literal"&gt;.sln&lt;/code&gt;), it will restore dependencies, build the code, and then find tests and run them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ide"&gt;
&lt;h3&gt;IDE&lt;/h3&gt;
&lt;p&gt;What IDE should you use? There are a few options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio Code.&lt;/strong&gt; The quite advanced text editor supports pretty much any language. C# support works okay, with all the IDE features available, but in my experience, it can sometimes get confused (requiring a restart of the IDE). You will probably need to spend some more time with the &lt;code class="docutils literal"&gt;dotnet&lt;/code&gt; CLI than you would with the other options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Windows.&lt;/strong&gt; The IDE with the purple icon is an option, although VS can feel arcane to people used to other IDEs/editors, and the Vim bindings are quite bad (especially if you select things with a mouse sometimes). It’s free for personal and very-small-business use, but for anything even slightly serious, you’ll need paid licenses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Mac.&lt;/strong&gt; A completely separate product, works reasonably well, same pricing as with the Windows version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Windows + ReSharper Ultimate.&lt;/strong&gt; Adding this (paid) extension makes VS much smarter, although it can also affect performance negatively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JetBrains Rider.&lt;/strong&gt; This is an IDE based on the IntelliJ platform, with all the magic seen in ReSharper (as well as other JetBrains IDEs), but none of the performance issues and Visual Studio being Visual Studio (although if you do prefer VS behaviors and keyboard shortcuts, you can configure those as well). This is probably your best bet if you’re willing to invest some money (or your employer is).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="why-should-i-pick-it-over-x"&gt;
&lt;h2&gt;Why should I pick it over X?&lt;/h2&gt;
&lt;p&gt;Well, it depends. If this post has piqued your interest, perhaps install the SDK and write some small things to get a feel for the language and to see if it’s for you. (And note this post didn’t cover the Web stuff.)&lt;/p&gt;
&lt;p&gt;But here are a few things of note:&lt;/p&gt;
&lt;section id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# is statically typed. Modern Python’s static typing (via things like mypy) is quite cool, but not all libraries and ecosystems have adopted it. Statically typed languages are safer, and allow IDEs to be smarter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has a better approach to functional programming. Python has ugly and single-expression lambdas (with a pointless &lt;code class="docutils literal"&gt;lambda&lt;/code&gt; keyword), C# has inline functions that can contain multiple statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has much better package management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# is trivial to compile to a single-file executable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# is much faster than Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;~Nobody does machine learning and data science in C#, which is a plus in my book.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="java"&gt;
&lt;h3&gt;Java&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# has a lot more developer-quality-of-life features and less boilerplate. For example, Lists and Dictionaries can be accessed using brackets, and properties are accessible via dot notation instead of having to explicitly call getter and setter methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C#’s generic are more flexible, as they aren’t erased on compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has null safety. It also has the safe navigation &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;?.&lt;/span&gt;&lt;/code&gt; operator, and the null coalescing &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;??&lt;/span&gt;&lt;/code&gt; operator, both of which make working with nullable values easier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has easy concurrency via &lt;code class="docutils literal"&gt;async&lt;/code&gt; and &lt;code class="docutils literal"&gt;await&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web stuff: Spring is painful, Spring Boot doesn’t make it much better. ASP.NET Core is much nicer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Additional reading:&lt;/em&gt; Wikipedia has a very nice and detailed &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java"&gt;Comparison of C# and Java&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="also"&gt;
&lt;h3&gt;Also…&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# is a high-level language with automated memory management, which is very convenient in many use-cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are quite a lot of jobs for C# developers, although not necessarily in Silicon Valley.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="but-on-the-other-hand"&gt;
&lt;h3&gt;But on the other hand…&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# can still sometimes feel a bit Windows-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# jobs tend to be enterprisey.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python is a great language to learn as a beginner. It’s also great for one-off things, interactive work, and scripting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The non-Windows desktop GUI story isn’t too great, although it is getting better with MAUI (which supports macOS).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re targeting mobile, I would probably focus on the native APIs and languages for the best user experience (Swift and Cocoa Touch for iOS; Kotlin and the Android Platform APIs for Android). That said, MAUI might be worth a go as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re doing very low-level stuff, C# probably won’t cut it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you want real functional programming, go with F#. You might also prefer Scala or Haskell or such.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And if you’re making web front-end stuff, TypeScript (or plain JavaScript) is still your best bet. C# has Blazor, but I’d prefer for web apps not to embed all of .NET via WebAssembly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But for console apps, Windows desktop, and web back-end services? &lt;strong&gt;Do give C# a try,&lt;/strong&gt; it might just win you over. It is a pretty good language, but one that was held back by the Windows association for a long time. But now it’s part of a modern, multi-platform, developer-friendly ecosystem.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The code samples in this post are using the usual Microsoft code style with braces on separate lines, the usual Microsoft naming convention (PascalCase for ~everything, camelCase for local variable names), and 2-space indentation, which isn’t the usual Microsoft style.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;This could be moved to a separate static method. If that method was &lt;code class="docutils literal"&gt;private static Branch ParseLineAsBranch(string branchLine)&lt;/code&gt;, then the expression could be &lt;code class="docutils literal"&gt;.Select(ParseLineAsBranch)&lt;/code&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;There’s some inconsistency and mixing when working with nullables: nullable objects (such as &lt;code class="docutils literal"&gt;string?&lt;/code&gt;) are accessible directly, whereas nullable value types (such as &lt;code class="docutils literal"&gt;int?&lt;/code&gt;) need to be accessed with &lt;code class="docutils literal"&gt;.Value&lt;/code&gt;, due to historical reasons and implementation details.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/</guid><pubDate>Mon, 19 Sep 2022 20:35:00 GMT</pubDate></item><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;mirroring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;screen resolution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dock position and icon size&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item><item><title>5 months with a MacBook Pro: beautiful machine that just works</title><link>https://chriswarrick.com/pl/blog/2016/12/28/5-months-with-a-macbook-pro-beautiful-machine-that-just-works/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Five months ago, I decided to make the switch from my trusty old desktop
computer, running Arch Linux, to a MacBook Pro. I picked the 2015 13" base
model with an upgraded hard drive. The device is beautiful, and just works™,
which is pretty important to me.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="mac-as-a-unix-machine-nothing-beats-a-terminal"&gt;
&lt;h2&gt;Mac as a UNIX® machine: nothing beats a terminal&lt;/h2&gt;
&lt;p&gt;What are the first things you should set up on a Mac, as a programmer?
&lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; (and Homebrew Cask). That’s a package manager
that can install all software necessary to create an useful command-line
environment, including Python, ffmpeg and sox for media needs, git, GCC (clang
is wonderful, but I need plain old GCC sometimes), zsh, and a handful of other
programs. And, of course, Vim.&lt;/p&gt;
&lt;p&gt;And what Homebrew Cask can do for you? Install many GUI programs, without
needing to mess with &lt;code class="docutils literal"&gt;.dmg&lt;/code&gt; installers or stuff.  Including web browsers, music
players, or iTerm2.&lt;/p&gt;
&lt;p&gt;Did I mention UNIX®, with the registered trademark sign (belongs to The Open
Group; used for informational purposes only)? macOS has a fancy certificate to
prove it’s compliant with the relevant specifications. It runs the FreeBSD
userland, which is what you expect from a typical *nix system. (Linux converts
might get slightly annoyed at behavioral differences, for example &lt;code class="docutils literal"&gt;rm
directory &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/code&gt; will work on Linux with GNU coreutils, but won’t on
macOS/FreeBSD)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-gui-beautiful-fluid-friendly"&gt;
&lt;h2&gt;The GUI: beautiful, fluid, friendly&lt;/h2&gt;
&lt;p&gt;macOS is famous for its user interface. The macOS GUI is well thought out, even
though there are some idiosyncrasies a long-time Linux/Windows user might
consider weird. For example, sorting folders before files is something natural
for Windows, but on macOS, it’s a brand new option — added in macOS Sierra,
which came out in September 2016.&lt;/p&gt;
&lt;p&gt;That aside, the macOS user interface makes one coherent product. You can expect
consistent behavior between apps, and that often extends to third-party
software. Apple has a document, called &lt;a class="reference external" href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/OSXHIGuidelines/index.html"&gt;Human Interface Guidelines&lt;/a&gt;, which
describes how a macOS app should behave. While there are some documents like
this one for Windows, you can see many apps ignoring what it says — including
eg. built-in software, which cannot even decide on which font to use (bitmap MS
Sans Serif vs vectorized Microsoft Sans Serif vs Segoe UI — what is going on?!)&lt;/p&gt;
&lt;p&gt;While the interface is friendly and coherent, it can get a little worse
when &lt;em&gt;foreign&lt;/em&gt; apps are involved — for example, Qt or wxWidgets apps can
sometimes differ in behavior, but that’s not noticeable. X11 apps are another
story, but most of their developers are not aware that someone is running them
on macOS. (Excluding the Inkscape developers, which have a Mac “app” that
basically runs it in X11 and they do not even care…)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="programming-old-habits-die-hard"&gt;
&lt;h2&gt;Programming: old habits die hard&lt;/h2&gt;
&lt;p&gt;Did I mention Vim? Well, I’m still using Vim and a terminal emulator to get a
lot of coding work done. Why? Because they are still the best ways to be
productive. I tried many &lt;em&gt;gooey&lt;/em&gt; solutions for coding, from the heavyweights
(PyCharm, Visual Studio) to the laughable Atom editor (famous for being slow,
and effectively a web browser) — and none of them was able to replace Vim and a
Terminal. They are far too addictive.&lt;/p&gt;
&lt;p&gt;That said, I sometimes use GitHub for Desktop, or other helper tools.
Sometimes, they work well — key word here is &lt;em&gt;sometimes&lt;/em&gt;. Unlike Vim (or
NeoVim, or a GUI: MacVim/VimR), which boosts my productivity by a lot.&lt;/p&gt;
&lt;p&gt;Honorable mention goes to Automator and AppleScript. They are a superb
solution for automating common tasks in the GUI, something other OSes do not
provide. With Automator, everyone can create a workflow to perform repetitive
tasks faster. With AppleScript, you can get even more stuff done.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-trackpad-addictive"&gt;
&lt;h2&gt;The trackpad: addictive&lt;/h2&gt;
&lt;p&gt;Apple is famous for their trackpads. Their newest generation of these devices
does not really move when you click it, it uses the Taptic Engine and [insert
smart-sounding words here] to &lt;em&gt;simulate&lt;/em&gt; a click. It also supports Force Touch,
for pressing down harder on something (eg. a word to reveal dictionary
definitions), and haptic feedback for certain operations &lt;em&gt;(in Soviet Russia,
trackpad clicks you!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Those trackpads also provide intuitive gestures. Working with
full-screen windows or multiple desktops? Just swipe left/right to switch
between them. Need to see all your windows? Swipe up with three fingers. Smooth
zoom, scrolling and rotating can also be done with just the trackpad.&lt;/p&gt;
&lt;p&gt;And recently I had to do some stuff on someone else’s Windows notebook. That
notebook features a touchpad that does not &lt;em&gt;click&lt;/em&gt; — it has two buttons on the
bottom, and tap to click is enabled. I had to drag and drop some files between
two windows. I tried doing it the way I got used on the MBP trackpad, which is
basically the way you’d do it with a mouse: hover cursor above file, click the
trackpad, move mouse to other windows, and release. That doesn’t work on those
non-clicky touchpads. A software developer failing at drag-and-drop must be a
funny thing to see. That’s just how addictive the trackpad is. (Of course,
Windows notebooks with clicky trackpads exist, but are not as popular as the
tappy ones.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="walled-garden-how-can-you-not-love-our-products"&gt;
&lt;h2&gt;Walled garden: how can you NOT love our products?&lt;/h2&gt;
&lt;p&gt;Of course, there are some issues with living in an Apple walled garden. The
main issue is: if you want to use something that is not an Apple product, good
luck with that. Sure, you can use an Android phone, but you won’t get
some of the nice Handoff features, and if you want to transfer files, have fun
using a forgotten barely-working app from 2012. That phone also won’t be able
to access your iCloud stuff, so put your data somewhere else.&lt;/p&gt;
&lt;p&gt;Do you want to use an external hard drive, or a USB stick? With other operating
systems? Well, you might have an issue with the file system. You can choose
between ExFAT, which is not popular but kinda does the job; FAT32, which has a
4GB file size limit (virtual disk images are often larger than that), or NTFS,
but for that you will need to pay a third-party company — and trust them not to
do anything nefarious. Or use experimental built-in support, or an open-source
project, both of which aren’t something one would normally trust with important
data.&lt;/p&gt;
&lt;p&gt;Speaking of external hard drives, here’s a hint: if you want to use a drive for
Time Machine (a wonderful, foolproof, one-click backup solution), and you want
it encrypted, make sure it uses GPT and not MBR. I had to reformat my drive
twice, and that’s not well documented (you need to click the help button,
then go through 3 pages to find a mention of this).&lt;/p&gt;
&lt;p&gt;Do you want to play some games? Well, there is basically no support for
gamepads, only some community beta drivers for the official PS3/Xbox 360 pads.
Apple does not care.&lt;/p&gt;
&lt;p&gt;And then we get to mouse issues. You see, even though the trackpad is awesome,
I also want to use a regular mouse. So I started with my old PC mouse, as a
temporary solution. The mouse was a Logitech M560, which uses the wireless
Unifying USB connector. It turns out the middle mouse button is supposed to be
a Windows button on one click and left mouse button on another, but Linux
drivers seem to change that behavior. To fix that, I’d need drivers for macOS.
Logitech believes this mouse is not worthy of a Mac, and so the mouse is not
detected by their driver suite. I got rid of that mouse and replaced it with a
Microsoft Sculpt Comfort Mouse. The mouse has a real middle button, which is
activated by clicking the scroll wheel, and a Windows button on the side
(generally useless on macOS).&lt;/p&gt;
&lt;p&gt;Sadly, macOS insists on scrolling in a weird accelerated way, where the number
of pixels scrolled grows over time — which means scrolling by one step means
scrolling by 5 pixels, but the longer you scroll, the larger the scroll
becomes.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-future-im-worried"&gt;
&lt;h2&gt;The future: I’m worried&lt;/h2&gt;
&lt;p&gt;I made the decision to buy the MacBook Pro in the middle of rumor season, after
WWDC which left a lot of people disappointed. I decided that, if all the rumors
about removed ports and touchy-feely screens were true, I would not want that
device on my desk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And boy did Apple deliver!&lt;/strong&gt; The new MacBook Pro has only USB-C ports (and a
headphone jack!), a gimmicky Touch Bar that only helps with emoji (the rest can
be done with standard keyboard shortcuts, or on-screen toolbars — I thought
that was a Pro machine, not a toy?), and a fingerprint reader (which I don’t
care about). And then there’s the cheaper model, with two USB-C ports and no
touch interfaces. My MBP, mainly a desktop replacement, is on AC power all the
time, and runs an external HDMI display. With the cheaper model (worse CPU than
2015; same price as 2015 with the same 256GB drive), I would have zero ports
for any other external devices. And I often have some thing plugged in, in
which case the only unoccupied ports are the Thunderbolt ports (which I don’t
have any devices for).&lt;/p&gt;
&lt;p&gt;So, I hope this 2015 model will live on for years, and hopefully when it fails,
Apple will have a more sensible machine out there. For now, I’ll keep my
&lt;em&gt;MacBook Pro (Retina, 13-inch, Early 2015)&lt;/em&gt; and will be pretty happy with it.&lt;/p&gt;
&lt;p&gt;With just only one exception: two kernel panics in nearly 5 months. A bit
unstable, eh?&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/12/28/5-months-with-a-macbook-pro-beautiful-machine-that-just-works/</guid><pubDate>Tue, 27 Dec 2016 15:15:00 GMT</pubDate></item><item><title>Code writing code: Python and Vim as development aids</title><link>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Recently I was working on some C# and Java code. And along the way, I used
Python and Vim to (re)write my code. A small Python script and a 6-keystroke
Vim macro did it faster and better than a human would.&lt;/p&gt;
&lt;p&gt;Every programmer should learn a good scripting language and use a programmable
editor like Vim. Why? Here are two examples, after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="episode-i-inotifypropertychanged-or-python-writing-c"&gt;
&lt;h2&gt;Episode I: &lt;code class="docutils literal"&gt;INotifyPropertyChanged&lt;/code&gt;, or Python writing C#&lt;/h2&gt;
&lt;p&gt;I was building a private C# weekend project (that turned into a weeklong
project) — and by the way, WPF and C# are quite pleasant (Windows Forms is a
trainwreck, though). One of the things I used in that project was a DataGrid
bound to a list of custom objects (a DataGrid is a table, basically). And in
order to use it, you need to use the &lt;code class="docutils literal"&gt;INotifyPropertyChanged&lt;/code&gt; interface &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms229614(v=vs.100).aspx"&gt;(MSDN)&lt;/a&gt;.
It involves doing something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-1" name="rest_code_a022a812c3ae4173bd43be0054576273-1"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// can also be a field&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-2" name="rest_code_a022a812c3ae4173bd43be0054576273-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-3" name="rest_code_a022a812c3ae4173bd43be0054576273-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;[JsonProperty]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-4" name="rest_code_a022a812c3ae4173bd43be0054576273-4"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-5" name="rest_code_a022a812c3ae4173bd43be0054576273-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-6" name="rest_code_a022a812c3ae4173bd43be0054576273-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-7" name="rest_code_a022a812c3ae4173bd43be0054576273-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-8" name="rest_code_a022a812c3ae4173bd43be0054576273-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-9" name="rest_code_a022a812c3ae4173bd43be0054576273-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-10" name="rest_code_a022a812c3ae4173bd43be0054576273-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-11" name="rest_code_a022a812c3ae4173bd43be0054576273-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="n"&gt;NotifyPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-12" name="rest_code_a022a812c3ae4173bd43be0054576273-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-13" name="rest_code_a022a812c3ae4173bd43be0054576273-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a022a812c3ae4173bd43be0054576273-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a022a812c3ae4173bd43be0054576273-14" name="rest_code_a022a812c3ae4173bd43be0054576273-14"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;That’s 12 lines of code (excluding &lt;code class="docutils literal"&gt;[JsonProperty]&lt;/code&gt; which comes from the
Json.NET library) for that pattern. Oh: and I need to do that for &lt;strong&gt;every&lt;/strong&gt;
field/property of my class, because otherwise any changes to them would not be
reflected in the tables (and maybe one or two fields were &lt;em&gt;not&lt;/em&gt; in the table).&lt;/p&gt;
&lt;p&gt;Doing that by hand is really not feasible: you need to copy-paste this
large block 14 times and take care of 5 instances of the name (3 with
underscores, 2 without), 2 instances of the type, and the &lt;code class="docutils literal"&gt;[JsonProperty]&lt;/code&gt;
attribute (which does not appear on all properties).&lt;/p&gt;
&lt;p&gt;So, I used one of those intelligent computer things to do it for me. I wrote a
really simple &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script and ran it. And I ended up with all 14 fields built
for me.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py.html"&gt;code-writing-code/write_properties.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-1" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-2" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-3" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;public &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-4" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-4"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            get {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-5" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                return &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-6" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-7" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            set {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-8" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                if (value != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_) {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-9" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ = value;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-10" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    NotifyPropertyChanged("&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-11" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-12" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-13" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-14" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-15"&gt;&lt;code data-line-number="15"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-15" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[JsonProperty]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;        '&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-16"&gt;&lt;code data-line-number="16"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-16" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-16"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-17"&gt;&lt;code data-line-number="17"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-17" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-18"&gt;&lt;code data-line-number="18"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-18" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-19"&gt;&lt;code data-line-number="19"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-19" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-20"&gt;&lt;code data-line-number="20"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-20" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-21"&gt;&lt;code data-line-number="21"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-21" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-22"&gt;&lt;code data-line-number="22"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-22" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-23"&gt;&lt;code data-line-number="23"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-23" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-23"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-24"&gt;&lt;code data-line-number="24"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-24" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-25"&gt;&lt;code data-line-number="25"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-25" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-25"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'1 string name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-26"&gt;&lt;code data-line-number="26"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-26" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'0 int another'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-27"&gt;&lt;code data-line-number="27"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-27" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 12 fields omitted for brevity&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-28"&gt;&lt;code data-line-number="28"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-28" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-29"&gt;&lt;code data-line-number="29"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-29" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-30"&gt;&lt;code data-line-number="30"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-30" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-30"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-31"&gt;&lt;code data-line-number="31"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-31" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Private definitions (internal)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-32"&gt;&lt;code data-line-number="32"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-32" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-33"&gt;&lt;code data-line-number="33"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-33" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-33"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"        private &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ { get; set; }"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-34"&gt;&lt;code data-line-number="34"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-34" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-34"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-35"&gt;&lt;code data-line-number="35"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-35" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-35"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-36"&gt;&lt;code data-line-number="36"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-36" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Public definitions (with notifications)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-37"&gt;&lt;code data-line-number="37"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-37" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-37"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-38"&gt;&lt;code data-line-number="38"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-38" name="rest_code_fd9308a5ccf34a4f8cc4f851e0b393c1-38"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;That script takes a list of properties and spits out a block of code, ready to
be pasted into the code. Visual Studio has a nice &lt;em&gt;Insert File as Text&lt;/em&gt;
feature, so redirecting the output to a file and using that option is enough.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="episode-ii-fixing-argument-order-or-vim-re-writing-java"&gt;
&lt;h2&gt;Episode II: Fixing argument order, or Vim (re)writing Java&lt;/h2&gt;
&lt;p&gt;Another project, &lt;a class="reference external" href="https://github.com/Kwpolska/numbernamer"&gt;Number Namer&lt;/a&gt;, written in Java, and it does what it says on
the tin: takes a number and writes it out as words, while being multilingual and
extensible. I used Eclipse for this project, because it looks good, is really
helpful with its code linting, and does not run slowly on my aging system (I’m
looking at you, IntelliJ IDEA aka PyCharm aka Android Studio…)&lt;/p&gt;
&lt;p&gt;And so, I was building a test suite, using &lt;a class="reference external" href="http://junit.org/"&gt;JUnit&lt;/a&gt;. It’s pretty
straightforward, and I remember the syntax from Python’s unittest (even though
I write tests with &lt;a class="reference external" href="http://pytest.org/"&gt;pytest&lt;/a&gt; nowadays). Or so I thought.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code java"&gt;&lt;a id="rest_code_a78bd49d2579469a97501003ab5f37a5-1" name="rest_code_a78bd49d2579469a97501003ab5f37a5-1" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a78bd49d2579469a97501003ab5f37a5-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (incorrect)&lt;/span&gt;
&lt;a id="rest_code_a78bd49d2579469a97501003ab5f37a5-2" name="rest_code_a78bd49d2579469a97501003ab5f37a5-2" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a78bd49d2579469a97501003ab5f37a5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_a78bd49d2579469a97501003ab5f37a5-3" name="rest_code_a78bd49d2579469a97501003ab5f37a5-3" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a78bd49d2579469a97501003ab5f37a5-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (fixed)                              ^ cursor&lt;/span&gt;
&lt;a id="rest_code_a78bd49d2579469a97501003ab5f37a5-4" name="rest_code_a78bd49d2579469a97501003ab5f37a5-4" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_a78bd49d2579469a97501003ab5f37a5-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see, the typical Python spelling is &lt;code class="docutils literal"&gt;self.assertEquals(actual,
expected)&lt;/code&gt;. Java adds a &lt;code class="docutils literal"&gt;String&lt;/code&gt; message parameter and it also swaps
&lt;code class="docutils literal"&gt;actual&lt;/code&gt; and &lt;code class="docutils literal"&gt;expected&lt;/code&gt;. Which I didn’t notice at first, and I wrote my
assertions incorrectly. While it doesn’t &lt;em&gt;really&lt;/em&gt; matter (it will still work),
the output looked a bit weird.&lt;/p&gt;
&lt;p&gt;And I noticed only when I finished writing my tests (and I had a typo in my
expected output). I wanted to fix them all — not manually, of course. So, I
closed this file, brought up Vim, searched for the motion I need (it’s
&lt;code class="docutils literal"&gt;t{char}&lt;/code&gt; — see &lt;code class="docutils literal"&gt;:help t&lt;/code&gt;). And I ended up with this
(cursor placed on the comma after the first argument):&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;kbd style="font-size: 2em;"&gt;dt,&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;t)&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;p&lt;/kbd&gt;
&lt;/div&gt;&lt;p&gt;What does this do, you may ask? It’s actually pretty self-explanatory:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;d&lt;/b&gt;elete &lt;b&gt;t&lt;/b&gt;ill comma, (go) &lt;b&gt;t&lt;/b&gt;ill closing parenthesis, &lt;b&gt;p&lt;/b&gt;aste.
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This fixes one line. Automatically. Make it a macro (wrap in &lt;code class="docutils literal"&gt;qq&lt;/code&gt; … &lt;code class="docutils literal"&gt;q&lt;/code&gt;,
use with &lt;code class="docutils literal"&gt;@q&lt;/code&gt;) and now you can run it on all lines, either by moving manually or by
searching for &lt;code class="docutils literal"&gt;,&lt;/code&gt; and pressing &lt;code class="docutils literal"&gt;n@q&lt;/code&gt; until you run out of lines.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Some of you might say “but VS/Eclipse/IDEA has an option for that somewhere” or
“[expensive tool] can do that” — and a Google search shows that there is an
Eclipse plugin to swap arguments and that I could also write a regex to solve
my second issue. Nevertheless, Python is a great tool in a programmer’s toolbox
— especially the interactive interpreter. And Vim is an awesome editor that can
accomplish magic in a few keystrokes — and there are many more things you can
do with it.&lt;/p&gt;
&lt;p class="lead"&gt;Go learn &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;Also: don’t even bother with VsVim or IdeaVim or any other Vim emulation
plugins, they work in unusual ways and often don’t give you everything — for
example, VsVim has a Vim visual mode (&lt;code class="docutils literal"&gt;v&lt;/code&gt; key) and Visual Studio selection
mode (mouse), and only one allows Vim keystrokes (the other will replace
selected text).&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</guid><pubDate>Fri, 27 May 2016 08:46:35 GMT</pubDate></item><item><title>Speeker — moja mała aplikacja na Androida</title><link>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;a class="android-adventure-logo-robot reference external image-reference" href="https://chriswarrick.com/pl/blog/2014/08/01/series-android-adventure/"&gt;&lt;img alt="/blog-content/android-adventure/robot.png" src="https://chriswarrick.com/blog-content/android-adventure/robot.png"&gt;&lt;/a&gt;
&lt;p&gt;Skoro mam używalny telefon, mogę zająć się tworzeniem aplikacji na Androida.
Co uczyniłem.  Zacząłem od aplikacji do testowania i zabawy z usługami
text-to-speech systemu Android.  Nazwałem ją Speeker.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;img src="https://chriswarrick.com/blog-content/android-adventure/speeker.png" alt="Speeker logo"&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/speeker/" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker/releases" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobieranie
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;Speeker jest małym i prostym frontendem dla systemowej usługi TTS.  W obecnej
iteracji jest dosyć ograniczony.  Kompletny zestaw funkcji to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;wypowiedz tekst wpisany przez użytkownika&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wypowiedz tekst w domyślnym języku TTS systemu (wybranym w ustawieniach
Androida, i nie ma obecnie przycisku otwierającego to menu)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wyczyść pole tekstowe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pokaż okno &lt;em&gt;O programie&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pokaż licencje open source&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;otwórz moją stronę internetową&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To SZEŚĆ funkcji! I nie można nawet ściągnąć go z Google Play, bo jestem zbyt
skąpy by zapłacić $25 opłaty startowej!&lt;/p&gt;
&lt;p&gt;Będę lub nie kontynuował rozwoju i być może dodam kilka funkcji.  W każdym
razie, moje doświadczenia z tworzeniem na Androida nie były dobre: nie ma
wystarczająco dużo dobrej dokumentacji, i musiałem często zgadywać w niektórych
miejscach, np. przy importach.  Dokumentacja mogłaby zostać znacznie
poprawiona.&lt;/p&gt;
&lt;p&gt;Innym problemem jest wybór IDE.  O ile można oczywiście pracować nad Androidem
w dowolnym środowisku, w tym tylko w Vimie i w terminalu, oficjalnym i
rekomendowanym środowiskiem jest Eclipse.  Który okazuje się być najgorszym IDE
które kiedykolwiek powstało.  Jest nieprzyjazny i nieporęczny — czyli
standardowe cechy dużych aplikacji Javovych.  Jednym razem Eclipse udało się
otworzyć plik w jakieś dziesięć sekund.  Bardzo imponujące, dopóki nie
zauważysz, że cokolwiek innego zrobiłoby to w mniej czasu.  Nie, nie zmyślam.
To jest problem z dużymi IDE: próbują zrobić za dużo naraz.&lt;/p&gt;
&lt;p&gt;Tworzenie na Androida nie było najlepszym doświadczeniem — ale da się, i nie
trzeba mieć za dużo doświadczenia z samą platformą by to robić.  Android ma
potencjał, ale musi być udoskonalony, by być przyjaznym dla developerów.&lt;/p&gt;</description><category>android</category><category>app</category><category>devel</category><category>programming</category><category>projects</category><guid>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</guid><pubDate>Tue, 26 Aug 2014 13:00:00 GMT</pubDate></item><item><title>New Year’s Python Meme 2013/2014</title><link>https://chriswarrick.com/pl/blog/2013/12/31/new-years-python-meme-2013-2014/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Via &lt;a class="reference external" href="http://ziade.org/2013/12/23/new-years-python-meme-2013/"&gt;Tarek Ziadé&lt;/a&gt; (original meme, none this year…) and &lt;a class="reference external" href="http://blog.aclark.net/2014/12/30/new-years-python-meme-2014/"&gt;Alex Clark&lt;/a&gt;.  Right after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Here it comes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. What’s the coolest Python application, framework or library you
discovered this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. What new programming technique did you learn this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lots of them, including writing sane context managers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Which open source project did you contribute to the most this year? What
did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt; yet again!  Up until now, I made 484 commits (or 431
excluding merge commits) — which is quite a lot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Which Python blogs, websites or mailing lists did you read the most this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nedbatchelder.com/blog/"&gt;Ned Batchelder’s&lt;/a&gt; and &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher’s&lt;/a&gt; blogs and many things that are on Planet Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. What are the three top things you want to learn next year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lots of them, mainly C, some Ruby and JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. What is the top software, application or library you wish someone would
write next year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My current todo-list says it all — and I’m working on that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A quick app for CSV display&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A GitHub Releases API client&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;nap&lt;/code&gt; = &lt;code class="docutils literal"&gt;sleep&lt;/code&gt; + progressbar (&lt;a class="reference external" href="https://github.com/Kwpolska/nap"&gt;almost-done-thing on GitHub&lt;/a&gt; — C)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;River of Text — Python CLI library (&lt;a class="reference external" href="https://github.com/Kwpolska/rot"&gt;skeleton on GitHub&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Want to do your own list?  Here’s how:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;copy-paste the questions and answer to them in your blog&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tweet it with the &lt;a class="reference external" href="https://twitter.com/search/realtime?q=%232014pythonmeme"&gt;#2014pythonmeme&lt;/a&gt; hashtag&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description><guid>https://chriswarrick.com/pl/blog/2013/12/31/new-years-python-meme-2013-2014/</guid><pubDate>Tue, 31 Dec 2013 17:15:00 GMT</pubDate></item><item><title>I love Python!</title><link>https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;figure&gt;
&lt;a href="http://python.org" title="Python"&gt;&lt;img src="http://kwpolska.tk/blog-content/logos/python.png" alt="Python logo"&gt;&lt;/a&gt;
&lt;figcaption&gt;Python logo&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;I recently started writing &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; code. And I love it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If you’d ask me a week ago about Python, I’d say “meh.”  Python3K?  I
wouldn’t be happy about it.  Sunday evening?  I love both.&lt;/p&gt;
&lt;section id="one-project-rewritten"&gt;
&lt;h2&gt;One project, rewritten&lt;/h2&gt;
&lt;p&gt;I wrote a new project.  Or rather re-wrote a Perl “project”.&lt;/p&gt;
&lt;p&gt;The project, once a little help for building AUR packages, now is almost
a fully-featured AUR helper (it has no update function, but I will
write one soon).  It’s the &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Perl version (search in the repo, linked above) had 56 lines.  In
short, it did something like this (rewritten to bash):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-1" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-1" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-2" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-2" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-3" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-3" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;http://aur.archlinux.org/&lt;span class="nv"&gt;$pk&lt;/span&gt;/&lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-4" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-4" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;tar&lt;span class="w"&gt; &lt;/span&gt;-xzvf&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-5" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-5" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-6" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-6" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;makepkg&lt;span class="w"&gt; &lt;/span&gt;-si
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-7" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-7" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;..
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-8" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-8" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-9" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-9" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a7889ca70af403ba13a0ff64592c8cf-10" name="rest_code_3a7889ca70af403ba13a0ff64592c8cf-10" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_3a7889ca70af403ba13a0ff64592c8cf-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;package&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is really, REALLY bad.  But it worked for me, because the “normal”
AUR helpers were slow.  I wanted to do something about it.  I put an entry on
my TODO list about it.  A few months later I decided to do it.  The TODO list
entry said “write build.py”.  I wanted to use Python because I wanted to learn
it.  In fact, I began &lt;em&gt;loving&lt;/em&gt; Python.&lt;/p&gt;
&lt;p&gt;The Perl version had 56 lines.  A shortened version of it in Bash took only 10
(I skipped a few features, the full version would be around 20 lines or so.)
Take a guess: how long is the Python version? 30 lines?  100?  No.  300 lines.
How could this happen?  No, &lt;em&gt;not&lt;/em&gt; because Python is a pain in the ass to write.
It was because I could implement new, great features EASILY.  The original
version could only download a package and build it.  What if the package didn’t
exist?  The library responsible for untarring it would throw an error.  And
even if makepkg had a problem with building the package, the script would
happily inform the user that it was successfully bulit…  What are the new
features, you may ask?  Install validation, i.e.  checking if the package is
installed or not.  Package searching, sanity checks, dependency solving…  This
is great.  If I’d like to write it in Perl, it will take me ages and I’m not
sure if there is any libalpm wrapper.&lt;/p&gt;
&lt;p&gt;If you think that you can rewrite it in Perl, sure, go for it, if you will:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;find a working libalpm wrapper or write one yourself&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;port python3-aur (it heps with the XML-RPC of the AUR) to perl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;implement EVERY feature of the Py3K version&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;give me the code and tell me how long did you write it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Done?  Great then, &lt;a class="reference external" href="https://chriswarrick.com/contact/"&gt;contact me&lt;/a&gt;!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Python has the friendliest web documentation ever.  PHP’s looks a bit
harsh.  Perl’s is not easy to search.&lt;/p&gt;
&lt;p&gt;Time for a real world example:  I want to learn how to write a specific
function in Perl, PHP and Python.  This function would print the argument.
For example, in C:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code cpp"&gt;&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-1" name="rest_code_61b678d652b24d32aa93a177927a83f7-1" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-2" name="rest_code_61b678d652b24d32aa93a177927a83f7-2" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-3" name="rest_code_61b678d652b24d32aa93a177927a83f7-3" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-4" name="rest_code_61b678d652b24d32aa93a177927a83f7-4" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-5" name="rest_code_61b678d652b24d32aa93a177927a83f7-5" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-6" name="rest_code_61b678d652b24d32aa93a177927a83f7-6" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-7" name="rest_code_61b678d652b24d32aa93a177927a83f7-7" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-8" name="rest_code_61b678d652b24d32aa93a177927a83f7-8" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_61b678d652b24d32aa93a177927a83f7-9" name="rest_code_61b678d652b24d32aa93a177927a83f7-9" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_61b678d652b24d32aa93a177927a83f7-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice: by “searching” in docs I mean reading the page and looking for
a thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perl:&lt;/strong&gt; Let’s begin at &amp;lt;&lt;a class="reference external" href="http://perl.org"&gt;http://perl.org&lt;/a&gt;&amp;gt;. Documentation tab, Tutorials.
I need to define a function.  Nothing seems to help me.  I look at the
sidebar and find &lt;em&gt;Reference/Functions&lt;/em&gt;.  Great, that’s what I need, so i
click it…  I can’t see anything about functions.  Langauge reference?
Nothing.  I ask Google and I learn that Perl names them &lt;em&gt;subroutines&lt;/em&gt;.  I
check the Language reference:  it’s the sub function, now I can define my
function and call it.  printf?  Let’s look it up in the Functions list.
We’re done.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code perl"&gt;&lt;a id="rest_code_ae77982a44d84fb88ac10d152bfe5ece-1" name="rest_code_ae77982a44d84fb88ac10d152bfe5ece-1" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_ae77982a44d84fb88ac10d152bfe5ece-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;sub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_ae77982a44d84fb88ac10d152bfe5ece-2" name="rest_code_ae77982a44d84fb88ac10d152bfe5ece-2" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_ae77982a44d84fb88ac10d152bfe5ece-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;my&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_ae77982a44d84fb88ac10d152bfe5ece-3" name="rest_code_ae77982a44d84fb88ac10d152bfe5ece-3" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_ae77982a44d84fb88ac10d152bfe5ece-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_ae77982a44d84fb88ac10d152bfe5ece-4" name="rest_code_ae77982a44d84fb88ac10d152bfe5ece-4" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_ae77982a44d84fb88ac10d152bfe5ece-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_ae77982a44d84fb88ac10d152bfe5ece-5" name="rest_code_ae77982a44d84fb88ac10d152bfe5ece-5" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_ae77982a44d84fb88ac10d152bfe5ece-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_ae77982a44d84fb88ac10d152bfe5ece-6" name="rest_code_ae77982a44d84fb88ac10d152bfe5ece-6" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_ae77982a44d84fb88ac10d152bfe5ece-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl’s documentation is anywhere near user-friendliness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PHP:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://php.net"&gt;http://php.net&lt;/a&gt;&amp;gt;.  Why is the &lt;em&gt;documentation&lt;/em&gt; link so small?
Anyways, I need functions.  Language Refernce/Functions.  Here we go, one
more click and I know how to make a function.  And I guess that I’ll have
to search the Function Reference.  I find text processing, go for Strings
and I can happily see printf.  Take a look and we can write this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code php"&gt;&lt;a id="rest_code_7758d93500484b709b507ee6a7291059-1" name="rest_code_7758d93500484b709b507ee6a7291059-1" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_7758d93500484b709b507ee6a7291059-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;a id="rest_code_7758d93500484b709b507ee6a7291059-2" name="rest_code_7758d93500484b709b507ee6a7291059-2" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_7758d93500484b709b507ee6a7291059-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_7758d93500484b709b507ee6a7291059-3" name="rest_code_7758d93500484b709b507ee6a7291059-3" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_7758d93500484b709b507ee6a7291059-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_7758d93500484b709b507ee6a7291059-4" name="rest_code_7758d93500484b709b507ee6a7291059-4" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_7758d93500484b709b507ee6a7291059-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_7758d93500484b709b507ee6a7291059-5" name="rest_code_7758d93500484b709b507ee6a7291059-5" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_7758d93500484b709b507ee6a7291059-5"&gt;&lt;/a&gt;&lt;span class="nx"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_7758d93500484b709b507ee6a7291059-6" name="rest_code_7758d93500484b709b507ee6a7291059-6" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_7758d93500484b709b507ee6a7291059-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://python.org/"&gt;http://python.org/&lt;/a&gt;&amp;gt;.  Documentation element exists in the
menu.  I click it.  They offer me a nice tutorial, so I’ll check it out.
I scan through the Table of Contents and I see a chapter called Defining
Functions.  Great, it will work.  Now I go back to the ToC and, because
this is a tutorial rather than a reference, and I can see chapter &lt;em&gt;7.1:
Fancier output formatting&lt;/em&gt;.  I want to have %s as in other languages, so
I skip this one and see &lt;em&gt;Old string formatting&lt;/em&gt;, which uses the %s.  Now,
assuming they indented the code on purpose because there are no braces,
I can write:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-1" name="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-1" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_c66c3d70e0374887aa4ddd8113dedbbd-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-2" name="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-2" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_c66c3d70e0374887aa4ddd8113dedbbd-2"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Input: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;a id="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-3" name="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-3" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_c66c3d70e0374887aa4ddd8113dedbbd-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-4" name="rest_code_c66c3d70e0374887aa4ddd8113dedbbd-4" href="https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/#rest_code_c66c3d70e0374887aa4ddd8113dedbbd-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of them work and output &lt;code class="docutils literal"&gt;Input: some stuff to print&lt;/code&gt; followed by a
newline.  The original C example had 8 lines.  Perl made it in 5, PHP
in 6 (or 4 if you won’t count the PHP tags), Python used only 3.&lt;/p&gt;
&lt;p&gt;Which documentation is the most HUMAN-friendly?  Python’s.  Which is the
worst? Perl’s.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nothing-is-flawless"&gt;
&lt;h2&gt;Nothing is flawless&lt;/h2&gt;
&lt;p&gt;Everything has some flaws.  What is it in Python, then?
&lt;a class="reference external" href="http://wiki.python.org/moin/Python2orPython3"&gt;Existence of two concurrent versions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most distros and projects use Py2K, while some of them offer Py3K (or both.)
The &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt; is in Py3K, because it requires &lt;code class="docutils literal"&gt;pyalpm&lt;/code&gt; and the &lt;code class="docutils literal"&gt;AUR&lt;/code&gt;
module (I could rewrite the AUR module in Py2K, but pyalpm is much harder to
modify.  UPDATE 2012-08-04: it was re-implemented by me several releases ago,
in version 2.1.0, released over a month after this post)  My other projects
(like KWDv2, another rewrite, this time with minimal changes and 30% less code
or my first ever Python project, trash.py, a partial XDG trash standard
implementation) use the old Py2K (usually v2.6, because I need compatibility
with my shell server.)&lt;/p&gt;
&lt;p&gt;I would rewrite this blog into &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; if I’d &lt;em&gt;own&lt;/em&gt; a VPS or a dedicated
server. (update 2011-10-20: this blog is now based on hyde, jekyll’s evil twin
in Python.  Update 2013-02-08: Now using Nikola, even better engine, yet still
in Python.)&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/</guid><pubDate>Tue, 02 Aug 2011 22:00:00 GMT</pubDate></item></channel></rss>