<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o programming)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Sat, 24 Jun 2017 19:07:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id3" id="id1"&gt;[1]&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id4" id="id2"&gt;[2]&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mirroring&lt;/li&gt;
&lt;li&gt;screen resolution&lt;/li&gt;
&lt;li&gt;dock position and icon size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item><item><title>5 months with a MacBook Pro: beautiful machine that just works</title><link>https://chriswarrick.com/pl/blog/2016/12/28/5-months-with-a-macbook-pro-beautiful-machine-that-just-works/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Five months ago, I decided to make the switch from my trusty old desktop
computer, running Arch Linux, to a MacBook Pro. I picked the 2015 13" base
model with an upgraded hard drive. The device is beautiful, and just works™,
which is pretty important to me.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="mac-as-a-unix-machine-nothing-beats-a-terminal"&gt;
&lt;h2&gt;Mac as a UNIX® machine: nothing beats a terminal&lt;/h2&gt;
&lt;p&gt;What are the first things you should set up on a Mac, as a programmer?
&lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; (and Homebrew Cask). That’s a package manager
that can install all software necessary to create an useful command-line
environment, including Python, ffmpeg and sox for media needs, git, GCC (clang
is wonderful, but I need plain old GCC sometimes), zsh, and a handful of other
programs. And, of course, Vim.&lt;/p&gt;
&lt;p&gt;And what Homebrew Cask can do for you? Install many GUI programs, without
needing to mess with &lt;tt class="docutils literal"&gt;.dmg&lt;/tt&gt; installers or stuff.  Including web browsers, music
players, or iTerm2.&lt;/p&gt;
&lt;p&gt;Did I mention UNIX®, with the registered trademark sign (belongs to The Open
Group; used for informational purposes only)? macOS has a fancy certificate to
prove it’s compliant with the relevant specifications. It runs the FreeBSD
userland, which is what you expect from a typical *nix system. (Linux converts
might get slightly annoyed at behavioral differences, for example &lt;tt class="docutils literal"&gt;rm
directory &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/tt&gt; will work on Linux with GNU coreutils, but won’t on
macOS/FreeBSD)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-gui-beautiful-fluid-friendly"&gt;
&lt;h2&gt;The GUI: beautiful, fluid, friendly&lt;/h2&gt;
&lt;p&gt;macOS is famous for its user interface. The macOS GUI is well thought out, even
though there are some idiosyncrasies a long-time Linux/Windows user might
consider weird. For example, sorting folders before files is something natural
for Windows, but on macOS, it’s a brand new option — added in macOS Sierra,
which came out in September 2016.&lt;/p&gt;
&lt;p&gt;That aside, the macOS user interface makes one coherent product. You can expect
consistent behavior between apps, and that often extends to third-party
software. Apple has a document, called &lt;a class="reference external" href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/OSXHIGuidelines/index.html"&gt;Human Interface Guidelines&lt;/a&gt;, which
describes how a macOS app should behave. While there are some documents like
this one for Windows, you can see many apps ignoring what it says — including
eg. built-in software, which cannot even decide on which font to use (bitmap MS
Sans Serif vs vectorized Microsoft Sans Serif vs Segoe UI — what is going on?!)&lt;/p&gt;
&lt;p&gt;While the interface is friendly and coherent, it can get a little worse
when &lt;em&gt;foreign&lt;/em&gt; apps are involved — for example, Qt or wxWidgets apps can
sometimes differ in behavior, but that’s not noticeable. X11 apps are another
story, but most of their developers are not aware that someone is running them
on macOS. (Excluding the Inkscape developers, which have a Mac “app” that
basically runs it in X11 and they do not even care…)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="programming-old-habits-die-hard"&gt;
&lt;h2&gt;Programming: old habits die hard&lt;/h2&gt;
&lt;p&gt;Did I mention Vim? Well, I’m still using Vim and a terminal emulator to get a
lot of coding work done. Why? Because they are still the best ways to be
productive. I tried many &lt;em&gt;gooey&lt;/em&gt; solutions for coding, from the heavyweights
(PyCharm, Visual Studio) to the laughable Atom editor (famous for being slow,
and effectively a web browser) — and none of them was able to replace Vim and a
Terminal. They are far too addictive.&lt;/p&gt;
&lt;p&gt;That said, I sometimes use GitHub for Desktop, or other helper tools.
Sometimes, they work well — key word here is &lt;em&gt;sometimes&lt;/em&gt;. Unlike Vim (or
NeoVim, or a GUI: MacVim/VimR), which boosts my productivity by a lot.&lt;/p&gt;
&lt;p&gt;Honorable mention goes to Automator and AppleScript. They are a superb
solution for automating common tasks in the GUI, something other OSes do not
provide. With Automator, everyone can create a workflow to perform repetitive
tasks faster. With AppleScript, you can get even more stuff done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-trackpad-addictive"&gt;
&lt;h2&gt;The trackpad: addictive&lt;/h2&gt;
&lt;p&gt;Apple is famous for their trackpads. Their newest generation of these devices
does not really move when you click it, it uses the Taptic Engine and [insert
smart-sounding words here] to &lt;em&gt;simulate&lt;/em&gt; a click. It also supports Force Touch,
for pressing down harder on something (eg. a word to reveal dictionary
definitions), and haptic feedback for certain operations &lt;em&gt;(in Soviet Russia,
trackpad clicks you!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Those trackpads also provide intuitive gestures. Working with
full-screen windows or multiple desktops? Just swipe left/right to switch
between them. Need to see all your windows? Swipe up with three fingers. Smooth
zoom, scrolling and rotating can also be done with just the trackpad.&lt;/p&gt;
&lt;p&gt;And recently I had to do some stuff on someone else’s Windows notebook. That
notebook features a touchpad that does not &lt;em&gt;click&lt;/em&gt; — it has two buttons on the
bottom, and tap to click is enabled. I had to drag and drop some files between
two windows. I tried doing it the way I got used on the MBP trackpad, which is
basically the way you’d do it with a mouse: hover cursor above file, click the
trackpad, move mouse to other windows, and release. That doesn’t work on those
non-clicky touchpads. A software developer failing at drag-and-drop must be a
funny thing to see. That’s just how addictive the trackpad is. (Of course,
Windows notebooks with clicky trackpads exist, but are not as popular as the
tappy ones.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="walled-garden-how-can-you-not-love-our-products"&gt;
&lt;h2&gt;Walled garden: how can you NOT love our products?&lt;/h2&gt;
&lt;p&gt;Of course, there are some issues with living in an Apple walled garden. The
main issue is: if you want to use something that is not an Apple product, good
luck with that. Sure, you can use an Android phone, but you won’t get
some of the nice Handoff features, and if you want to transfer files, have fun
using a forgotten barely-working app from 2012. That phone also won’t be able
to access your iCloud stuff, so put your data somewhere else.&lt;/p&gt;
&lt;p&gt;Do you want to use an external hard drive, or a USB stick? With other operating
systems? Well, you might have an issue with the file system. You can choose
between ExFAT, which is not popular but kinda does the job; FAT32, which has a
4GB file size limit (virtual disk images are often larger than that), or NTFS,
but for that you will need to pay a third-party company — and trust them not to
do anything nefarious. Or use experimental built-in support, or an open-source
project, both of which aren’t something one would normally trust with important
data.&lt;/p&gt;
&lt;p&gt;Speaking of external hard drives, here’s a hint: if you want to use a drive for
Time Machine (a wonderful, foolproof, one-click backup solution), and you want
it encrypted, make sure it uses GPT and not MBR. I had to reformat my drive
twice, and that’s not well documented (you need to click the help button,
then go through 3 pages to find a mention of this).&lt;/p&gt;
&lt;p&gt;Do you want to play some games? Well, there is basically no support for
gamepads, only some community beta drivers for the official PS3/Xbox 360 pads.
Apple does not care.&lt;/p&gt;
&lt;p&gt;And then we get to mouse issues. You see, even though the trackpad is awesome,
I also want to use a regular mouse. So I started with my old PC mouse, as a
temporary solution. The mouse was a Logitech M560, which uses the wireless
Unifying USB connector. It turns out the middle mouse button is supposed to be
a Windows button on one click and left mouse button on another, but Linux
drivers seem to change that behavior. To fix that, I’d need drivers for macOS.
Logitech believes this mouse is not worthy of a Mac, and so the mouse is not
detected by their driver suite. I got rid of that mouse and replaced it with a
Microsoft Sculpt Comfort Mouse. The mouse has a real middle button, which is
activated by clicking the scroll wheel, and a Windows button on the side
(generally useless on macOS).&lt;/p&gt;
&lt;p&gt;Sadly, macOS insists on scrolling in a weird accelerated way, where the number
of pixels scrolled grows over time — which means scrolling by one step means
scrolling by 5 pixels, but the longer you scroll, the larger the scroll
becomes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future-im-worried"&gt;
&lt;h2&gt;The future: I’m worried&lt;/h2&gt;
&lt;p&gt;I made the decision to buy the MacBook Pro in the middle of rumor season, after
WWDC which left a lot of people disappointed. I decided that, if all the rumors
about removed ports and touchy-feely screens were true, I would not want that
device on my desk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And boy did Apple deliver!&lt;/strong&gt; The new MacBook Pro has only USB-C ports (and a
headphone jack!), a gimmicky Touch Bar that only helps with emoji (the rest can
be done with standard keyboard shortcuts, or on-screen toolbars — I thought
that was a Pro machine, not a toy?), and a fingerprint reader (which I don’t
care about). And then there’s the cheaper model, with two USB-C ports and no
touch interfaces. My MBP, mainly a desktop replacement, is on AC power all the
time, and runs an external HDMI display. With the cheaper model (worse CPU than
2015; same price as 2015 with the same 256GB drive), I would have zero ports
for any other external devices. And I often have some thing plugged in, in
which case the only unoccupied ports are the Thunderbolt ports (which I don’t
have any devices for).&lt;/p&gt;
&lt;p&gt;So, I hope this 2015 model will live on for years, and hopefully when it fails,
Apple will have a more sensible machine out there. For now, I’ll keep my
&lt;em&gt;MacBook Pro (Retina, 13-inch, Early 2015)&lt;/em&gt; and will be pretty happy with it.&lt;/p&gt;
&lt;p&gt;With just only one exception: two kernel panics in nearly 5 months. A bit
unstable, eh?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/12/28/5-months-with-a-macbook-pro-beautiful-machine-that-just-works/</guid><pubDate>Tue, 27 Dec 2016 15:15:00 GMT</pubDate></item><item><title>Code writing code: Python and Vim as development aids</title><link>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I was working on some C# and Java code. And along the way, I used
Python and Vim to (re)write my code. A small Python script and a 6-keystroke
Vim macro did it faster and better than a human would.&lt;/p&gt;
&lt;p&gt;Every programmer should learn a good scripting language and use a programmable
editor like Vim. Why? Here are two examples, after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="episode-i-inotifypropertychanged-or-python-writing-c"&gt;
&lt;h2&gt;Episode I: &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt;, or Python writing C#&lt;/h2&gt;
&lt;p&gt;I was building a private C# weekend project (that turned into a weeklong
project) — and by the way, WPF and C# are quite pleasant (Windows Forms is a
trainwreck, though). One of the things I used in that project was a DataGrid
bound to a list of custom objects (a DataGrid is a table, basically). And in
order to use it, you need to use the &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt; interface &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms229614(v=vs.100).aspx"&gt;(MSDN)&lt;/a&gt;.
It involves doing something like this:&lt;/p&gt;
&lt;pre class="code csharp"&gt;&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// can also be a field&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;[JsonProperty]&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;NotifyPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s 12 lines of code (excluding &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt; which comes from the
Json.NET library) for that pattern. Oh: and I need to do that for &lt;strong&gt;every&lt;/strong&gt;
field/property of my class, because otherwise any changes to them would not be
reflected in the tables (and maybe one or two fields were &lt;em&gt;not&lt;/em&gt; in the table).&lt;/p&gt;
&lt;p&gt;Doing that by hand is really not feasible: you need to copy-paste this
large block 14 times and take care of 5 instances of the name (3 with
underscores, 2 without), 2 instances of the type, and the &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt;
attribute (which does not appear on all properties).&lt;/p&gt;
&lt;p&gt;So, I used one of those intelligent computer things to do it for me. I wrote a
really simple &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script and ran it. And I ended up with all 14 fields built
for me.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py.html"&gt;code-writing-code/write_properties.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;public &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-4"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            get {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                return &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_;&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            set {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                if (value != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_) {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ = value;&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    NotifyPropertyChanged("&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;");&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[JsonProperty]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;        '&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-25"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'1 string name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'0 int another'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 12 fields omitted for brevity&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Private definitions (internal)&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"        private &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ { get; set; }"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-35"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Public definitions (with notifications)&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-37"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-38"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That script takes a list of properties and spits out a block of code, ready to
be pasted into the code. Visual Studio has a nice &lt;em&gt;Insert File as Text&lt;/em&gt;
feature, so redirecting the output to a file and using that option is enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="episode-ii-fixing-argument-order-or-vim-re-writing-java"&gt;
&lt;h2&gt;Episode II: Fixing argument order, or Vim (re)writing Java&lt;/h2&gt;
&lt;p&gt;Another project, &lt;a class="reference external" href="https://github.com/Kwpolska/numbernamer"&gt;Number Namer&lt;/a&gt;, written in Java, and it does what it says on
the tin: takes a number and writes it out as words, while being multilingual and
extensible. I used Eclipse for this project, because it looks good, is really
helpful with its code linting, and does not run slowly on my aging system (I’m
looking at you, IntelliJ IDEA aka PyCharm aka Android Studio…)&lt;/p&gt;
&lt;p&gt;And so, I was building a test suite, using &lt;a class="reference external" href="http://junit.org/"&gt;JUnit&lt;/a&gt;. It’s pretty
straightforward, and I remember the syntax from Python’s unittest (even though
I write tests with &lt;a class="reference external" href="http://pytest.org/"&gt;pytest&lt;/a&gt; nowadays). Or so I thought.&lt;/p&gt;
&lt;pre class="code java"&gt;&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (incorrect)&lt;/span&gt;
&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (fixed)                              ^ cursor&lt;/span&gt;
&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You see, the typical Python spelling is &lt;tt class="docutils literal"&gt;self.assertEquals(actual,
expected)&lt;/tt&gt;. Java adds a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt; message parameter and it also swaps
&lt;tt class="docutils literal"&gt;actual&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;expected&lt;/tt&gt;. Which I didn’t notice at first, and I wrote my
assertions incorrectly. While it doesn’t &lt;em&gt;really&lt;/em&gt; matter (it will still work),
the output looked a bit weird.&lt;/p&gt;
&lt;p&gt;And I noticed only when I finished writing my tests (and I had a typo in my
expected output). I wanted to fix them all — not manually, of course. So, I
closed this file, brought up Vim, searched for the motion I need (it’s
&lt;tt class="docutils literal"&gt;t{char}&lt;/tt&gt; — see &lt;tt class="docutils literal"&gt;:help t&lt;/tt&gt;). And I ended up with this
(cursor placed on the comma after the first argument):&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;kbd style="font-size: 2em;"&gt;dt,&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;t)&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;p&lt;/kbd&gt;
&lt;/div&gt;&lt;p&gt;What does this do, you may ask? It’s actually pretty self-explanatory:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;d&lt;/b&gt;elete &lt;b&gt;t&lt;/b&gt;ill comma, (go) &lt;b&gt;t&lt;/b&gt;ill closing parenthesis, &lt;b&gt;p&lt;/b&gt;aste.
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This fixes one line. Automatically. Make it a macro (wrap in &lt;tt class="docutils literal"&gt;qq&lt;/tt&gt; … &lt;tt class="docutils literal"&gt;q&lt;/tt&gt;,
use with &lt;tt class="docutils literal"&gt;@q&lt;/tt&gt;) and now you can run it on all lines, either by moving manually or by
searching for &lt;tt class="docutils literal"&gt;,&lt;/tt&gt; and pressing &lt;tt class="docutils literal"&gt;n@q&lt;/tt&gt; until you run out of lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Some of you might say “but VS/Eclipse/IDEA has an option for that somewhere” or
“[expensive tool] can do that” — and a Google search shows that there is an
Eclipse plugin to swap arguments and that I could also write a regex to solve
my second issue. Nevertheless, Python is a great tool in a programmer’s toolbox
— especially the interactive interpreter. And Vim is an awesome editor that can
accomplish magic in a few keystrokes — and there are many more things you can
do with it.&lt;/p&gt;
&lt;p class="lead"&gt;Go learn &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;Also: don’t even bother with VsVim or IdeaVim or any other Vim emulation
plugins, they work in unusual ways and often don’t give you everything — for
example, VsVim has a Vim visual mode (&lt;tt class="docutils literal"&gt;v&lt;/tt&gt; key) and Visual Studio selection
mode (mouse), and only one allows Vim keystrokes (the other will replace
selected text).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</guid><pubDate>Fri, 27 May 2016 08:46:35 GMT</pubDate></item><item><title>Speeker — moja mała aplikacja na Androida</title><link>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;a class="android-adventure-logo-robot reference external image-reference" href="https://chriswarrick.com/pl/blog/2014/08/01/series-android-adventure/"&gt;&lt;img alt="/blog-content/android-adventure/robot.png" src="https://chriswarrick.com/blog-content/android-adventure/robot.png"&gt;&lt;/a&gt;
&lt;p&gt;Skoro mam używalny telefon, mogę zająć się tworzeniem aplikacji na Androida.
Co uczyniłem.  Zacząłem od aplikacji do testowania i zabawy z usługami
text-to-speech systemu Android.  Nazwałem ją Speeker.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;img src="https://chriswarrick.com/blog-content/android-adventure/speeker.png" alt="Speeker logo"&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/speeker/" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-picture-o"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker/releases" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobieranie
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;Speeker jest małym i prostym frontendem dla systemowej usługi TTS.  W obecnej
iteracji jest dosyć ograniczony.  Kompletny zestaw funkcji to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;wypowiedz tekst wpisany przez użytkownika&lt;/li&gt;
&lt;li&gt;wypowiedz tekst w domyślnym języku TTS systemu (wybranym w ustawieniach
Androida, i nie ma obecnie przycisku otwierającego to menu)&lt;/li&gt;
&lt;li&gt;wyczyść pole tekstowe&lt;/li&gt;
&lt;li&gt;pokaż okno &lt;em&gt;O programie&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;pokaż licencje open source&lt;/li&gt;
&lt;li&gt;otwórz moją stronę internetową&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To SZEŚĆ funkcji! I nie można nawet ściągnąć go z Google Play, bo jestem zbyt
skąpy by zapłacić $25 opłaty startowej!&lt;/p&gt;
&lt;p&gt;Będę lub nie kontynuował rozwoju i być może dodam kilka funkcji.  W każdym
razie, moje doświadczenia z tworzeniem na Androida nie były dobre: nie ma
wystarczająco dużo dobrej dokumentacji, i musiałem często zgadywać w niektórych
miejscach, np. przy importach.  Dokumentacja mogłaby zostać znacznie
poprawiona.&lt;/p&gt;
&lt;p&gt;Innym problemem jest wybór IDE.  O ile można oczywiście pracować nad Androidem
w dowolnym środowisku, w tym tylko w Vimie i w terminalu, oficjalnym i
rekomendowanym środowiskiem jest Eclipse.  Który okazuje się być najgorszym IDE
które kiedykolwiek powstało.  Jest nieprzyjazny i nieporęczny — czyli
standardowe cechy dużych aplikacji Javovych.  Jednym razem Eclipse udało się
otworzyć plik w jakieś dziesięć sekund.  Bardzo imponujące, dopóki nie
zauważysz, że cokolwiek innego zrobiłoby to w mniej czasu.  Nie, nie zmyślam.
To jest problem z dużymi IDE: próbują zrobić za dużo naraz.&lt;/p&gt;
&lt;p&gt;Tworzenie na Androida nie było najlepszym doświadczeniem — ale da się, i nie
trzeba mieć za dużo doświadczenia z samą platformą by to robić.  Android ma
potencjał, ale musi być udoskonalony, by być przyjaznym dla developerów.&lt;/p&gt;&lt;/div&gt;</description><category>android</category><category>app</category><category>devel</category><category>programming</category><category>projects</category><guid>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</guid><pubDate>Tue, 26 Aug 2014 13:00:00 GMT</pubDate></item><item><title>New Year’s Python Meme 2013/2014</title><link>https://chriswarrick.com/pl/blog/2013/12/31/new-years-python-meme-2013-2014/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Via &lt;a class="reference external" href="http://ziade.org/2013/12/23/new-years-python-meme-2013/"&gt;Tarek Ziadé&lt;/a&gt; (original meme, none this year…) and &lt;a class="reference external" href="http://blog.aclark.net/2014/12/30/new-years-python-meme-2014/"&gt;Alex Clark&lt;/a&gt;.  Right after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Here it comes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. What’s the coolest Python application, framework or library you
discovered this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. What new programming technique did you learn this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lots of them, including writing sane context managers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Which open source project did you contribute to the most this year? What
did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt; yet again!  Up until now, I made 484 commits (or 431
excluding merge commits) — which is quite a lot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Which Python blogs, websites or mailing lists did you read the most this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nedbatchelder.com/blog/"&gt;Ned Batchelder’s&lt;/a&gt; and &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher’s&lt;/a&gt; blogs and many things that are on Planet Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. What are the three top things you want to learn next year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lots of them, mainly C, some Ruby and JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. What is the top software, application or library you wish someone would
write next year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My current todo-list says it all — and I’m working on that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A quick app for CSV display&lt;/li&gt;
&lt;li&gt;A GitHub Releases API client&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nap&lt;/tt&gt; = &lt;tt class="docutils literal"&gt;sleep&lt;/tt&gt; + progressbar (&lt;a class="reference external" href="https://github.com/Kwpolska/nap"&gt;almost-done-thing on GitHub&lt;/a&gt; — C)&lt;/li&gt;
&lt;li&gt;River of Text — Python CLI library (&lt;a class="reference external" href="https://github.com/Kwpolska/rot"&gt;skeleton on GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Want to do your own list?  Here’s how:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;copy-paste the questions and answer to them in your blog&lt;/li&gt;
&lt;li&gt;tweet it with the &lt;a class="reference external" href="https://twitter.com/search/realtime?q=%232014pythonmeme"&gt;#2014pythonmeme&lt;/a&gt; hashtag&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2013/12/31/new-years-python-meme-2013-2014/</guid><pubDate>Tue, 31 Dec 2013 17:15:00 GMT</pubDate></item><item><title>I love Python!</title><link>https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;figure&gt;
&lt;a href="http://python.org" title="Python"&gt;&lt;img src="http://kwpolska.tk/blog-content/logos/python.png" alt="Python logo"&gt;&lt;/a&gt;
&lt;figcaption&gt;Python logo&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;I recently started writing &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; code. And I love it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If you’d ask me a week ago about Python, I’d say “meh.”  Python3K?  I
wouldn’t be happy about it.  Sunday evening?  I love both.&lt;/p&gt;
&lt;div class="section" id="one-project-rewritten"&gt;
&lt;h2&gt;One project, rewritten&lt;/h2&gt;
&lt;p&gt;I wrote a new project.  Or rather re-wrote a Perl “project”.&lt;/p&gt;
&lt;p&gt;The project, once a little help for building AUR packages, now is almost
a fully-featured AUR helper (it has no update function, but I will
write one soon).  It’s the &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Perl version (search in the repo, linked above) had 56 lines.  In
short, it did something like this (rewritten to bash):&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-2"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-3"&gt;&lt;/a&gt;    wget http://aur.archlinux.org/&lt;span class="nv"&gt;$pk&lt;/span&gt;/&lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-4"&gt;&lt;/a&gt;    tar -xzvf &lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-5"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-6"&gt;&lt;/a&gt;    makepkg -si
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-7"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_30b0c78e63fe4e8a9310e2cbc0228554-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; package in &lt;span class="nv"&gt;$@&lt;/span&gt;, &lt;span class="k"&gt;do&lt;/span&gt; generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This code is really, REALLY bad.  But it worked for me, because the “normal”
AUR helpers were slow.  I wanted to do something about it.  I put an entry on
my TODO list about it.  A few months later I decided to do it.  The TODO list
entry said “write build.py”.  I wanted to use Python because I wanted to learn
it.  In fact, I began &lt;em&gt;loving&lt;/em&gt; Python.&lt;/p&gt;
&lt;p&gt;The Perl version had 56 lines.  A shortened version of it in Bash took only 10
(I skipped a few features, the full version would be around 20 lines or so.)
Take a guess: how long is the Python version? 30 lines?  100?  No.  300 lines.
How could this happen?  No, &lt;em&gt;not&lt;/em&gt; because Python is a pain in the ass to write.
It was because I could implement new, great features EASILY.  The original
version could only download a package and build it.  What if the package didn’t
exist?  The library responsible for untarring it would throw an error.  And
even if makepkg had a problem with building the package, the script would
happily inform the user that it was successfully bulit…  What are the new
features, you may ask?  Install validation, i.e.  checking if the package is
installed or not.  Package searching, sanity checks, dependency solving…  This
is great.  If I’d like to write it in Perl, it will take me ages and I’m not
sure if there is any libalpm wrapper.&lt;/p&gt;
&lt;p&gt;If you think that you can rewrite it in Perl, sure, go for it, if you will:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;find a working libalpm wrapper or write one yourself&lt;/li&gt;
&lt;li&gt;port python3-aur (it heps with the XML-RPC of the AUR) to perl&lt;/li&gt;
&lt;li&gt;implement EVERY feature of the Py3K version&lt;/li&gt;
&lt;li&gt;give me the code and tell me how long did you write it&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Done?  Great then, &lt;a class="reference external" href="https://chriswarrick.com/contact/"&gt;contact me&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Python has the friendliest web documentation ever.  PHP’s looks a bit
harsh.  Perl’s is not easy to search.&lt;/p&gt;
&lt;p&gt;Time for a real world example:  I want to learn how to write a specific
function in Perl, PHP and Python.  This function would print the argument.
For example, in C:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_e542558f9cf347daaf46c73625d6f048-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Notice: by “searching” in docs I mean reading the page and looking for
a thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perl:&lt;/strong&gt; Let’s begin at &amp;lt;&lt;a class="reference external" href="http://perl.org"&gt;http://perl.org&lt;/a&gt;&amp;gt;. Documentation tab, Tutorials.
I need to define a function.  Nothing seems to help me.  I look at the
sidebar and find &lt;em&gt;Reference/Functions&lt;/em&gt;.  Great, that’s what I need, so i
click it…  I can’t see anything about functions.  Langauge reference?
Nothing.  I ask Google and I learn that Perl names them &lt;em&gt;subroutines&lt;/em&gt;.  I
check the Language reference:  it’s the sub function, now I can define my
function and call it.  printf?  Let’s look it up in the Functions list.
We’re done.&lt;/p&gt;
&lt;pre class="code perl"&gt;&lt;a name="rest_code_96f7c7eb78c0492f837f06af842cb269-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_96f7c7eb78c0492f837f06af842cb269-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_96f7c7eb78c0492f837f06af842cb269-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_96f7c7eb78c0492f837f06af842cb269-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_96f7c7eb78c0492f837f06af842cb269-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_96f7c7eb78c0492f837f06af842cb269-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Perl’s documentation is anywhere near user-friendliness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PHP:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://php.net"&gt;http://php.net&lt;/a&gt;&amp;gt;.  Why is the &lt;em&gt;documentation&lt;/em&gt; link so small?
Anyways, I need functions.  Language Refernce/Functions.  Here we go, one
more click and I know how to make a function.  And I guess that I’ll have
to search the Function Reference.  I find text processing, go for Strings
and I can happily see printf.  Take a look and we can write this:&lt;/p&gt;
&lt;pre class="code php"&gt;&lt;a name="rest_code_17e7f7ca55494673acd6cd66acdc7d2e-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;a name="rest_code_17e7f7ca55494673acd6cd66acdc7d2e-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_17e7f7ca55494673acd6cd66acdc7d2e-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_17e7f7ca55494673acd6cd66acdc7d2e-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_17e7f7ca55494673acd6cd66acdc7d2e-5"&gt;&lt;/a&gt;&lt;span class="nx"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_17e7f7ca55494673acd6cd66acdc7d2e-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://python.org/"&gt;http://python.org/&lt;/a&gt;&amp;gt;.  Documentation element exists in the
menu.  I click it.  They offer me a nice tutorial, so I’ll check it out.
I scan through the Table of Contents and I see a chapter called Defining
Functions.  Great, it will work.  Now I go back to the ToC and, because
this is a tutorial rather than a reference, and I can see chapter &lt;em&gt;7.1:
Fancier output formatting&lt;/em&gt;.  I want to have %s as in other languages, so
I skip this one and see &lt;em&gt;Old string formatting&lt;/em&gt;, which uses the %s.  Now,
assuming they indented the code on purpose because there are no braces,
I can write:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3a848deda08643868257fa0aabc544f8-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3a848deda08643868257fa0aabc544f8-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Input: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;a name="rest_code_3a848deda08643868257fa0aabc544f8-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_3a848deda08643868257fa0aabc544f8-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;All of them work and output &lt;tt class="docutils literal"&gt;Input: some stuff to print&lt;/tt&gt; followed by a
newline.  The original C example had 8 lines.  Perl made it in 5, PHP
in 6 (or 4 if you won’t count the PHP tags), Python used only 3.&lt;/p&gt;
&lt;p&gt;Which documentation is the most HUMAN-friendly?  Python’s.  Which is the
worst? Perl’s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nothing-is-flawless"&gt;
&lt;h2&gt;Nothing is flawless&lt;/h2&gt;
&lt;p&gt;Everything has some flaws.  What is it in Python, then?
&lt;a class="reference external" href="http://wiki.python.org/moin/Python2orPython3"&gt;Existence of two concurrent versions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most distros and projects use Py2K, while some of them offer Py3K (or both.)
The &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt; is in Py3K, because it requires &lt;tt class="docutils literal"&gt;pyalpm&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt;
module (I could rewrite the AUR module in Py2K, but pyalpm is much harder to
modify.  UPDATE 2012-08-04: it was re-implemented by me several releases ago,
in version 2.1.0, released over a month after this post)  My other projects
(like KWDv2, another rewrite, this time with minimal changes and 30% less code
or my first ever Python project, trash.py, a partial XDG trash standard
implementation) use the old Py2K (usually v2.6, because I need compatibility
with my shell server.)&lt;/p&gt;
&lt;p&gt;I would rewrite this blog into &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; if I’d &lt;em&gt;own&lt;/em&gt; a VPS or a dedicated
server. (update 2011-10-20: this blog is now based on hyde, jekyll’s evil twin
in Python.  Update 2013-02-08: Now using Nikola, even better engine, yet still
in Python.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2011/08/03/i-love-python/</guid><pubDate>Tue, 02 Aug 2011 22:00:00 GMT</pubDate></item></channel></rss>