<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o Programming)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/cat_programming.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Mon, 17 Apr 2023 22:38:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Writing a Console App in C# for Fun and Profit</title><link>https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;I recently wrote a simple console app in C#. This post tells you more about the language, the .NET ecosystem, and why you should write your next app in it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="what-is-the-app"&gt;
&lt;h2&gt;What is the app?&lt;/h2&gt;
&lt;p&gt;The app is called Gitco.NET. It’s basically a rewrite of a previous Ruby script. It shows a console menu with Git branches, allowing things like filtering and toggling the display of remote branches. Simple, but quite convenient for working with Git in a terminal. I rewrote it in C# for better Windows compatibility — but the new version works on Linux and macOS equally well, can be distributed as a single executable, and is also unit-tested.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-c"&gt;
&lt;h2&gt;What is C#?&lt;/h2&gt;
&lt;p&gt;C# is a modern, high-level language designed by Microsoft in 2000, heavily inspired by (and competing with) Java.&lt;/p&gt;
&lt;section id="the-obligatory-hello-world-program"&gt;
&lt;h3&gt;The obligatory hello world program&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_99d4e27dfc9a4309b37b51ccc616bc36-1" name="rest_code_99d4e27dfc9a4309b37b51ccc616bc36-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_99d4e27dfc9a4309b37b51ccc616bc36-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just one line is enough. This program requires C# 10 and .NET 6, the latest versions of the language and the framework (and the implicit usings feature enabled).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-slightly-less-cool-version-of-the-hello-world-program"&gt;
&lt;h3&gt;The slightly less cool version of the hello world program&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-1" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-2" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-3" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Program&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-4" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-5" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-6" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-7" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-8" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_62659768afd349c5bc2ad9aaa6f4d312-9" name="rest_code_62659768afd349c5bc2ad9aaa6f4d312-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_62659768afd349c5bc2ad9aaa6f4d312-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve got four lines of code (plus four lines of braces &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; ). We can see the &lt;code class="docutils literal"&gt;using&lt;/code&gt; directive to import everything from the &lt;code class="docutils literal"&gt;System&lt;/code&gt; namespace, the definition of a &lt;code class="docutils literal"&gt;class&lt;/code&gt;, a &lt;code class="docutils literal"&gt;Main&lt;/code&gt; method, and a call to &lt;code class="docutils literal"&gt;Console.WriteLine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ll talk more about C# later, highlighting some of the cooler things seen in Gitco.NET.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-is-net"&gt;
&lt;h2&gt;What is .NET?&lt;/h2&gt;
&lt;p&gt;The term “.NET” had quite a lot of meanings over the past two decades. Microsoft accounts were once called .NET Passport, and Windows Server 2003 was almost called “Windows Server .NET 2003”. Another thing called .NET was the .NET Framework. .NET Framework is a heavily integrated component of Windows, and it’s basically what was used to run C# (and F#, and VB.NET) — it includes the virtual machine (CLR, Core Language Runtime), a lot of libraries (Framework Class Library), and a lot of Windows-specific things (such as COM, Windows Forms, WPF).&lt;/p&gt;
&lt;p&gt;Microsoft’s .NET Framework is proprietary and tied to Windows. An open-source, independent re-implementation of .NET is Mono. At one point, some GNOME apps were written in Mono and Gtk#. Mono was also used in Xamarin, which can be used to write Android and iOS apps in C#.&lt;/p&gt;
&lt;p&gt;But then came out .NET Core, which is Microsoft’s open-source .NET with a new runtime (CoreCLR), new set of libraries (CoreFX), and multi-platform compatibility (Linux and macOS). After a few years, .NET Core got renamed to .NET (around the time it had pretty good feature parity with the classic .NET Framework). With the new .NET, you can build console apps, web apps (using ASP.NET Core, which is a pretty cool framework), mobile apps (soon using MAUI), and desktop apps (there are a few options).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gitco-net-code-tour"&gt;
&lt;h2&gt;Gitco.NET code tour&lt;/h2&gt;
&lt;p&gt;Let’s go on a little tour of the more interesting parts of the code.&lt;/p&gt;
&lt;section id="snippet-1"&gt;
&lt;h3&gt;Snippet 1&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-1" name="rest_code_8c1646361d924c76a807c12f02000401-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ExtractBranchListFromGitOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-2" name="rest_code_8c1646361d924c76a807c12f02000401-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitOutput&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-3" name="rest_code_8c1646361d924c76a807c12f02000401-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-4" name="rest_code_8c1646361d924c76a807c12f02000401-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceLineEndings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-5" name="rest_code_8c1646361d924c76a807c12f02000401-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-6" name="rest_code_8c1646361d924c76a807c12f02000401-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-7" name="rest_code_8c1646361d924c76a807c12f02000401-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-8" name="rest_code_8c1646361d924c76a807c12f02000401-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-9" name="rest_code_8c1646361d924c76a807c12f02000401-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;.];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-10" name="rest_code_8c1646361d924c76a807c12f02000401-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-11" name="rest_code_8c1646361d924c76a807c12f02000401-11" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-12" name="rest_code_8c1646361d924c76a807c12f02000401-12" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remotePrefix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-13" name="rest_code_8c1646361d924c76a807c12f02000401-13" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-14" name="rest_code_8c1646361d924c76a807c12f02000401-14" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-15" name="rest_code_8c1646361d924c76a807c12f02000401-15" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-16" name="rest_code_8c1646361d924c76a807c12f02000401-16" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="sc"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-17" name="rest_code_8c1646361d924c76a807c12f02000401-17" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-18" name="rest_code_8c1646361d924c76a807c12f02000401-18" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-19" name="rest_code_8c1646361d924c76a807c12f02000401-19" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-20" name="rest_code_8c1646361d924c76a807c12f02000401-20" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isCurrent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-21" name="rest_code_8c1646361d924c76a807c12f02000401-21" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-22" name="rest_code_8c1646361d924c76a807c12f02000401-22" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-23" name="rest_code_8c1646361d924c76a807c12f02000401-23" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThenBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-24" name="rest_code_8c1646361d924c76a807c12f02000401-24" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DistinctBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_8c1646361d924c76a807c12f02000401-25" name="rest_code_8c1646361d924c76a807c12f02000401-25" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_8c1646361d924c76a807c12f02000401-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This snippet defines a fairly standard pipeline that goes from &lt;code class="docutils literal"&gt;git&lt;/code&gt; output (a single string) to a list of parsed objects. This pipeline is a function (or a static method, to be more precise). This function uses expression-bodied members: since we can fit the entire pipeline in a single expression, we can skip the braces and the &lt;code class="docutils literal"&gt;return&lt;/code&gt; keyword, and instead use a more compact syntax with an arrow (&lt;code class="docutils literal"&gt;=&amp;gt;&lt;/code&gt;). After some cleanups and sanitization of the string, we split the string by the &lt;code class="docutils literal"&gt;\n&lt;/code&gt; character, and the type of our pipeline changes from &lt;code class="docutils literal"&gt;string&lt;/code&gt; to &lt;code class="docutils literal"&gt;string[]&lt;/code&gt; (an array of strings). We then use five operations from the &lt;code class="docutils literal"&gt;System.Linq&lt;/code&gt; namespace. Those operations are extension methods for enumerables (&lt;code class="docutils literal"&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;) — adding &lt;code class="docutils literal"&gt;using System.Linq;&lt;/code&gt; at the top of your program adds those methods to any enumerables (including arrays, lists, dictionaries, sets…).&lt;/p&gt;
&lt;p&gt;The first operation is a &lt;code class="docutils literal"&gt;Select&lt;/code&gt;. LINQ methods are inspired by SQL; the more typical name for this one would be &lt;code class="docutils literal"&gt;map&lt;/code&gt;. (Similarly, &lt;code class="docutils literal"&gt;Where&lt;/code&gt; is LINQ’s name for &lt;code class="docutils literal"&gt;filter&lt;/code&gt;.) The logic inside &lt;code class="docutils literal"&gt;Select&lt;/code&gt; is written in a multi-line anonymous function (lambda), with braces (so there’s a &lt;code class="docutils literal"&gt;return&lt;/code&gt;) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. Inside that anonymous function, there are a few niceties, such as &lt;code class="docutils literal"&gt;var&lt;/code&gt; (type inference for variables), slicing (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;[2..]&lt;/span&gt;&lt;/code&gt;), as well as some more LINQ in string manipulations (&lt;code class="docutils literal"&gt;.First()&lt;/code&gt; and &lt;code class="docutils literal"&gt;.Skip(2)&lt;/code&gt;, which do what they say on the tin).&lt;/p&gt;
&lt;p&gt;The next three operations are fairly straightforward sorting, and extracting unique values. Those use single-expression lambdas, which don’t use &lt;code class="docutils literal"&gt;return&lt;/code&gt;. The pipeline ends with converting &lt;code class="docutils literal"&gt;IEnumerable&amp;lt;Branch&amp;gt;&lt;/code&gt; (which appeared at the &lt;code class="docutils literal"&gt;.Select()&lt;/code&gt; stage) into a &lt;code class="docutils literal"&gt;List&amp;lt;Branch&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="snippet-2"&gt;
&lt;h3&gt;Snippet 2&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-1" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterAndNumberBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-2" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-3" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-4" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchWidth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-5" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CultureInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvariantCulture&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-6" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numberFormatString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;$"{{0,{branchWidth}}}. "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-7" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-8" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-9" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-10" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-11" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-11" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numberFormatString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-12" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-12" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-13" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-13" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-14" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-14" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-15" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-15" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-16" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-16" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branchDisplay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-17" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-17" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchDisplay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_b26adf361991453fb8651dcbfaa1d0e8-18" name="rest_code_b26adf361991453fb8651dcbfaa1d0e8-18" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_b26adf361991453fb8651dcbfaa1d0e8-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function adds numbers to the branch list, and then filters branches based on the user’s query. The first thing to notice is the second argument: &lt;code class="docutils literal"&gt;string? filter&lt;/code&gt;. C# has support for nullable types, which means the compiler warns you if you use a possibly null value somewhere it isn’t expected &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. &lt;code class="docutils literal"&gt;numberFormatString&lt;/code&gt; uses an interpolated string, in which &lt;code class="docutils literal"&gt;{branchWidth}&lt;/code&gt; will be replaced with the variable defined before. In the LINQ expression, you can see two interesting things: one is a two-argument lambda for &lt;code class="docutils literal"&gt;Select&lt;/code&gt;, and argument names, which can be optionally passed to functions and constructors for readability or to set parameters out of order.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="snippet-3"&gt;
&lt;h3&gt;Snippet 3&lt;/h3&gt;
&lt;p&gt;How much boilerplate do you need to define an immutable data class with a constructor, value equality, and a string representation?&lt;/p&gt;
&lt;p&gt;Exactly zero:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-1" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-2" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-3" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-4" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-4"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-5" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-6" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-7" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-7"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-8" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-8"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-9" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-9"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-10" name="rest_code_59f08b0a782c4f1ab6183d15c95f99ff-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_59f08b0a782c4f1ab6183d15c95f99ff-10"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(If you want things to be mutable, you do need to write some more code. Still, all you need for encapsulated properties is &lt;code class="docutils literal"&gt;int Foo { get; set; }&lt;/code&gt;, which is miles better than having to write out getters and setters by hand, as you would do in Java.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="dependency-management"&gt;
&lt;h2&gt;Dependency management&lt;/h2&gt;
&lt;p&gt;Gitco.NET is a fairly simple thing, and it doesn’t need any third-party libraries, it can do its job with just the standard library.&lt;/p&gt;
&lt;p&gt;However, Gitco.NET has a test suite. .NET doesn’t ship with a unit testing framework. There are three popular options, I picked xUnit (which is the most popular). I created the test project with a template, and then added a reference to the main code (under test). I ended up with the following project file (&lt;code class="docutils literal"&gt;gitco.NET.Tests.csproj&lt;/code&gt;):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code xml"&gt;&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-1" name="rest_code_96905751209b41549e1be9d90bc1efc0-1" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-2" name="rest_code_96905751209b41549e1be9d90bc1efc0-2" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-3" name="rest_code_96905751209b41549e1be9d90bc1efc0-3" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-3"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-4" name="rest_code_96905751209b41549e1be9d90bc1efc0-4" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-4"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net6.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-5" name="rest_code_96905751209b41549e1be9d90bc1efc0-5" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;ImplicitUsings&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/ImplicitUsings&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-6" name="rest_code_96905751209b41549e1be9d90bc1efc0-6" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-6"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;LangVersion&amp;gt;&lt;/span&gt;10.0&lt;span class="nt"&gt;&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-7" name="rest_code_96905751209b41549e1be9d90bc1efc0-7" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-7"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-8" name="rest_code_96905751209b41549e1be9d90bc1efc0-8" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-8"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;IsPackable&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/IsPackable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-9" name="rest_code_96905751209b41549e1be9d90bc1efc0-9" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-9"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-10" name="rest_code_96905751209b41549e1be9d90bc1efc0-10" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-11" name="rest_code_96905751209b41549e1be9d90bc1efc0-11" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-11"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-12" name="rest_code_96905751209b41549e1be9d90bc1efc0-12" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-12"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Test.Sdk"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"17.1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-13" name="rest_code_96905751209b41549e1be9d90bc1efc0-13" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-13"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"xunit"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"2.4.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-14" name="rest_code_96905751209b41549e1be9d90bc1efc0-14" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-14"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"xunit.runner.visualstudio"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"2.4.3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-15" name="rest_code_96905751209b41549e1be9d90bc1efc0-15" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-15"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-16" name="rest_code_96905751209b41549e1be9d90bc1efc0-16" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-16"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-17" name="rest_code_96905751209b41549e1be9d90bc1efc0-17" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-17"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-18" name="rest_code_96905751209b41549e1be9d90bc1efc0-18" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-18"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"coverlet.collector"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.1.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-19" name="rest_code_96905751209b41549e1be9d90bc1efc0-19" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-19"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-20" name="rest_code_96905751209b41549e1be9d90bc1efc0-20" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-20"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-21" name="rest_code_96905751209b41549e1be9d90bc1efc0-21" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-21"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-22" name="rest_code_96905751209b41549e1be9d90bc1efc0-22" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-22"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-23" name="rest_code_96905751209b41549e1be9d90bc1efc0-23" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-24" name="rest_code_96905751209b41549e1be9d90bc1efc0-24" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-24"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-25" name="rest_code_96905751209b41549e1be9d90bc1efc0-25" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-25"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;ProjectReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"..\gitco.NET\gitco.NET.csproj"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-26" name="rest_code_96905751209b41549e1be9d90bc1efc0-26" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-26"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-27" name="rest_code_96905751209b41549e1be9d90bc1efc0-27" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_96905751209b41549e1be9d90bc1efc0-28" name="rest_code_96905751209b41549e1be9d90bc1efc0-28" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_96905751209b41549e1be9d90bc1efc0-28"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah, it’s an XML file. But it’s pretty straightforward: there’s a &lt;code class="docutils literal"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; with some project configuration, and two &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&amp;gt;&lt;/code&gt; tags. One of them has &lt;code class="docutils literal"&gt;&amp;lt;PackageReference&amp;gt;&lt;/code&gt; tags, which specify third-party dependencies to use. The other has a &lt;code class="docutils literal"&gt;&amp;lt;ProjectReference&amp;gt;&lt;/code&gt; to the main code, pointing at its &lt;code class="docutils literal"&gt;.csproj&lt;/code&gt; file. (Note that this split is arbitrary, you can have as many &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; tags as you want, you could have just one with both package and project references.)&lt;/p&gt;
&lt;p&gt;How does this work? Quite simply, and transparently to the developer. Building the project will lead to packages being &lt;em&gt;restored&lt;/em&gt; (fetched from NuGet, or copied from the local NuGet cache). There are no “virtual environments” to manage, there aren’t 10 competing package managers. Visual Studio will also expect both projects to be part of one solution, which is something you’d likely do anyway for convenient access to both at the same time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tooling"&gt;
&lt;h2&gt;Tooling&lt;/h2&gt;
&lt;section id="dotnet-cli"&gt;
&lt;h3&gt;dotnet CLI&lt;/h3&gt;
&lt;p&gt;.NET has a CLI for performing typical build and project configuration tasks. You can &lt;code class="docutils literal"&gt;dotnet build&lt;/code&gt; a project, you can &lt;code class="docutils literal"&gt;dotnet run&lt;/code&gt; it, you can &lt;code class="docutils literal"&gt;dotnet test&lt;/code&gt; things, and you can &lt;code class="docutils literal"&gt;dotnet publish&lt;/code&gt;. The CLI figures out what to do, it restores the dependencies if needed, it handles the compilation of your code. If you type &lt;code class="docutils literal"&gt;dotnet test&lt;/code&gt; in a directory with your solution file (&lt;code class="docutils literal"&gt;.sln&lt;/code&gt;), it will restore dependencies, build the code, and then find tests and run them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ide"&gt;
&lt;h3&gt;IDE&lt;/h3&gt;
&lt;p&gt;What IDE should you use? There are a few options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio Code.&lt;/strong&gt; The quite advanced text editor supports pretty much any language. C# support works okay, with all the IDE features available, but in my experience, it can sometimes get confused (requiring a restart of the IDE). You will probably need to spend some more time with the &lt;code class="docutils literal"&gt;dotnet&lt;/code&gt; CLI than you would with the other options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Windows.&lt;/strong&gt; The IDE with the purple icon is an option, although VS can feel arcane to people used to other IDEs/editors, and the Vim bindings are quite bad (especially if you select things with a mouse sometimes). It’s free for personal and very-small-business use, but for anything even slightly serious, you’ll need paid licenses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Mac.&lt;/strong&gt; A completely separate product, works reasonably well, same pricing as with the Windows version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Windows + ReSharper Ultimate.&lt;/strong&gt; Adding this (paid) extension makes VS much smarter, although it can also affect performance negatively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JetBrains Rider.&lt;/strong&gt; This is an IDE based on the IntelliJ platform, with all the magic seen in ReSharper (as well as other JetBrains IDEs), but none of the performance issues and Visual Studio being Visual Studio (although if you do prefer VS behaviors and keyboard shortcuts, you can configure those as well). This is probably your best bet if you’re willing to invest some money (or your employer is).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="why-should-i-pick-it-over-x"&gt;
&lt;h2&gt;Why should I pick it over X?&lt;/h2&gt;
&lt;p&gt;Well, it depends. If this post has piqued your interest, perhaps install the SDK and write some small things to get a feel for the language and to see if it’s for you. (And note this post didn’t cover the Web stuff.)&lt;/p&gt;
&lt;p&gt;But here are a few things of note:&lt;/p&gt;
&lt;section id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# is statically typed. Modern Python’s static typing (via things like mypy) is quite cool, but not all libraries and ecosystems have adopted it. Statically typed languages are safer, and allow IDEs to be smarter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has a better approach to functional programming. Python has ugly and single-expression lambdas (with a pointless &lt;code class="docutils literal"&gt;lambda&lt;/code&gt; keyword), C# has inline functions that can contain multiple statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has much better package management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# is trivial to compile to a single-file executable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# is much faster than Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;~Nobody does machine learning and data science in C#, which is a plus in my book.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="java"&gt;
&lt;h3&gt;Java&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# has a lot more developer-quality-of-life features and less boilerplate. For example, Lists and Dictionaries can be accessed using brackets, and properties are accessible via dot notation instead of having to explicitly call getter and setter methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C#’s generic are more flexible, as they aren’t erased on compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has null safety. It also has the safe navigation &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;?.&lt;/span&gt;&lt;/code&gt; operator, and the null coalescing &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;??&lt;/span&gt;&lt;/code&gt; operator, both of which make working with nullable values easier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has easy concurrency via &lt;code class="docutils literal"&gt;async&lt;/code&gt; and &lt;code class="docutils literal"&gt;await&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web stuff: Spring is painful, Spring Boot doesn’t make it much better. ASP.NET Core is much nicer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Additional reading:&lt;/em&gt; Wikipedia has a very nice and detailed &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java"&gt;Comparison of C# and Java&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="also"&gt;
&lt;h3&gt;Also…&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# is a high-level language with automated memory management, which is very convenient in many use-cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are quite a lot of jobs for C# developers, although not necessarily in Silicon Valley.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="but-on-the-other-hand"&gt;
&lt;h3&gt;But on the other hand…&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# can still sometimes feel a bit Windows-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# jobs tend to be enterprisey.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python is a great language to learn as a beginner. It’s also great for one-off things, interactive work, and scripting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The non-Windows desktop GUI story isn’t too great, although it is getting better with MAUI (which supports macOS).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re targeting mobile, I would probably focus on the native APIs and languages for the best user experience (Swift and Cocoa Touch for iOS; Kotlin and the Android Platform APIs for Android). That said, MAUI might be worth a go as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re doing very low-level stuff, C# probably won’t cut it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you want real functional programming, go with F#. You might also prefer Scala or Haskell or such.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And if you’re making web front-end stuff, TypeScript (or plain JavaScript) is still your best bet. C# has Blazor, but I’d prefer for web apps not to embed all of .NET via WebAssembly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But for console apps, Windows desktop, and web back-end services? &lt;strong&gt;Do give C# a try,&lt;/strong&gt; it might just win you over. It is a pretty good language, but one that was held back by the Windows association for a long time. But now it’s part of a modern, multi-platform, developer-friendly ecosystem.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The code samples in this post are using the usual Microsoft code style with braces on separate lines, the usual Microsoft naming convention (PascalCase for ~everything, camelCase for local variable names), and 2-space indentation, which isn’t the usual Microsoft style.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;This could be moved to a separate static method. If that method was &lt;code class="docutils literal"&gt;private static Branch ParseLineAsBranch(string branchLine)&lt;/code&gt;, then the expression could be &lt;code class="docutils literal"&gt;.Select(ParseLineAsBranch)&lt;/code&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;There’s some inconsistency and mixing when working with nullables: nullable objects (such as &lt;code class="docutils literal"&gt;string?&lt;/code&gt;) are accessible directly, whereas nullable value types (such as &lt;code class="docutils literal"&gt;int?&lt;/code&gt;) need to be accessed with &lt;code class="docutils literal"&gt;.Value&lt;/code&gt;, due to historical reasons and implementation details.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/</guid><pubDate>Mon, 19 Sep 2022 20:35:00 GMT</pubDate></item><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;nav class="contents right-toc" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="toc-entry-1"&gt;Use the right tool for the job&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="toc-entry-2"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="toc-entry-3"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="toc-entry-4"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="toc-entry-5"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-1" role="doc-backlink"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is not in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; your process gets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the hard-coded path is not correct on the end user’s system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-2" role="doc-backlink"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;code class="docutils literal"&gt;grep&lt;/code&gt;, &lt;code class="docutils literal"&gt;sed&lt;/code&gt; and
&lt;code class="docutils literal"&gt;awk&lt;/code&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;code class="docutils literal"&gt;os&lt;/code&gt; or &lt;code class="docutils literal"&gt;shutil&lt;/code&gt;. Your language of
choice can also handle things like networking (don’t call &lt;code class="docutils literal"&gt;curl&lt;/code&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-3" role="doc-backlink"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;code class="docutils literal"&gt;execve()&lt;/code&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;directly, by calling &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;through the shell (&lt;code class="docutils literal"&gt;sh&lt;/code&gt;), usually by calling &lt;code class="docutils literal"&gt;system()&lt;/code&gt;. As Linux’s
manpage for &lt;code class="docutils literal"&gt;system(3)&lt;/code&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;system()&lt;/code&gt; library function uses &lt;code class="docutils literal"&gt;fork(2)&lt;/code&gt; to create a child process that executes the shell command specified in command using &lt;code class="docutils literal"&gt;execl(3)&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_ec8c3d5c275441ee9d408e3edd1fa1a5-1" name="rest_code_ec8c3d5c275441ee9d408e3edd1fa1a5-1" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_ec8c3d5c275441ee9d408e3edd1fa1a5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_072ce94ae88a4baa960f25fd223ecb42-1" name="rest_code_072ce94ae88a4baa960f25fd223ecb42-1" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_072ce94ae88a4baa960f25fd223ecb42-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a id="rest_code_072ce94ae88a4baa960f25fd223ecb42-2" name="rest_code_072ce94ae88a4baa960f25fd223ecb42-2" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_072ce94ae88a4baa960f25fd223ecb42-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a id="rest_code_072ce94ae88a4baa960f25fd223ecb42-3" name="rest_code_072ce94ae88a4baa960f25fd223ecb42-3" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_072ce94ae88a4baa960f25fd223ecb42-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-1" name="rest_code_fd37531aea97468aa029ce8753feafc0-1" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-2" name="rest_code_fd37531aea97468aa029ce8753feafc0-2" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-3" name="rest_code_fd37531aea97468aa029ce8753feafc0-3" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-4" name="rest_code_fd37531aea97468aa029ce8753feafc0-4" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-5" name="rest_code_fd37531aea97468aa029ce8753feafc0-5" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-6" name="rest_code_fd37531aea97468aa029ce8753feafc0-6" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-7" name="rest_code_fd37531aea97468aa029ce8753feafc0-7" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-8" name="rest_code_fd37531aea97468aa029ce8753feafc0-8" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-9" name="rest_code_fd37531aea97468aa029ce8753feafc0-9" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-10" name="rest_code_fd37531aea97468aa029ce8753feafc0-10" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-11" name="rest_code_fd37531aea97468aa029ce8753feafc0-11" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-12" name="rest_code_fd37531aea97468aa029ce8753feafc0-12" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-13" name="rest_code_fd37531aea97468aa029ce8753feafc0-13" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-14" name="rest_code_fd37531aea97468aa029ce8753feafc0-14" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-15" name="rest_code_fd37531aea97468aa029ce8753feafc0-15" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-16" name="rest_code_fd37531aea97468aa029ce8753feafc0-16" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-17" name="rest_code_fd37531aea97468aa029ce8753feafc0-17" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-18" name="rest_code_fd37531aea97468aa029ce8753feafc0-18" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-19" name="rest_code_fd37531aea97468aa029ce8753feafc0-19" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-20" name="rest_code_fd37531aea97468aa029ce8753feafc0-20" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-21" name="rest_code_fd37531aea97468aa029ce8753feafc0-21" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-22" name="rest_code_fd37531aea97468aa029ce8753feafc0-22" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-23" name="rest_code_fd37531aea97468aa029ce8753feafc0-23" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-24" name="rest_code_fd37531aea97468aa029ce8753feafc0-24" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-25" name="rest_code_fd37531aea97468aa029ce8753feafc0-25" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-26" name="rest_code_fd37531aea97468aa029ce8753feafc0-26" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-27" name="rest_code_fd37531aea97468aa029ce8753feafc0-27" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-28" name="rest_code_fd37531aea97468aa029ce8753feafc0-28" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-29" name="rest_code_fd37531aea97468aa029ce8753feafc0-29" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-30" name="rest_code_fd37531aea97468aa029ce8753feafc0-30" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-31" name="rest_code_fd37531aea97468aa029ce8753feafc0-31" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-31"&gt;&lt;/a&gt;
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-32" name="rest_code_fd37531aea97468aa029ce8753feafc0-32" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-33" name="rest_code_fd37531aea97468aa029ce8753feafc0-33" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a id="rest_code_fd37531aea97468aa029ce8753feafc0-34" name="rest_code_fd37531aea97468aa029ce8753feafc0-34" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fd37531aea97468aa029ce8753feafc0-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;quotes and escapes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding expressions in braces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wildcards (glob, &lt;code class="docutils literal"&gt;*&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redirections and pipes (&lt;code class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command substitution (backticks or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running multiple commands on the same line (&lt;code class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-4" role="doc-backlink"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="simple dl-horizontal"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Perform fork-exec by yourself, or use &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;code class="docutils literal"&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the subprocess module. Always pass &lt;code class="docutils literal"&gt;shell=False&lt;/code&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;code class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/code&gt; (and not &lt;code class="docutils literal"&gt;_shell&lt;/code&gt;), but note it takes &lt;code class="docutils literal"&gt;*args&lt;/code&gt; and not a list. Never use &lt;code class="docutils literal"&gt;os.system&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.popen&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;IO.popen&lt;/code&gt;. Pass multiple arguments to &lt;code class="docutils literal"&gt;system()&lt;/code&gt; (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/code&gt;). Never use &lt;code class="docutils literal"&gt;%x{command}&lt;/code&gt; or backticks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;Runtime.exec&lt;/code&gt;. Pass multiple arguments or list to &lt;code class="docutils literal"&gt;ProcessBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All the standard methods go through the shell. Try &lt;code class="docutils literal"&gt;escapeshellcmd()&lt;/code&gt;, &lt;code class="docutils literal"&gt;escapeshellarg()&lt;/code&gt; — or better, switch to Python. Or anything, really.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;os/exec&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.StartProcess&lt;/code&gt; are safe.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use &lt;code class="docutils literal"&gt;child_process.execFile&lt;/code&gt; or &lt;code class="docutils literal"&gt;child_process.spawn&lt;/code&gt; with &lt;code class="docutils literal"&gt;shell&lt;/code&gt; set to false.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;section id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-5" role="doc-backlink"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; on Windows. Instead, &lt;code class="docutils literal"&gt;CreateProcess()&lt;/code&gt;,
&lt;code class="docutils literal"&gt;ShellExecute()&lt;/code&gt;, or lower-level &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/code&gt; functions are used. &lt;code class="docutils literal"&gt;cmd.exe
/c&lt;/code&gt; is called in shell calls.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The function that does the real work is &lt;code class="docutils literal"&gt;execve()&lt;/code&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;code class="docutils literal"&gt;execl()&lt;/code&gt; does the last two.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Quoted from &lt;code class="docutils literal"&gt;execve(2)&lt;/code&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;An alternative is &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;mirroring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;screen resolution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dock position and icon size&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item><item><title>Unix locales vs Unicode (‘ascii’ codec can’t encode character…)</title><link>https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;You might get unusual errors about Unicode and inability to convert
to ASCII. Programs might just crash at random. Those are often simple to fix —
all you need is correct locale configuration.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p class="lead"&gt;Has this ever happened to you?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code pytb"&gt;&lt;a id="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-1" name="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-1"&gt;&lt;/a&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;a id="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-2" name="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-2"&gt;&lt;/a&gt;  File &lt;span class="nb"&gt;"aogonek.py"&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-3" name="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0105&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-4" name="rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_fa2d91439b1c4fe1ba763f2a5b6cdb38-4"&gt;&lt;/a&gt;&lt;span class="gr"&gt;UnicodeEncodeError&lt;/span&gt;: &lt;span class="n"&gt;'ascii' codec can't encode character '\u0105' in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_7535227329fc43e1aff5d63301e830ae-1" name="rest_code_7535227329fc43e1aff5d63301e830ae-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_7535227329fc43e1aff5d63301e830ae-1"&gt;&lt;/a&gt;Nikola: Could not guess locale for language en, using locale C
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_f08d097653f84de394f7a2450d78962a-1" name="rest_code_f08d097653f84de394f7a2450d78962a-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_f08d097653f84de394f7a2450d78962a-1"&gt;&lt;/a&gt;Input: ą
&lt;a id="rest_code_f08d097653f84de394f7a2450d78962a-2" name="rest_code_f08d097653f84de394f7a2450d78962a-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_f08d097653f84de394f7a2450d78962a-2"&gt;&lt;/a&gt;Desired ascii(): '\u0105'
&lt;a id="rest_code_f08d097653f84de394f7a2450d78962a-3" name="rest_code_f08d097653f84de394f7a2450d78962a-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_f08d097653f84de394f7a2450d78962a-3"&gt;&lt;/a&gt;Real ascii(): '\udcc4\udc85'
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_4aeb8742782c436ea6280a9e9aeabc06-1" name="rest_code_4aeb8742782c436ea6280a9e9aeabc06-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_4aeb8742782c436ea6280a9e9aeabc06-1"&gt;&lt;/a&gt;perl: warning: Setting locale failed.
&lt;a id="rest_code_4aeb8742782c436ea6280a9e9aeabc06-2" name="rest_code_4aeb8742782c436ea6280a9e9aeabc06-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_4aeb8742782c436ea6280a9e9aeabc06-2"&gt;&lt;/a&gt;perl: warning: Please check that your locale settings:
&lt;a id="rest_code_4aeb8742782c436ea6280a9e9aeabc06-3" name="rest_code_4aeb8742782c436ea6280a9e9aeabc06-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_4aeb8742782c436ea6280a9e9aeabc06-3"&gt;&lt;/a&gt;    [...]
&lt;a id="rest_code_4aeb8742782c436ea6280a9e9aeabc06-4" name="rest_code_4aeb8742782c436ea6280a9e9aeabc06-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_4aeb8742782c436ea6280a9e9aeabc06-4"&gt;&lt;/a&gt;    are supported and installed on your system.
&lt;a id="rest_code_4aeb8742782c436ea6280a9e9aeabc06-5" name="rest_code_4aeb8742782c436ea6280a9e9aeabc06-5" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_4aeb8742782c436ea6280a9e9aeabc06-5"&gt;&lt;/a&gt;perl: warning: Falling back to the standard locale ("C").
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="lead"&gt;All those errors have the same root cause: incorrect locale configuration.
To fix them all, you need to generate the missing locales and set them.&lt;/p&gt;
&lt;section id="check-currently-used-locale"&gt;
&lt;h2&gt;Check currently used locale&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;locale&lt;/code&gt; command (without arguments) should tell you which locales you’re
currently using.  (The list might be shorter on your end)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code sh"&gt;&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-1" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-1"&gt;&lt;/a&gt;$ locale
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-2" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-3" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_CTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-4" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NUMERIC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-5" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-5" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-6" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-6" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_COLLATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-7" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-7" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-7"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MONETARY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-8" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-8" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-8"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MESSAGES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-9" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-9" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-9"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_PAPER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-10" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-10" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-10"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-11" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-11" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-12" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-12" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TELEPHONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-13" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-13" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MEASUREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-14" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-14" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_IDENTIFICATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a id="rest_code_b5f7195a11c24f9292854ecadb372ba5-15" name="rest_code_b5f7195a11c24f9292854ecadb372ba5-15" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_b5f7195a11c24f9292854ecadb372ba5-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If any of those is set to &lt;code class="docutils literal"&gt;C&lt;/code&gt; or &lt;code class="docutils literal"&gt;POSIX&lt;/code&gt;, has a different encoding than
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;UTF-8&lt;/span&gt;&lt;/code&gt; (sometimes spelled &lt;code class="docutils literal"&gt;utf8&lt;/code&gt;) is empty (with the exception of
&lt;code class="docutils literal"&gt;LC_ALL&lt;/code&gt;), or if you see any errors, you need to reconfigure your locale.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="check-locale-availability-and-install-missing-locales"&gt;
&lt;h2&gt;Check locale availability and install missing locales&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is check locale availability. To do this, run
&lt;code class="docutils literal"&gt;locale &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/code&gt;. This will produce a list of all installed locales.  You can use
&lt;code class="docutils literal"&gt;grep&lt;/code&gt; to get a more reasonable list.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-1" name="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_d1e130d69c2e4cfca10d8555ca0228cf-1"&gt;&lt;/a&gt;$ locale -a | grep -i utf
&lt;a id="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-2" name="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-2" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_d1e130d69c2e4cfca10d8555ca0228cf-2"&gt;&lt;/a&gt;&amp;lt;lists all UTF-8 locales&amp;gt;
&lt;a id="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-3" name="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-3" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_d1e130d69c2e4cfca10d8555ca0228cf-3"&gt;&lt;/a&gt;$ locale -a | grep -i utf | grep -i en_US
&lt;a id="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-4" name="rest_code_d1e130d69c2e4cfca10d8555ca0228cf-4" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_d1e130d69c2e4cfca10d8555ca0228cf-4"&gt;&lt;/a&gt;en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The best locale to use is the one for your language, with the UTF-8 encoding.
The locale will be used by some console apps for output. I’m going to use
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;en_US.UTF-8&lt;/span&gt;&lt;/code&gt; in this guide.&lt;/p&gt;
&lt;p&gt;If you can’t see any UTF-8 locales, or no appropriate locale setting for your
language of choice, you might need to generate those. The required actions
depend on your distro/OS.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Debian, Ubuntu, and derivatives: install &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;language-pack-en-base&lt;/span&gt;&lt;/code&gt;, run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;dpkg-reconfigure&lt;/span&gt; locales&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RHEL, CentOS, Fedora: install &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;glibc-langpack-en&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux: uncomment relevant entries in &lt;code class="docutils literal"&gt;/etc/locale.gen&lt;/code&gt; and run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;locale-gen&lt;/span&gt;&lt;/code&gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Locale"&gt;(wiki)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For other OSes, refer to the documentation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need a UTF-8 locale to ensure compatibility with software. Avoid the &lt;code class="docutils literal"&gt;C&lt;/code&gt;
and &lt;code class="docutils literal"&gt;POSIX&lt;/code&gt; locales (it’s ASCII) and locales with other encodings (those
aren’t used by ~anyone these days)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="configure-system-wide"&gt;
&lt;h2&gt;Configure system-wide&lt;/h2&gt;
&lt;p&gt;On some systems, you may be able to configure locale system-wide.  Check your
system documentation for details. If your system has systemd, run&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_66421ade8da5424e97bfb875ffc27607-1" name="rest_code_66421ade8da5424e97bfb875ffc27607-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_66421ade8da5424e97bfb875ffc27607-1"&gt;&lt;/a&gt;sudo localectl set-locale LANG=en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;
&lt;section id="configure-for-a-single-user"&gt;
&lt;h2&gt;Configure for a single user&lt;/h2&gt;
&lt;p&gt;If your environment does not allow system-wide locale configuration (macOS,
shared server with generated but unconfigured locales), or if you want to
ensure it’s always configured independently of system settings.&lt;/p&gt;
&lt;p&gt;To do this, you need to edit the configuration file for your shell. If you’re
using bash, it’s &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt; (or &lt;code class="docutils literal"&gt;.bash_profile&lt;/code&gt; on macOS). For zsh users,
&lt;code class="docutils literal"&gt;.zshrc&lt;/code&gt;.  Add this line (or equivalent in your shell):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code sh"&gt;&lt;a id="rest_code_3a3499daa9544d73baa22d6060069da5-1" name="rest_code_3a3499daa9544d73baa22d6060069da5-1" href="https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/#rest_code_3a3499daa9544d73baa22d6060069da5-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should be enough. Note that those settings don’t apply to programs
not launched through a shell.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;&lt;strong&gt;Python/Windows corner:&lt;/strong&gt; Python 3.7 will fix this on Unix by assuming UTF-8
if it encounters the C locale.  On Windows, Python 3.6 is using UTF-8
interactively, but not when using shell redirections to files or pipes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post was brought to you by ą — U+0105 LATIN SMALL LETTER A WITH OGONEK.&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/18/unix-locales-vs-unicode/</guid><pubDate>Sun, 18 Jun 2017 18:40:00 GMT</pubDate></item><item><title>Structuring and automating a Python project with the Python Project Template</title><link>https://chriswarrick.com/pl/blog/2017/04/09/python-project-template-structure-and-automation/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;To create a project that other people can use and contribute to, you need to
follow a specific directory structure. Moreover, releasing a new version should
be as simple and painless as possible. For my projects, I use a template that
has the structure already in place, and comes with automation for almost every
part of a release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project Template&lt;/a&gt; is my approach to this. It comes with a good (IMO) structure and automation.&lt;/p&gt;
&lt;p&gt;What does it include? A whole lot of things. Documentation, Sphinx
configuration, a simple test suite, a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file, some AUR stuff, and
perhaps the most important part — the &lt;code class="docutils literal"&gt;release&lt;/code&gt; script. It can automate a lot
of tasks that are part of a release.&lt;/p&gt;
&lt;p&gt;You see, releasing a package is error-prone. There are a lot of things that can go wrong:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Version numbers. They may appear in code comments, Sphinx configuration,
README files and documentation, and setup.py. Some people claim to have
“solutions” for this. Most of those solutions don’t work right — either they
import a file from the project (which may break if &lt;code class="docutils literal"&gt;__init__.py&lt;/code&gt; is too
magical), read a file from that place (which might not get included
properly), or use some setuptools extension to get the version from VCS or
whatever (which needs to be installed before the package). Using &lt;code class="docutils literal"&gt;sed&lt;/code&gt; to
fix the version numbers is much simpler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forgetting about changelogs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not updating translations or other important files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve had quite a few botched releases in the &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; project. I wrote a
&lt;a class="reference external" href="http://getnikola.github.io/releng/checklist.html"&gt;checklist&lt;/a&gt; to prevent things like those. You may notice that the most
prominent step is to run a &lt;code class="docutils literal"&gt;release&lt;/code&gt; script. This step replaced 21 others —
now the checklist only talks about writing announcements, sending e-mails,
updating the website, and doing some GitHub stuff that is not yet automated.&lt;/p&gt;
&lt;p&gt;The template promotes a &lt;em&gt;release early, release often&lt;/em&gt; workflow: since making a
new release requires almost no human intervention, you might as well do it
every time you make a bunch of changes. In my projects, &lt;em&gt;everything&lt;/em&gt; gets
automated, and it might as well be possible in yours.&lt;/p&gt;
&lt;section id="the-complete-feature-list-as-of-v2-1-5"&gt;
&lt;h2&gt;The complete feature list (as of v2.1.5)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;pre-configured Sphinx with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;CONTRIBUTING.rst&lt;/code&gt; guide (used by GitHub when sending a pull request or an issue)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;LICENSE.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;an empty &lt;code class="docutils literal"&gt;CHANGELOG.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;README.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a bare-bones &lt;code class="docutils literal"&gt;index.rst&lt;/code&gt; page&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The exact same files in &lt;code class="docutils literal"&gt;/&lt;/code&gt;, which are fragile and &lt;strong&gt;MAY NOT&lt;/strong&gt; be modified
as they are replaced with copies in &lt;code class="docutils literal"&gt;/docs&lt;/code&gt; by the &lt;code class="docutils literal"&gt;release&lt;/code&gt; script&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__init__.py&lt;/code&gt;, &lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; and &lt;code class="docutils literal"&gt;template.py&lt;/code&gt; files in the Python package directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file that could be good enough for people, and that supports
&lt;code class="docutils literal"&gt;entry_points&lt;/code&gt; (see &lt;a class="reference external" href="https://go.chriswarrick.com/entry_points"&gt;https://go.chriswarrick.com/entry_points&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;tests/&lt;/code&gt; containing some &lt;em&gt;Is My Python Sane?&lt;/em&gt;-style tests (using &lt;code class="docutils literal"&gt;pytest&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An automated global update script (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;.pypt/PYPT-UPDATE&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Entry points configuration ready to be uncommented (and a matching
&lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add-ons for Qt users (in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/Qt&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A sample hook for AUR updates (in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/AUR&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PKGBUILDs for the Arch Linux User Repository (AUR)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A state-of-the-art &lt;code class="docutils literal"&gt;release&lt;/code&gt; script, the operations of which are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;querying the user for version number, commit message and changes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;updating &lt;code class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bumping the version number in all the files, changing dates where necessary&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;copying over &lt;code class="docutils literal"&gt;/docs/README.rst&lt;/code&gt;,  &lt;code class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/code&gt; and &lt;code class="docutils literal"&gt;/docs/CONTRIBUTING.rst&lt;/code&gt; to &lt;code class="docutils literal"&gt;/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locale generation (via the &lt;code class="docutils literal"&gt;.pypt/localegen&lt;/code&gt; script)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running &lt;code class="docutils literal"&gt;import $PROJECTLC&lt;/code&gt; and the test suite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;uploading a source distribution and a wheel to PyPI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making a Git commit and tagging the release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;creating a GitHub Releases entry&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;updating the AUR packages (by using hooks)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;
&lt;a href="https://github.com/Kwpolska/python-project-template" class="btn btn-lg btn-primary"&gt;&lt;i class="fab fa-github"&gt;&lt;/i&gt; Check it out on GitHub&lt;/a&gt;
&lt;/div&gt;&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/04/09/python-project-template-structure-and-automation/</guid><pubDate>Sun, 09 Apr 2017 09:00:00 GMT</pubDate></item><item><title>CSV is not a standard</title><link>https://chriswarrick.com/pl/blog/2017/04/07/csv-is-not-a-standard/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;CSV is not a standard. What does that really mean for anyone using that format?
The file’s recipient may be unable to read it the way you intended. Separators,
decimal marks, escaping and encodings are all problems — and Excel does them
all pretty badly.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;So first, some people might claim that &lt;a class="reference external" href="http://www.ietf.org/rfc/rfc4180.txt"&gt;RFC 4180&lt;/a&gt; is the CSV standard. Those
people also have not read the document they’re referring to. It states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This memo provides information for the Internet community.  It does
not specify an Internet standard of any kind.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem with this is the fact that a &lt;code class="docutils literal"&gt;.csv&lt;/code&gt; file does not mean much. There
are a few problems. The first question is,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the field separator? Is it a comma or a semicolon?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hey, wait a minute, doesn’t the file format/extension stand for
&lt;em&gt;comma-separated values&lt;/em&gt;? Yes, it does. But that does not matter in the
slightest. You see, Microsoft Excel — which most people will use to read/write
their CSV files — makes this decision based on the user locale settings. If the
OS is set to a locale where the comma is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Decimal_mark#Hindu.E2.80.93Arabic_numeral_system"&gt;decimal mark&lt;/a&gt; (eg. most of
Europe), the list separator is set to &lt;code class="docutils literal"&gt;;&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;,&lt;/code&gt; — and Excel uses
that.&lt;/p&gt;
&lt;p&gt;Of course, there’s also the TSV data format — those are tab-separated values.
And some people might name their TSV files &lt;code class="docutils literal"&gt;.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To read files saved in a different locale, or with a different separator, Excel
users need to change the file extension to &lt;code class="docutils literal"&gt;.txt&lt;/code&gt;, or go to Data → Get
External Data → From Text &lt;a class="reference external" href="https://support.office.com/en-us/article/Text-Import-Wizard-c5b02af6-fda1-4440-899f-f78bafe41857"&gt;(documentation)&lt;/a&gt; and use the import wizard. You
can’t double-click on files.&lt;/p&gt;
&lt;p&gt;On a side note, Apple Numbers guesses the format — one of the few things it
gets right. LibreOffice always asks the user to pick import settings, but by
default it uses tab AND comma AND semicolon for CSV files, which brings its own
host of problems.&lt;/p&gt;
&lt;p&gt;Here’s a quick test:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does &lt;code class="docutils literal"&gt;foo;bar,baz;quux&lt;/code&gt; mean? What about &lt;code class="docutils literal"&gt;foo,bar;baz,quux&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;LibreOffice assumes it’s (Chinese) UTF-16 text, but after telling it the real encoding, both
files contain &lt;strong&gt;4 columns&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Microsoft Excel says one of the files contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other contains &lt;strong&gt;2 columns&lt;/strong&gt;
(which is which depends on locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apple Numbers says the first file contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other
contains &lt;strong&gt;2 columns&lt;/strong&gt; if set to English, and both files contain &lt;strong&gt;3
columns&lt;/strong&gt; if set to Polish.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But let’s get back to gotchas:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the decimal mark? Is it a dot or a comma?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That’s a direct consequence of the previous question. However, one can’t simply
assume &lt;code class="docutils literal"&gt;comma/dot&lt;/code&gt; and &lt;code class="docutils literal"&gt;semicolon/comma&lt;/code&gt;, because users might do crazy
stuff.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is used to escape rows containing the field separator? Quotes?
Backslashes?  What is used to escape the escape character?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Excel, for example, puts some things in &lt;code class="docutils literal"&gt;"quotes"&lt;/code&gt;. If a literal quote
character appears in the spreadsheet, it’s represented as &lt;code class="docutils literal"&gt;""&lt;/code&gt;, and
the entire cell is quoted as well. But there might be programs that use
backslashes for escapes, or even bad code that does not consider the need of
escaping like this, with tragic results.&lt;/p&gt;
&lt;p&gt;There’s still one more thing to cover: encodings. You see, even though the TSV
format effectively solves the issues I named before, both CSV and TSV suffer
from one problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which encoding to use when reading this file?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I already mentioned that LibreOffice believed my sample file was UTF-16,
containing Chinese text — in reality, this file was UTF-8 (or ASCII).&lt;/p&gt;
&lt;p&gt;What does Microsoft Excel do then? It looks like it follows &lt;em&gt;System locale for
non-Unicode programs&lt;/em&gt;. While there is an encoding option hidden in the Save
dialog, it does not seem to affect the output. So what does that mean? You
can’t expect a CSV file that contains characters outside of your system locale
— or outside of ASCII if you’re working with people around the world — to look
right. Unless you’re on &lt;a class="reference external" href="https://answers.microsoft.com/en-us/msoffice/forum/msoffice_install-mso_win10/announcing-october-feature-update-for-office-2016/927eea90-eea3-479a-a78a-45f7612460e1"&gt;Excel 2016&lt;/a&gt; and Office 365 — if you have the October
2016 update, you can read and write UTF-8 files. But if you’re using an older
version of Excel, or you’re using a non-Office 365 license, tough luck.&lt;/p&gt;
&lt;p&gt;So, to reiterate: CSV can mean a lot of things. And you can’t trust it to work
well most of the time, unless you’re dealing with people in one country, all
using the same locale settings and software. Which is pretty unlikely. TSV
can work around most of the problems, but encodings are still troublesome.&lt;/p&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/04/07/csv-is-not-a-standard/</guid><pubDate>Fri, 07 Apr 2017 18:00:00 GMT</pubDate></item><item><title>Code writing code: Python and Vim as development aids</title><link>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Recently I was working on some C# and Java code. And along the way, I used
Python and Vim to (re)write my code. A small Python script and a 6-keystroke
Vim macro did it faster and better than a human would.&lt;/p&gt;
&lt;p&gt;Every programmer should learn a good scripting language and use a programmable
editor like Vim. Why? Here are two examples, after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="episode-i-inotifypropertychanged-or-python-writing-c"&gt;
&lt;h2&gt;Episode I: &lt;code class="docutils literal"&gt;INotifyPropertyChanged&lt;/code&gt;, or Python writing C#&lt;/h2&gt;
&lt;p&gt;I was building a private C# weekend project (that turned into a weeklong
project) — and by the way, WPF and C# are quite pleasant (Windows Forms is a
trainwreck, though). One of the things I used in that project was a DataGrid
bound to a list of custom objects (a DataGrid is a table, basically). And in
order to use it, you need to use the &lt;code class="docutils literal"&gt;INotifyPropertyChanged&lt;/code&gt; interface &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms229614(v=vs.100).aspx"&gt;(MSDN)&lt;/a&gt;.
It involves doing something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-1" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-1"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// can also be a field&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-2" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-3" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;[JsonProperty]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-4" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-4"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-5" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-6" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-7" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-8" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-9" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-10" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-11" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="n"&gt;NotifyPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-12" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-13" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-14" name="rest_code_f4a9aa05fd0b4120aaacc95fa08ca5e1-14"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;That’s 12 lines of code (excluding &lt;code class="docutils literal"&gt;[JsonProperty]&lt;/code&gt; which comes from the
Json.NET library) for that pattern. Oh: and I need to do that for &lt;strong&gt;every&lt;/strong&gt;
field/property of my class, because otherwise any changes to them would not be
reflected in the tables (and maybe one or two fields were &lt;em&gt;not&lt;/em&gt; in the table).&lt;/p&gt;
&lt;p&gt;Doing that by hand is really not feasible: you need to copy-paste this
large block 14 times and take care of 5 instances of the name (3 with
underscores, 2 without), 2 instances of the type, and the &lt;code class="docutils literal"&gt;[JsonProperty]&lt;/code&gt;
attribute (which does not appear on all properties).&lt;/p&gt;
&lt;p&gt;So, I used one of those intelligent computer things to do it for me. I wrote a
really simple &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script and ran it. And I ended up with all 14 fields built
for me.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py.html"&gt;code-writing-code/write_properties.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-1" name="rest_code_524cd6924d9f477d8aa53365b591daf5-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-2" name="rest_code_524cd6924d9f477d8aa53365b591daf5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-3" name="rest_code_524cd6924d9f477d8aa53365b591daf5-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;public &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-4" name="rest_code_524cd6924d9f477d8aa53365b591daf5-4"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            get {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-5" name="rest_code_524cd6924d9f477d8aa53365b591daf5-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                return &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-6" name="rest_code_524cd6924d9f477d8aa53365b591daf5-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-7" name="rest_code_524cd6924d9f477d8aa53365b591daf5-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            set {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-8" name="rest_code_524cd6924d9f477d8aa53365b591daf5-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                if (value != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_) {&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-9" name="rest_code_524cd6924d9f477d8aa53365b591daf5-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ = value;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-10" name="rest_code_524cd6924d9f477d8aa53365b591daf5-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    NotifyPropertyChanged("&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;");&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-11" name="rest_code_524cd6924d9f477d8aa53365b591daf5-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-12" name="rest_code_524cd6924d9f477d8aa53365b591daf5-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-13" name="rest_code_524cd6924d9f477d8aa53365b591daf5-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-14" name="rest_code_524cd6924d9f477d8aa53365b591daf5-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-15"&gt;&lt;code data-line-number="15"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-15" name="rest_code_524cd6924d9f477d8aa53365b591daf5-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[JsonProperty]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;        '&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-16"&gt;&lt;code data-line-number="16"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-16" name="rest_code_524cd6924d9f477d8aa53365b591daf5-16"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-17"&gt;&lt;code data-line-number="17"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-17" name="rest_code_524cd6924d9f477d8aa53365b591daf5-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-18"&gt;&lt;code data-line-number="18"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-18" name="rest_code_524cd6924d9f477d8aa53365b591daf5-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-19"&gt;&lt;code data-line-number="19"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-19" name="rest_code_524cd6924d9f477d8aa53365b591daf5-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-20"&gt;&lt;code data-line-number="20"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-20" name="rest_code_524cd6924d9f477d8aa53365b591daf5-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-21"&gt;&lt;code data-line-number="21"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-21" name="rest_code_524cd6924d9f477d8aa53365b591daf5-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-22"&gt;&lt;code data-line-number="22"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-22" name="rest_code_524cd6924d9f477d8aa53365b591daf5-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-23"&gt;&lt;code data-line-number="23"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-23" name="rest_code_524cd6924d9f477d8aa53365b591daf5-23"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-24"&gt;&lt;code data-line-number="24"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-24" name="rest_code_524cd6924d9f477d8aa53365b591daf5-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-25"&gt;&lt;code data-line-number="25"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-25" name="rest_code_524cd6924d9f477d8aa53365b591daf5-25"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'1 string name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-26"&gt;&lt;code data-line-number="26"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-26" name="rest_code_524cd6924d9f477d8aa53365b591daf5-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'0 int another'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-27"&gt;&lt;code data-line-number="27"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-27" name="rest_code_524cd6924d9f477d8aa53365b591daf5-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 12 fields omitted for brevity&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-28"&gt;&lt;code data-line-number="28"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-28" name="rest_code_524cd6924d9f477d8aa53365b591daf5-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-29"&gt;&lt;code data-line-number="29"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-29" name="rest_code_524cd6924d9f477d8aa53365b591daf5-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-30"&gt;&lt;code data-line-number="30"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-30" name="rest_code_524cd6924d9f477d8aa53365b591daf5-30"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-31"&gt;&lt;code data-line-number="31"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-31" name="rest_code_524cd6924d9f477d8aa53365b591daf5-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Private definitions (internal)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-32"&gt;&lt;code data-line-number="32"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-32" name="rest_code_524cd6924d9f477d8aa53365b591daf5-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-33"&gt;&lt;code data-line-number="33"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-33" name="rest_code_524cd6924d9f477d8aa53365b591daf5-33"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"        private &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ { get; set; }"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-34"&gt;&lt;code data-line-number="34"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-34" name="rest_code_524cd6924d9f477d8aa53365b591daf5-34"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-35"&gt;&lt;code data-line-number="35"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-35" name="rest_code_524cd6924d9f477d8aa53365b591daf5-35"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-36"&gt;&lt;code data-line-number="36"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-36" name="rest_code_524cd6924d9f477d8aa53365b591daf5-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Public definitions (with notifications)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-37"&gt;&lt;code data-line-number="37"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-37" name="rest_code_524cd6924d9f477d8aa53365b591daf5-37"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_524cd6924d9f477d8aa53365b591daf5-38"&gt;&lt;code data-line-number="38"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_524cd6924d9f477d8aa53365b591daf5-38" name="rest_code_524cd6924d9f477d8aa53365b591daf5-38"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;That script takes a list of properties and spits out a block of code, ready to
be pasted into the code. Visual Studio has a nice &lt;em&gt;Insert File as Text&lt;/em&gt;
feature, so redirecting the output to a file and using that option is enough.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="episode-ii-fixing-argument-order-or-vim-re-writing-java"&gt;
&lt;h2&gt;Episode II: Fixing argument order, or Vim (re)writing Java&lt;/h2&gt;
&lt;p&gt;Another project, &lt;a class="reference external" href="https://github.com/Kwpolska/numbernamer"&gt;Number Namer&lt;/a&gt;, written in Java, and it does what it says on
the tin: takes a number and writes it out as words, while being multilingual and
extensible. I used Eclipse for this project, because it looks good, is really
helpful with its code linting, and does not run slowly on my aging system (I’m
looking at you, IntelliJ IDEA aka PyCharm aka Android Studio…)&lt;/p&gt;
&lt;p&gt;And so, I was building a test suite, using &lt;a class="reference external" href="http://junit.org/"&gt;JUnit&lt;/a&gt;. It’s pretty
straightforward, and I remember the syntax from Python’s unittest (even though
I write tests with &lt;a class="reference external" href="http://pytest.org/"&gt;pytest&lt;/a&gt; nowadays). Or so I thought.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code java"&gt;&lt;a id="rest_code_24cbaa9fe6e243049e91e39d96c417aa-1" name="rest_code_24cbaa9fe6e243049e91e39d96c417aa-1" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_24cbaa9fe6e243049e91e39d96c417aa-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (incorrect)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_24cbaa9fe6e243049e91e39d96c417aa-2" name="rest_code_24cbaa9fe6e243049e91e39d96c417aa-2" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_24cbaa9fe6e243049e91e39d96c417aa-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_24cbaa9fe6e243049e91e39d96c417aa-3" name="rest_code_24cbaa9fe6e243049e91e39d96c417aa-3" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_24cbaa9fe6e243049e91e39d96c417aa-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (fixed)                              ^ cursor&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_24cbaa9fe6e243049e91e39d96c417aa-4" name="rest_code_24cbaa9fe6e243049e91e39d96c417aa-4" href="https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/#rest_code_24cbaa9fe6e243049e91e39d96c417aa-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see, the typical Python spelling is &lt;code class="docutils literal"&gt;self.assertEquals(actual,
expected)&lt;/code&gt;. Java adds a &lt;code class="docutils literal"&gt;String&lt;/code&gt; message parameter and it also swaps
&lt;code class="docutils literal"&gt;actual&lt;/code&gt; and &lt;code class="docutils literal"&gt;expected&lt;/code&gt;. Which I didn’t notice at first, and I wrote my
assertions incorrectly. While it doesn’t &lt;em&gt;really&lt;/em&gt; matter (it will still work),
the output looked a bit weird.&lt;/p&gt;
&lt;p&gt;And I noticed only when I finished writing my tests (and I had a typo in my
expected output). I wanted to fix them all — not manually, of course. So, I
closed this file, brought up Vim, searched for the motion I need (it’s
&lt;code class="docutils literal"&gt;t{char}&lt;/code&gt; — see &lt;code class="docutils literal"&gt;:help t&lt;/code&gt;). And I ended up with this
(cursor placed on the comma after the first argument):&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;kbd style="font-size: 2em;"&gt;dt,&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;t)&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;p&lt;/kbd&gt;
&lt;/div&gt;&lt;p&gt;What does this do, you may ask? It’s actually pretty self-explanatory:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;d&lt;/b&gt;elete &lt;b&gt;t&lt;/b&gt;ill comma, (go) &lt;b&gt;t&lt;/b&gt;ill closing parenthesis, &lt;b&gt;p&lt;/b&gt;aste.
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This fixes one line. Automatically. Make it a macro (wrap in &lt;code class="docutils literal"&gt;qq&lt;/code&gt; … &lt;code class="docutils literal"&gt;q&lt;/code&gt;,
use with &lt;code class="docutils literal"&gt;@q&lt;/code&gt;) and now you can run it on all lines, either by moving manually or by
searching for &lt;code class="docutils literal"&gt;,&lt;/code&gt; and pressing &lt;code class="docutils literal"&gt;n@q&lt;/code&gt; until you run out of lines.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Some of you might say “but VS/Eclipse/IDEA has an option for that somewhere” or
“[expensive tool] can do that” — and a Google search shows that there is an
Eclipse plugin to swap arguments and that I could also write a regex to solve
my second issue. Nevertheless, Python is a great tool in a programmer’s toolbox
— especially the interactive interpreter. And Vim is an awesome editor that can
accomplish magic in a few keystrokes — and there are many more things you can
do with it.&lt;/p&gt;
&lt;p class="lead"&gt;Go learn &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;Also: don’t even bother with VsVim or IdeaVim or any other Vim emulation
plugins, they work in unusual ways and often don’t give you everything — for
example, VsVim has a Vim visual mode (&lt;code class="docutils literal"&gt;v&lt;/code&gt; key) and Visual Studio selection
mode (mouse), and only one allows Vim keystrokes (the other will replace
selected text).&lt;/p&gt;
&lt;/section&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/05/27/code-writing-code-python-and-vim/</guid><pubDate>Fri, 27 May 2016 08:46:35 GMT</pubDate></item></channel></rss>