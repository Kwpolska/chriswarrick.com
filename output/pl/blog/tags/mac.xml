<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o Mac)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/mac.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Sat, 14 Nov 2020 22:17:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What an ARM Mac means for developers and Windows users</title><link>https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;The rumor mill was right this time, and Apple has just announced they will
transition Macs to ARM processors. These news have some side effects for
software developers, particularly those not working with the Apple ecosystem.
And they also affect people who depend on both macOS and Windows.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#how-will-it-work-out-in-apple-land" id="id1"&gt;How will it work out in Apple land?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#who-needs-non-apple-operating-systems" id="id2"&gt;Who needs non-Apple operating systems?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#is-virtualization-possible-on-arm" id="id3"&gt;Is virtualization possible on ARM?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#can-we-emulate-x86-64-and-run-x86-64-windows-10" id="id4"&gt;Can we emulate x86(_64) and run x86(_64) Windows 10?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#whats-next-for-people-who-rely-on-both-macos-and-windows" id="id5"&gt;What’s next for people who rely on both macOS and Windows?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#post-m1-announcement-update-2020-11-14" id="id6"&gt;Post-M1 announcement update (2020-11-14)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;In this post, I am not going to focus in the differences between x86_64 and ARM,
RISC and CISC, and all the benchmarks. Let’s assume that Apple manages to offer
ARM-based CPUs that can match performance of most Intel processors in Apple’s
lineup, and let’s even assume they can make an ARM Mac Pro. (A note on naming:
Apple Silicon is the official name, but it sounds ugly. I’ll just call it ARM.
For Intel, I’ll use either Intel or x86(_64).)&lt;/p&gt;
&lt;p&gt;For many users, the transition will be more-or-less transparent. Sure, they’ll
lose some apps, just like they probably did with Catalina (which dropped
support for 32-bit Intel apps), or some apps will not be available/will be
buggy in the first few months of the transition (though it will be easier than
the PowerPC transition, because Apple uses little-endian byte order on ARM).&lt;/p&gt;
&lt;div class="section" id="how-will-it-work-out-in-apple-land"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id1"&gt;How will it work out in Apple land?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For developers who work only on iOS apps, the transition also won’t mean much.
Maybe a faster, more accurate Simulator. They’ll need to buy an ARM Mac sooner
or later (within the next 5 years), because Apple requires them to use the
latest Xcode version for App Store submissions, and Xcode supports at best the
previous version of macOS.  But that has been Apple’s policy forever, and the
Intel Macs will probably be within the usual deprecation range when that
happens.&lt;/p&gt;
&lt;p&gt;The requirements for macOS-only developers are pretty obvious, they will need
to buy an ARM Mac on day one, so they can test their apps on the new platform.
They will also need to work on ARM compatibility — although updating your app
for the new OS is a yearly ritual in Apple land, so that’s also mostly
business-as-usual (unless you do a lot of unportable low-level stuff in your
code). There are some pro apps that tend to lag behind new Apple decrees (some
might have been hit by Catalina), and users of those apps might prefer to stay
with Intel for a little bit longer.&lt;/p&gt;
&lt;p&gt;But then, we get to the requirements of developers who use Macs, but don’t work
exclusively with the Apple platforms. This is a fairly large group, since many
developers like Macs for the good hardware, Unix-based software, and the
integration of both. And for some part, non-developers are affected too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-needs-non-apple-operating-systems"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id2"&gt;Who needs non-Apple operating systems?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first group are people tied to Windows, somehow. Some of them might be
using Boot Camp to play games. Others might be using Boot Camp or
virtualization software (Parallels Desktop, VMware Fusion, Oracle VM
VirtualBox) to run Windows and Windows-specific apps — perhaps they need the
Windows version of Office, or various Windows-onlypro apps, or they need
Windows to file their taxes, because their government does not care about
non-Windows OSes. Or perhaps they’re web developers, and they need to test
compatibility with the Windows versions of browsers, or the old Microsoft
browsers (IE and pre-Chromium Edge).&lt;/p&gt;
&lt;p&gt;The second group is software developers who need Linux. While macOS provides a
very competent development environment, and many things can be run directly on
macOS, some use-cases may require a Linux VM.  Perhaps the most notable case is
Docker.&lt;/p&gt;
&lt;p&gt;Docker is a solution for lightweight app containers, that can offer separation
between apps, and that can simplify and standardize deployment. Docker itself
is not a virtualization solution (at least in the traditional sense). Docker
must run on top of Linux (there’s also Docker-on-Windows, but that’s another
story). The Docker Desktop for Mac app runs a lightweight Linux VM, and runs
containers in that VM. The virtualization solution &lt;a class="reference external" href="https://github.com/docker/for-mac"&gt;Docker for Mac uses&lt;/a&gt; is &lt;code class="docutils literal"&gt;Hypervisor.framework&lt;/code&gt;, which is
part of macOS itself.&lt;/p&gt;
&lt;p&gt;Who else needs virtualization? Android developers. The Android Emulator is also
a virtual machine that runs the Android operating system. Android can run on
different architectures, and so, a x86 system image is typically used for the
Emulator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-virtualization-possible-on-arm"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id3"&gt;Is virtualization possible on ARM?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, definitely. Apple has been testing it much earlier, since the
aforementioned &lt;code class="docutils literal"&gt;Hypervisor.framework&lt;/code&gt; was found &lt;a class="reference external" href="https://twitter.com/never_released/status/1250533740557852674"&gt;on iOS in April&lt;/a&gt;.
And Apple announced virtualization support for ARM Macs during the keynote, and
showed an example of a Linux VM. That VM was, of course, running an ARM64
distribution of Linux.&lt;/p&gt;
&lt;p&gt;But what can we use this for? Turns out, it’s complicated. The easiest thing
from the few use-cases mentioned before is Android. Google just needs to get
the Emulator working on ARM Macs and ship that to the devs.&lt;/p&gt;
&lt;p&gt;What about Linux in general? Many mainstream distributions
support ARM64, so that’s not a problem in general. The support for a particular
distro or software might be worse than on x86_64, but it’s generally not a
problem for users.&lt;/p&gt;
&lt;p&gt;But for Docker, there’s a problem. One of the many advantages of Docker is
dev-prod parity. If you deploy your app with Docker to an x86_64 Linux server,
you can also install Docker on an x86_64 Linux developer machine (or a Linux VM on an
Intel Mac/Windows PC). Both the server and the dev machine can run &lt;strong&gt;the same&lt;/strong&gt;
image, the same code, the same configuration. That won’t happen if they are a
different architecture. This means that you can end up with bugs happening
because of different environments, and it’s also possible that some images you
depend on are not available for both architectures.&lt;/p&gt;
&lt;p&gt;And then we get to Windows. Windows also has an ARM version, but it’s currently
available only with a new ARM device (you can’t buy it standalone). If
Microsoft were to sell this, we’d have an issue with the software. Windows 10
on ARM supports 32/64-bit ARM software, and can run 32-bit Intel (x86) software
using emulation. It cannot, however, emulate apps that require 64-bit Intel
processors (x86_64).  This makes the software situation on that platform a bit
better. While many developers don’t care about ARM and might not have builds
for ARM available, most Windows software is available in both x86 and x86_64
versions, or is exclusively 32-bit. But certain pro apps are x86_64 only, so if
there is no ARM build of it, an ARM Windows PC currently cannot run it.
(&lt;em&gt;Update:&lt;/em&gt; Microsoft announced &lt;a class="reference external" href="https://blogs.windows.com/windowsexperience/2020/09/30/now-more-essential-than-ever-the-role-of-the-windows-pc-has-changed/"&gt;x86_64 emulation on ARM&lt;/a&gt;,
which means more software will work.)&lt;/p&gt;
&lt;p&gt;And note that Microsoft knows about the transition, but we haven’t heard
anything about Windows during the keynote…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-we-emulate-x86-64-and-run-x86-64-windows-10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id4"&gt;Can we emulate x86(_64) and run x86(_64) Windows 10?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Theoretically? Yes. Practically? No.&lt;/p&gt;
&lt;p&gt;The issue with emulation is speed. There are a few x86 emulators available, and
those emulators can be run on an ARM device just fine. You can find videos on
YouTube (not a very reliable source of information, I know) in which people try
to benchmark those, or try to run Windows using an emulator like that. And even
with an ancient Windows version, the emulation is painfully slow. Windows 10
would be basically unusable if you tried to emulate all of it.&lt;/p&gt;
&lt;p&gt;How does the x86 emulation on Windows 10 for ARM work? You can watch &lt;a class="reference external" href="https://channel9.msdn.com/Events/Build/2017/P4171"&gt;the
Channel 9 video about Windows 10 on ARM&lt;/a&gt; (around 6:00) for more
details. The trick is that system DLLs are using a hybrid x86/ARM64 library
format, which means x86 code can call those DLLs at native speeds. This means
that many apps run at near-native speed (depending on the ratio of custom code
to system DLL calls). This technique cannot work for emulating the entire
operating system. If Windows 10 on ARM was made available for ARM Macs, running
x86 Windows apps would become feasible.&lt;/p&gt;
&lt;p&gt;Rosetta probably uses similar technique. Most apps will be translated at
install time, not at run time. But you can’t do that with an entire OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-next-for-people-who-rely-on-both-macos-and-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id5"&gt;What’s next for people who rely on both macOS and Windows?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a few more years, Intel Macs will still be supported by Apple (with new
macOS versions) and by software vendors. But after that? Well, you’re stuck
with two machines, at least until Windows on ARM becomes viable and runnable on
Macs. Or you can start exploring alternatives to macOS software. If you’re one
of the macOS-as-UNIX-with-great-UX developers (hello!), perhaps you’ll have to
switch to Linux — or perhaps Windows with Windows Subsystem for Linux? (The
latter is becoming more usable with every Windows release, so keep an eye on
that… I wrote this post in NeoVim in WSL2, with Windows Terminal supporting
many advanced terminal features, and the transparent filesystem integration
letting me access Windows files directly).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-m1-announcement-update-2020-11-14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id6"&gt;Post-M1 announcement update (2020-11-14)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Parallels have confirmed &lt;a class="reference external" href="https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/"&gt;support for M1 Macs&lt;/a&gt; and
are offering a Technical Preview of their M1 virtualization product. This
announcement’s mention of Windows 10 ARM supporting x86_64 apps has caused
some tech writers to assume Parallels will support Windows 10 ARM on M1
Macs. This is &lt;strong&gt;not&lt;/strong&gt; what the post says. Parallels is not, and cannot
announce support for that OS, because Windows 10 ARM is (still) available to
ARM OEMs only to install on their devices — making an official announcement
about this feature today would be admitting to doing something illegal/not
allowed by the EULA. I’m pretty sure they are not working on support for
Windows 10 ARM now and in the foreseeable future, until Microsoft opens up
Windows 10 ARM to the public — their own legal issues aside, who would they sell
the Windows support to?&lt;/p&gt;
&lt;p&gt;In other news, &lt;a class="reference external" href="https://github.com/docker/for-mac/issues/4733"&gt;Docker is not ready yet&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/</guid><pubDate>Mon, 22 Jun 2020 19:00:00 GMT</pubDate></item><item><title>Reinstalling macOS: What To Try When All Else Fails</title><link>https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I reinstalled macOS on my device. Throughout the process, many
attempts failed miserably. But I now have some experience and assorted hints on
what to try.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; All information in this post is provided as-is, and some of it may
void your warranty. Neither Chris Warrick nor Apple will be responsible for any
damage to your devices caused as a result of using information in this post.&lt;/p&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#making-install-media-with-el-capitan-with-access-only-to-recovery" id="id1"&gt;Making install media with El Capitan (with access only to Recovery)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#manually-installing-pkg-files" id="id2"&gt;Manually installing .pkg files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#making-install-media-out-of-partial-macos-installers-not-a-valid-os-installer-application" id="id3"&gt;Making install media out of partial macOS installers (“not a valid OS installer application”)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#a-from-the-el-capitan-download" id="id4"&gt;a. From the El Capitan download&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#b-installer-from-recovery-app-store-any-macos-version" id="id5"&gt;b. Installer from Recovery/App Store (any macOS version)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#el-capitan-installer-cant-be-verified" id="id6"&gt;El Capitan installer can’t be verified&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#bonus-tidbit-1-how-the-download-works" id="id7"&gt;Bonus tidbit 1: how the download works&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#bonus-tidbit-2-using-terminal-from-setup-assistant" id="id8"&gt;Bonus tidbit 2: using Terminal from Setup Assistant&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#an-open-letter-to-progress-bar-designers" id="id9"&gt;An Open Letter to Progress Bar Designers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#in-the-end" id="id10"&gt;In the end…&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="making-install-media-with-el-capitan-with-access-only-to-recovery"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id1"&gt;Making install media with El Capitan (with access only to Recovery)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The best, safest, least error-prone way to do an install is with a USB stick.
Unfortunately, making a USB stick with the macOS installer on it is a nuisance.
The expected way to produce macOS install media is to download the installer
from App Store/Software Update, and run the &lt;code class="docutils literal"&gt;createinstallmedia&lt;/code&gt; command-line
program included with that installer app. All is well, as long as macOS works.
If it doesn’t, and Recovery can’t install it for you, that can be difficult to
solve.&lt;/p&gt;
&lt;p&gt;Apple does not make macOS images publicly available. That’s probably to make
Hackintoshing this little bit harder, but this also affects legitimate users.
The only thing you can download from Apple is El Capitan. Apple offers
&lt;a class="reference external" href="https://support.apple.com/en-us/HT206886"&gt;InstallMacOSX.dmg&lt;/a&gt; on their
website. If you take a look at the instructions, you will see that this is
&lt;em&gt;not&lt;/em&gt; a bootable OS X image. This image has a &lt;code class="docutils literal"&gt;.pkg&lt;/code&gt; package. This package is
expected to install &lt;code class="docutils literal"&gt;/Applications/Install OS X El Capitan.app&lt;/code&gt;. Well, we’re
in recovery, we can’t install stuff. So, let’s do this the manual way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manually-installing-pkg-files"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id2"&gt;Manually installing .pkg files&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Turns out the &lt;code class="docutils literal"&gt;.pkg&lt;/code&gt; format is just an archives all the way down, with all
archives being different formats (at least three).&lt;/p&gt;
&lt;div class="float-md-right mt-md-0 sidebar"&gt;
&lt;p class="sidebar-title"&gt;macOS flat package format&lt;/p&gt;
&lt;p&gt;You can find more resources about the flat package format, &lt;a class="reference external" href="http://s.sudre.free.fr/Stuff/Ivanhoe/FLAT.html"&gt;one&lt;/a&gt; or &lt;a class="reference external" href="https://matthew-brett.github.io/docosx/flat_packages.html#payload_"&gt;two&lt;/a&gt;, although
this was deduced from the &lt;code class="docutils literal"&gt;file&lt;/code&gt; command and The Unarchiver.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The first archive is the &lt;code class="docutils literal"&gt;.pkg&lt;/code&gt; file itself. Those files are in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Xar_(archiver)"&gt;XAR format&lt;/a&gt;, which was invented by the
OpenDarwin community. You can either extract it with &lt;code class="docutils literal"&gt;pkgutil &lt;span class="pre"&gt;--expand&lt;/span&gt;
foo.pkg foo_files&lt;/code&gt; (the last argument is the destination directory, can be
anything, will be created by &lt;code class="docutils literal"&gt;pkgutil&lt;/code&gt;) if you have access to that command (it’s
available in Recovery OS), or you can try the &lt;code class="docutils literal"&gt;xar&lt;/code&gt; utility as &lt;code class="docutils literal"&gt;xar &lt;span class="pre"&gt;-xf&lt;/span&gt;
foo.pkg&lt;/code&gt;. The structure produced by both tools is a bit different, but we can
work with both.&lt;/p&gt;
&lt;p&gt;The second archive-in-archive is the &lt;code class="docutils literal"&gt;Payload&lt;/code&gt;. It’s a gzipped cpio archive
that contains the files installed by this package.  If you have BSD tar
(default on macOS, easily installable on Linux), you can just do &lt;code class="docutils literal"&gt;tar &lt;span class="pre"&gt;-xvf&lt;/span&gt; Payload&lt;/code&gt;.
Otherwise, you can use &lt;code class="docutils literal"&gt;gunzip &lt;span class="pre"&gt;-c&lt;/span&gt; Payload | cpio &lt;span class="pre"&gt;-i&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;gzcat&lt;/code&gt;). That
will extract all the files the package has.&lt;/p&gt;
&lt;p&gt;Another nested archive is the &lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; archive, although note that
&lt;code class="docutils literal"&gt;pkgutil&lt;/code&gt; will extract it automatically. If it’s not extracted, it’s actually
&lt;code class="docutils literal"&gt;.cpio.gz&lt;/code&gt; again, with the same way to extract it.&lt;/p&gt;
&lt;p&gt;(PS.  If you have &lt;code class="docutils literal"&gt;7z&lt;/code&gt; around (on Windows/Linux as well), you can just point
it at all the compressed files mentioned in this paragraph.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-install-media-out-of-partial-macos-installers-not-a-valid-os-installer-application"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id3"&gt;Making install media out of partial macOS installers (“not a valid OS installer application”)&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="a-from-the-el-capitan-download"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id4"&gt;a. From the El Capitan download&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s expand the El Capitan package.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;mount the DMG in Disk Utility&lt;span class="o"&gt;)&lt;/span&gt;
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cp /Volumes/Install&lt;span class="se"&gt;\ &lt;/span&gt;OS&lt;span class="se"&gt;\ &lt;/span&gt;X/InstallMacOSX.pkg /Volumes/Macintosh&lt;span class="se"&gt;\ &lt;/span&gt;HD/
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;     (Or copy it to some other volume you can write to; NOT the USB stick)&lt;/span&gt;
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-4"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /Volumes/Macintosh&lt;span class="se"&gt;\ &lt;/span&gt;HD/
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pkgutil --expand InstallMacOSX.pkg elcapitan
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-6"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ls -F elcapitan
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-7"&gt;&lt;/a&gt;&lt;span class="go"&gt;Distribution*       InstallMacOSX.pkg/ Resources/&lt;/span&gt;
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-8"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; elcapitan/InstallMacOSX.pkg/
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-9"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; tar -xvf Payload
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;x .&lt;/span&gt;
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;x ./Install OS X El Capitan.app&lt;/span&gt;
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-12"&gt;&lt;/a&gt;&lt;span class="go"&gt;x ./Install OS X El Capitan.app/Contents&lt;/span&gt;
&lt;a name="rest_code_20e2592ebf654a2782cc0044d46632e4-13"&gt;&lt;/a&gt;&lt;span class="go"&gt;…&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We’ve got the installer app, which is what we need to create an install image.
Great, let’s try it!&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_069ca7d620bb4b6dadfbe7153838b06d-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/Resources/createinstallmedia"&lt;/span&gt; --volume /Volumes/MyBlankUSBDrive --applicationpath &lt;span class="s2"&gt;"Install OS X El Capitan.app"&lt;/span&gt;
&lt;a name="rest_code_069ca7d620bb4b6dadfbe7153838b06d-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;Install OS X El Capitan.app does not appear to be a valid OS installer application.&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Oh, we’ve got a problem. Turns out there’s one more thing we need to take care
of, and it’s the scripts. MacOS packages have scripts, typically shell scripts,
that are run at various stages in the install process. We can look at the
&lt;code class="docutils literal"&gt;PackageInfo&lt;/code&gt; file, or just look in the &lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; folder, to see that
there’s an &lt;code class="docutils literal"&gt;link_package&lt;/code&gt; script we need to run. This script creates a
&lt;code class="docutils literal"&gt;Contents/SharedSupport&lt;/code&gt; directory inside the installer app, and
copies/hardlinks the &lt;code class="docutils literal"&gt;InstallESD.dmg&lt;/code&gt; file (which is the install formerly-DVD
image) to that directory. Let’s try doing this on our own:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_d3fe9db4cc0c4fbeb6f0d9a5321628cd-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/SharedSupport"&lt;/span&gt;
&lt;a name="rest_code_d3fe9db4cc0c4fbeb6f0d9a5321628cd-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mv InstallESD.dmg &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/SharedSupport"&lt;/span&gt;
&lt;a name="rest_code_d3fe9db4cc0c4fbeb6f0d9a5321628cd-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; &lt;span class="s2"&gt;"Install OS X El Capitan.app/Contents/Resources/createinstallmedia"&lt;/span&gt; --volume /Volumes/MyBlankUSBDrive --applicationpath &lt;span class="s2"&gt;"Install OS X El Capitan.app"&lt;/span&gt;
&lt;a name="rest_code_d3fe9db4cc0c4fbeb6f0d9a5321628cd-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;Ready to start.&lt;/span&gt;
&lt;a name="rest_code_d3fe9db4cc0c4fbeb6f0d9a5321628cd-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;To continue we need to erase the disk at /Volumes/MyBlankUSBDrive.&lt;/span&gt;
&lt;a name="rest_code_d3fe9db4cc0c4fbeb6f0d9a5321628cd-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;If you wish to continue type (Y) then press return:&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And it works! &lt;code class="docutils literal"&gt;createinstallmedia&lt;/code&gt; will now produce valid install media.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="b-installer-from-recovery-app-store-any-macos-version"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id5"&gt;b. Installer from Recovery/App Store (any macOS version)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you are in Recovery, you can find an Install app on the filesystem. If you
try to run it, you will get the same error as in the previous paragraph:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a9132f36edad4f3ca942c529a63f3855-1"&gt;&lt;/a&gt;Install macOS Catalina.app does not appear to be a valid OS installer application.
&lt;/pre&gt;&lt;p&gt;This also happens with some older macOS versions, where you get a small
&lt;code class="docutils literal"&gt;.app&lt;/code&gt; from the App Store, and that app does the actual download.&lt;/p&gt;
&lt;p&gt;Whatever the issue was, we need to download the install files with the
installer. Open the installer and let it run until the download finishes. If
the app asks you to reboot, quit it at this point. If it never asks, you can
still find a way to get files out (after a failed install, they should not be
removed).&lt;/p&gt;
&lt;p&gt;The install files can be found in &lt;code class="docutils literal"&gt;/macOS Install Data&lt;/code&gt; on the destination
volume. For older versions, you will just have &lt;code class="docutils literal"&gt;InstallESD.dmg&lt;/code&gt;, newer
versions add more and more files, some of which are hardware-specific (and
Catalina has &lt;code class="docutils literal"&gt;InstallESDDmg.pkg&lt;/code&gt;, because Apple loves nesting archives for no
reason!). However many files you find, you can just:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;code class="docutils literal"&gt;Install macOS Catalina.app&lt;/code&gt; to a read-write volume.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy the contents of &lt;code class="docutils literal"&gt;/Volumes/TARGET/macOS Install Data&lt;/code&gt; to &lt;code class="docutils literal"&gt;Install
macOS Catalina.app/Content/SharedSupport&lt;/code&gt;. Make sure you account for hidden
files, if any (copy the entire directory). If you did this correctly,
&lt;code class="docutils literal"&gt;InstallESDDmg.pkg&lt;/code&gt; (or &lt;code class="docutils literal"&gt;InstallESD.dmg&lt;/code&gt; on older verisons) is in the &lt;code class="docutils literal"&gt;SharedSupport&lt;/code&gt;
directory (not in a subdirectory).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;createinstallmedia&lt;/code&gt;. It should now consider the installer valid. The
available options differ slightly depending on the OS version.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="el-capitan-installer-cant-be-verified"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id6"&gt;El Capitan installer can’t be verified&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you get this error, it might be because Apple’s signing keys expired, or
because of other date/time weirdness. Regardless, you can force an install if
you are sure the installer is not damaged with this command &lt;a class="reference external" href="https://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h"&gt;(source)&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_519e560123a744f68eba5c46c67627c4-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; installer -pkg  /Volumes/Mac&lt;span class="se"&gt;\ &lt;/span&gt;OS&lt;span class="se"&gt;\ &lt;/span&gt;X&lt;span class="se"&gt;\ &lt;/span&gt;Install&lt;span class="se"&gt;\ &lt;/span&gt;DVD/Packages/OSInstall.mpkg -target /Volumes/&lt;span class="s2"&gt;"XXX"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="bonus-tidbit-1-how-the-download-works"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id7"&gt;Bonus tidbit 1: how the download works&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While messing with all the installer stuff, I found out a few
interesting/worrying things about the download process.&lt;/p&gt;
&lt;p&gt;The first one is that the macOS installer uses plain HTTP without encryption to
download files. That opens you to all the standard issues — an attacker can
replace files you download, and the protocol doesn’t do anything to detect
errors (the installer will verify files, but where do the checksums come
from?).&lt;/p&gt;
&lt;p&gt;The second one is how the download happens. You might have noticed it to be a
bit slower than usual traffic. The download happens in 10 MB chunks, using the
&lt;code class="docutils literal"&gt;Range&lt;/code&gt; HTTP header. The installer asks for 10 MB, gets it, saves, asks for
another chunk. Repeat that over 800 times, and the overhead of the entire HTTP
dance becomes noticeable. (I haven’t checked, but I hope the installer at least
uses Keep-Alive. I wouldn’t be particularly surprised if it didn’t, though.)&lt;/p&gt;
&lt;p&gt;But this raises another question. The servers clearly support partial downloads.
And yet, if your network disconnects during the download, your download
progress for that file is reset, and in Catalina, you can go from 8 GB back to
500 MB if you’re particularly unlucky. The question is, why? This
infrastructure should make it trivial to continue the download, perhaps
discarding the most recent chunk if you’re concerned about that download of it
being unsuccessful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-tidbit-2-using-terminal-from-setup-assistant"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id8"&gt;Bonus tidbit 2: using Terminal from Setup Assistant&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first time you boot a Mac after a clean install, it starts the Setup
Assistant. This app asks for basic OS settings (locale, date/time, user
accounts), and also lets you restore user data from backups.&lt;/p&gt;
&lt;p&gt;Sometimes, you might want to access the Terminal or Console from that screen.
You can do that with Ctrl + Opt + Cmd + T and Ctrl + Opt + Cmd + C respectively &lt;a class="reference external" href="https://chris-collins.io/2018/03/15/Using-Terminal-At-macOS-Setup-Assistant/"&gt;(source)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How could that come in handy? For example, if you want to check if the backup
drive still worked and if the process isn’t stuck (I wrote a test file and also
checked &lt;code class="docutils literal"&gt;top&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-open-letter-to-progress-bar-designers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id9"&gt;An Open Letter to Progress Bar Designers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dear Progress Bar Designers: can you please make your progress bars
functional? The macOS progress bar might look sleek at just 7 px (non-Retina)/6
pt = 12 px (Retina) high, but at the same time, you’re looking at individual
pixels if you need to know if it works or if it’s stuck. I have had to point my
mouse cursor at the end of the filled-in part just to know if it’s working or
not. Or sometimes, put a piece of paper in front of my screen, because there is
no mouse cursor when macOS installs on the black screen. How to make
that progress bar easier to use and more informative? Just add numbers on top of
it. For long-running processes, I wouldn’t mind progress bars that said
“12.34%”. That specific Setup/Migration Assistant window should be changed (it
only has a remaining time estimate and transfer speed, it should also show
moved data/total size), but wouldn’t more things benefit from a clear
indication of the progress? Yes, perhaps it looks less sleek, perhaps it
requires more space for the bar.&lt;/p&gt;
&lt;p&gt;Just compare: which is easier to parse? Which is more informative?&lt;/p&gt;
&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 6.5px; border-radius: 6.5px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 42.42%;" aria-valuenow="42.42" aria-valuemin="0" aria-valuemax="100"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 20px; border-radius: 20px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 42.42%;" aria-valuenow="42.42" aria-valuemin="0" aria-valuemax="100"&gt;42%&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 20px; border-radius: 20px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 42.42%;" aria-valuenow="42.42" aria-valuemin="0" aria-valuemax="100"&gt;42.4%&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="mb-3"&gt;
&lt;div class="progress" style="height: 20px; border-radius: 20px;"&gt;
  &lt;div class="progress-bar" role="progressbar" style="width: 64.64%;" aria-valuenow="64.64" aria-valuemin="0" aria-valuemax="100"&gt;&lt;/div&gt;
  &lt;div style="position: absolute; text-align: center; left: 0; right: 0; margin-top: 10px;"&gt;64.64% (6.7 GB/10 GB copied)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I’d honestly be happy enough with option 2, at least it can be read easily and
you can remember the number instead of a vague position.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-end"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/#id10"&gt;In the end…&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After all this, I managed to get macOS Catalina installed. After various
failures in built-in El Capitan recovery and Catalina Internet Recovery, I first
installed El Capitan with this hack, then jumped to Mojave because I thought
the new Software Update would help (it didn’t, same installer, same
failed-to-extract-package issue), then made a Catalina USB stick, and it
finally clean-installed, but I was worried about the backup disk’s operation,
and I used a proxy on my local network to try and speed up Catalina downloads
without much improvement… but hey, at least it works. Apple should really make
it easier to install their OS and to make boot media even when stuff doesn’t
work, even from Windows. The Hackintosh folks can just find someone with a
working Mac and ask them to download from App Store and make install media, or
find less legitimate sources, they probably don’t care as much. But if my own
system crashes, I’d probably want to get working install media immediately,
myself, and from Apple. Without all this mess.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2020/06/03/reinstalling-macos-what-to-try-when-all-else-fails/</guid><pubDate>Wed, 03 Jun 2020 21:00:00 GMT</pubDate></item><item><title>Apple’s new pricing strategy: don't buy the 12″ MacBook</title><link>https://chriswarrick.com/pl/blog/2017/06/08/apples-new-pricing-strategy-dont-buy-the-12-macbook/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;On Monday, Apple announced some changes to its Mac lineup. All MacBooks (even
the Air) got CPU upgrades, and the starting price of a MacBook Pro (13″, no
Touch Bar) went down to US$1299. Which makes the 12-inch model effectively
pointless.&lt;/p&gt;
&lt;p&gt;A quick spec comparison reveals that the Pro comes with a much better CPU, GPU,
screen, camera — the only drawback is the storage space.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If you look at the cheapest MacBook in each category, you end up with this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;13″ Air, $999&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;12″, &lt;strong&gt;$1299&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13″ Pro, &lt;strong&gt;$1299&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;13″ Pro with Touch Bar, $1799&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;15″ Pro with Touch Bar, $1299&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, this is correct: a 12″ MacBook costs the same as a 13″ Pro. But is it really true? Let's compare the specs:&lt;/p&gt;
&lt;table class="table table-striped"&gt;
&lt;colgroup&gt;
&lt;col style="width: 31%"&gt;
&lt;col style="width: 29%"&gt;
&lt;col style="width: 40%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Device&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;MacBook (12″)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;MacBook Pro (13″, no Touch Bar)&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;CPU&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Intel Core m3, 1.2 GHz&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Intel Core i5, 2.3 GHz ★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Memory&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8 GB&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8 GB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Storage&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;256 GB ★&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;128 GB&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Ports&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 USB-C&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 Thunderbolt 3 (USB-C) ★★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Camera&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;480p&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;720p ★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Screen size&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;12″&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13″ ★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;External displays&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1×4K&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1×5K/2×4K/2×UHD ★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;GPU&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Intel HD Graphics 615&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Intel Iris Plus Graphics 640 ★&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Size (height×width×depth)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0.35–1.31×28.05×19.65 cm&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1.49×30.41×21.24 cm&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Weight&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0.92 kg ★&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1.37 kg&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Available in Gold/Rose Gold&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;no&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For $0 extra, you can get a device with a &lt;strong&gt;much&lt;/strong&gt; better CPU, 2 Thunderbolt 3 ports, a (slightly) larger screen, a better front-facing camera, support for larger/more displays. The “price” for this? Only less storage space, 0.45 kg (roughly 1 lb) of weight. And no gold color options.&lt;/p&gt;
&lt;p&gt;To me, this screams “don’t buy the 12-inch thing” — you can get much more &lt;em&gt;computer&lt;/em&gt; for the same price. And the CPUs in those computers are pretty poor. Last year’s base model is beaten in &lt;a class="reference external" href="https://browser.primatelabs.com/mac-benchmarks"&gt;benchmarks&lt;/a&gt; by much older (and cheaper) machines, eg. 2014’s MacBook Air, 11″ base model in single-core benchmarks and upgraded 2015 Airs in multi-core benchmarks.&lt;/p&gt;
&lt;p&gt;And even if you don’t care about the CPU, there are also other things, like the better camera, or two ports that support more devices. If you want a computer that lets you stay productive, and want a Mac, don’t even try buying the 12″ MacBook &lt;strong&gt;Abomination&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/08/apples-new-pricing-strategy-dont-buy-the-12-macbook/</guid><pubDate>Thu, 08 Jun 2017 17:35:00 GMT</pubDate></item></channel></rss>