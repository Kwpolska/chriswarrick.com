<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o Python)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/cat_python.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Sat, 08 Feb 2020 19:53:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Hackery: merging signatures of two Python functions</title><link>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Today’s blog post is going to contain fairly advanced Python hackery. We’ll
take two functions — one is a wrapper for the other, but also adds some
positional arguments.  And we’ll change the signature displayed everywhere from
the uninformative &lt;tt class="docutils literal"&gt;f(new_arg, *args, **kwargs)&lt;/tt&gt; to something more
appropriate.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This blog post was inspired by F4D3C0D3 on #python (freenode IRC). I also took
some inspiration from
Gynvael Coldwind’s classic &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;Python 101&lt;/a&gt; (April Fools) video. (Audio and some comments are in Polish, but even if you don’t speak the language, it’s still worth it to click through the time bar and see some (fairly unusual) magic happen.)&lt;/p&gt;
&lt;div class="section" id="starting-point"&gt;
&lt;h2&gt;Starting point&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""This is old's docstring."""&lt;/span&gt;
&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_60d7a6a7da7d4c6abad745cb231298a0-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s test it.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;a b&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;!a b&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' - '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;ab - !ab&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-7"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function old in module __main__:&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;old(foo, bar)&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;    This is old's docstring.&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-13"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-14"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function new in module __main__:&lt;/span&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_0e800cbe91ca45c2b1563839ef478179-16"&gt;&lt;/a&gt;&lt;span class="go"&gt;new(prefix, foo, *args, **kwargs)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The last line is not exactly informative — it doesn’t tell us that we need to
pass &lt;tt class="docutils literal"&gt;bar&lt;/tt&gt; as an argument.  Sure, you could define &lt;tt class="docutils literal"&gt;new&lt;/tt&gt; as just &lt;tt class="docutils literal"&gt;(prefix, foo,
bar)&lt;/tt&gt; — but that means every change to &lt;tt class="docutils literal"&gt;old&lt;/tt&gt; requires editing &lt;tt class="docutils literal"&gt;new&lt;/tt&gt; as
well. So, not ideal. Let’s try to fix this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-existing-infrastructure-functools-wraps"&gt;
&lt;h2&gt;The existing infrastructure: functools.wraps&lt;/h2&gt;
&lt;p&gt;First, let’s start with the basic facility Python already has.  The standard
library already comes with &lt;tt class="docutils literal"&gt;functools.wraps&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;functools.update_wrapper&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If you’ve never heard of those two functions, here’s a crash course:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-2"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Inside wrapper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-10"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Square a number."""&lt;/span&gt;
&lt;a name="rest_code_4b0624d4be964236935d8cb17a983d50-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we try to inspect the &lt;tt class="docutils literal"&gt;square&lt;/tt&gt; function, we’ll see the original name, arguments,
annotations, and the docstring.  If we ran this code again, but with the
&lt;tt class="docutils literal"&gt;@functools.wraps(f)&lt;/tt&gt; line commented out, we would only see &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wrapper(*args,&lt;/span&gt;
**kwargs)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;This approach gives us a hint of what we need to do.  However, if we apply
&lt;tt class="docutils literal"&gt;wraps&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;update_wrapper&lt;/tt&gt;, which is what &lt;tt class="docutils literal"&gt;wraps&lt;/tt&gt; ends up calling)
to our function, it will only have &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;bar&lt;/tt&gt; as arguments, and its
name will be displayed as &lt;tt class="docutils literal"&gt;old&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So, let’s take a look at &lt;a class="reference external" href="https://github.com/python/cpython/blob/4fe8dc68577f9e22aaf24db08fb6647277c42d4c/Lib/functools.py#L27-L79"&gt;functools.update_wrapper&lt;/a&gt;. What does it do? Two things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;copy some attributes from the old function to the new one
(&lt;tt class="docutils literal"&gt;__module__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__name__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__qualname__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__doc__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__annotations__&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;update &lt;tt class="docutils literal"&gt;__dict__&lt;/tt&gt; of the new function&lt;/li&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;wrapper.__wrapped__&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we try to experiment with it — by changing the list of things to copy, for
example — we’ll find out that the annotations, the docstring, and the displayed name come from
the copied attributes, but the signature itself is apparently taken from &lt;tt class="docutils literal"&gt;__wrapped__&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Further investigation reveals this fact about &lt;tt class="docutils literal"&gt;inspect.signature&lt;/tt&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;inspect.signature(callable, *, follow_wrapped=True)&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New in version 3.5:&lt;/em&gt; &lt;tt class="docutils literal"&gt;follow_wrapped&lt;/tt&gt; parameter. Pass &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; to get a signature of callable specifically (&lt;tt class="docutils literal"&gt;callable.__wrapped__&lt;/tt&gt; will not be used to unwrap decorated callables.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so, this is our &lt;strong&gt;end goal:&lt;/strong&gt;&lt;/p&gt;
&lt;p class="lead"&gt;Craft a function with a specific signature (that merges &lt;tt class="docutils literal"&gt;old&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;new&lt;/tt&gt;) and set it as &lt;tt class="docutils literal"&gt;new.__wrapped__&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;But first, we need to talk about parallel universes.&lt;/p&gt;
&lt;p&gt;Or actually, code objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-a-function-programmatically"&gt;
&lt;h2&gt;Defining a function programmatically&lt;/h2&gt;
&lt;p&gt;Let’s try an experiment.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_723281c5e9d746848f7d4a3f3e8309a1-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_723281c5e9d746848f7d4a3f3e8309a1-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__wrapped__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;a name="rest_code_723281c5e9d746848f7d4a3f3e8309a1-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_723281c5e9d746848f7d4a3f3e8309a1-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;foo(x, y)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So, there are two ways to do this.  The first one would be to generate a string
with the signature and just use &lt;tt class="docutils literal"&gt;eval&lt;/tt&gt; to get a &lt;tt class="docutils literal"&gt;__wrapped__&lt;/tt&gt; function. But
that would be cheating, and honestly, quite boring. (The inspect module could
help us with preparing the string.)  The second one? Create code objects
manually.&lt;/p&gt;
&lt;div class="section" id="code-objects"&gt;
&lt;h3&gt;Code objects&lt;/h3&gt;
&lt;p&gt;To create a function, we’ll need the &lt;tt class="docutils literal"&gt;types&lt;/tt&gt; module. &lt;tt class="docutils literal"&gt;types.FunctionType&lt;/tt&gt;
gives us a function, but it asks us for a code object. As the &lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html"&gt;docs&lt;/a&gt; state,
&lt;em&gt;Code objects represent byte-compiled executable Python code, or bytecode.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create one by
hand, we’ll need &lt;tt class="docutils literal"&gt;types.CodeType&lt;/tt&gt;. Well, not exactly by hand — we’ll end up doing a three-way merge between
&lt;tt class="docutils literal"&gt;source&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;old&lt;/tt&gt;), &lt;tt class="docutils literal"&gt;dest&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;new&lt;/tt&gt;) and &lt;tt class="docutils literal"&gt;def &lt;span class="pre"&gt;_blank():&lt;/span&gt; pass&lt;/tt&gt; (a function
that does nothing).&lt;/p&gt;
&lt;p&gt;Let’s look at the docstring for &lt;tt class="docutils literal"&gt;CodeType&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6e81522f913242bca1ac9550d6188935-1"&gt;&lt;/a&gt;code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
&lt;a name="rest_code_6e81522f913242bca1ac9550d6188935-2"&gt;&lt;/a&gt;    constants, names, varnames, filename, name, firstlineno,
&lt;a name="rest_code_6e81522f913242bca1ac9550d6188935-3"&gt;&lt;/a&gt;    lnotab[, freevars[, cellvars]])
&lt;a name="rest_code_6e81522f913242bca1ac9550d6188935-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_6e81522f913242bca1ac9550d6188935-5"&gt;&lt;/a&gt;Create a code object.  Not for the faint of heart.
&lt;/pre&gt;&lt;p&gt;All of the arguments end up being fields of a code objects (name starts with
&lt;tt class="docutils literal"&gt;co_&lt;/tt&gt;).  For each
function &lt;tt class="docutils literal"&gt;f&lt;/tt&gt;, its code object is &lt;tt class="docutils literal"&gt;f.__code__&lt;/tt&gt;. You can find the filename in
&lt;tt class="docutils literal"&gt;f.__code__.co_filename&lt;/tt&gt;, for example. The meaning of all fields can be
found in docs for the &lt;a class="reference external" href="https://docs.python.org/3/library/inspect.html#types-and-members"&gt;inspect module&lt;/a&gt;. We’ll be
interested in the following three fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;argcount&lt;/tt&gt; — number of arguments (not including keyword only arguments, * or ** args)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;kwonlyargcount&lt;/tt&gt; — number of keyword only arguments (not including ** arg)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;varnames&lt;/tt&gt; — tuple of names of arguments and local variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all the other fields, we’ll copy them from the appropriate function (one of
the three).  We don’t expect anyone to call the wrapped function directly; as
long as &lt;tt class="docutils literal"&gt;help&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;inspect&lt;/tt&gt; members don’t crash when they look into it,
we’re fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="everything-you-need-to-know-about-function-arguments"&gt;
&lt;h3&gt;Everything you need to know about function arguments&lt;/h3&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_1ca9efea8fe14c8fae3f138dfc7635e6-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_1ca9efea8fe14c8fae3f138dfc7635e6-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfullargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1ca9efea8fe14c8fae3f138dfc7635e6-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;FullArgSpec(args=['a', 'b', 'c'], varargs=None, varkw=None, defaults=(1, 2), kwonlyargs=['d'], kwonlydefaults={'d': 3}, annotations={})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A function signature has the following syntax:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Any positional (non-optional) arguments&lt;/li&gt;
&lt;li&gt;Variable positional arguments (&lt;tt class="docutils literal"&gt;*x&lt;/tt&gt;, name stored in &lt;tt class="docutils literal"&gt;varargs&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Arguments with defaults (keyword-maybe arguments); their value is stored in &lt;tt class="docutils literal"&gt;__defaults__&lt;/tt&gt; left-to-right&lt;/li&gt;
&lt;li&gt;Keyword-only arguments (after an asterisk); their values are stored in a dictionary.  Cannot be used if &lt;tt class="docutils literal"&gt;varargs&lt;/tt&gt; are defined.&lt;/li&gt;
&lt;li&gt;Variable keyword arguments (&lt;tt class="docutils literal"&gt;**y&lt;/tt&gt;, name stored in &lt;tt class="docutils literal"&gt;varkw&lt;/tt&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’re going to make one assumption: we aren’t going to support a &lt;tt class="docutils literal"&gt;source&lt;/tt&gt;
function that uses variable arguments of any kind.  So, our final signature
will be composed like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;dest&lt;/tt&gt; positional arguments&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;source&lt;/tt&gt; positional arguments&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;dest&lt;/tt&gt; keyword-maybe arguments&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;source&lt;/tt&gt; keyword-maybe arguments&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;dest&lt;/tt&gt; keyword-only arguments&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;source&lt;/tt&gt; keyword-only arguments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That will be saved into &lt;tt class="docutils literal"&gt;co_names&lt;/tt&gt;.  The first two arguments are counts —
the first one is &lt;tt class="docutils literal"&gt;len(1+2+3+4)&lt;/tt&gt; and the other is &lt;tt class="docutils literal"&gt;len(5+6)&lt;/tt&gt;. The remaining
arguments to &lt;tt class="docutils literal"&gt;CodeType&lt;/tt&gt; will be either safe minimal defaults, or things taken from
one of the three functions.&lt;/p&gt;
&lt;p&gt;We’ll also need to do one more thing: we must ensure &lt;tt class="docutils literal"&gt;__defaults__&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;__kwdefaults__&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;__annotations__&lt;/tt&gt; are all in the right places.
That’s also a fairly simple thing to do (it requires more tuple/dict merging).
And with that, we’re done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-results"&gt;
&lt;h2&gt;Final results&lt;/h2&gt;
&lt;p&gt;Before I show you the code, let’s test it out:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_285e7f2545614352aa0ce42a1732e49a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# old defined as before&lt;/span&gt;
&lt;a name="rest_code_285e7f2545614352aa0ce42a1732e49a-2"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@merge_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_285e7f2545614352aa0ce42a1732e49a-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_285e7f2545614352aa0ce42a1732e49a-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And the end result — &lt;tt class="docutils literal"&gt;help(new)&lt;/tt&gt; says:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_766fd1fa6a2b4cbe99b2efaa40627640-1"&gt;&lt;/a&gt;new(prefix, foo, bar)
&lt;a name="rest_code_766fd1fa6a2b4cbe99b2efaa40627640-2"&gt;&lt;/a&gt;    This is old's docstring.
&lt;/pre&gt;&lt;p&gt;We did it!&lt;/p&gt;
&lt;p class="lead"&gt;The code is available on &lt;a class="reference external" href="https://github.com/Kwpolska/merge_args"&gt;GitHub&lt;/a&gt; and on &lt;a class="reference external" href="https://pypi.org/project/merge-args/"&gt;PyPI&lt;/a&gt; (&lt;tt class="docutils literal"&gt;pip install merge_args&lt;/tt&gt;).
There’s also an extensive test suite.&lt;/p&gt;
&lt;p&gt;PS. you might be interested in another related post of mine, in which I
reverse-engineer the compilation of a function: &lt;a class="reference external" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/"&gt;Gynvael’s Mission 11 (en): Python bytecode reverse-engineering&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</guid><pubDate>Thu, 20 Sep 2018 13:52:20 GMT</pubDate></item><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;There are two main tools used to create virtual environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt; has
been the de facto standard tool for many years. It can be used with both
Python 2 and 3, including very old versions of Python.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; (aka pyvenv) was added to the
standard library in Python 3.3, and with the addition of &lt;tt class="docutils literal"&gt;ensurepip&lt;/tt&gt; in 3.4,
it’s an even easier way to get a virtual environment created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;virtualenv can be installed with your system package manager, or &lt;tt class="docutils literal"&gt;pip
install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;venv comes built-in with Python 3, although
Debian/Ubuntu users will need to run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/tt&gt; to
make it work. &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which one to use? It’s up to you. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;tt class="docutils literal"&gt;env&lt;/tt&gt;, use (depending on your tool of
choice):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_3c09915a8db549b091ec000d491a94e4-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b478c28202294970a8b312b7d67f7155-1"&gt;&lt;/a&gt;$ python3 -m venv env
&lt;/pre&gt;&lt;p&gt;Afterwards, you will end up with a folder named &lt;tt class="docutils literal"&gt;env&lt;/tt&gt; that contains folders
named &lt;tt class="docutils literal"&gt;bin&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;Scripts&lt;/tt&gt; on Windows — contains executables, including
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt;), &lt;tt class="docutils literal"&gt;lib&lt;/tt&gt; (contains code), and &lt;tt class="docutils literal"&gt;include&lt;/tt&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt;, but &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; does not ship with
&lt;tt class="docutils literal"&gt;wheel&lt;/tt&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick (first command is Unix, second is Windows): &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id6" id="id2"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2e227e9d482d4c5d933cd5d96040c369-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a name="rest_code_2e227e9d482d4c5d933cd5d96040c369-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;div class="section" id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Have one global place for them, like &lt;tt class="docutils literal"&gt;~/virtualenvs&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Store them in each project’s directory, like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option comes with tools that make it easier, such as
&lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/"&gt;virtualenvwrapper&lt;/a&gt;.
The second option is equally easy to work with, but comes with one caveat —
you must add the venv directory to your &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt; file, since you don’t
want it in your repository (it’s binary bloat, and works only on your machine).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;activation (run &lt;tt class="docutils literal"&gt;source env/bin/activate&lt;/tt&gt; on *nix;
&lt;tt class="docutils literal"&gt;env\Scripts\activate&lt;/tt&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly.&lt;/li&gt;
&lt;li&gt;executing &lt;tt class="docutils literal"&gt;env/bin/python&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;env\Scripts\python&lt;/tt&gt;) and other scripts directly, as
activation only changes &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is, and that
method is failsafe.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a name="rest_code_e705dc937c014ab19b3ede20747390fb-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;/pre&gt;&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;tt class="docutils literal"&gt;manage.py&lt;/tt&gt;, calling it as
&lt;tt class="docutils literal"&gt;./manage.py&lt;/tt&gt; requires activation, or you can run
&lt;tt class="docutils literal"&gt;venv/bin/python manage.py&lt;/tt&gt;.)&lt;/p&gt;
&lt;div class="section" id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option is deprecated and generally fails to
solve the problem.) &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id7" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_0b633f971a5c4d59b5a3d62a07831fb5-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a name="rest_code_0b633f971a5c4d59b5a3d62a07831fb5-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a name="rest_code_0b633f971a5c4d59b5a3d62a07831fb5-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a name="rest_code_0b633f971a5c4d59b5a3d62a07831fb5-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id8" id="id4"&gt;[4]&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;div class="section" id="do-i-need-to-install-the-virtualenv-tool-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;Do I need to install the virtualenv tool for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;tt class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/tt&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;tt class="docutils literal"&gt;sudo pip&lt;/tt&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The thing you’re actually installing is &lt;tt class="docutils literal"&gt;ensurepip&lt;/tt&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; if you want to upgrade the package manager itself.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item><item><title>Pipenv: promises a lot, delivers very little</title><link>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Pipenv is a Python packaging tool that does one thing reasonably well — application dependency management. However, it is also plagued by issues, limitations and a break-neck development process. In the past, Pipenv’s promotional material was highly misleading as to its purpose and backers.&lt;/p&gt;
&lt;p&gt;In this post, I will explore the problems with Pipenv. Was it really
recommended by Python.org? Can everyone — or at least, the vast majority
of people — benefit from it?&lt;/p&gt;
&lt;p&gt;(This post has been updated in February 2020 to reflect the current state of
Pipenv.)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#a-2020-update" id="id14"&gt;A 2020 update&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#officially-recommended-tool-or-how-we-got-here" id="id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-does" id="id16"&gt;What pipenv does&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#application-dependencies" id="id17"&gt;Application dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly" id="id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#finishing-it-all-up" id="id19"&gt;Finishing it all up&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-doesnt-do" id="id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#setup-py-source-distributions-and-wheels" id="id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#working-outside-of-the-project-root" id="id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#nikola" id="id23"&gt;Nikola&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-part-where-i-try-to-measure-times" id="id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#alternative-tools" id="id25"&gt;Alternative tools&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-tools-locking-and-hashing-and-that-is-all" id="id26"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#poetry-better-but-still-not-convincing" id="id27"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-is-here-to-stay" id="id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv" id="id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#conclusion" id="id30"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-2020-update"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id14"&gt;A 2020 update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This blog post was written in 2018, and it’s still pretty accurate when it
comes to the criticisms of Pipenv, but something else happened since then.&lt;/p&gt;
&lt;p class="lead"&gt;As of 2020, Pipenv is dead.&lt;/p&gt;
&lt;p&gt;The last release of Pipenv was in November 2018. No new releases were made in
2019. There were about 683 new commits made to Pipenv since then, but this is
fairly slow progress considering this project’s status and previous
release cadence. The developers claimed &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/4058#issuecomment-565550646"&gt;a new release is in the works&lt;/a&gt; in
mid December, but not much has happened in almost 2 months since that post.
All in all, Pipenv is effectively not maintained anymore. Yes, one of the
chapters in this post is &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv"&gt;The break-neck pace of Pipenv&lt;/a&gt;, and that is a
problem. But zero updates in over a year to a packaging tool is also worrying.
Pip has updates every few months in a fairly stable pace (with the exception of
emergency bugfixe releases), and Pip has years of development behind it, unlike
the fairly new pipenv.&lt;/p&gt;
&lt;p&gt;In February 2020, the &lt;em&gt;Alternative tools&lt;/em&gt; section was updated to remove
mentions of Hatch, and pip-tools was added. Poetry information was updated:
it’s kinda slow, and the documentation is lacking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="officially-recommended-tool-or-how-we-got-here"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pipenv’s README used to have a version of the above line in their README for
many months: it was added on  &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6e06fc451767a57e6fccb828c74a1412f6cef687"&gt;2017-08-31&lt;/a&gt; and eventually disappeared on &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/47debed9a1c2a3649bef4d59a3f1cf01bf059522"&gt;2018-05-19&lt;/a&gt;. For a short while (2018-05-16), it was clarified (&lt;em&gt;managing application dependencies&lt;/em&gt;, and &lt;em&gt;PyPA&lt;/em&gt; instead of &lt;em&gt;Python.org&lt;/em&gt;), and for about 15 minutes, the tagline called Pipenv &lt;em&gt;the world’s worst&lt;/em&gt; or &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6d77e4a0551528d5d72d81e8a15da4722ad82f26"&gt;something&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/1c956d37e6ad20babdb5021610b2ed2c9c4203f2"&gt;along&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/e3c72e167d21b921bd3bd89d4217b04628919bb2"&gt;these&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/fe78628903948013e8687d1a3be9fd4da2b6bd3d"&gt;lines&lt;/a&gt; (this coming from the maintainer).&lt;/p&gt;
&lt;p&gt;The README tagline claimed that Pipenv is the be-all, end-all of Python
packaging. The problem is: it isn’t that. There are some use cases that benefit
from Pipenv, but for many others, trying to use that tool will only lead to
frustration. We will explore this issue later.&lt;/p&gt;
&lt;p&gt;Another issue with this tagline was the &lt;em&gt;Python.org&lt;/em&gt; and &lt;em&gt;official&lt;/em&gt; parts. The
thing that made it “official” was a &lt;a class="reference external" href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;short tutorial&lt;/a&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id10" id="id1"&gt;1&lt;/a&gt; on packaging.python.org,
which is the PyPA’s packaging user guide. Also of note is the &lt;em&gt;Python.org&lt;/em&gt;
domain used. It makes it sound as if Pipenv was endorsed by the Python core
team. PyPA (Python Packaging Authority) is a separate organization — they are
responsible for the packaging parts (including pypi.org, setuptools, pip,
wheel, virtualenv, etc.) of Python. This made the endorsement misleading. Of
course, PyPA is a valued part of the Python world; an endorsement by the core
team — say, &lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html"&gt;inclusion in official Python distributions&lt;/a&gt; — is something far more
important.&lt;/p&gt;
&lt;p&gt;This tagline has led to many discussions and flamewars, perhaps with &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/"&gt;this
Reddit thread from May&lt;/a&gt; being the most heated and most important. The change
was the direct result of this Reddit thread. I recommend reading this thread in
full.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-does"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id16"&gt;What pipenv does&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve already learned that Pipenv is used to &lt;em&gt;manage application dependencies&lt;/em&gt;.
Let’s learn what that term really means.&lt;/p&gt;
&lt;div class="section" id="application-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id17"&gt;Application dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is an example use case for Pipenv:
I’m working on a website based on Django.  I create &lt;code class="docutils literal"&gt;~/git/website&lt;/code&gt; and run
&lt;code class="docutils literal"&gt;pipenv install Django&lt;/code&gt; in that directory.  Pipenv:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;automatically creates a virtualenv somewhere in my home directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;writes a Pipfile, which lists Django as my dependency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;installs Django using pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;proceeds to write &lt;code class="docutils literal"&gt;Pipfile.lock&lt;/code&gt;, which stores the exact version and source file hash &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id11" id="id5"&gt;2&lt;/a&gt; of each package installed (including &lt;code class="docutils literal"&gt;pytz&lt;/code&gt;, Django’s dependency).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part of the process was the most time consuming. At one point, while
locking the dependency versions, Pipenv hangs for 46 seconds. This is one of
Pipenv’s notable issues: &lt;strong&gt;it’s slow.&lt;/strong&gt; Of course, this isn’t the only one,
but it defintely doesn’t help. Losing 46 seconds isn’t much, but when we get to
the longer waits in the timing test section later, we’ll see something that
could easily discourage users from using a package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-scripts-badly"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But let’s continue with our workflow. &lt;code class="docutils literal"&gt;pipenv run &lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject
foobanizer&lt;/code&gt; is what I must use now, which is rather unwieldy to type, and
requires running pipenv even for the smallest things. (The &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt; script
has &lt;code class="docutils literal"&gt;/usr/bin/env python&lt;/code&gt; in its shebang.) I can run &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; to get
a new shell which runs the &lt;code class="docutils literal"&gt;activate&lt;/code&gt; script by default, giving you the worst
of both worlds when it comes to virtualenv activation: the unwieldiness of a
new shell, and the activate script, which the proponents of the shell spawning
dislike.&lt;/p&gt;
&lt;p&gt;Using &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; means spawning a new subshell, executing the shell
startup scripts (eg. &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt;), and requiring you to exit with &lt;code class="docutils literal"&gt;exit&lt;/code&gt; or
^D. If you type &lt;code class="docutils literal"&gt;deactivate&lt;/code&gt;, you are working with an extra shell, but now
outside of the virtualenv. Or you can use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--fancy&lt;/span&gt;&lt;/code&gt; mode that manipulates
&lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; before launching the subshell, but it requires a specific shell
configuration, in which &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; is not overridden in non-login shells — and
also often changing the config of your terminal emulator to run a login shell,
as many of the Linux terminals don’t do it.&lt;/p&gt;
&lt;p&gt;Now, why does all this happen? Because a command cannot manipulate the
environment of the shell it spawns. This means that Pipenv must pretend what it
does is a reasonable thing instead of a workaround. This can be solved with
manual activation using &lt;code class="docutils literal"&gt;source $(pipenv &lt;span class="pre"&gt;--venv)/bin/activate&lt;/span&gt;&lt;/code&gt; (can be made
into a neat alias), or shell wrappers (similar to what virtualenvwrapper does).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finishing-it-all-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id19"&gt;Finishing it all up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Anyway, I want a blog on my site. I want to write them in Markdown syntax, so I
run &lt;code class="docutils literal"&gt;pipenv install Markdown&lt;/code&gt;, and a few long seconds later, it’s added to
both Pipfiles.  Another thing I can do is &lt;code class="docutils literal"&gt;pipenv install &lt;span class="pre"&gt;--dev&lt;/span&gt; ipython&lt;/code&gt; and
get a handy shell for tinkering, but it will be marked as a development
dependency — so, not installed in production. That last part is an important
advantage of using Pipenv.&lt;/p&gt;
&lt;p&gt;When I’m done working on my website, I commit both Pipfiles to my git
repository, and push it to the remote server. Then I can clone it to, say,
&lt;code class="docutils literal"&gt;/srv/website&lt;/code&gt;. Now I can just &lt;code class="docutils literal"&gt;pipenv install&lt;/code&gt; to get all the production
packages installed (but not the development ones — Django, pytz, Markdown will
be installed, but IPython and all its million dependencies won’t). There’s just
one caveat: by default, the virtualenv will still be created in the current
user’s home directory. This is a problem in this case, since it needs to be
accessible by &lt;a class="reference external" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/"&gt;nginx and uWSGI&lt;/a&gt;, which do not have access to my (or root’s)
home directory, and don’t have a home directory of their own.  This can be
solved with &lt;code class="docutils literal"&gt;export PIPENV_VENV_IN_PROJECT=1&lt;/code&gt;. But note that I will now need
to export this environment variable every time I work with the app in &lt;code class="docutils literal"&gt;/srv&lt;/code&gt;
via Pipenv. The tool supports loading &lt;code class="docutils literal"&gt;.env&lt;/code&gt; files, &lt;strong&gt;but&lt;/strong&gt; only when
running &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; and &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;. You can’t use it to configure
Pipenv. And to run my app with nginx/uWSGI, I will need to know the exact virtualenv
path anyway, since I can’t use &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt; as part of uWSGI configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-doesnt-do"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The workflow I mentioned above looks pretty reasonable, right? There are some
deficiencies, but other than that, it seems to work well. The main issue with
Pipenv is: &lt;strong&gt;it works with one workflow, and one workflow only.&lt;/strong&gt; Try to do
anything else, and you end up facing multiple obstacles.&lt;/p&gt;
&lt;div class="section" id="setup-py-source-distributions-and-wheels"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pipenv only concerns itself with managing dependencies. &lt;strong&gt;It isn’t a packaging
tool.&lt;/strong&gt; If you want your thing up on PyPI, Pipenv won’t help you with anything.
You still need to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; with &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;, because the
Pipfile format only specifies the dependencies and runtime requirements (Python
version), there is no place in it for the package name, and Pipenv does not
mandate/expect you to install your project. It can come in handy to manage the
development environment (as a &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; replacement, or something
used to write said file), but if your project has a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;, you still
need to manually manage &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;. Pipenv can’t create wheels on its
own either. And &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; is going to be a lot faster than Pipenv ever
will be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-outside-of-the-project-root"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another issue with Pipenv is the use of the working directory to select
the virtual environment. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id12" id="id6"&gt;3&lt;/a&gt; Let’s say I’m a library author.  A user of my &lt;code class="docutils literal"&gt;foobar&lt;/code&gt;
library has just reported a bug and attached a &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; file that lets me
reproduce the issue. I download that file to &lt;code class="docutils literal"&gt;~/Downloads&lt;/code&gt; on my filesystem.
With plain old virtualenv, I can easily confirm the reproduction in a spare
shell with:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_23a2a42663984ef8955c374a6b82758e-1"&gt;&lt;/a&gt;$ ~/virtualenvs/foobar/bin/python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;And then I can launch my fancy IDE to fix the bug.  I don’t have to &lt;code class="docutils literal"&gt;cd&lt;/code&gt; into
the project. But with Pipenv, I can’t really do that.  If I put the virtualenv
in &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; with the command line option, I can type
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv/bin/python&lt;/span&gt; ~/Downloads/repro.py&lt;/code&gt;. If I use the
centralized directory + hashes thing, Tab completion becomes mandatory, if I
haven’t memorized the hash.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_f8a42989f5374ffa94f098a8d1233c16-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_f8a42989f5374ffa94f098a8d1233c16-2"&gt;&lt;/a&gt;$ pipenv run python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;What if I had two &lt;code class="docutils literal"&gt;.py&lt;/code&gt; files, or &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; otherwise depended on being in
the current working directory?&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_176908c053d0409db2fb97c4b1b64fca-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_176908c053d0409db2fb97c4b1b64fca-2"&gt;&lt;/a&gt;$ pipenv shell
&lt;a name="rest_code_176908c053d0409db2fb97c4b1b64fca-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_176908c053d0409db2fb97c4b1b64fca-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_176908c053d0409db2fb97c4b1b64fca-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;  &lt;span class="c1"&gt;# (not deactivate!)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;This is becoming ugly fairly quickly.&lt;/strong&gt; Also, with virtualenvwrapper, I can
do this:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_5a8b1ac6f9eb46ea93e0177c94e6acf4-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_5a8b1ac6f9eb46ea93e0177c94e6acf4-2"&gt;&lt;/a&gt;$ workon foobar
&lt;a name="rest_code_5a8b1ac6f9eb46ea93e0177c94e6acf4-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_5a8b1ac6f9eb46ea93e0177c94e6acf4-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;p&gt;And let’s not forget that Pipenv doesn’t help me to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;,
distribute code, or manage releases.  It just manages dependencies.  And it
does it pretty badly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nikola"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id23"&gt;Nikola&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m a co-maintainer of a static site generator, &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt;.  As part of this, I have the following places where
I need to run Nikola:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-site&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-plugins&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-themes&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/website&lt;/code&gt; (this blog)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;/Volumes/RAMDisk/n&lt;/code&gt; (demo site, used for testing and created when needed, on a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RAM_drive"&gt;RAM disk&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That list is long.  End users of Nikola probably don’t have a list that long,
but they might just have more than one Nikola site.  For me, and for the
aforementioned users, Pipenv does not work.  To use Pipenv, all those
repositories would need to live in one directory. I would also need to have a
&lt;em&gt;separate&lt;/em&gt; Pipenv environment for &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;nikola-users&lt;/span&gt;&lt;/code&gt;, because that needs Django.
Moreover, the Pipfile would have to be symlinked from &lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt; if we
were to make use of those in the project.  So, I would have a &lt;code class="docutils literal"&gt;~/nikola&lt;/code&gt;
directory just to make Pipenv happy, do testing/bug reproduction on a SSD (and
wear it out faster), and so on… Well, I could also use the virtualenv directly.
But in that case, Pipenv loses its usefulness, and makes my workflow more
complicated. I can’t use &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, because I would need to hack a
fuzzy matching system onto it, or memorize the random string appended to my
virtualenv name.  All because Pipenv relies on the current directory too much.&lt;/p&gt;
&lt;p&gt;Nikola end users who want to use Pipenv will also have a specific directory
structure forced on them. What if the site serves as docs for a project, and
lives inside another project’s repo? Two virtualenvs, 100 megabytes wasted.
Or worse, Nikola ends up in the other project’s Pipfile, which is technically
good for our download stats, but not really good for the other project’s
contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-try-to-measure-times"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pipenv is famous for being slow.  But how slow is it really?
I put it to the test.  I used two test environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Remote: a DigitalOcean VPS, the cheapest option (1 vCPU), Python 3.6/Fedora
28, in Frankfurt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local: my 2015 13” MacBook Pro (base model), Python 3.7, on a rather slow
Internet connection (10 Mbps on a good day, and the test was not performed on
one of them)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both were runninng Pipenv 2018.7.1, installed from pip.&lt;/p&gt;
&lt;p&gt;And with the following cache setups:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Removed: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.cache/pipenv&lt;/span&gt;&lt;/code&gt; removed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Partial: &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/depcache-py*.json&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/hash-cache/&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kept: no changes done from previous run&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, turns out Pipenv likes doing strange things with caching and locking.  A
look at the Activity Monitor hinted that there is network activity going on
when Pipenv displays its &lt;em&gt;Locking [packages] dependencies...&lt;/em&gt; line and
hangs. Now, the docs don’t tell you that. The most atrocious example was a
local Nikola install that was done in two runs: the first &lt;code class="docutils literal"&gt;pipenv install
Nikola&lt;/code&gt; run was interrupted &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id13" id="id8"&gt;4&lt;/a&gt; right after it was done installing packages,
so the cache had all the necessary wheels in it. The install took 10 minutes
and 7 seconds, 9:50 of which were taken by locking dependencies and installing
the locked dependencies — so, roughly nine and a half minutes were spent
staring at a static screen, with the tool doing &lt;em&gt;something&lt;/em&gt; in the background —
and Pipenv doesn’t tell you what happens in this phase.&lt;/p&gt;
&lt;p&gt;(Updated 2018-07-22: In the pipenv measurements: the first entry is the total
time of pipenv executon. The second is the long wait for pipenv to do its
“main” job: locking dependencies and installing them. The timing starts when
pipenv starts locking dependencies and ends when the prompt appears. The third
item is pipenv’s reported installation time.  So, pipenv install ⊇ locking/installing ⊇ Pipfile.lock install.)&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;colgroup&gt;
&lt;col style="width: 4%"&gt;
&lt;col style="width: 26%"&gt;
&lt;col style="width: 10%"&gt;
&lt;col style="width: 10%"&gt;
&lt;col style="width: 21%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Task&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Action&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Measurement
method&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Environment&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Cache&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" colspan="4"&gt;&lt;p&gt;Times in seconds&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Attempt 1&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 2&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 3&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Average&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.911&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4.052&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.914&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.959&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.562&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.943&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.773&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.759&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.404&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.681&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.569&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.551&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.536&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;62.973&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;71.305&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.271&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;42.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.9&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13.667&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to an environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (only Nikola in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to another environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (both in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.612&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.666&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.665&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.648&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.333&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django (new env)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;9&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola (cached)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial, after interruption&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(10m 7s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(9m 50s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(L/I: 10.51 s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id25"&gt;Alternative tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python packaging is something with the state of which nobody seems to be
satisfied. As such, there are many new contenders for the role of “best new
packaging tool”.&lt;/p&gt;
&lt;p&gt;Two popular alternatives packaging tools are &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; (by Vincent Driessen
and Jazzband) and &lt;a class="reference external" href="https://github.com/sdispater/poetry"&gt;Poetry&lt;/a&gt; (by Sébastien Eustace).&lt;/p&gt;
&lt;div class="section" id="pip-tools-locking-and-hashing-and-that-is-all"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id26"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pip-tools&lt;/strong&gt; contains two tools. The first one is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt;. It locks
dependencies in &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files, and that’s all it does. It allows
updating dependencies in the file based on what’s on PyPI. You can optionally
add hashes to that file. The second tool is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-sync&lt;/span&gt;&lt;/code&gt;. It will synchronize
your virtualenv and the requirements file: it will delete packages not in that
file, so that you don’t work with stuff not declared in requirements, and will
ensure versions match the requirements file.  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; takes roughly
10-20 seconds to run in the Nikola repo with a clean pip-tools cache (but with
the pip cache intact).&lt;/p&gt;
&lt;p&gt;Its speed is fairly reasonable, and it does not try to be the be-all-end-all
tool for development. It handles a specific task, does it well, and does not
try to handle tasks it should not. Pip-tools lets you work with venvs in any
way you like, and it does not require anything specific. Unlike Pipenv and
Poetry, you can install it into the virtualenvs that need it, and not
system-wide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poetry-better-but-still-not-convincing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id27"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Poetry&lt;/strong&gt; is somewhere in between. Its main aim is close to Pipenv, but it
also makes it possible to distribute things to PyPI. It tries really hard to
hide that it uses Pip behind the scenes. Its README comes with an extensive
&lt;a class="reference external" href="https://github.com/sdispater/poetry#what-about-pipenv"&gt;“What about Pipenv?”&lt;/a&gt;
section, which I recommend reading — it has a few more examples of bad Pipenv
features.  Poetry claims to use the standardized (PEP 518) &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt;
file to replace the usual lot of files. Unfortunately, the only thing that is
standardized is the file name and syntax. Poetry uses custom &lt;code class="docutils literal"&gt;[tool.poetry]&lt;/code&gt;
sections, which means that one needs Poetry to fully use the packages created
with it, leading to vendor lock-in. There is a &lt;code class="docutils literal"&gt;build&lt;/code&gt; feature to produce a
sdist with setup.py and friends.&lt;/p&gt;
&lt;p&gt;In February 2020, in a simple &lt;code class="docutils literal"&gt;poetry add Nikola&lt;/code&gt; test, it took &lt;strong&gt;about a
minute&lt;/strong&gt; (55.1/50.8/53.6 s) to resolve dependencies (according to Poetry’s own
count, Local environment, Poetry cache removed), complete with reassuring output and
no quiet lockups.  Not as good as pip, but it’s more reasonable than Pipenv.
Also, the codebase and its layout are rather convoluted, and the docs are very
sparse and lacking. Poetry produces packages instead of just managing
dependencies, so it’s generally more useful than Pipenv. That said, I am not
convinced by that tool either.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-is-here-to-stay"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But in all the talk about new tools, we’re forgetting about the old ones, and
they do their job well — so well in fact, that the new tools still need them
under the covers.&lt;/p&gt;
&lt;p&gt;Pip is fast. It does its job well enough. It lacks support for splitting
packages between production and development (as Pipenv and Poetry do). This
means that &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip install&lt;/code&gt; are instant, at the cost of (a)
needing two separate environments, or (b) installing development dependencies
in production (which &lt;em&gt;should&lt;/em&gt; only be a waste of HDD space and nothing more in
a well-architected system). But at the same time, pip-tools can help keep the
environments separate, as long as you take some time to write separate
&lt;code class="docutils literal"&gt;requirements.in&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The virtualenv management features can be provided by virtualenvwrapper. That
tool’s main advantage is the shell script implementation, which means that
&lt;code class="docutils literal"&gt;workon foo&lt;/code&gt; activates the &lt;code class="docutils literal"&gt;foo&lt;/code&gt; virtualenv without spawning a new
subshell (an issue with Pipenv and Poetry, that I already covered when
describing Pipenv’s operation in the &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly"&gt;Running scripts (badly)&lt;/a&gt; chapter.) An
argument often raised by Pipenv proponents is that one does not need to concern
itself with creating the virtualenv, and doesn’t need to care where it is.
Unfortuntately, many tools require this knowledge from their user, or force a
specific location, or require it to be different to the home directory.&lt;/p&gt;
&lt;p&gt;And for a reasonable project template with release automation — well, I have my
own entry in that category, called (rather unoriginally) the &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project
Template (PyPT)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, setup.py files are not ideal, since they use &lt;code class="docutils literal"&gt;.py&lt;/code&gt; code and a function
execution, making access to meta information hard (&lt;code class="docutils literal"&gt;./setup.py egg_info&lt;/code&gt;
creates tool-accessible text files). Their main advantage is that they are the
&lt;em&gt;only&lt;/em&gt; format that is widely supported — pip is the de-facto default
Python package manager (which is pre-installed on Windows and Mac), and other
tools would require installation/bootstrapping first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-break-neck-pace-of-pipenv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good packaging tool is stable. In other words, it doesn’t change often, and
it strives to support existing environments. It wouldn’t be fun to re-download
everything on your system, because someone decided that &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; is now called
&lt;code class="docutils literal"&gt;/stuff&lt;/code&gt;, and all the files in &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; would become forgotten and not
removed. Well, this is what Pipenv did:&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;colgroup&gt;
&lt;col style="width: 11%"&gt;
&lt;col style="width: 89%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Date/Time (UTC)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Event&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-01-31 22:01&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.2.14 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;./.venv&lt;/span&gt;&lt;/code&gt; (eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foo/.venv&lt;/span&gt;&lt;/code&gt;). Last version with the original behavior of pipenv.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 05:36&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.0 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo&lt;/span&gt;&lt;/code&gt; (to be precise, &lt;code class="docutils literal"&gt;$WORKON_HOME/foo&lt;/code&gt;).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/178"&gt;Issue #178&lt;/a&gt; is reported regarding the behavior change.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:18&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “no plans for making it configurable.” and closes the issue.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 03:05&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “added &lt;code class="docutils literal"&gt;PIPENV_VENV_IN_PROJECT&lt;/code&gt; mode for classic operation. Not released yet.”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 04:29&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.3 released. The default is still uses a “remote” location, but &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; can now be used.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-03-02 13:48&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.5.0 released. The new default path is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$WORKON_HOME/foo-HASH&lt;/span&gt;&lt;/code&gt;, eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo-7pl2iuUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Over the course of a month, the location of the virtualenv changed twice. If
the user didn’t read the changelog and didn’t manually intervene (also of note,
the option name was mentioned in the issue and in v3.3.4’s changelog), they
would have a stale &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; directory, since the new scheme was adopted for
them. And then, after switching to v3.5.0, they would have a stale virtualenv
hidden somewhere in their home directory, because pipenv decided to add hashes.&lt;/p&gt;
&lt;p&gt;Also, this is not configurable. One cannot disable the hashes in paths, even
though &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/589"&gt;users&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/1049"&gt;wanted&lt;/a&gt; to. It would also help people
who want to mix Pipenv and virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Pipenv is a very &lt;strong&gt;opinionated&lt;/strong&gt; tool, and if the dev team changes their mind,
the old way is not supported.&lt;/p&gt;
&lt;p&gt;Pipenv moves fast and doesn’t care if anything breaks. As an example, between
2018-03-13 13:21 and 2018-03-14 13:44 (a little over 24 hours), Pipenv had 10
releases, ranging from v11.6.2 to v11.7.3. The &lt;a class="reference external" href="https://github.com/pypa/pipenv/blob/25df09c171a548fd71d4df735767bf763a653b83/HISTORY.txt"&gt;changelog&lt;/a&gt; is rather unhelpful
when it comes to informing users what happened in each of the releases.&lt;/p&gt;
&lt;p&gt;Extra reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://web.archive.org/web/20180717140106/https://journal.kennethreitz.org/entry/r-python"&gt;Kenneth Reitz, A Letter to /r/python (with some notes about bipolar disorder)&lt;/a&gt; (replaced with Wayback Machine link on 2020-02-07)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reddit comment threads for the letter: &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kdfd6/kenneth_reitz_a_letter_to_rpython_with_some_notes/"&gt;first&lt;/a&gt; and &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kjv8x/a_letter_to_rpython_kenneth_reitzs_journal/"&gt;second&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id30"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pipenv, contrary to popular belief and (now removed) propaganda, is not an
officially recommended tool of Python.org. It merely has a tutorial written
about it on packaging.python.org (page run by the PyPA).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv solves one use case reasonably well, but fails at many others, because
it forces a particular workflow on its users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv does not handle any parts of packaging (cannot produce sdists and
wheels).  Users who want to upload to PyPI need to manage a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file
manually, alongside and independently of Pipenv.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv produces lockfiles, which are useful for reproducibility, at the cost
of installation speed. The speed is a noticeable issue with the tool. &lt;code class="docutils literal"&gt;pip
freeze&lt;/code&gt; is good enough for this, even if there are no dependency classes
(production vs development) and no hashes (which
have minor benefits) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id11" id="id9"&gt;2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hatch attempts to replace many packaging tools, but some of its practices and
ideas can be questionable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Poetry supports the same niche Pipenv does, while also adding the ability to
create packages and improving over many gripes of Pipenv. A notable issue is
the use of a custom all-encompassing file format, which makes switching tools
more difficult (vendor lock-in).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pip, setup.py, and virtualenv — the traditional, tried-and-true tools — are
still available, undergoing constant development. Using them can lead to a
simpler, better experience.  Also of note, tools like virtualenvwrapper
can manage virtualenvs better than the aforementioned new Python tools,
because it is based on shell scripts (which can modify the enivironment).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id10"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;On a side note, the tutorial explains nothing. A prospective user only learns it’s similar to npm or bundler (what does that mean?), installs one package, and runs a &lt;code class="docutils literal"&gt;.py&lt;/code&gt; file through &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id11"&gt;&lt;span class="brackets"&gt;2&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id5"&gt;1&lt;/a&gt;,&lt;a href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id9"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Note that one can’t change the file on PyPI after uploading it, so this would only be protection against rogue PyPI admins or a MitM attack (in which case you’ve got bigger problems anyways). &lt;a class="reference external" href="https://github.com/nedbat/coveragepy/issues/679#issuecomment-406396761"&gt;Also, the feature is fairly broken.&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id12"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id6"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Fortunately, it looks in the parent directories for Pipfiles as well. Otherwise, you might end up with one environment for &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and another for &lt;code class="docutils literal"&gt;foo/foo&lt;/code&gt; and yet another for &lt;code class="docutils literal"&gt;foo/docs&lt;/code&gt; and so on…&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id13"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id8"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The interruption happened by mistake due to the RAM disk running out of space, but it was actually a good thing to have happened.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr class="docutils"&gt;
&lt;p class="alert alert-info"&gt;&lt;strong&gt;Other discussion threads:&lt;/strong&gt; &lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/a3h81m/pipenv_promises_a_lot_delivers_very_little/"&gt;r/Python&lt;/a&gt;, &lt;a class="reference external" href="https://news.ycombinator.com/item?id=18612590"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</guid><pubDate>Tue, 17 Jul 2018 17:40:00 GMT</pubDate></item><item><title>Misja Gynvaela 11 (stream anglojęzyczny): reverse-engineering bajtkodu Pythona</title><link>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Gynvael Coldwind jest badaczem bezpieczeństwa pracującym w Google, który organizuje cotygodniowe livestreamy na tematy bezpieczeństwa i programowania &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;po polsku&lt;/a&gt; i  &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;po angielsku&lt;/a&gt;). Częścią streamów są misje — w skrócie, zadania w stylu CTF-owym dotyczące inżynierii wstecznej. Wczorajsza misja była o elfickim — znaczy o Paint’cie — znaczy o programowaniu w Pythonie i jego bajtkodzie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-9"&gt;&lt;/a&gt;files.
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-19"&gt;&lt;/a&gt;Good luck!
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a name="rest_code_ba1c60ff19144350909d8e409f07a36f-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;p&gt;Kod firmware:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-3"&gt;&lt;/a&gt;co_flags 67
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-4"&gt;&lt;/a&gt;co_name check_password
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a name="rest_code_772f3dc1eb1d4713b2592cef283d159f-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Dla niewtajemniczonych to może wyglądać na &lt;em&gt;elficki&lt;/em&gt;. W rzeczywistości jest to bajtkod Pythona — zestaw instrukcji używany przez maszynę wirtualną Pythona (CPython 2.7.) Python, podobnie jak wiele innych języków, używa kompilatora do tłumaczenia kodu źródłowego czytelnego dla ludzi na coś bardziej odpowiedniego dla komputerów. Kod Pythona tłumaczony jest na bajtkod, który jest wykonywany przez maszynę wirtualną CPythona. Bajtkod CPythona może być używany na różnym sprzęcie, podczas gdy kod maszynowy nie może. Z drugiej strony kod maszynowy jest zazwyczaj szybszy niż języki oparte na maszynach wirtualnych i bajtkodzie. (Java i C# działają tak jak Python, C jest tłumaczone prosto do kodu maszynowego)&lt;/p&gt;
&lt;p&gt;To jest wewnętrzna reprezentacja funkcji Pythona. Pierwsze kilka linii to zmienne należące do obiektu &lt;tt class="docutils literal"&gt;f.__code__&lt;/tt&gt; naszej funkcji. Wiemy, że funkcja:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ma 1 argument&lt;/li&gt;
&lt;li&gt;ma 7 stałych: None, długi ciąg cyfr hex, i liczby: 89, 255, 115 ,50.&lt;/li&gt;
&lt;li&gt;ma &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flagi&lt;/a&gt; ustawione na 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). Jest to “standardowa” wartość używana przez większość nieskomplikowanych funkcji.&lt;/li&gt;
&lt;li&gt;nazywa się &lt;tt class="docutils literal"&gt;check_password&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;używa następujących zmiennych globalnych lub nazw atrybutów: &lt;tt class="docutils literal"&gt;decode&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;len&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;all&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;ma 4 zmienne lokalne&lt;/li&gt;
&lt;li&gt;używa stosu o rozmiarze 6&lt;/li&gt;
&lt;li&gt;jej zmienne nazywają się &lt;tt class="docutils literal"&gt;s&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;good&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cs&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cg&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Są dwa sposoby na rozwiązanie tego zadania: można spróbować zreasemblować wyjście &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; przy pomocy modułu &lt;tt class="docutils literal"&gt;opcode&lt;/tt&gt; lub odtworzyć funkcję ręcznie, używając bajtkodu. Wybrałem tę drugą opcję.&lt;/p&gt;
&lt;div class="section" id="reverse-engineering-bajtkodu-pythona-reczne-odtwarzanie-funkcji"&gt;
&lt;h2&gt;Reverse-engineering bajtkodu Pythona: ręczne odtwarzanie funkcji&lt;/h2&gt;
&lt;p&gt;Zacząłem od odtworzenia oryginalnego pliku z firmware’em. Utworzyłem pustą funkcję i napisałem trochę kodu, który wypisuje zawartość &lt;tt class="docutils literal"&gt;__code__&lt;/tt&gt; i wyjście &lt;tt class="docutils literal"&gt;dis.dis&lt;/tt&gt;. Dodałem też kolorowanie wyjścia, by łatwiej się czytało:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_074704c41ff14df8a0254abf18f92ee3-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli uruchomimy ten solver, otrzymamy następujące wyjście (tekst w nawiasach kwadratowych dopisany przeze mnie):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 się zgadza]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-5"&gt;&lt;/a&gt;co_names ()              [0/6 się zgadza]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-6"&gt;&lt;/a&gt;co_nlocals 1             [powinno być 4]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-7"&gt;&lt;/a&gt;co_stacksize 1           [powinno być 6]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 się zgadza]
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a name="rest_code_63137902ef054cae8dd072fef34673fc-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy (przy pomocy kolorów, których tu nie ma), że &lt;tt class="docutils literal"&gt;co_argcount&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;co_flags&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;co_name&lt;/tt&gt; są ustawione poprawnie. Mamy też jedną ze zmiennych (&lt;tt class="docutils literal"&gt;None&lt;/tt&gt;, jest w każdej funkcji) i jedną nazwę zmiennej (nazwę argumentu &lt;tt class="docutils literal"&gt;s&lt;/tt&gt;). Widzimy wyjście &lt;tt class="docutils literal"&gt;dis.dis()&lt;/tt&gt;. O ile jest podobne do tego z zadania, to jest kilka zauważalnych różnic: nie ma &lt;tt class="docutils literal"&gt;7&lt;/tt&gt; na początku (numer linii), a instrukcje &lt;tt class="docutils literal"&gt;LOAD_CONST&lt;/tt&gt; nie miały niczego w nawiasach (tylko porównania i pętle coś miały). To utrudnia czytanie bajtkodu, ale to jest wciąż możliwe. (Początkowo chciałem sobie pomóc narzędziem &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt;, ale nie jest trudno to zrobić ręcznie. Użyłem &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; do ostatecznego sprawdzenia po ręcznej „konwersji”)&lt;/p&gt;
&lt;p&gt;Zatrzymajmy się na chwilę i spójrzmy na stałe i nazwy. Po długim stringu pojawia się &lt;tt class="docutils literal"&gt;hex&lt;/tt&gt;, a jedną ze stałych jest &lt;tt class="docutils literal"&gt;decode&lt;/tt&gt;. To znaczy, że musimy użyć &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/tt&gt; by utworzyć (byte)string z pewną informacją. Odpowiedzi do misji są czytelne dla ludzi, a ten string nie jest — więc musimy zrobić coś więcej.&lt;/p&gt;
&lt;p&gt;Spróbujmy odtworzyć oryginalny kod misji. VM Pythona opiera się na stosie. W bajtkodzie powyżej widzimy, że instrukcje przyjmują 0 lub 1 argument. Niektóre z nich dodają obiekty na stos, inne wykonują akcje i usuwają rzeczy ze stosu. Większość nazw instrukcji jest łatwa do zrozumienia, ale pełna lista jest dostępna w &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacji modułu dis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instrukcje takie jak &lt;tt class="docutils literal"&gt;LOAD&lt;/tt&gt; czy &lt;tt class="docutils literal"&gt;STORE&lt;/tt&gt; odwołują się do indeksów w krotkach constants/names/varnames. Aby było łatwiej, oto “tabelka” tych indeksów:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-1"&gt;&lt;/a&gt;constants
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a name="rest_code_c8cd2c5ee8e44617ab5b8097eedfacc7-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;p&gt;W celu poprawienia czytelności, użyję “nowe” wyjście &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; z nazwami w nawiasach poniżej:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_4f5e5c3a05ce43849ab287afab398776-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a name="rest_code_4f5e5c3a05ce43849ab287afab398776-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a name="rest_code_4f5e5c3a05ce43849ab287afab398776-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a name="rest_code_4f5e5c3a05ce43849ab287afab398776-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # funkcja pobiera 1 argument ze stosu
&lt;a name="rest_code_4f5e5c3a05ce43849ab287afab398776-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;p&gt;Jak wcześniej zgadywałem, pierwsza linia funkcji wygląda tak:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8f7168601e91469a902fac9444eb3538-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_8f7168601e91469a902fac9444eb3538-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli jeszcze raz uruchomimy solver, zobaczymy że pierwsze 12 bajtów w bajtkodzie zgadza się z treścią misji. Widzimy też, że &lt;tt class="docutils literal"&gt;varnames&lt;/tt&gt; jest wypełnione w połowie, dodaliśmy dwie stałe, i jedną nazwę. Następne kilka linii wygląda tak:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a name="rest_code_1a9de10f80fd4a19ab939e22fe358831-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy że umieszczamy obiekt globalny na stosie i wywołujemy go z jednym argumentem. W obu przypadkach, obiekt globalny ma indeks 1, czyli &lt;tt class="docutils literal"&gt;len&lt;/tt&gt;. Dwa argumenty to &lt;tt class="docutils literal"&gt;s&lt;/tt&gt; i &lt;tt class="docutils literal"&gt;good&lt;/tt&gt;. Umieszczamy obie długości na stosie i je porównujemy. Jeśli porównanie się nie uda (są równe), przeskakujemy do instrukcji zaczynającej się na bajcie 43, w przeciwnym razie kontynuujemy wykonywanie, by załadować drugi global (False) i go zwrócić. Ta ściana tekstu tłumaczy się na następujący prosty kod:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e1edcc9474af42058911c417c5126c6b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_e1edcc9474af42058911c417c5126c6b-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e1edcc9474af42058911c417c5126c6b-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a name="rest_code_e1edcc9474af42058911c417c5126c6b-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# newr&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Popatrzmy się jeszcze raz na nasze nazwy. Widzimy, że brakuje &lt;tt class="docutils literal"&gt;all&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;. Można zauważyć pewien znany wzorzec: iterujemy po obu stringach na raz (używając &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;), wykonujemy obliczenia na podstawie kodów znaków (&lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;) i sprawdzamy czy wszystkie (&lt;tt class="docutils literal"&gt;all&lt;/tt&gt;) wyniki (zazwyczaj porównania) są prawdziwe.&lt;/p&gt;
&lt;p&gt;Oto bajtkod z dopisanymi wartościami i komentarzami które tłumaczą, co się gdzie dzieje:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Początek iteracji: iter()
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # początek iteracji pętli for (jeśli koniec iteratora, skocz +52 bajty do pozycji 117)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # rozpakuj sekwencję (a, b = sequence)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = wartość z s
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = wartość z good
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [odejmij 89 od wartości na górze stosu]
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND z wartością na górze stosu]
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # porównaj dwie wartości na stosie
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # dodaj wartość umieszczoną na górze sotosu do listy góra-1; usuń górę stosu (dopisz do listy tworzonej w list comprehension)
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # przeskocz na początek pętli
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # po pętli: wywołaj all([wynik list comprehension])
&lt;a name="rest_code_8c451d07dbea48d7bc9c8a5375d09c4b-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # zwróć wartość zwróconą przez all()
&lt;/pre&gt;&lt;p&gt;Możemy teraz zapisać pełną odpowiedź.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8c7f208e37844aff948b6977ef0bf4a5-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_8c7f208e37844aff948b6977ef0bf4a5-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8c7f208e37844aff948b6977ef0bf4a5-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_8c7f208e37844aff948b6977ef0bf4a5-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_8c7f208e37844aff948b6977ef0bf4a5-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_8c7f208e37844aff948b6977ef0bf4a5-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Ostatecznie, wyjście &lt;tt class="docutils literal"&gt;dis.dis()&lt;/tt&gt; zgadza się z tekstem z misji (za wyjątkiem usuniętych wartości, ale ID się zgadzają), nasze zmienne &lt;tt class="docutils literal"&gt;co_*&lt;/tt&gt; są zielone, i możemy rozwiązać prawdziwą zagadkę!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Na marginesie:&lt;/strong&gt; zadanie używa list comprehension. Możesz chcieć ją zoptymalizować, usunąć nawiasy kwadratowe, i otrzymać generator expression. W ten sposób zadanie stałoby się trudniejsze, gdyż wymagałoby pracy również z wewnętrznym obiektem kodu generatora:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_efb1bc43fcee440f94763185f7ab1502-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a name="rest_code_efb1bc43fcee440f94763185f7ab1502-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_efb1bc43fcee440f94763185f7ab1502-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;BINARY_*&lt;/tt&gt; i &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt; zniknęły z nowego listingu. Możesz zobaczyć &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;zmodyfikowany kod&lt;/a&gt; (który różni się dwoma bajtami) i &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;wyjście solvera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na marginesie marginesu: zna ktoś jakieś dobre tłumaczenie &lt;tt class="docutils literal"&gt;list comprehension&lt;/tt&gt;? Polska język trudna język.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rozwiazywanie-prawdziwej-zagadki"&gt;
&lt;h2&gt;Rozwiązywanie prawdziwej zagadki&lt;/h2&gt;
&lt;p&gt;Rozwiązałem dodatkową część zagadki. Jej &lt;em&gt;prawdziwym&lt;/em&gt; celem było odzyskanie hasła — tekstu, dla którego &lt;tt class="docutils literal"&gt;check_password()&lt;/tt&gt; zwróci True.&lt;/p&gt;
&lt;p&gt;Ta część jest dosyć nudna. Zbudowałem słownik, w którym przypisałem każdy bajt (0…255) do wyniku obliczeń wykonywanych w pętli funkcji &lt;tt class="docutils literal"&gt;check_password()&lt;/tt&gt;. Potem użyłem jej do odzyskania oryginalnego tekstu.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02247e6b39f54412a488c94128ee8aec-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Hasło brzmi:&lt;/strong&gt; &lt;tt class="docutils literal"&gt;huh, that actually worked!&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-co-chodzilo-z-tym-paintem"&gt;
&lt;h2&gt;O co chodziło z tym Paintem?&lt;/h2&gt;
&lt;blockquote&gt;Wczorajsza misja była o elfickim — &lt;strong&gt;znaczy o Paint’cie&lt;/strong&gt; — znaczy o programowaniu w Pythonie i bytecode.&lt;footer&gt;niżej podpisany, w leadzie tego posta&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Większość moich czytelników była zdziwiona wspomnieniem programu Paint. Stali widzowie polskich streamów Gynvaela pamiętają film Python 101, który opublikował 1 kwietnia 2016. Zobacz &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;oryginalny film&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;wyjaśnienie&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;kod&lt;/a&gt; (po polsku) &lt;strong&gt;Uwaga, spoilery.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;W tym dowcipie primaaprilisowym, Gynvael uczył podstaw Pythona. Pierwsza część dotyczyła pisania bytecodu ręcznie. Druga (ok. 12 minuty) dotyczyła rysowania swoich własnych modułów Pythona. W programie Paint. Tak, Paint, prostym programie graficznym dołączonym do Windowsa. Narysował swój własny moduł Pythona w Paint’cie i zapisał jako BMP. Wyglądało to tak (powiększony PNG poniżej; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;pobierz gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;Jak to działa? Są trzy powody:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python może importować kod z pliku ZIP (dopisanego do sys.path). Niektóre narzędzia które tworzą pliki &lt;tt class="docutils literal"&gt;.exe&lt;/tt&gt; z kodu Pythona używają tej metody; stary format &lt;tt class="docutils literal"&gt;.egg&lt;/tt&gt; również używał ZIPów w ten sposób.&lt;/li&gt;
&lt;li&gt;Pliki BMP mają nagłówki na początku pliku.&lt;/li&gt;
&lt;li&gt;Pliki ZIP mają nagłówki na końcu pliku.&lt;/li&gt;
&lt;li&gt;Więc jeden plik może być jednocześnie poprawnym plikiem BMP i poprawnym ZIPem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wziąłem kod &lt;tt class="docutils literal"&gt;check_password&lt;/tt&gt; i umieściłem go w pliku &lt;tt class="docutils literal"&gt;mission11.py&lt;/tt&gt; (wcześniej zacytowanym). Potem skompilowałem do &lt;tt class="docutils literal"&gt;.pyc&lt;/tt&gt; i utworzyłem z niego &lt;tt class="docutils literal"&gt;.zip&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3c159704e69f41e199f1c5dae7d3a321-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3c159704e69f41e199f1c5dae7d3a321-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3c159704e69f41e199f1c5dae7d3a321-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3c159704e69f41e199f1c5dae7d3a321-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_3c159704e69f41e199f1c5dae7d3a321-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_3c159704e69f41e199f1c5dae7d3a321-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Ponieważ nie jestem ekspertem w żadnym z formatów, uruchomiłem maszynę wirtualną z Windowsem i na ślepo &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;przekopiowałem parametry użyte przez Gynvaela&lt;/a&gt; do otwarcia pliku ZIP (nazwanego &lt;tt class="docutils literal"&gt;.raw&lt;/tt&gt;) w IrfanView i zapisałem jako &lt;tt class="docutils literal"&gt;.bmp&lt;/tt&gt;. Zmieniłem rozmiar na 83×2, ponieważ mój ZIP miał 498 bajty (3 BPP * 83 px * 2 px = 498 bytes) — dzięki temu i odpowiedniemu rozmiarowi plików, mogłem nie dodawać komentarzy i edytowaniu ZIPa. Dostałem ten obrazek (znowu PNG; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;pobierz mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;Plik &lt;tt class="docutils literal"&gt;.bmp&lt;/tt&gt; można uruchomić! Używamy tego kodu:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_773de89724a84aa1ac3623ce5f901bb1-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_773de89724a84aa1ac3623ce5f901bb1-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_773de89724a84aa1ac3623ce5f901bb1-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_773de89724a84aa1ac3623ce5f901bb1-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_773de89724a84aa1ac3623ce5f901bb1-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_773de89724a84aa1ac3623ce5f901bb1-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;
&lt;a name="rest_code_773de89724a84aa1ac3623ce5f901bb1-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I dostajemy to:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="materialy"&gt;
&lt;h2&gt;Materiały&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (pełny kod solvera)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (używane w notatce na marginesie dot. vs list comprehensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py, kod użyty w pliku BMP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, plik uruchamiający moduł BMP/ZIP&lt;/a&gt; (na bazie utworzonego przez Gynvaela)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacja modułu dis&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dzięki za misję (i pomysł z BMP), Gynvael!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>Python hackery</category><category>Python internals</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item><item><title>Setting up a Python development environment</title><link>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Setting up Python is usually simple, but there are some places where newcomers
(and experienced users) need to be careful. What versions are there? What’s the
difference between Python, CPython, Anaconda, PyPy? Those and many other
questions may stump new developers, or people wanting to use Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note: this guide is opinionated.&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#glossary-and-questions" id="id2"&gt;Glossary and questions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#python-versions-2-vs-3" id="id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-run-multiple-pythons-on-the-same-machine" id="id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#implementations" id="id5"&gt;Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions" id="id6"&gt;Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-make-exe-files-from-python-programs" id="id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#where-to-learn-python-where-to-get-help" id="id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-python" id="id9"&gt;Installing Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#windows" id="id10"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#macos" id="id11"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#linux-and-other-unix-like-oses" id="id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-packages" id="id13"&gt;Installing packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#user-installs" id="id14"&gt;User installs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#virtual-environments" id="id15"&gt;Virtual environments&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#tools-and-management" id="id16"&gt;Tools and management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installation-and-usage" id="id17"&gt;Installation and usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#upgrading-and-moving" id="id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#packages-with-c-extensions-binary" id="id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#other-stuff" id="id20"&gt;Other stuff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#editors-and-ides" id="id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#update-history" id="id22"&gt;Update history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="glossary-and-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id2"&gt;Glossary and questions&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="python-versions-2-vs-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Python community has undergone sort of a &lt;em&gt;schism&lt;/em&gt; in recent years. Python
3, released in 2008, broke backwards compatibility: deprecated some bad
constructs and libraries (eg. &lt;tt class="docutils literal"&gt;raw_input()&lt;/tt&gt; became &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; and the
original Python 2 function that ran code input by users is gone; &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;
became a function; many things that returned lists now are iterators — &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;range&lt;/tt&gt;), and completely remodelled strings (which are now Unicode by
default, and the interpreter behavior is stricter when the wrong type is used)&lt;/p&gt;
&lt;p&gt;For new code, you should use Python 3. &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Most popular packages support Python 3&lt;/a&gt;, and many of them support both Pythons at
the same time. The early bugs were ironed out in the first few point releases,
some features that made porting easier were added (back).&lt;/p&gt;
&lt;p&gt;But what if you end up needing Python 2 later? No problem: you can learn the
differences in a short time, and with the help of a few libraries (eg. &lt;tt class="docutils literal"&gt;six&lt;/tt&gt;)
you can easily write code that is compatible with Python 2 and 3 at the same
time, using the same codebase (most libraries out there do that).&lt;/p&gt;
&lt;p&gt;Python 2 will go EOL and lose official support and updates in 2020.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/Python2orPython3"&gt;Python 2 or Python 3 on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-run-multiple-pythons-on-the-same-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes. Note that multiple Python interpreters are completely separate: they have
their own pip and packages, and you can’t run Python 2 code in a Python 3
interpreter. You need to specify which interpreter to use when installing
packages and running some scripts (eg. &lt;tt class="docutils literal"&gt;pip2&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;It’s best to limit yourself to the latest Python 2 and 3 versions. Python is
backwards-compatible within the major release, so Python 2.7 runs code
written with older 2.x versions in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id5"&gt;Implementations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A programming language is an abstract construct. To run code written in that
language, an interpreter or compiler needs to be written. In Python’s case,
there’s a plethora of implementations. Some of them are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;CPython&lt;/strong&gt; is the reference implementation. This is the implementation
distributed on &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt; and as part of many operating systems.
Most Python features are first implemented in CPython, and then they are
ported to other implementations.  If you don’t know what to choose, use
CPython.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyPy&lt;/strong&gt; is a fast implementation, written in a subset of Python. It’s compatible with
Python 2.7 and 3.5 (beta support). It can run all pure Python code, and many
extension libraries that use CFFI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IronPython&lt;/strong&gt; is a .NET CLR implementation. It can integrate with .NET code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jython&lt;/strong&gt; is a Java JVM implementation. It can integrate with Java code, as
well as other JVM languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Implementations on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="distributions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id6"&gt;Distributions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are also Python (CPython) distributions. They ship the CPython
interpreter and add some extra packages/features.  They are maintained by other
communities or corporate entities.&lt;/p&gt;
&lt;p&gt;The most popular third-party distribution is &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum Analytics. It’s popular
for data scientists, and includes over 100 packages, with extra pre-built
binaries available from the &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; package manager.&lt;/p&gt;
&lt;p&gt;I personally recommend to avoid Anaconda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Most packages have binary wheels for Windows, macOS and Linux (yes, Linux!)
making the installation as simple as &lt;tt class="docutils literal"&gt;pip install numpy&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You waste disk space for packages Anaconda installs that you won’t ever need.&lt;/li&gt;
&lt;li&gt;It’s provided by some random for-profit company.&lt;/li&gt;
&lt;li&gt;I’ve seen bugs that were not reproducible outside of Anaconda.&lt;/li&gt;
&lt;li&gt;You can still do data science using the official distribution. There’s
nothing special about Anaconda.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDistributions"&gt;Python distributions on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-make-exe-files-from-python-programs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, you can. There are tools for this — &lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is the best one. Note that you usually need to
run it on the destination operating system. And remember that “compiling” to
exe files like that &lt;strong&gt;is not&lt;/strong&gt; a security measure — your source code is still
easily recoverable. (It’s not a security measure in other languages either,
even if getting source code back might be more expensive/tricky in those.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-learn-python-where-to-get-help"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of learning material is important. If you get a bad book, it might
discourage you from learning (because it’s boring), or may teach you
bad/outdated practices.&lt;/p&gt;
&lt;p&gt;If you can already program in another language, I recommend the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official
Python tutorial&lt;/a&gt;. For newcomers to
programming, I recommend &lt;a class="reference external" href="http://greenteapress.com/wp/think-python-2e/"&gt;Think Python&lt;/a&gt; or &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff
with Python&lt;/a&gt;.  They teach Python 3, and
(mostly) best practices.&lt;/p&gt;
&lt;p&gt;If you need help, try &lt;tt class="docutils literal"&gt;#python&lt;/tt&gt; on freenode IRC, the &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/tutor"&gt;Tutor&lt;/a&gt; or &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list"&gt;Python-list&lt;/a&gt; mailing lists, or a bunch of other communities. (I’m a regular on &lt;tt class="docutils literal"&gt;#python&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id9"&gt;Installing Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This guide will focus on installing CPython 2.7 and 3.x (latest), using the standard
distribution. This choice is satisfactory for most people. Third-party
distributions, while handy in some cases, are not needed for most. (See
&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions"&gt;Distributions&lt;/a&gt; for arguments)&lt;/p&gt;
&lt;p&gt;Throughout this guide, I’ll refer to the Python interpreter executable as
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt;. The exact name depends on your system and desired version. On most
OSes, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is Python 2 and &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; is 3; &lt;tt class="docutils literal"&gt;python2&lt;/tt&gt; should also
exist.  On Arch Linux, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is Python 3. On Windows, use the &lt;tt class="docutils literal"&gt;py&lt;/tt&gt;
launcher.&lt;/p&gt;
&lt;div class="section" id="windows"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id10"&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Download the installer(s): &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those installers come with &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, and modern Python 3.x versions come with
the &lt;tt class="docutils literal"&gt;py&lt;/tt&gt; launcher.  You can use that launcher to pick a specific Python
version, eg.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &amp;lt;package&amp;gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-2&lt;/span&gt; somefile.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-2.7&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py&lt;/tt&gt; (default system version)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s recommended for most use, and mandatory for upgrading pip.&lt;/p&gt;
&lt;p&gt;The 32-bit versions are more versatile. Most packages support both (the only
exception I’m aware of is Tensorflow, which only allows 64-bit Python 3.5 as of
now).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="macos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id11"&gt;macOS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS ships with Python 2.7.10 (as of macOS Sierra). It’s not the latest
version; it’s good enough for most people, but I still recommend installing
your own (the system Python doesn’t include &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, for example). You can
install the latest 2.7 version, as well as Python 3, using a package manager. I
recommend Homebrew — it’s the most popular solution, and lets you install many
other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use the python.org installers: they do not have uninstallers, so you
will have outdated versions lying around after some time. There is no
auto-update as well.  &lt;strong&gt;DO NOT&lt;/strong&gt; attempt to remove the system-installed Python,
this will only damage your system and you’ll need to reinstall.&lt;/p&gt;
&lt;p&gt;If you already have a package manager installed (MacPorts, Fink), don’t install
a new one and just use the existing one.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;brew install python python3&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You should now have &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To update Homebrew and Python, run &lt;tt class="docutils literal"&gt;brew update&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-and-other-unix-like-oses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On Linux, there usually are good enough packages in your OS repositories. You
should be able to install the appropriate package for Python (2 and/or 3).
Most (if not all) distributions require Python — &lt;strong&gt;do not&lt;/strong&gt; remove the
pre-installed packages, and be careful not to overwrite them with something
newer.&lt;/p&gt;
&lt;p&gt;If the version that ships with your distribution is too old, there are some
options. There might be some repositories with better versions, eg. the
&lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes PPA&lt;/a&gt;
for Ubuntu. Then there’s the other option of compiling Python. There
are some tools to help with this, like &lt;tt class="docutils literal"&gt;pyenv&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;pythonz&lt;/tt&gt; (they can also
manage multiple Python versions), or you can do it manually.
The instructions depend on your exact requirements, but here’s a summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download the &lt;a class="reference external" href="https://www.python.org/downloads/source/"&gt;source distribution from Python.org&lt;/a&gt; and unpack it. Go into the unpacked source directory.&lt;/li&gt;
&lt;li&gt;Ensure you’ve got a functional C compiler and Python’s dependencies. You can
usually use your system’s package manager to install the build dependencies
of your system Python. Some dependencies are optional (eg. &lt;tt class="docutils literal"&gt;sqlite3&lt;/tt&gt;
requires SQLite headers).&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=/opt/python3.6&lt;/span&gt;&lt;/tt&gt; and then &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;. (You may add other options to both. It will
take a while.)&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;make altinstall&lt;/tt&gt; as root. Avoid &lt;tt class="docutils literal"&gt;make install&lt;/tt&gt;, as it can override
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt; executables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember: compiling Python should be considered a &lt;strong&gt;last resort&lt;/strong&gt;, unless you
have very specific Python version requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id13"&gt;Installing packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install third-party packages, you should use pip, the Python package
manager. If you’re using Windows or macOS (from Homebrew), pip is included with
your copy of Python.  If you’re on Linux and installed Python from a system
repository, install the correct system package (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-pip&lt;/span&gt;&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/tt&gt;). If you compiled your own Python, pip is also included.&lt;/p&gt;
&lt;p&gt;To run pip, use &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt; (Windows), &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt; (other platforms),
or the short &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt; commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEVER use sudo pip.&lt;/strong&gt; This can cause numerous problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conflicts between packages installed by pip and your system package
manager&lt;/li&gt;
&lt;li&gt;pip modifying system packages, leading to issues when updating them, or
breaking dependencies&lt;/li&gt;
&lt;li&gt;no isolation between package versions, which is sometimes needed to satisfy
dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package install is specific to the Python interpreter used to run
&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;. Packages installed to a virtualenv are separate from system packages;
packages installed for “global” Python 2.7 are separate from 3.6 packages.
Virtual environments generally don’t use the system packages, unless
specifically enabled during creation.&lt;/p&gt;
&lt;p&gt;Some distros have popular packages in their repositories. Sometimes they’re
good; in other cases they’re terribly outdated or they lack important
components, making package managers angry and sick of supporting a 2-year-old
version. (Especially since most bugs are closed with “we’ve fixed that long
ago”)&lt;/p&gt;
&lt;div class="section" id="user-installs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id14"&gt;User installs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a small scale, you can install packages with pip for a single user.  Use
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; PACKAGE&lt;/tt&gt; to do this. If your package installs &lt;a class="reference external" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/"&gt;scripts&lt;/a&gt;,
they will be installed to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/tt&gt; on Linux, and
&lt;tt class="docutils literal"&gt;~/Library/Python/X.Y/bin&lt;/tt&gt; on macOS (X.Y is Python version), or you can use
&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; if the package supports it.&lt;/p&gt;
&lt;p&gt;For most people and projects, virtual environments are better. There are,
however, use cases for putting some packages user-wide — if you don’t work on
projects, but instead are doing one-off research projects, those are better
suited by user-wide installs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id15"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p class="lead"&gt;I wrote a newer, more detailed post about virtualenvs: &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/"&gt;Python Virtual
Environments in Five Minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Virtual environments are the best way to install and manage Python packages.
Advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Isolation of projects and their requirements: if one app/package requires
library version X, but another requires version Y, they can live in separate
virtual environments&lt;/li&gt;
&lt;li&gt;Independent from system-wide packages&lt;/li&gt;
&lt;li&gt;Lightweight (an empty virtualenv is about 10 MB)&lt;/li&gt;
&lt;li&gt;Simple to re-create in any place (&lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt; → &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tools-and-management"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id16"&gt;Tools and management&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are two tools to facilitate creation of virtual environments: the older
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; project, and the newer
&lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module. The &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module is shipped with Python 3.x; some
distributions may put it in a separate package or remove it altogether. Use
whichever works for you.  Virtualenv is compatible with more Python versions
and cannot be broken by incompetent OS package maintainers (&lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; requires
an extra package on Debian).&lt;/p&gt;
&lt;p&gt;There are multiple schools of thought regarding virtualenv placement and
content. Myself, I use &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to manage virtualenvs
and put them in &lt;tt class="docutils literal"&gt;~/virtualenvs&lt;/tt&gt;. Other people put virtualenvs inside their
git repositories (but they &lt;em&gt;must&lt;/em&gt; be in &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt;) Virtualenvs should only contain packages
installed with &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; so they can be recreated quickly.&lt;/p&gt;
&lt;p&gt;I also use the &lt;tt class="docutils literal"&gt;virtualenvwrapper&lt;/tt&gt; plugin for Oh My Zsh, which also
activates virtualenvs with the same name as a git repo, or the environment
named by a &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-and-usage"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id17"&gt;Installation and usage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install virtualenv user-wide, use &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/tt&gt;. You can
then use it with &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; virtualenv DIRECTORY&lt;/tt&gt;. You may pass extra
options, eg. interpreter to use (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; python3&lt;/tt&gt;). Sometimes you need to install
virtualenv for every Python version; usually, one copy is enough.&lt;/p&gt;
&lt;p&gt;How to use them? This is a subject of heated debate in the Python community.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some people believe that activating (&lt;tt class="docutils literal"&gt;source bin/activate&lt;/tt&gt; on *nix;
&lt;tt class="docutils literal"&gt;Scripts\activate&lt;/tt&gt; on Windows) is the right thing to do and simplifies work.&lt;/li&gt;
&lt;li&gt;Others think that you should use &lt;tt class="docutils literal"&gt;bin/python&lt;/tt&gt; (or other scripts in that
directory) directly, as activation only changes &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; and some helper
variables — those variables are not mandatory for operation, running
the correct &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is.&lt;/li&gt;
&lt;li&gt;Others still think &lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;virtualenvs should be used in subshells&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, if activating virtualenvs works in your environment, you should
do it — it’s the most convenient option. There are, however, cases when
activation fails, or is otherwise impossible — calling &lt;tt class="docutils literal"&gt;bin/python&lt;/tt&gt; directly
is your best bet in that case. If you are working inside shell scripts, do not
activate virtualenvs.  I’m not a fan of the subshell option, because it
complicates stuff if you work on multiple projects, and requires tracking usage
manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrading-and-moving"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Upgrading the system Python may make your virtualenvs unusable.
For patch version upgrades, you can just update symlinks (see &lt;a class="reference external" href="https://github.com/Kwpolska/scripts/blob/master/fix-venvs.sh"&gt;fix-venvs.sh&lt;/a&gt;).
However, if the minor version changes, it’s best to re-create the virtualenv
(you need to create &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; ahead of time).&lt;/p&gt;
&lt;p&gt;You cannot move a virtualenv between directories/machines or rename
virtualenvs. You need to use &lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt;, create a new
virtualenv, and run &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt; (you can then delete
the old environment with a simple &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packages-with-c-extensions-binary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The situation improved drastically in the past year or so. Nowadays, almost
all packages have a pre-compiled package available in PyPI. Those packages work
for Windows, macOS, and Linux. There are packages for some of the most
common &lt;em&gt;offenders&lt;/em&gt;, including Pillow, lxml, PyQt5, numpy… However, there might
still be packages without wheels on PyPI.&lt;/p&gt;
&lt;p&gt;If there is no wheel for a package and you are on Windows, check out &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph
Gohlke’s unofficial binaries&lt;/a&gt;.
If you can’t find any wheels online, you would have to resort to compiling it
manually — this requires installing Visual Studio (Visual C++) in a version
that matches your Python, and it’s kind of a pain to do.&lt;/p&gt;
&lt;p&gt;If you are not on Windows, you must install a C compiler and toolchain.
If you get a warning about missing &lt;tt class="docutils literal"&gt;Python.h&lt;/tt&gt;, install the appropriate development
package — for example, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-dev&lt;/span&gt;&lt;/tt&gt;) on Debian/Ubuntu,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-devel&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-devel&lt;/span&gt;&lt;/tt&gt; on RHEL/Fedora. The package you’re trying
to install might have other dependencies that you need to install (the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-dev(el)&lt;/span&gt;&lt;/tt&gt; part is important, too)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id20"&gt;Other stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re working on a project, use &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-e&lt;/span&gt; .&lt;/tt&gt; inside the project
directory to install the package in your environment in development (editable)
mode. This loads code directly from your repository — you don’t need to
re-install on every change; you might need to re-install when your version
number changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="editors-and-ides"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another important thing a developer should take care of is the choice of an
editor. This is an important decision, and is the reason for many holy wars in
the programmer community.&lt;/p&gt;
&lt;p&gt;A good editor should have syntax highlighting for all languages you need to
work with. It should also have features like visual block/multiple selections,
sophisticated find-and-replace, file finding, code completion, and many more minor
but helpful features.&lt;/p&gt;
&lt;p&gt;Then there’s the difference between IDEs and text editors. Text editors are
simpler, whereas IDEs try to include many extra things not necessarily related
to writing code. IDEs often use more resources, but you won’t notice it with a
modern computer (especially with a SSD).&lt;/p&gt;
&lt;p&gt;The best IDE out there is &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from
JetBrains. It has both a free Community and paid Professional edition. The
JetBrains folks are experts at IDEs — they have fully-fledged tools for many
languages. Their Python solution offers a plethora of options that aid
programmers in their work.  Also, if you work with Java, or otherwise more than
one IDEA-supported language, then install IntelliJ IDEA and the Python plugin
(which has the same features as PyCharm).  Students can get &lt;a class="reference external" href="https://www.jetbrains.com/student/"&gt;free
Professional/Ultimate licenses for JetBrains products&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also spend a lot of time in &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; (&lt;a class="reference external" href="https://neovim.io/"&gt;neovim&lt;/a&gt;/&lt;a class="reference external" href="http://vimr.org/"&gt;VimR&lt;/a&gt; to be precise). Vim is the
most powerful text editor out there, and with the right set of plugins it can
beat IDEs at speed and productivity. Vim has a steep learning curve, but it’s
worth it — you can do large changes with just a few keystrokes. Vim is
considered so good that many IDEs (Visual Studio, IntelliJ IDEA/PyCharm) have
Vim emulation plugins.&lt;/p&gt;
&lt;p&gt;Another option is &lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; — it’s
a text editor, but can offer many IDE-like features with the right set of
plugins. It’s Electron-based architecture, or effectively being based on top of
Google’s Chromium, is unfortunate and can lead to terrible performance on
lower-end machines, and on higher-end ones in some cases. (In my experience,
it’s better than Atom.) You can also try &lt;a class="reference external" href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; ($80).&lt;/p&gt;
&lt;p&gt;But really, almost any editor will do. But please &lt;strong&gt;avoid&lt;/strong&gt; IDLE, the editor
included with Python. It lacks some of the most basic things — it doesn’t even
have an option to show line numbers. Not to mention its ugliness. Also, don’t
use Notepad and TextEdit. Those are too simple, and Notepad has encoding
issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id22"&gt;Update history&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;2018-09-21&lt;/dt&gt;
&lt;dd&gt;Link to python-virtual-environments post.&lt;/dd&gt;
&lt;dt&gt;2017-07-19&lt;/dt&gt;
&lt;dd&gt;Better description of problems caused by using sudo pip.&lt;/dd&gt;
&lt;dt&gt;2017-07-10&lt;/dt&gt;
&lt;dd&gt;Added notes about not removing built-in Pythons.&lt;/dd&gt;
&lt;dt&gt;2017-07-07&lt;/dt&gt;
&lt;dd&gt;Spelling fixes and updates to the virtualenv usage section.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</guid><pubDate>Mon, 03 Jul 2017 10:40:00 GMT</pubDate></item><item><title>Deploying Python Web Applications with nginx and uWSGI Emperor</title><link>https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You’ve just written a great Python web application. Now, you want to share it with the world. In order to do that, you need a server, and some software to do that for you.&lt;/p&gt;
&lt;p&gt;The following is a comprehensive guide on how to accomplish that, on multiple Linux-based operating systems, using nginx and uWSGI Emperor. It doesn’t force you to use any specific web framework — Flask, Django, Pyramid, Bottle will all work. Written for Ubuntu, Debian, Fedora, CentOS 7 and Arch Linux (should be helpful for other systems, too). Now with an Ansible Playbook.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Revision 6c (2020-02-03): Reorganized module name table to use more readable cards; updated support list&lt;/em&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;CI status for the associated Ansible Playbook: &lt;img alt="ci-status" src="https://github.com/Kwpolska/ansible-nginx-uwsgi/workflows/CI%20in%20Docker%20for%20ansible-nginx-uwsgi%20%28pyweb%29/badge.svg"&gt;&lt;/p&gt;
&lt;p&gt;For easy linking, I set up some aliases: &lt;a class="reference external" href="https://go.chriswarrick.com/pyweb"&gt;https://go.chriswarrick.com/pyweb&lt;/a&gt; and &lt;a class="reference external" href="https://go.chriswarrick.com/uwsgi-tut"&gt;https://go.chriswarrick.com/uwsgi-tut&lt;/a&gt; (powered by a Django web application, deployed with nginx and uWSGI!).&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#prerequisites" id="id9"&gt;Prerequisites&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#automate-everything-ansible-playbook" id="id10"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#how-to-use" id="id11"&gt;How to use&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#the-manual-guide" id="id12"&gt;The manual guide&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#getting-started" id="id13"&gt;Getting started&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#preparing-your-application" id="id14"&gt;Preparing your application&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#configuring-uwsgi-and-nginx" id="id15"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#uwsgi-configuration" id="id16"&gt;uWSGI configuration&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#nginx-configuration" id="id17"&gt;nginx configuration&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#service-setup" id="id18"&gt;Service setup&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-arch-linux" id="id19"&gt;For Arch Linux&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-fedora-and-centos" id="id20"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-ubuntu-and-debian" id="id21"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result" id="id22"&gt;End result&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#troubleshooting" id="id23"&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id9"&gt;Prerequisites&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to deploy your web application, you need a server that gives you root and ssh access — in other words, a VPS (or a dedicated server, or a datacenter lease…). If you’re looking for a great VPS service for a low price, I recommend &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=7983689b2ecc"&gt;DigitalOcean&lt;/a&gt; (reflink &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id6" id="id1"&gt;1&lt;/a&gt;), which offers a $5/mo service &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id7" id="id2"&gt;2&lt;/a&gt;. If you want to play along at home, without buying a VPS, you can create a virtual machine on your own, or use Vagrant with a Vagrant box for Fedora 31 (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;fedora/31-cloud-base&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Your server should also run a modern Linux-based operating system. This guide was written and tested on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Ubuntu 16.04 LTS, 18.04 LTS or newer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debian 9 (stretch), 10 (buster) or newer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora 29 or newer (with SELinux enabled and disabled)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CentOS 7 (with SELinux enabled and disabled) — manual guide should also work on RHEL 7. CentOS 8 does not have uWSGI packages in EPEL as of January 2020, but they should become available soon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Debian 8 (jessie), and Fedora 24 through 28 are not officially supported, even though they still probably work.&lt;/p&gt;
&lt;p&gt;Users of other Linux distributions (and perhaps other Unix flavors) can also follow this tutorial. This guide assumes &lt;code class="docutils literal"&gt;systemd&lt;/code&gt; as your init system; if you are not using systemd, you will have to get your own daemon files somewhere else. In places where the instructions are split three-way, try coming up with your own, reading documentation and config files; the Arch Linux instructions are probably the closest to upstream (but not always).  Unfortunately, all Linux distributions have their own ideas when it comes to running and managing nginx and uWSGI.&lt;/p&gt;
&lt;p&gt;nginx and uWSGI are considered best practices by most people. nginx is a fast, modern web server, with uWSGI support built in (without resorting to reverse proxying).  uWSGI is similarly aimed at speed.  The Emperor mode of uWSGI is recommended for init system integration by the uWSGI team, and it’s especially useful for multi-app deployments. (This guide is opinionated.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-everything-ansible-playbook"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id10"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;/h2&gt;
&lt;p class="lead"&gt;A &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; that automates everything in this tutorial is available. &lt;img alt="ci-status" src="https://github.com/Kwpolska/ansible-nginx-uwsgi/workflows/CI%20in%20Docker%20for%20ansible-nginx-uwsgi%20%28pyweb%29/badge.svg"&gt;&lt;/p&gt;
&lt;div class="section" id="how-to-use"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id11"&gt;How to use&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a class="reference external" href="https://docs.ansible.com/ansible/intro_installation.html"&gt;Ansible&lt;/a&gt; on your control computer (not necessarily the destination server).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone the &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; from GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read &lt;code class="docutils literal"&gt;README.md&lt;/code&gt;. You should also understand how Ansible works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure (change three files: &lt;code class="docutils literal"&gt;hosts&lt;/code&gt;, &lt;code class="docutils literal"&gt;group_vars/all&lt;/code&gt;, and &lt;code class="docutils literal"&gt;group_vars/os_&amp;lt;destination OS&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure all the dependencies are installed on your destination server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansible-playbook&lt;/span&gt; &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;nginx-uwsgi.yml&lt;/span&gt; &lt;span class="pre"&gt;-i&lt;/span&gt; hosts&lt;/code&gt; and watch magic happen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Skip over to &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result"&gt;End result&lt;/a&gt; and test your site.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-manual-guide"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id12"&gt;The manual guide&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I personally recommend the Playbook as a much less error-prone way to set up your app, it might not be compatible with everyone’s system, or otherwise be the wrong solution. The original manual configuration guide is still maintained.&lt;/p&gt;
&lt;p&gt;Even if you are using the Playbook, you should still read this to find out what happens under the hood, and to find out about other caveats/required configuration changes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;All the commands in this tutorial are meant to be run &lt;strong&gt;as root&lt;/strong&gt; — run &lt;code class="docutils literal"&gt;su&lt;/code&gt; or &lt;code class="docutils literal"&gt;sudo su&lt;/code&gt; first to get an administrative shell. This tutorial assumes familiarity with basic Linux administration and command-line usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id13"&gt;Getting started&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start by installing Python 3 (with venv), nginx and uWSGI. I recommend using your operating system packages. For uWSGI, we need the &lt;code class="docutils literal"&gt;logfile&lt;/code&gt; and &lt;code class="docutils literal"&gt;python3&lt;/code&gt; plugins. (Arch Linux names the &lt;code class="docutils literal"&gt;python3&lt;/code&gt; plugin &lt;code class="docutils literal"&gt;python&lt;/code&gt;; the &lt;code class="docutils literal"&gt;logfile&lt;/code&gt; plugin may be built-in — check with your system repositories!). I’ll also install Git to clone the tutorial app, but it’s optional if your workflow does not involve git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_34ed5076feee4911b93470eed115962e-1"&gt;&lt;/a&gt;apt install python3 python3-venv uwsgi uwsgi-emperor uwsgi-plugin-python3 nginx-full git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_e978d7bdc608427f8e83685216a0a616-1"&gt;&lt;/a&gt;dnf install python3 uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;CentOS 7:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_aa2f8e2d04a0408aa0634a18dd51ef0e-1"&gt;&lt;/a&gt;yum install epel-release
&lt;a name="rest_code_aa2f8e2d04a0408aa0634a18dd51ef0e-2"&gt;&lt;/a&gt;yum install python36 uwsgi uwsgi-plugin-python36 uwsgi-logger-file nginx git wget
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ecf9a06988fa4587a541334ccb21fb21-1"&gt;&lt;/a&gt;pacman -S python uwsgi uwsgi-plugin-python nginx git
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="preparing-your-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id14"&gt;Preparing your application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tutorial will work for any web framework. I will use &lt;a class="reference external" href="https://github.com/Kwpolska/flask-demo-app"&gt;a really basic Flask app&lt;/a&gt; that has just one route (&lt;code class="docutils literal"&gt;/&lt;/code&gt;) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id8" id="id3"&gt;3&lt;/a&gt;, a static &lt;code class="docutils literal"&gt;hello.png&lt;/code&gt; file and a &lt;code class="docutils literal"&gt;favicon.ico&lt;/code&gt; for demonstration purposes. Note that the app does not use &lt;code class="docutils literal"&gt;app.run()&lt;/code&gt;. While you could add it, it would be used for local development and debugging only, and would have to be prepended by &lt;code class="docutils literal"&gt;if __name__ == '__main__':&lt;/code&gt; (if it wasn’t, that server would run instead of uWSGI, which is bad)&lt;/p&gt;
&lt;p&gt;The app will be installed somewhere under the &lt;code class="docutils literal"&gt;/srv&lt;/code&gt; directory, which is a great place to store things like this. I’ll choose &lt;code class="docutils literal"&gt;/srv/myapp&lt;/code&gt; for this tutorial, but for real deployments, you should use something more distinguishable — the domain name is a great idea.&lt;/p&gt;
&lt;p&gt;If you don’t use Flask, this tutorial also has instructions for other web frameworks (Django, Pyramid, Bottle) in the configuration files; it should be adjustable to any other WSGI-compliant framework/script nevertheless.&lt;/p&gt;
&lt;p&gt;We’ll start by creating a virtual environment:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_8ac31e0d5a8a46e2984a2999930d433d-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_8ac31e0d5a8a46e2984a2999930d433d-2"&gt;&lt;/a&gt;python3 -m venv myapp
&lt;/pre&gt;&lt;p&gt;(This tutorial assumes Python 3. Python 2.7 is legacy software. If you want to use legacy software, you’ll need to use virtualenv and adjust your uWSGI configuration.)&lt;/p&gt;
&lt;p&gt;Now, we need to put our app there and install requirements. An example for the tutorial demo app:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_8d10801b25fb4979bc98ef7656a2b10f-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; myapp
&lt;a name="rest_code_8d10801b25fb4979bc98ef7656a2b10f-2"&gt;&lt;/a&gt;git clone https://github.com/Kwpolska/flask-demo-app appdata
&lt;a name="rest_code_8d10801b25fb4979bc98ef7656a2b10f-3"&gt;&lt;/a&gt;bin/pip install -r appdata/requirements.txt
&lt;/pre&gt;&lt;p&gt;I’m storing my application data in the &lt;code class="docutils literal"&gt;appdata&lt;/code&gt; subdirectory so that it doesn’t clutter the virtual environment (or vice versa).  You may also install the &lt;code class="docutils literal"&gt;uwsgi&lt;/code&gt; package in the virtual environment, but it’s optional.&lt;/p&gt;
&lt;p&gt;What this directory should be depends on your web framework.  For example, for a Django app, you should have an &lt;code class="docutils literal"&gt;appdata/manage.py&lt;/code&gt; file (in other words, &lt;code class="docutils literal"&gt;appdata&lt;/code&gt; is where your app structure starts).  I also assumed that the &lt;code class="docutils literal"&gt;appdata&lt;/code&gt; folder should have a &lt;code class="docutils literal"&gt;static&lt;/code&gt; subdirectory with all static files, including &lt;code class="docutils literal"&gt;favicon.ico&lt;/code&gt; if you have one (we will add support for both in nginx).&lt;/p&gt;
&lt;p&gt;At this point, you should chown this directory to the user and group your server is going to run as.  This is especially important if uwsgi and nginx run as different users (as they do on Fedora). Run one of the following commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ad39b5b0d4214d17b7c60e377d166f02-1"&gt;&lt;/a&gt;chown -R www-data:www-data /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora, CentOS:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_5f59e1ff24de4e2cb5a9bdd28199d6c7-1"&gt;&lt;/a&gt;chown -R uwsgi:nginx /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_9d44768cbe694eaba0bcb3afb5a14e1d-1"&gt;&lt;/a&gt;chown -R http:http /srv/myapp
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configuring-uwsgi-and-nginx"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id15"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Parts of the configuration depend on your operating system. I tried to provide advice for Ubuntu, Debian, Fedora, CentOS and Arch Linux. If you experience any issues, in particular with plugins, please consult the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We need to write a configuration file for uWSGI and nginx.&lt;/p&gt;
&lt;div class="section" id="uwsgi-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id16"&gt;uWSGI configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Start with this, but read the notes below and change the values accordingly:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/uwsgi.sock&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;775&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-5"&gt;&lt;/a&gt;&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-6"&gt;&lt;/a&gt;&lt;span class="na"&gt;binary-path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/bin/uwsgi&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-7"&gt;&lt;/a&gt;&lt;span class="na"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-8"&gt;&lt;/a&gt;&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flaskapp:app&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-9"&gt;&lt;/a&gt;&lt;span class="na"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-10"&gt;&lt;/a&gt;&lt;span class="na"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-11"&gt;&lt;/a&gt;&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-12"&gt;&lt;/a&gt;&lt;span class="na"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-13"&gt;&lt;/a&gt;&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python3,logfile&lt;/span&gt;
&lt;a name="rest_code_9ee3ceddcb1c4a809ada2da619d5c897-14"&gt;&lt;/a&gt;&lt;span class="na"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file:/srv/myapp/uwsgi.log&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Ubuntu, Debian: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/uwsgi-emperor/vassals/myapp.ini&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora, CentOS: &lt;code class="docutils literal"&gt;/etc/uwsgi.d/myapp.ini&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux: &lt;code class="docutils literal"&gt;/etc/uwsgi/vassals/myapp.ini&lt;/code&gt; (create the directory first and &lt;strong&gt;chown&lt;/strong&gt; it to http: &lt;code class="docutils literal"&gt;mkdir &lt;span class="pre"&gt;-p&lt;/span&gt; /etc/uwsgi/vassals; chown &lt;span class="pre"&gt;-R&lt;/span&gt; http:http /etc/uwsgi/vassals&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;socket&lt;/code&gt; — the socket file that will be used by your application. It’s usually a file path (Unix domain socket). You could use a local TCP socket, but it’s not recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;chdir&lt;/code&gt; — the app directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;binary-path&lt;/span&gt;&lt;/code&gt; — the uWSGI executable to use. Remove if you didn’t install the (optional) &lt;code class="docutils literal"&gt;uwsgi&lt;/code&gt; package in your virtual environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt; — the virtual environment for your application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;module&lt;/code&gt; — the name of the module that houses your application, and the object that speaks the WSGI interface, separated by colons. This depends on your web framework:&lt;/p&gt;
&lt;div class="table-responsive-lg"&gt;
&lt;table class="table table-bordered"&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th style="width: 10%"&gt;Framework&lt;/th&gt;
&lt;th style="width: 30%"&gt;Flask, Bottle&lt;/th&gt;
&lt;th style="width: 30%"&gt;Django&lt;/th&gt;
&lt;th style="width: 30%"&gt;Pyramid&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;td&gt;module where &lt;code&gt;app&lt;/code&gt; is defined&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;em&gt;project&lt;/em&gt;.wsgi&lt;/code&gt;&lt;br&gt;&lt;span style="font-size: 0.9rem"&gt;(&lt;code style="font-size: 0.9rem"&gt;&lt;em&gt;project&lt;/em&gt;&lt;/code&gt; is the package with &lt;code style="font-size: 0.9rem"&gt;settings.py&lt;/code&gt;)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;module where &lt;code&gt;app&lt;/code&gt; is defined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Callable&lt;/th&gt;
&lt;td&gt;Flask: &lt;code&gt;app&lt;/code&gt; instance&lt;br&gt;Bottle: &lt;code&gt;app = bottle.default_app()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;application&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;app = config.make_wsgi_app()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="table-active"&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;td&gt;&lt;code style="font-size: 1.2rem"&gt;&lt;em&gt;package&lt;/em&gt;:app&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code style="font-size: 1.2rem"&gt;&lt;em&gt;project&lt;/em&gt;.wsgi:application&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code style="font-size: 1.2rem"&gt;&lt;em&gt;package&lt;/em&gt;:app&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Caveats&lt;/th&gt;
&lt;td&gt;Make sure &lt;code&gt;app&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; in an &lt;code style="font-size: 0.85rem"&gt;if __name__ == '__main__':&lt;/code&gt; block&lt;/td&gt;
&lt;td&gt;Add environment variable for settings:&lt;br&gt;&lt;code style="font-size: 0.7rem"&gt;env = DJANGO_SETTINGS_MODULE=&lt;em&gt;project&lt;/em&gt;.settings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Make sure &lt;code&gt;app&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; in an &lt;code style="font-size: 0.85rem"&gt;if __name__ == '__main__':&lt;/code&gt; block (the demo quickstart does that!)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;uid&lt;/code&gt; and &lt;code class="docutils literal"&gt;gid&lt;/code&gt; — the names of the user account to use for your server.  Use the same values as in the &lt;code class="docutils literal"&gt;chown&lt;/code&gt; command above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;processes&lt;/code&gt; and &lt;code class="docutils literal"&gt;threads&lt;/code&gt; — control the resources devoted to this application. Because this is a simple hello app, I used one process with one thread, but for a real app, you will probably need more (you need to see what works the best; there is no algorithm to decide). Also, remember that if you use multiple processes, they don’t share memory (you need a database to share data between them).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;plugins&lt;/code&gt; — the list of uWSGI plugins to use. For Arch Linux, use &lt;code class="docutils literal"&gt;plugins = python&lt;/code&gt; (the &lt;code class="docutils literal"&gt;logfile&lt;/code&gt; plugin is always active).  For CentOS, use &lt;code class="docutils literal"&gt;plugins = python36&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;logger&lt;/code&gt; — the path to your app-specific logfile. (Other logging facilities are available, but this one is the easiest, especially for multiple applications on the same server)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;env&lt;/code&gt; — environment variables to pass to your app. Useful for configuration, may be specified multiple times. Example for Django: &lt;code class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test your configuration by running &lt;code class="docutils literal"&gt;uwsgi &lt;span class="pre"&gt;--ini&lt;/span&gt; /path/to/myapp.ini&lt;/code&gt; (disable the logger for stderr output or run &lt;code class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt; /srv/myapp/uwsgi.log&lt;/code&gt; in another window).&lt;/p&gt;
&lt;p&gt;If you’re using &lt;strong&gt;Fedora&lt;/strong&gt; or &lt;strong&gt;CentOS&lt;/strong&gt;, there are two configuration changes you need to make globally: in &lt;code class="docutils literal"&gt;/etc/uwsgi.ini&lt;/code&gt;, disable the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;emperor-tyrant&lt;/span&gt;&lt;/code&gt; option (which we don’t need, as it sets uid/gid for every process based on the owner of the related &lt;code class="docutils literal"&gt;.ini&lt;/code&gt; config file — we use one global setup) and set &lt;code class="docutils literal"&gt;gid = nginx&lt;/code&gt;.  We’ll need this so that nginx can talk to your socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id17"&gt;nginx configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We need to configure our web server. Here’s a basic configuration that will get us started:&lt;/p&gt;
&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Ubuntu, Debian: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled/myapp.conf&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora, CentOS: &lt;code class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux: add &lt;code class="docutils literal"&gt;include &lt;span class="pre"&gt;/etc/nginx/conf.d/*.conf;&lt;/span&gt;&lt;/code&gt; to your &lt;code class="docutils literal"&gt;http&lt;/code&gt; directive in &lt;code class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/code&gt; and use &lt;code class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code nginx"&gt;&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTP server:&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-3"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTPS server:&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# listen 443 ssl;&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-6"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt; &lt;span class="s"&gt;myapp.local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-8"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-9"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-10"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/srv/myapp/uwsgi.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-13"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-14"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-15"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-17"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/favicon.ico&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-18"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static/favicon.ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cf6012dc3f104072904326df3b3b0555-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that this file is a very basic and rudimentary configuration. This configuration is fine for local testing, but for a real deployment, you will need to adjust it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;listen&lt;/code&gt; to &lt;code class="docutils literal"&gt;443 ssl&lt;/code&gt; and create a http→https redirect on port 80 (you can get a free SSL certificate from &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;; make sure to &lt;a class="reference external" href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html"&gt;configure SSL properly&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;server_name&lt;/code&gt; to your real domain name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you might also want to add custom error pages, log files, or change anything else that relates to your web server — consult other nginx guides for details&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nginx usually has some server already enabled by default — edit &lt;code class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/code&gt; or remove their configuration files from your sites directory to disable it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-setup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id18"&gt;Service setup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After you’ve configured uWSGI and nginx, you need to enable and start the system services.&lt;/p&gt;
&lt;div class="section" id="for-arch-linux"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id19"&gt;For Arch Linux&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;All you need is:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_76e2350a08cd402d90edef6176ffe233-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_76e2350a08cd402d90edef6176ffe233-2"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;code class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-fedora-and-centos"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id20"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Make sure you followed the extra note about editing &lt;code class="docutils literal"&gt;/etc/uwsgi.ini&lt;/code&gt; earlier and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ce13760703264f4086722dfc25152178-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx uwsgi
&lt;a name="rest_code_ce13760703264f4086722dfc25152178-2"&gt;&lt;/a&gt;systemctl start nginx uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;code class="docutils literal"&gt;systemctl status uwsgi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you disabled SELinux, this is enough to get an app working and you can skip over to the next section.&lt;/p&gt;
&lt;p&gt;If you want to use SELinux, you need to do the following to allow nginx to read static files:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_312636656b304f0f8708ec6d2f4a5b0d-1"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_312636656b304f0f8708ec6d2f4a5b0d-2"&gt;&lt;/a&gt;chcon -R system_u:system_r:httpd_t:s0 /srv/myapp/appdata/static
&lt;a name="rest_code_312636656b304f0f8708ec6d2f4a5b0d-3"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We now need to install a &lt;a class="reference external" href="https://chriswarrick.com/pub/nginx-uwsgi.pp"&gt;SELinux policy&lt;/a&gt; (that I created for this project) to allow nginx and uWSGI to communicate.
Download it and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_3f9c75eb896743c68a34fee145644520-1"&gt;&lt;/a&gt;semodule -i nginx-uwsgi.pp
&lt;/pre&gt;&lt;p&gt;Hopefully, this is enough (you can delete the file). In case it isn’t, please read SELinux documentation, check audit logs, and look into &lt;code class="docutils literal"&gt;audit2allow&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-ubuntu-and-debian"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id21"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ubuntu and Debian (still!) use LSB services for uWSGI. Because LSB services are awful, we’re going to set up our own systemd-based (native) service.&lt;/p&gt;
&lt;p&gt;Start by disabling the LSB service that comes with Ubuntu and Debian:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_a3542468e21e4b3fa19d6cb71d7d69d4-1"&gt;&lt;/a&gt;systemctl stop uwsgi-emperor
&lt;a name="rest_code_a3542468e21e4b3fa19d6cb71d7d69d4-2"&gt;&lt;/a&gt;systemctl disable uwsgi-emperor
&lt;/pre&gt;&lt;p&gt;Copy the &lt;code class="docutils literal"&gt;.service&lt;/code&gt; file from the &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.org/en/latest/Systemd.html#adding-the-emperor-to-systemd"&gt;uWSGI systemd documentation&lt;/a&gt; to &lt;code class="docutils literal"&gt;/etc/systemd/system/emperor.uwsgi.service&lt;/code&gt;.  Change the ExecStart line to:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_2956ed6b5ed84109b5c0fee5e491b3b7-1"&gt;&lt;/a&gt;&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/uwsgi --ini /etc/uwsgi-emperor/emperor.ini&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can now reload systemd daemons and enable the services:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_5a1f01f6202b45a2875000a745239f34-1"&gt;&lt;/a&gt;systemctl daemon-reload
&lt;a name="rest_code_5a1f01f6202b45a2875000a745239f34-2"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_5a1f01f6202b45a2875000a745239f34-3"&gt;&lt;/a&gt;systemctl reload nginx
&lt;a name="rest_code_5a1f01f6202b45a2875000a745239f34-4"&gt;&lt;/a&gt;systemctl start emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;code class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/code&gt;.  (Ignore
the warning about no request plugin)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="end-result"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id22"&gt;End result&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your web service should now be running at &lt;a class="reference external" href="http://localhost/"&gt;http://localhost/&lt;/a&gt; (or wherever you set up server to listen).&lt;/p&gt;
&lt;p&gt;If you used the demo application, you should see something like this (complete with the favicon and image greeting):&lt;/p&gt;
&lt;img alt="/images/nginx-uwsgi-demo.png" class="centered" src="https://chriswarrick.com/images/nginx-uwsgi-demo.png"&gt;
&lt;p&gt;If you want to test with cURL:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_8db6af9184fd497380745b18fac0a45e-1"&gt;&lt;/a&gt;curl -v http://localhost/
&lt;a name="rest_code_8db6af9184fd497380745b18fac0a45e-2"&gt;&lt;/a&gt;curl -I http://localhost/favicon.ico
&lt;a name="rest_code_8db6af9184fd497380745b18fac0a45e-3"&gt;&lt;/a&gt;curl -I http://localhost/static/hello.png
&lt;/pre&gt;&lt;div class="section" id="troubleshooting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id23"&gt;Troubleshooting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hopefully, everything works. If it doesn’t:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Check your nginx, system (&lt;code class="docutils literal"&gt;journalctl&lt;/code&gt;, &lt;code class="docutils literal"&gt;systemctl status SERVICE&lt;/code&gt;) and uwsgi (&lt;code class="docutils literal"&gt;/srv/myapp/uwsgi.log&lt;/code&gt;) logs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you followed all instructions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you get a default site, disable that site in nginx config (&lt;code class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/code&gt; or your sites directory).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have a firewall installed, make sure to open the ports your web server runs on (typically 80/443). For &lt;code class="docutils literal"&gt;firewalld&lt;/code&gt; (Fedora, CentOS):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_09826d0d23984cdf8a6f7bd24d7229a1-1"&gt;&lt;/a&gt;firewall-cmd --add-service http
&lt;a name="rest_code_09826d0d23984cdf8a6f7bd24d7229a1-2"&gt;&lt;/a&gt;firewall-cmd --add-service https
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If it still does not work, feel free to ask in the comments, mentioning your distribution, installation method, and what doesn’t work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This reflink gives you $10 in credit, which is enough to run a server for up to two months without paying a thing. I earn $15.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;For the cheapest plan. If you’re in the EU (and thus have to pay VAT), or want DO to handle your backups, it will cost you a little more.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This app does not use templates, but you should in any real project. This app is meant to be as simple as possible.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</guid><pubDate>Wed, 10 Feb 2016 14:00:00 GMT</pubDate></item><item><title>Rewriting a Flask app in Django</title><link>https://chriswarrick.com/pl/blog/2015/10/11/rewriting-a-flask-app-in-django/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I spent Saturday on rewriting a Flask app in Django.  The app in question was
&lt;a class="reference external" href="https://users.getnikola.com/"&gt;Nikola Users&lt;/a&gt;, which is a very simple CRUD
app.  And yet, the Flask code was a mess, full of bugs and vulnerabilities.
Eight hours later, I had a fully functional Django app that did more and fixed
all problems.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="original-flask-app"&gt;
&lt;h2&gt;Original Flask app&lt;/h2&gt;
&lt;p&gt;The original Flask app had a ton of problems.  In order to make it anywhere
near useful, I would need to spend hours.  Here’s just a few of
them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;357 lines of spaghetti code (295 SLOC), all in one file&lt;/li&gt;
&lt;li&gt;No form data validation, no CSRF &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2015/10/11/rewriting-a-flask-app-in-django/#id2" id="id1"&gt;[1]&lt;/a&gt; protection (it did have XSS protection
though)&lt;/li&gt;
&lt;li&gt;Login using Mozilla Persona, which requries JavaScript, is a bit kludgey, and
feels desolate (and also had me store the admin e-mail list in code)&lt;/li&gt;
&lt;li&gt;Geopolitics issues: using country flags for languages&lt;/li&gt;
&lt;li&gt;A lot of things were implemented by hand&lt;/li&gt;
&lt;li&gt;SQLAlchemy is very verbose&lt;/li&gt;
&lt;li&gt;no DB migrations (makes enhancements harder)&lt;/li&gt;
&lt;li&gt;Languages implemented as a PostgreSQL integer array&lt;/li&gt;
&lt;li&gt;Adding a language required running a command-line script and &lt;strong&gt;restarting the
app&lt;/strong&gt; (languages were cached in Python dicts with no way to reload them from
the database; that would require talking through uWSGI anyway because there
were multiple processes involved)&lt;/li&gt;
&lt;li&gt;The templates were slightly hacky (the page title was set in each individual
template and not in the view code); menus hacked together in HTML with no
highlighting&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-rewrite"&gt;
&lt;h2&gt;The rewrite&lt;/h2&gt;
&lt;p&gt;I started the process by opening &lt;a class="reference external" href="https://docs.djangoproject.com/en/"&gt;Django documentation&lt;/a&gt;, with its wonderful
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/"&gt;tutorial&lt;/a&gt;.  Now, I have written a couple basic Django apps before, but
the majority of them didn’t do much.  In other words, I didn’t have a lot of experience.  Especially with taking user input and relationships.  It took me about 8 hours to get feature parity, and more.&lt;/p&gt;
&lt;p&gt;Getting all the features was really simple.  For example, to get a many-to-many
relationship for languages, I had to write just one line.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a011bc0d5d844bb5994b8cf71398d311-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s it.  I didn’t have to run through complicated SQLAlchemy documentation,
which provides a &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_1_0/orm/basic_relationships.html#many-to-many"&gt;13-line solution&lt;/a&gt; to the same problem.&lt;/p&gt;
&lt;p&gt;Django also simplified New Relic integration, as the browser JS can be implemented
using Django template tags.&lt;/p&gt;
&lt;p&gt;Django is not without its problems, though.  I got a very cryptic traceback
when I did this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c6f36eaa935148d8a515036ca14a9ccf-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;publish_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Publish e-mail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_c6f36eaa935148d8a515036ca14a9ccf-2"&gt;&lt;/a&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"BooleanField() got multiple values for argument 'required'"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The real problem with this code?  I forgot the &lt;tt class="docutils literal"&gt;label=&lt;/tt&gt; keyword.  The
problem is, the model API accepts this syntax — &lt;tt class="docutils literal"&gt;verbose_name&lt;/tt&gt; is the first
argument.  (I am not actually using the labels though, I write my own form
HTML)&lt;/p&gt;
&lt;p&gt;Still, the Django version is much cleaner.  And the best part of all?  There
are no magic global objects (&lt;tt class="docutils literal"&gt;g&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;session&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;request&lt;/tt&gt;) and
decorator-based views (which are a bit of syntax abuse IMO).&lt;/p&gt;
&lt;p&gt;In the end, I have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;382 lines of code (297 SLOC) over 6 files — much cleaner, and with less long lines&lt;/li&gt;
&lt;li&gt;form data validation (via Django), CSRF and XSS protection&lt;/li&gt;
&lt;li&gt;Login using Django built-in authentication, without JavaScript&lt;/li&gt;
&lt;li&gt;Language codes (granted, I could’ve done that really easily back in Flask)&lt;/li&gt;
&lt;li&gt;Tried-and-true implementations of common patterns&lt;/li&gt;
&lt;li&gt;Django models are much more readable and friendly&lt;/li&gt;
&lt;li&gt;Django-provided DB migrations (generated automatically!)&lt;/li&gt;
&lt;li&gt;Languages implemented using Django many-to-many relationships&lt;/li&gt;
&lt;li&gt;Adding a language is possible from the Django built-in admin panel and is
reflected immediately (no caching)&lt;/li&gt;
&lt;li&gt;Titles and menus in code&lt;/li&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;New features: featured sites; show only a specified language — were really easy to add&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2015/10/11/rewriting-a-flask-app-in-django/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I had some &lt;tt class="docutils literal"&gt;CSRF_ENABLED&lt;/tt&gt; variable, but it did not seem to be actually
used by anything.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2015/10/11/rewriting-a-flask-app-in-django/</guid><pubDate>Sun, 11 Oct 2015 15:24:43 GMT</pubDate></item><item><title>Nowy projekt: upass — konsolowy interfejs dla pass</title><link>https://chriswarrick.com/pl/blog/2015/07/06/upass/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.passwordstore.org/"&gt;pass&lt;/a&gt; to standardowy Uniksowy manager haseł.
A ja właśnie stworzyłem odrobinę przyjaźniejszy, klikalniejszy interfejs przy
użyciu biblioteki urwid w Pythonie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/upass/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Strona projektu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/upass/" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; używa biblioteki urwid, co oznacza, że ma przyjazny pełnoekranowy interfejs konsolowy.
Pokazuje strukturę katalogów (ze spłaszczonymi podkatalogami) i wywołuje
&lt;tt class="docutils literal"&gt;pass&lt;/tt&gt; na żądanie.  (Nie używa &lt;tt class="docutils literal"&gt;pass &lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; przez problemy z podprocesami, w
zamian samodzielnie kopiując tekst — zauważ, że schowek &lt;strong&gt;nie zostanie
wyczyszczony&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Jeśli chcesz zobaczyć, jak wygląda &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt;, odwiedź &lt;a class="reference external" href="https://chriswarrick.com/pl/galleries/upass/"&gt;galerię zrzutów ekranu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; jest ciągle rozwijany (i został pierwotnie napisany w jeden wieczór).
Jeśli masz pomysły, znalazłeś błędy, lub chcesz pomóc, odwiedź
&lt;a class="reference external" href="https://github.com/Kwpolska/upass"&gt;stronę na GitHubie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Możesz zainstalować &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; z &lt;a class="reference external" href="https://pypi.python.org/pypi/upass"&gt;PyPI&lt;/a&gt; (przy uzyciu &lt;tt class="docutils literal"&gt;pip install upass&lt;/tt&gt;). Użytkownicy
Arch Linux mogą zainstalować pakiet &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; z AUR.&lt;/p&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>Linux</category><category>password</category><category>projects</category><category>Python</category><category>upass</category><guid>https://chriswarrick.com/pl/blog/2015/07/06/upass/</guid><pubDate>Mon, 06 Jul 2015 12:30:00 GMT</pubDate></item><item><title>Nowy projekt: think (Terminal Think Music)</title><link>https://chriswarrick.com/pl/blog/2015/05/30/think/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Czy uruchamiasz proces, który długo się wykonuje?  Czy chcesz wiedzieć, kiedy
skończy pracę, gdy używasz innego Terminala/parzysz kawę?  Czy masz ulubioną
muzykę z teleturnieju do odtworzenia gdy coś robisz?&lt;/p&gt;
&lt;p&gt;Jeśli tak: &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; jest właśnie dla ciebie.  By dowiedzieć się więcej, czytaj dalej lub &lt;a class="reference external" href="https://github.com/Kwpolska/think"&gt;odwiedź stronę na GitHubie [en]&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/think/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Strona projektu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think/releases" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (GitHub)
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;div class="section" id="instalacja"&gt;
&lt;h2&gt;Instalacja&lt;/h2&gt;
&lt;p&gt;Możesz zainstalować &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; z &lt;a class="reference external" href="https://pypi.python.org/pypi/think"&gt;PyPI&lt;/a&gt; (przy uzyciu &lt;tt class="docutils literal"&gt;pip install think&lt;/tt&gt;). Użytkownicy Arch Linux
mogą zainstalować pakiet &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; z AUR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="konfiguracja"&gt;
&lt;h2&gt;Konfiguracja&lt;/h2&gt;
&lt;p&gt;Utwórz plik &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/think.conf&lt;/span&gt;&lt;/tt&gt; (tam, gdzie jest &lt;tt class="docutils literal"&gt;XDG_CONFIG_HOME&lt;/tt&gt;),
zawierający poniższe cztery linie:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_0ea7743339e64359b9de130c5fea3543-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[Think]&lt;/span&gt;
&lt;a name="rest_code_0ea7743339e64359b9de130c5fea3543-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;play&lt;/span&gt;
&lt;a name="rest_code_0ea7743339e64359b9de130c5fea3543-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kwpolska/Dropbox/Media/Wielka Gra.mp3&lt;/span&gt;
&lt;a name="rest_code_0ea7743339e64359b9de130c5fea3543-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;command&lt;/tt&gt; to komenda odtwarzacza, która zostanie wywołana. Możesz użyć
&lt;tt class="docutils literal"&gt;play&lt;/tt&gt; (z pakietu &lt;tt class="docutils literal"&gt;sox&lt;/tt&gt;) albo jakiegokolwiek innego szybkiego odtwarzacza
muzyki działającego w konsoli.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;file&lt;/tt&gt; to nazwa pliku, który zostanie podany jako jedyny argument do komendy odtwarzacza. Nie jest potrzebne żadne escape’owanie. Ja używam czołówki z &lt;a class="reference external" href="https://www.youtube.com/watch?v=Nnu7I3b7ZbY"&gt;Wielkiej Gry&lt;/a&gt; (BTW: właśnie dodałem wersję MP3 na pierwszą rocznicę uploadu na YouTube!), Amerykanie mogą wybrać &lt;a class="reference external" href="https://www.youtube.com/watch?v=vXGhvoekY44"&gt;Jeopardy! Think Music&lt;/a&gt; (która jest źródłem nazwy komendy), Brytyjczycy mogą wybrać temat muzyczny z &lt;a class="reference external" href="https://www.youtube.com/watch?v=M2dhD9zR6hk"&gt;Countdown&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;behavior&lt;/tt&gt; może być jednym z:&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;return&lt;/tt&gt; — oddaj kontrolę do terminala jak tylko program skończy działać, bez zatrzymywania muzyki&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; — poczekaj aż muzyka się skończy przed oddaniem kontroli&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;stop&lt;/tt&gt; — zatrzymaj muzykę i oddaj kontrolę natychmiastowo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="uzycie"&gt;
&lt;h2&gt;Użycie&lt;/h2&gt;
&lt;p&gt;Dodaj &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; przed komendą, która długo się wykonuje:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_2295d4d5e56344278922ea3d0a8f5f6b-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;think sleep 120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>game show</category><category>Jeopardy!</category><category>Linux</category><category>projects</category><category>Python</category><category>think</category><guid>https://chriswarrick.com/pl/blog/2015/05/30/think/</guid><pubDate>Sat, 06 Jun 2015 12:15:00 GMT</pubDate></item><item><title>Revamping My Projects Page with Nikola</title><link>https://chriswarrick.com/pl/blog/2014/10/13/revamping-my-projects-page-with-nikola/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A week ago, I was inspired to produce a new &lt;a class="reference external" href="https://chriswarrick.com/projects/"&gt;projects page&lt;/a&gt; for
myself.  The previous one was a trainwreck with a lot of hacks.  Also hosted on
GitHub Pages for some reason.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;So, considering I’m so invested in &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; already,
I produced the &lt;a class="reference external" href="http://plugins.getnikola.com/#projectpages"&gt;projectpages plugin&lt;/a&gt;
and also made it publicly available.  The plugin produces two files,
&lt;tt class="docutils literal"&gt;projects/index.html&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;projects/projects.json&lt;/tt&gt;, and also enforces a
specific framework for the stories used for the individual projects, because
all the metadata are taken from special meta fields.&lt;/p&gt;
&lt;p&gt;In Nikola, post metadata is completely arbitrary (in fact, that’s my fault; I
&lt;a class="reference external" href="https://github.com/getnikola/nikola/pull/304"&gt;contributed the feature&lt;/a&gt; back in February 2013).
You can put anything you want, and Nikola will let any plugin and template use the information in any way it likes.&lt;/p&gt;
&lt;p&gt;And that is basically the gist of the projectpages plugin.  Using some specific
&lt;a class="reference external" href="https://github.com/getnikola/plugins/tree/master/v7/projectpages#meta-fields"&gt;meta fields&lt;/a&gt;,
the plugin produces all the files.  It also provides ready-made templates for
the story pages (though the default templates are designed to fit my site
only).&lt;/p&gt;
&lt;p&gt;This plugin is basically a special index page generator.  It takes all the
stories in the designated projects directory, looks at the metadata, and
lists them in a nice format (slider of featured projects + a list of everything
else that is not hidden).  Everything automated and done for you, as is always
with Nikola — which values simplicity and ease of use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The result:&lt;/strong&gt; a pretty &lt;strong&gt;&lt;a href="https://chriswarrick.com/projects/"&gt;projects page&lt;/a&gt;&lt;/strong&gt;.  And some good OSS work done.&lt;/p&gt;&lt;p&gt;PS. I just underwent a move to &lt;a class="reference external" href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;
and I love them.  Moreover, this blog is proudly &lt;em&gt;HTTPS only&lt;/em&gt; as of yesterday.&lt;/p&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2014/10/13/revamping-my-projects-page-with-nikola/</guid><pubDate>Mon, 13 Oct 2014 12:15:00 GMT</pubDate></item></channel></rss>