<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Linux)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Tue, 26 Jul 2016 13:21:20 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Deploying Python Web Applications with nginx and uWSGI Emperor</title><link>https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You just wrote a great Python web application. Now, you want to share it with the world. In order to do that, you need a server, and some software to do that for you.&lt;/p&gt;
&lt;p&gt;The following is a comprehensive guide on how to accomplish that, on multiple Linux-based operating systems, using nginx and uWSGI Emperor. It doesn’t force you to use any specific web framework — Flask, Django, Pyramid, Bottle will all work. Written for Ubuntu, Fedora and Arch Linux (should be helpful for other systems, too)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;In order to deploy your web application, you need a server that gives you root and ssh access — in other words, a VPS (or a dedicated server, or a datacenter lease…). If you’re looking for a great VPS service for a low price, I recommend &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=7983689b2ecc"&gt;DigitalOcean&lt;/a&gt; (reflink &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id6" id="id1"&gt;[1]&lt;/a&gt;), which offers a $5/mo service &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id7" id="id2"&gt;[2]&lt;/a&gt;. If you want to play along at home, without buying a VPS, you can create a virtual machine on your own, or use a Vagrant with a &lt;a class="reference external" href="https://getfedora.org/en/cloud/download/"&gt;Vagrant box for Fedora 23&lt;/a&gt; (I recommend disabling SELinux, more on that later).&lt;/p&gt;
&lt;p&gt;Your server should also run a modern Linux-based operating system. I tested and wrote this guide for Ubuntu 15.10 &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id8" id="id3"&gt;[3]&lt;/a&gt;, Fedora 23 and Arch Linux, but other Linux distributions (and perhaps *BSD) will work (in places where the instructions are split three-way, try coming up with your own, reading documentation and config files).  Unfortunately, all Linux distributions have their own ideas when it comes to running and managing nginx and UWSGI.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;All the commands in this tutorial are meant to be run &lt;strong&gt;as root&lt;/strong&gt; — run &lt;tt class="docutils literal"&gt;su&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;sudo su&lt;/tt&gt; first to get an administrative shell.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Start by installing virtualenv, nginx and uWSGI. I recommend using your operating system packages. For uWSGI, we need the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugins. (Arch Linux names the &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugin &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;; the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin may be built-in — check with your system repositories!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_6f648f5ef2fa4927999ee21fb3e56e5c-1"&gt;&lt;/a&gt;aptitude install virtualenv python3 uwsgi uwsgi-emperor uwsgi-plugin-python3 nginx-full
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_adb366d454d74f06bc178a1b4fa4ebd5-1"&gt;&lt;/a&gt;dnf install python3-virtualenv uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_b6d16bebe3fa467a9d5200988aa82299-1"&gt;&lt;/a&gt;pacman -S python-virtualenv uwsgi uwsgi-plugin-python nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="preparing-your-application"&gt;
&lt;h2&gt;Preparing your application&lt;/h2&gt;
&lt;p&gt;This tutorial will work for any web framework. I will, use &lt;a class="reference external" href="https://github.com/Kwpolska/flask-demo-app"&gt;a really basic Flask app&lt;/a&gt; that has just one route (&lt;tt class="docutils literal"&gt;/&lt;/tt&gt;), a static &lt;tt class="docutils literal"&gt;hello.png&lt;/tt&gt; file and a &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; for demonstration purposes. Note that the app does not use &lt;tt class="docutils literal"&gt;app.run()&lt;/tt&gt;. While you could add it, it would be used for local development and debugging only, and would be prepended by &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; — uWSGI doesn’t work alongside it.&lt;/p&gt;
&lt;p&gt;The app will be installed somewhere under the &lt;tt class="docutils literal"&gt;/srv&lt;/tt&gt; directory, which is a great place to store things like this. I’ll choose &lt;tt class="docutils literal"&gt;/srv/myapp&lt;/tt&gt; for this tutorial, but for real deployments, you should use sometihing more distinguishable — the domain name is a great idea.&lt;/p&gt;
&lt;p&gt;We’ll start by creating a virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_79d452180221453a80e11ba017bdce26-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;srv
&lt;a name="rest_code_79d452180221453a80e11ba017bdce26-2"&gt;&lt;/a&gt;virtualenv -p /usr/bin/python3 myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_71445e41825f496993ad08dfe2e42e09-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_71445e41825f496993ad08dfe2e42e09-2"&gt;&lt;/a&gt;virtualenv-3.4 myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_a0ee40a9ebd441e6bde56c1a6297eef5-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_a0ee40a9ebd441e6bde56c1a6297eef5-2"&gt;&lt;/a&gt;virtualenv3 myapp
&lt;/pre&gt;&lt;p&gt;(Make sure you create a Python 3 environment!)&lt;/p&gt;
&lt;p&gt;Now, we need to get our app there and install requirements. An example for the tutorial demo app (adjust for your clone/download path):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_1a6806dde5bb455484ef84d1f6c6bb3c-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myapp
&lt;a name="rest_code_1a6806dde5bb455484ef84d1f6c6bb3c-2"&gt;&lt;/a&gt;cp -r ~/git/flask-demo-app appdata
&lt;a name="rest_code_1a6806dde5bb455484ef84d1f6c6bb3c-3"&gt;&lt;/a&gt;bin/pip install -r appdata/requirements.txt
&lt;/pre&gt;&lt;p&gt;I’m storing my application data in the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; subdirectory so that it doesn’t clutter the virtualenv (or vice versa).  You may also install the &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in the virtualenv, but it’s optional.&lt;/p&gt;
&lt;p&gt;What this directory should be depends on your web framework.  For example, for a Django app, you should have an &lt;tt class="docutils literal"&gt;appdata/manage.py&lt;/tt&gt; file (in other words, &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; is where your app structure starts).  I also assumed that the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; folder should have a &lt;tt class="docutils literal"&gt;static&lt;/tt&gt; subdirectory with all static files, including &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; if you have one (we will add support for both in nginx).&lt;/p&gt;
&lt;p&gt;At this point, you should chown this directory to the user and group your server is going to run as.  This is especially important if uwsgi and nginx run as different users (as they do on Fedora). Run one of the following commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_0769be8b9e21494b81a9df7e2a67613d-1"&gt;&lt;/a&gt;chown -R www-data:www-data /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ba98b5b7307941509c031b97997cfd20-1"&gt;&lt;/a&gt;chown -R uwsgi:nginx /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_145bcf61304e4e269e8c06ad61e87543-1"&gt;&lt;/a&gt;chown -R http:http /srv/myapp
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configuring-uwsgi-and-nginx"&gt;
&lt;h2&gt;Configuring uWSGI and nginx&lt;/h2&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Parts of the configuration depend on your operating system. I tried to provide advice for Ubuntu, Fedora and Arch Linux. If you experience any issues, in particular with plugins, please consult the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We need to write a configuration file for uWSGI and nginx.&lt;/p&gt;
&lt;div class="section" id="uwsgi-configuration"&gt;
&lt;h3&gt;uWSGI configuration&lt;/h3&gt;
&lt;p&gt;Start with this, but read the notes below and change the values accordingly:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/uwsgi.sock&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;775&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-5"&gt;&lt;/a&gt;&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-6"&gt;&lt;/a&gt;&lt;span class="na"&gt;binary-path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/bin/uwsgi&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-7"&gt;&lt;/a&gt;&lt;span class="na"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-8"&gt;&lt;/a&gt;&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flaskapp:app&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-9"&gt;&lt;/a&gt;&lt;span class="na"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-10"&gt;&lt;/a&gt;&lt;span class="na"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-11"&gt;&lt;/a&gt;&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-12"&gt;&lt;/a&gt;&lt;span class="na"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-13"&gt;&lt;/a&gt;&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python3,logfile&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-14"&gt;&lt;/a&gt;&lt;span class="na"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file:/srv/myapp/uwsgi.log&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/uwsgi-emperor/vassals/myapp.ini&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora: &lt;tt class="docutils literal"&gt;/etc/uwsgi.d/myapp.ini&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: &lt;tt class="docutils literal"&gt;/etc/uwsgi/vassals/myapp.ini&lt;/tt&gt; (create the directory first and &lt;strong&gt;chown&lt;/strong&gt; it to http: &lt;tt class="docutils literal"&gt;mkdir &lt;span class="pre"&gt;-p&lt;/span&gt; /etc/uwsgi/vassals; chown &lt;span class="pre"&gt;-R&lt;/span&gt; http:http /etc/uwsgi/vassals&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The options are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;socket&lt;/tt&gt; — the socket file that will be used by your application. It’s usually a file path (Unix domain socket). You could use a local TCP socket, but it’s not recommended.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;chdir&lt;/tt&gt; — the app directory.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;binary-path&lt;/span&gt;&lt;/tt&gt; — the uWSGI executable to use. Remove if you didn’t install the (optional) &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in your virtualenv.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; — the virtualenv for your application.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;module&lt;/tt&gt; — the name of the module that houses your application, and the object that speaks the WSGI interface, separated by colons. This depends on your web framework:&lt;ul&gt;
&lt;li&gt;For Flask: &lt;tt class="docutils literal"&gt;module = filename:app&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;filename&lt;/tt&gt; is the name of your Python file (without the &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; part) and &lt;tt class="docutils literal"&gt;app&lt;/tt&gt; is the &lt;tt class="docutils literal"&gt;Flask&lt;/tt&gt; object&lt;/li&gt;
&lt;li&gt;For Django: &lt;tt class="docutils literal"&gt;module = project.wsgi:application&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;project&lt;/tt&gt; is the name of your project (directory with &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt;).  You should also add an environment variable: &lt;tt class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;For Bottle: &lt;tt class="docutils literal"&gt;module = filename:app&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;app = bottle.default_app()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;For Pyramid: &lt;tt class="docutils literal"&gt;module = filename:app&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;app = config.make_wsgi_app()&lt;/tt&gt; (make sure it’s &lt;strong&gt;not&lt;/strong&gt; in a &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; block — the demo app does that!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;uid&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;gid&lt;/tt&gt; — the names of the user account to use for your server.  Use the same values as in the &lt;tt class="docutils literal"&gt;chown&lt;/tt&gt; command above.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;processes&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;threads&lt;/tt&gt; — control the resources devoted to this application. Because this is a simple hello app, I used one process with one thread, but for a real app, you will probably need more (you need to see what works the best; there is no algorithm to decide). Also, remember that if you use multiple processes, they don’t share data, so you need an out-of-process database if you want that.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; — the list of uWSGI plugins to use. For Arch Linux, use &lt;tt class="docutils literal"&gt;plugins = python&lt;/tt&gt; (the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin is always active).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;logger&lt;/tt&gt; — the path to your app-specific logfile. (Other logging facilities are available, but this one is the easiest, especially for multiple applications on the same server)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test your configuration by running &lt;tt class="docutils literal"&gt;uwsgi &lt;span class="pre"&gt;--ini&lt;/span&gt; /path/to/myapp.ini&lt;/tt&gt; (disable the logger for stderr output or run &lt;tt class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt; /srv/myapp/uwsgi.log&lt;/tt&gt; in another window).&lt;/p&gt;
&lt;p&gt;If you’re using &lt;strong&gt;Fedora&lt;/strong&gt;, there are two configuration changes you need to make globally: in &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt;, disable the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;emperor-tyrant&lt;/span&gt;&lt;/tt&gt; option (which seems to be buggy) and set &lt;tt class="docutils literal"&gt;gid = nginx&lt;/tt&gt;.  We’ll need this so that nginx can talk to your socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx-configuration"&gt;
&lt;h3&gt;nginx configuration&lt;/h3&gt;
&lt;p&gt;We need to configure our web server. Here’s a basic configuration that will get us started:&lt;/p&gt;
&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled/myapp.conf&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora: &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: add &lt;tt class="docutils literal"&gt;include &lt;span class="pre"&gt;/etc/nginx/conf.d/*.conf;&lt;/span&gt;&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;http&lt;/tt&gt; directive in &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; and use &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code nginx"&gt;&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-2"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-3"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt; &lt;span class="s"&gt;myapp.local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-5"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-6"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-7"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/srv/myapp/uwsgi.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-8"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-10"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-11"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-12"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-14"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/favicon.ico&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-15"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static/favicon.ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-16"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that this file is a very basic and rudimentary configuration. This configuration is fine for local testing, but for a real deployment, you will need to adjust it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;listen&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;443 ssl&lt;/tt&gt; and create a http→https redirect on port 80 (you can get a free SSL certificate from &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;; &lt;a class="reference external" href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html"&gt;make sure to configure SSL properly&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;server_name&lt;/tt&gt; to your real domain name&lt;/li&gt;
&lt;li&gt;you might also want to add custom error pages, or change anything else that relates to your web server — consult other nginx guides for details&lt;/li&gt;
&lt;li&gt;nginx might have some server already enabled by default — edit &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; to disable it&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-setup"&gt;
&lt;h2&gt;Service setup&lt;/h2&gt;
&lt;p&gt;After you’ve configured uWSGI and nginx, you need to enable and start the system services.&lt;/p&gt;
&lt;p&gt;I’m going to use &lt;tt class="docutils literal"&gt;systemd&lt;/tt&gt; here. If your system does not support &lt;tt class="docutils literal"&gt;systemd&lt;/tt&gt;, please consult your OS documentation for instructions.&lt;/p&gt;
&lt;div class="section" id="for-arch-linux"&gt;
&lt;h3&gt;For Arch Linux&lt;/h3&gt;
&lt;p&gt;All you need is:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_9fdf17c51df44e03ac1bebc44a1eabe6-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx emperor.uwsgi
&lt;a name="rest_code_9fdf17c51df44e03ac1bebc44a1eabe6-2"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-fedora"&gt;
&lt;h3&gt;For Fedora&lt;/h3&gt;
&lt;p&gt;Make sure you followed the extra note about editing &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt; and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ad1d8cea92e047498c39e4a2af19f226-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx uwsgi
&lt;a name="rest_code_ad1d8cea92e047498c39e4a2af19f226-2"&gt;&lt;/a&gt;systemctl start nginx uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;This is enough to get an app working, if you disabled SELinux (if you want to do it, edit &lt;tt class="docutils literal"&gt;/etc/selinux/config&lt;/tt&gt; and reboot), but if you want to keep SELinux happy, you need to do the following:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_732b4775f29f425187b5576f629537b3-1"&gt;&lt;/a&gt;setenforce 0
&lt;a name="rest_code_732b4775f29f425187b5576f629537b3-2"&gt;&lt;/a&gt;chcon -R system_u:system_r:httpd_t:s0 /srv/myapp/appdata/static
&lt;a name="rest_code_732b4775f29f425187b5576f629537b3-3"&gt;&lt;/a&gt;setenforce 1
&lt;/pre&gt;&lt;p&gt;We now need to install a &lt;a class="reference external" href="https://chriswarrick.com/pub/nginx-uwsgi.pp"&gt;SELinux policy&lt;/a&gt; (that I created for this project). If it doesn’t work, look into &lt;tt class="docutils literal"&gt;audit2allow&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_8d53b4d227604450a46952de0896b650-1"&gt;&lt;/a&gt;semodule -i nginx-uwsgi.pp
&lt;/pre&gt;&lt;p&gt;Hopefully, this is enough. In case it isn’t, please read SELinux documentation, and check audit logs.&lt;/p&gt;
&lt;p&gt;Also if you’re on Fedora, to make your website accessible from the outside Internet, you need to configure the built-in firewall accordingly — for ports 80/443, use:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_2450adbc926d40ff9494a212cba944dc-1"&gt;&lt;/a&gt;firewall-cmd --add-service http
&lt;a name="rest_code_2450adbc926d40ff9494a212cba944dc-2"&gt;&lt;/a&gt;firewall-cmd --add-service https
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="for-ubuntu"&gt;
&lt;h3&gt;For Ubuntu&lt;/h3&gt;
&lt;p&gt;Ubuntu does not ship the uWSGI Emperor service by default. However, you can easily create it.  Copy the &lt;tt class="docutils literal"&gt;.service&lt;/tt&gt; file from the &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.org/en/latest/Systemd.html#adding-the-emperor-to-systemd"&gt;uWSGI systemd documentation&lt;/a&gt; to &lt;tt class="docutils literal"&gt;/etc/systemd/system/emperor.uwsgi.service&lt;/tt&gt;.  Change the ExecStart line to:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_4183cac74cc64092b210555e3d49479b-1"&gt;&lt;/a&gt;&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/uwsgi --ini /etc/uwsgi-emperor/emperor.ini&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can now reload systemd daemons and enable the services:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_04a9db9d0f0c4e0db37b3703170619b7-1"&gt;&lt;/a&gt;systemctl daemon-reload
&lt;a name="rest_code_04a9db9d0f0c4e0db37b3703170619b7-2"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx emperor.uwsgi
&lt;a name="rest_code_04a9db9d0f0c4e0db37b3703170619b7-3"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-end-result"&gt;
&lt;h2&gt;Testing — end result&lt;/h2&gt;
&lt;p&gt;Your web service should now be running at &lt;a class="reference external" href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you used the demo application, you should see something like this (complete with the favicon and image greeting):&lt;/p&gt;
&lt;img alt="/images/nginx-uwsgi-demo.png" class="centered" src="https://chriswarrick.com/images/nginx-uwsgi-demo.png"&gt;
&lt;p&gt;Hopefully, everything works. If it doesn’t, check nginx and uwsgi logs for details, and make sure you followed all instructions.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;For easy linking, I set up some aliases: &lt;a class="reference external" href="https://go.chriswarrick.com/pyweb"&gt;https://go.chriswarrick.com/pyweb&lt;/a&gt; and &lt;a class="reference external" href="https://go.chriswarrick.com/uwsgi-tut"&gt;https://go.chriswarrick.com/uwsgi-tut&lt;/a&gt; (powered by a Django web application, deployed with nginx and uwsgi!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2016-02-10 17:00 UTC:&lt;/strong&gt; This guide uses nginx and uWSGI, because they
are considered best practices by most people. nginx is a fast, modern web
server, with uWSGI support built in (without resorting to reverse proxying).
uWSGI is similarly aimed at speed. The Emperor mode of uWSGI is recommended for
init system integration by the uWSGI team, and it’s especially useful for
multi-app deployments. (This guide is opinionated.)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This reflink gives you $10 in credit, which is enough to run a server for up to two months without paying a thing. I earn $15.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you’re in the EU (and thus have to pay VAT), or want DO to handle your backups, it will cost you a little more.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ubuntu 14.04 LTS does not use systemd — you’re on your own (upstart services exist, figure out how to use them yourself). Note that other software might be outdated as well — proceed with care, or just use something more modern.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</guid><pubDate>Wed, 10 Feb 2016 14:00:00 GMT</pubDate></item><item><title>Nowy projekt: upass — konsolowy interfejs dla pass</title><link>https://chriswarrick.com/pl/blog/2015/07/06/upass/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.passwordstore.org/"&gt;pass&lt;/a&gt; to standardowy Uniksowy manager haseł.
A ja właśnie stworzyłem odrobinę przyjaźniejszy, klikalniejszy interfejs przy
użyciu biblioteki urwid w Pythonie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/upass/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Strona projektu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/upass/" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-picture-o"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/upass" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/upass" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; używa biblioteki urwid, co oznacza, że ma przyjazny pełnoekranowy interfejs konsolowy.
Pokazuje strukturę katalogów (ze spłaszczonymi podkatalogami) i wywołuje
&lt;tt class="docutils literal"&gt;pass&lt;/tt&gt; na żądanie.  (Nie używa &lt;tt class="docutils literal"&gt;pass &lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; przez problemy z podprocesami, w
zamian samodzielnie kopiując tekst — zauważ, że schowek &lt;strong&gt;nie zostanie
wyczyszczony&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Jeśli chcesz zobaczyć, jak wygląda &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt;, odwiedź &lt;a class="reference external" href="https://chriswarrick.com/pl/galleries/upass/"&gt;galerię zrzutów ekranu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; jest ciągle rozwijany (i został pierwotnie napisany w jeden wieczór).
Jeśli masz pomysły, znalazłeś błędy, lub chcesz pomóc, odwiedź
&lt;a class="reference external" href="https://github.com/Kwpolska/upass"&gt;stronę na GitHubie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Możesz zainstalować &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; z &lt;a class="reference external" href="https://pypi.python.org/pypi/upass"&gt;PyPI&lt;/a&gt; (przy uzyciu &lt;tt class="docutils literal"&gt;pip install upass&lt;/tt&gt;). Użytkownicy
Arch Linux mogą zainstalować pakiet &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; z AUR.&lt;/p&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>Linux</category><category>password</category><category>projects</category><category>Python</category><category>upass</category><guid>https://chriswarrick.com/pl/blog/2015/07/06/upass/</guid><pubDate>Mon, 06 Jul 2015 12:30:00 GMT</pubDate></item><item><title>Nowy projekt: think (Terminal Think Music)</title><link>https://chriswarrick.com/pl/blog/2015/05/30/think/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Czy uruchamiasz proces, który długo się wykonuje?  Czy chcesz wiedzieć, kiedy
skończy pracę, gdy używasz innego Terminala/parzysz kawę?  Czy masz ulubioną
muzykę z teleturnieju do odtworzenia gdy coś robisz?&lt;/p&gt;
&lt;p&gt;Jeśli tak: &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; jest właśnie dla ciebie.  By dowiedzieć się więcej, czytaj dalej lub &lt;a class="reference external" href="https://github.com/Kwpolska/think"&gt;odwiedź stronę na GitHubie [en]&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/think/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Strona projektu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think/releases" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (GitHub)
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/think" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;div class="section" id="instalacja"&gt;
&lt;h2&gt;Instalacja&lt;/h2&gt;
&lt;p&gt;Możesz zainstalować &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; z &lt;a class="reference external" href="https://pypi.python.org/pypi/think"&gt;PyPI&lt;/a&gt; (przy uzyciu &lt;tt class="docutils literal"&gt;pip install think&lt;/tt&gt;). Użytkownicy Arch Linux
mogą zainstalować pakiet &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; z AUR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="konfiguracja"&gt;
&lt;h2&gt;Konfiguracja&lt;/h2&gt;
&lt;p&gt;Utwórz plik &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/think.conf&lt;/span&gt;&lt;/tt&gt; (tam, gdzie jest &lt;tt class="docutils literal"&gt;XDG_CONFIG_HOME&lt;/tt&gt;),
zawierający poniższe cztery linie:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_7e231855b973418b88d1c0ebcd75c26d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[Think]&lt;/span&gt;
&lt;a name="rest_code_7e231855b973418b88d1c0ebcd75c26d-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;play&lt;/span&gt;
&lt;a name="rest_code_7e231855b973418b88d1c0ebcd75c26d-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kwpolska/Dropbox/Media/Wielka Gra.mp3&lt;/span&gt;
&lt;a name="rest_code_7e231855b973418b88d1c0ebcd75c26d-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;command&lt;/tt&gt; to komenda odtwarzacza, która zostanie wywołana. Możesz użyć
&lt;tt class="docutils literal"&gt;play&lt;/tt&gt; (z pakietu &lt;tt class="docutils literal"&gt;sox&lt;/tt&gt;) albo jakiegokolwiek innego szybkiego odtwarzacza
muzyki działającego w konsoli.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;file&lt;/tt&gt; to nazwa pliku, który zostanie podany jako jedyny argument do komendy odtwarzacza. Nie jest potrzebne żadne escape’owanie. Ja używam czołówki z &lt;a class="reference external" href="https://www.youtube.com/watch?v=Nnu7I3b7ZbY"&gt;Wielkiej Gry&lt;/a&gt; (BTW: właśnie dodałem wersję MP3 na pierwszą rocznicę uploadu na YouTube!), Amerykanie mogą wybrać &lt;a class="reference external" href="https://www.youtube.com/watch?v=vXGhvoekY44"&gt;Jeopardy! Think Music&lt;/a&gt; (która jest źródłem nazwy komendy), Brytyjczycy mogą wybrać temat muzyczny z &lt;a class="reference external" href="https://www.youtube.com/watch?v=M2dhD9zR6hk"&gt;Countdown&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;behavior&lt;/tt&gt; może być jednym z:&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;return&lt;/tt&gt; — oddaj kontrolę do terminala jak tylko program skończy działać, bez zatrzymywania muzyki&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; — poczekaj aż muzyka się skończy przed oddaniem kontroli&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;stop&lt;/tt&gt; — zatrzymaj muzykę i oddaj kontrolę natychmiastowo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="uzycie"&gt;
&lt;h2&gt;Użycie&lt;/h2&gt;
&lt;p&gt;Dodaj &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; przed komendą, która długo się wykonuje:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_86e78c91aa834e2298747ba164dd7128-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;think sleep 120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>game show</category><category>Jeopardy!</category><category>Linux</category><category>projects</category><category>Python</category><category>think</category><guid>https://chriswarrick.com/pl/blog/2015/05/30/think/</guid><pubDate>Sat, 06 Jun 2015 12:15:00 GMT</pubDate></item><item><title>systemd is awesome.</title><link>https://chriswarrick.com/pl/blog/2015/01/30/systemd-is-awesome/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently switched distros on my server, from Debian to Fedora, to use
&lt;tt class="docutils literal"&gt;systemd&lt;/tt&gt; and keep it in line with my home &lt;a class="reference external" href="https://chriswarrick.com/blog/2011/01/06/arch-linux-the-best-distro-ever/"&gt;Arch Linux&lt;/a&gt; system (which was
not reinstalled since 2010, by the way!)  Why is systemd so awesome?  Read
on to find out.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;em&gt;(I changed the hardware for my home system along the way.  And just copied
everything over with ``dd``.  That’s Linux at its finest.)&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="user-friendly"&gt;
&lt;h2&gt;User friendly&lt;/h2&gt;
&lt;p&gt;The most important thing in systemd is its user friendliness.  systemd offers
the &lt;tt class="docutils literal"&gt;systemctl&lt;/tt&gt; tool, which can be used to control all the services.  You
can see what exactly is going on: what is running, what failed to start,
and you can also see why if you ask &lt;tt class="docutils literal"&gt;systemctl status $SERVICE&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;Services&lt;/h2&gt;
&lt;div class="section" id="writing-services-is-fun"&gt;
&lt;h3&gt;Writing services is fun&lt;/h3&gt;
&lt;p&gt;If you want your own services, you just need to write some simple INI files.  No
need for bash, distro-specific frameworks and whatnot.  If I have a functioning
service written on Arch, I can just copy the file over to Fedora and blindly
enable it — assuming I have the executables installed, it’s guaranteed to work.&lt;/p&gt;
&lt;p&gt;And the units are tiny:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
fedora$ wc -l /usr/lib/systemd/system/nginx.service
15 /usr/lib/systemd/system/nginx.service
debian$ wc -l /etc/init.d/nginx
101 /etc/init.d/nginx
&lt;/pre&gt;
&lt;p&gt;And you can write a bare-minimum systemd daemon in less than that – not so easy
with &lt;tt class="docutils literal"&gt;sysvinit&lt;/tt&gt; (writing everything on one line doesn’t count!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="managing-personal-services"&gt;
&lt;h3&gt;Managing personal services&lt;/h3&gt;
&lt;p&gt;systemd also features user-specific services.  You can run any service as your
user.  I use this to run &lt;a class="reference external" href="https://chriswarrick.com/kwbot/"&gt;KwBot&lt;/a&gt;, which was previously under control of
&lt;tt class="docutils literal"&gt;supervisord&lt;/tt&gt; — that’s one less dependency to care about!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="runlevels-do-not-exist"&gt;
&lt;h3&gt;Runlevels do not exist&lt;/h3&gt;
&lt;p&gt;systemd does away with the standard convention of runlevels.  They are replaced
by human-friendly &lt;em&gt;targets&lt;/em&gt;.  Each unit defines its target: most use
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;multi-user.target&lt;/span&gt;&lt;/tt&gt;.  It is much easier to manage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-symlink-mess"&gt;
&lt;h3&gt;No symlink mess&lt;/h3&gt;
&lt;p&gt;Just like old sysvinit-esque systems, systemd uses symlinks to manage
enabled/disabled services.  There is just one difference: you get just &lt;strong&gt;one&lt;/strong&gt;
symlink in the appropriate &lt;tt class="docutils literal"&gt;.wants&lt;/tt&gt; directory.  You do not have to look into
all the different runlevels.  &lt;tt class="docutils literal"&gt;graphical.target&lt;/tt&gt; depends on
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;multi-user.target&lt;/span&gt;&lt;/tt&gt;, which in turn depends on &lt;tt class="docutils literal"&gt;basic.target&lt;/tt&gt;, which depends
on a few more targets required to get the system up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="units-can-depend-on-each-other"&gt;
&lt;h3&gt;Units can depend on each other&lt;/h3&gt;
&lt;p&gt;Do you have some units that require the network to be up?  Set it to be run
after and require &lt;tt class="docutils literal"&gt;network.target&lt;/tt&gt; and call it a day.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-journal"&gt;
&lt;h2&gt;The Journal&lt;/h2&gt;
&lt;p&gt;If I want to know what is going on in my system, I can just ask &lt;tt class="docutils literal"&gt;journalctl&lt;/tt&gt;
to show me the most recent messages.  I don’t need to read a thousand different
log files — most things appear in the journal.  Sure, some things aren’t there
(yet), but what I &lt;em&gt;can&lt;/em&gt; see is very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="did-i-really-change-my-distro-for-all-that"&gt;
&lt;h2&gt;Did I really change my distro for all that?&lt;/h2&gt;
&lt;p&gt;Yes.  I got too annoyed with Debian’s idiocy.  Also, DigitalOcean doesn’t
&lt;em&gt;really&lt;/em&gt; support Debian testing, and I cannot survive with outdated software.
I feel much better and, more importantly, &lt;strong&gt;safer&lt;/strong&gt; with Fedora.&lt;/p&gt;
&lt;p&gt;(also, the “Veteran Unix Admins” of Devuan are a bunch of idiots.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2015/01/30/systemd-is-awesome/</guid><pubDate>Fri, 30 Jan 2015 15:00:00 GMT</pubDate></item><item><title>Zsh — A Shell For The Power Users.</title><link>https://chriswarrick.com/pl/blog/2011/03/05/zsh-a-shell-for-the-power-users/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;What’s the most important non-kernel piece of software in UNIX-like OSes? The shell. A good shell.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I’m working with UNIX-like OSes a long time. I wasn’t using a shell all the time, but the black window with a monospace font was seen more often on my screen with time. A black window with &lt;cite&gt;bash&lt;/cite&gt; in it. Are you wondering why? They set it as the default shell. And some users might not bother with changing their settings or testing other shells.&lt;/p&gt;
&lt;div class="section" id="user-localhost-zsh"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;user@localhost:~$&lt;/span&gt; zsh&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Are you still using bash? Switch over to zsh and learn why it’s better. Let’s begin with a reason list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-1-intelligent-completion"&gt;
&lt;h2&gt;Reason #1. Intelligent Completion&lt;/h2&gt;
&lt;p&gt;The zsh’s bulit-in completion is the best one ever made. For example, here is how regular bash responds to &lt;tt class="docutils literal"&gt;pacman &lt;span class="pre"&gt;&amp;lt;Tab&amp;gt;&amp;lt;Tab&amp;gt;&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5df21c565b1c4c04b3650ce965139e51-1"&gt;&lt;/a&gt;[kwpolska@kwpolska-lin ~]$ pacman
&lt;a name="rest_code_5df21c565b1c4c04b3650ce965139e51-2"&gt;&lt;/a&gt;Display all XXX possibilities? (y or n)
&lt;/pre&gt;&lt;p&gt;(The &lt;em&gt;possibilities&lt;/em&gt; are all the files and directories in the current working directory.)&lt;/p&gt;
&lt;p&gt;And here’s another bash response, this time with bash-completion:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_42d291c664ae4a4c9f5beb023e7e9326-1"&gt;&lt;/a&gt;[kwpolska@kwpolska-lin ~]$ pacman -
&lt;a name="rest_code_42d291c664ae4a4c9f5beb023e7e9326-2"&gt;&lt;/a&gt;-D          -h          -Q          -R          -S          -U          -V
&lt;a name="rest_code_42d291c664ae4a4c9f5beb023e7e9326-3"&gt;&lt;/a&gt;--database  --help      --query     --remove    --sync      --upgrade   --version
&lt;/pre&gt;&lt;p&gt;That’s much more helpful, but a new user still wouldn’t know what to do.&lt;/p&gt;
&lt;p&gt;Are you wondering what zsh did after adding a &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; before the first &lt;tt class="docutils literal"&gt;&amp;lt;Tab&amp;gt;&lt;/tt&gt;?&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_9f058869013f46339f9f3382c4de5db9-1"&gt;&lt;/a&gt;[kwpolska@kwpolska-lin ~]$ pacman -Q
&lt;a name="rest_code_9f058869013f46339f9f3382c4de5db9-2"&gt;&lt;/a&gt;-Q  -- Query the package database
&lt;a name="rest_code_9f058869013f46339f9f3382c4de5db9-3"&gt;&lt;/a&gt;-R  -- Remove a package from the system
&lt;a name="rest_code_9f058869013f46339f9f3382c4de5db9-4"&gt;&lt;/a&gt;-S  -- Synchronize packages
&lt;a name="rest_code_9f058869013f46339f9f3382c4de5db9-5"&gt;&lt;/a&gt;-U  -- Upgrade a package
&lt;a name="rest_code_9f058869013f46339f9f3382c4de5db9-6"&gt;&lt;/a&gt;-V  -- Display version and exit
&lt;a name="rest_code_9f058869013f46339f9f3382c4de5db9-7"&gt;&lt;/a&gt;-h  -- Display usage
&lt;/pre&gt;&lt;p&gt;(If you will press tab once, it will just show the possibilities. If you will press it once again, it will change to -R.)&lt;/p&gt;
&lt;p&gt;Do you want to start the GNOME’s Preferred Applications dialog box &lt;strong&gt;from the shell, without using the Tab key&lt;/strong&gt;? Good luck! The name is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gnome-default-applications-properties&lt;/span&gt;&lt;/tt&gt;. That’s &lt;strong&gt;38&lt;/strong&gt; characters. &lt;strong&gt;THIRTY EIGHT&lt;/strong&gt; characters. If you will make a typo in bash, you’ll see “command not found”, swear a few times and find the typo yourself. With zsh, instead of searching for typo, you can press &lt;tt class="docutils literal"&gt;&amp;lt;Tab&amp;gt;&lt;/tt&gt;. In many cases, you’ll see the proper command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-2-no-cd-required"&gt;
&lt;h2&gt;Reason #2. No &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; required&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;If you will add one line to your zshrc, you’ll be able to skip cd if you want to go to a directory (doesn’t work if there’s something in the &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; with the same name)::&lt;/dt&gt;
&lt;dd&gt;setopt autocd&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-3-bulit-in-commands"&gt;
&lt;h2&gt;Reason #3. Bulit-in commands&lt;/h2&gt;
&lt;p&gt;Do you want to use the basic &lt;tt class="docutils literal"&gt;more&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;less&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;$PAGER&lt;/tt&gt; to read a file? Just say &lt;tt class="docutils literal"&gt;&amp;lt;filename&lt;/tt&gt; and you’re done. Do you need to use FTP? You can use &lt;tt class="docutils literal"&gt;zftp&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-4-bindkeys"&gt;
&lt;h2&gt;Reason #4. &lt;tt class="docutils literal"&gt;bindkeys&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Wish to use some keys for special text operations? You can use bindkeys. I’m binding these keystrokes:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-1"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[1~"&lt;/span&gt; beginning-of-line       &lt;span class="c"&gt;# Home&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-2"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[4~"&lt;/span&gt; end-of-line             &lt;span class="c"&gt;# End&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-3"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[5~"&lt;/span&gt; beginning-of-history    &lt;span class="c"&gt;# PageUp&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-4"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[6~"&lt;/span&gt; end-of-history          &lt;span class="c"&gt;# PageDown&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-5"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[2~"&lt;/span&gt; quoted-insert           &lt;span class="c"&gt;# Ins&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-6"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[3~"&lt;/span&gt; delete-char             &lt;span class="c"&gt;# Del&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-7"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[OH"&lt;/span&gt;  beginning-of-line       &lt;span class="c"&gt;# Home&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-8"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[OF"&lt;/span&gt;  end-of-line             &lt;span class="c"&gt;# End&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-9"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[5~"&lt;/span&gt; beginning-of-history    &lt;span class="c"&gt;# PageUp&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-10"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[6~"&lt;/span&gt; end-of-history          &lt;span class="c"&gt;# PageDown&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-11"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[2~"&lt;/span&gt; quoted-insert           &lt;span class="c"&gt;# Ins&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-12"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[3~"&lt;/span&gt; delete-char             &lt;span class="c"&gt;# Del&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-13"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[1;5D"&lt;/span&gt; backward-word         &lt;span class="c"&gt;# ^Left&lt;/span&gt;
&lt;a name="rest_code_122507b0123d4e4180af1c8203a9952a-14"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[1;5C"&lt;/span&gt; forward-word          &lt;span class="c"&gt;# ^Right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="getting-help"&gt;
&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;p&gt;Do you need help? Choose one of the sources.&lt;/p&gt;
&lt;div class="section" id="zsh-freenode"&gt;
&lt;h3&gt;#zsh @ freenode&lt;/h3&gt;
&lt;p&gt;Do you love IRC, like me? Visit #zsh at freenode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zshwiki"&gt;
&lt;h3&gt;ZSHWiki&lt;/h3&gt;
&lt;p&gt;The Z Shell has its very own wiki at &amp;lt;&lt;a class="reference external" href="http://zshwiki.org"&gt;http://zshwiki.org&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mailing-lists"&gt;
&lt;h3&gt;Mailing Lists&lt;/h3&gt;
&lt;p&gt;Subscribe to a mailing list: &amp;lt;&lt;a class="reference external" href="http://zsh.sourceforge.net/Arc/mlist.html"&gt;http://zsh.sourceforge.net/Arc/mlist.html&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="website-web-documentation"&gt;
&lt;h3&gt;Website/Web Documentation&lt;/h3&gt;
&lt;p&gt;You can find some information at &amp;lt;&lt;a class="reference external" href="http://zsh.sourceforge.net/"&gt;http://zsh.sourceforge.net/&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-man-page-aka-because-zsh-contains-many-features-the-zsh-manual-has-been-split-into-a-number-of-sections"&gt;
&lt;h3&gt;The Man Page aka &lt;em&gt;Because zsh contains many features, the zsh manual has been split into a number of sections&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;cite&gt;zsh&lt;/cite&gt; man page just tells you the most important things and informs you about other sections. If you aren’t sure where to search, try &lt;tt class="docutils literal"&gt;man zshall&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-1"&gt;&lt;/a&gt;zsh          Zsh overview
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-2"&gt;&lt;/a&gt;zshroadmap   Informal introduction to the manual
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-3"&gt;&lt;/a&gt;zshmisc      Anything not fitting into the other sections
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-4"&gt;&lt;/a&gt;zshexpn      Zsh command and parameter expansion
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-5"&gt;&lt;/a&gt;zshparam     Zsh parameters
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-6"&gt;&lt;/a&gt;zshoptions   Zsh options
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-7"&gt;&lt;/a&gt;zshbuiltins  Zsh built-in functions
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-8"&gt;&lt;/a&gt;zshzle       Zsh command line editing
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-9"&gt;&lt;/a&gt;zshcompwid   Zsh completion widgets
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-10"&gt;&lt;/a&gt;zshcompsys   Zsh completion system
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-11"&gt;&lt;/a&gt;zshcompctl   Zsh completion control
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-12"&gt;&lt;/a&gt;zshmodules   Zsh loadable modules
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-13"&gt;&lt;/a&gt;zshcalsys    Zsh built-in calendar functions
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-14"&gt;&lt;/a&gt;zshtcpsys    Zsh built-in TCP functions
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-15"&gt;&lt;/a&gt;zshzftpsys   Zsh built-in FTP client
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-16"&gt;&lt;/a&gt;zshcontrib   Additional zsh functions and utilities
&lt;a name="rest_code_ae5621f94a644e8ca1239465673a2b90-17"&gt;&lt;/a&gt;zshall       Meta-man page containing all of the above
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2011/03/05/zsh-a-shell-for-the-power-users/</guid><pubDate>Fri, 04 Mar 2011 23:00:00 GMT</pubDate></item><item><title>Arch Linux: The Best Linux Distro Ever.</title><link>https://chriswarrick.com/pl/blog/2011/01/06/arch-linux-the-best-distro-ever/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I’m using Linux since 2007. I’ve been on many distros (in order): &lt;a class="reference external" href="http://www2.mandriva.com/en/"&gt;Mandriva&lt;/a&gt;, &lt;a class="reference external" href="http://ubuntu.com"&gt;Ubuntu&lt;/a&gt;, &lt;a class="reference external" href="http://opensuse.org"&gt;openSuSE&lt;/a&gt;, &lt;a class="reference external" href="http://fedoraproject.org"&gt;Fedora&lt;/a&gt;, and only in &lt;a class="reference external" href="http://virtualbox.org"&gt;VirtualBox&lt;/a&gt;: &lt;a class="reference external" href="http://debian.org"&gt;Debian&lt;/a&gt; and &lt;a class="reference external" href="http://linuxmint.com"&gt;Linux Mint&lt;/a&gt;. But since two months there is another distro in both lists (I tested it out on VirtualBox and then set it up on the actual machine): &lt;a class="reference external" href="http://archlinux.org"&gt;Arch Linux&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Arch Linux is a Linux distribution by Judd Vinet and Aaron Griffin, existing since 2002, intended to be simple, elegant, versatile and expedient (See Reason #3). It uses pacman as the package manager. It’s a rolling-release distro, that means there are only new CD images released, you get updates even if you’ve installed Arch Linux v0.1.&lt;/p&gt;
&lt;div class="section" id="what-makes-it-so-awesome"&gt;
&lt;h2&gt;What makes it so awesome?&lt;/h2&gt;
&lt;p&gt;There are six things that makes it the best distro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-1-archwiki"&gt;
&lt;h2&gt;Reason 1. &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Main_Page"&gt;ArchWiki&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Arch Wiki is an awesome place. You can find many useful things about Arch. In this article you can find 9 links to articles in the wiki (plus two doubled).&lt;/p&gt;
&lt;p&gt;## Reason 2. Pacman and the AUR
The package manager is &lt;tt class="docutils literal"&gt;pacman&lt;/tt&gt;. It has a specific syntax. The &lt;a class="reference external" href="http://aur.archlinux.org/"&gt;Arch User Repository&lt;/a&gt; is a place, where you can find PKGBUILDs (build instructions, which help you make a package) for more packages than contents of the default repositioriies — &lt;tt class="docutils literal"&gt;[core]&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;[extra]&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;[community]&lt;/tt&gt; (which consists of binary packages that began their life in AUR) Read the &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Main_Page"&gt;ArchWiki&lt;/a&gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Pacman"&gt;Pacman&lt;/a&gt; and &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_User_Repository"&gt;AUR&lt;/a&gt; articles for details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-3-the-arch-way"&gt;
&lt;h2&gt;Reason 3. &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/The_Arch_Way_v2.0"&gt;The Arch Way&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The distro is &lt;em&gt;intended to be simple, elegant, versatile and expedient&lt;/em&gt;, as &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/The_Arch_Way_v2.0"&gt;The Arch Way&lt;/a&gt; v2.0 states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-4-etc-rc-conf"&gt;
&lt;h2&gt;Reason 4. &lt;tt class="docutils literal"&gt;/etc/rc.conf&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;/etc/rc.conf&lt;/tt&gt; is the main configuration file. &lt;strong&gt;Or at least it was when I
wrote this post.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;systemd&lt;/strong&gt; replaced it.  And boy is it awesome.  It’s much more friendly than
&lt;tt class="docutils literal"&gt;/etc/rc.conf&lt;/tt&gt; ever was.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-5-the-community-irc-forums-mailing-lists"&gt;
&lt;h2&gt;Reason 5. The community: &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/IRC_Channel"&gt;IRC&lt;/a&gt;, &lt;a class="reference external" href="https://bbs.archlinux.org"&gt;Forums&lt;/a&gt;, &lt;a class="reference external" href="http://mailman.archlinux.org/mailman/listinfo/"&gt;Mailing Lists&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Arch Linux has a strong community: there are many people on the &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/IRC_Channel"&gt;IRC&lt;/a&gt; channel, &lt;a class="reference external" href="https://bbs.archlinux.org"&gt;Forums&lt;/a&gt; and &lt;a class="reference external" href="http://mailman.archlinux.org/mailman/listinfo/"&gt;Mailing Lists&lt;/a&gt;. They are here to help you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-6-the-rolling-release-model"&gt;
&lt;h2&gt;Reason 6. The rolling-release model&lt;/h2&gt;
&lt;p&gt;Arch uses an rolling-release model: there are only new CD images released, and you get updates even if you’ve installed Arch Linux v0.1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2011/01/06/arch-linux-the-best-distro-ever/</guid><pubDate>Wed, 05 Jan 2011 23:00:00 GMT</pubDate></item></channel></rss>