<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o Internet)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/cat_internet.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Fri, 15 Feb 2019 18:01:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Modern Web Development: where you need 500 packages to build Bootstrap</title><link>https://chriswarrick.com/pl/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;This humble blog is written by an old-school developer who sometimes does web stuff. An attempt to customize the Bootstrap CSS theme requires 50 MB of node_modules, over 500 packages, and comes with a bit of frustration at stupid tools and terrible documentation.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;You might notice that this website is based on Bootstrap. You might also notice it’s been heavily customized, especially if you’re browsing in the (currently default) Dark Mode. Back in Bootstrap v3 days, the task was accomplished by &lt;a class="reference external" href="https://getbootstrap.com/docs/3.4/customize/"&gt;a simple online tool&lt;/a&gt; that required no local installs. Bootstrap 4 changed the landscape: now you need to manually compile Sass. Moreover, Autoprefixer is required to make the CSS usable by web browsers.&lt;/p&gt;
&lt;p&gt;Now, when it comes to web development, I believe the old ways were better. Back when nobody thought to make a client-side-JS-based blog or pastebin, and only apps that needed interactivity were JS-first. Gmail is a good example of that, although they &lt;em&gt;still&lt;/em&gt; offer a &lt;a class="reference external" href="https://support.google.com/mail/answer/15049?hl=en"&gt;basic HTML view&lt;/a&gt; and it works good — in fact, I suppose it might be less buggy than the JS-ladden version. (A lot of single-page apps like to randomly glitch out in my experience.)&lt;/p&gt;
&lt;p&gt;I still remember the days when all that one had to do is &lt;tt class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; yuicompressor.jar style.css &amp;gt; style.min.css&lt;/tt&gt;. Then Less and Sass became more popular — and that’s good. The ability to use variables and functions makes it possible to produce well-organized stylesheets. The idea of Autoprefixer is also fine, humans should not waste their time with browser-specific prefixes for experimental features, that can be neatly automated.&lt;/p&gt;
&lt;p&gt;But to use all these fancy tools, glue code is necessary. Autoprefixer is (mainly server-side) JS-only, Sass is currently Node or Dart, minifier tools are available in many languages.&lt;/p&gt;
&lt;div class="section" id="attempt-0-no-js-stuff-no-node-modules"&gt;
&lt;h2&gt;Attempt 0: no JS stuff, no node_modules&lt;/h2&gt;
&lt;p&gt;I installed a Sass compiler. There are web services like cssminifier.com that can be easily used with curl in a Bash script. Autoprefixer has a webpage that lets you use the service without installing it as well. The catch is, the code runs locally in your web browser. Automating a web browser requires some effort. I decided to leave this part un-automated. Here is the Bash script I hacked together (with some messages removed):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &amp;gt; bootstrap.noprefix.css
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &amp;gt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Go to https://autoprefixer.github.io/."&lt;/span&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-6"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap.noprefix.css
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"(light) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-8"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-9"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap.css
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-11"&gt;&lt;/a&gt;sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-13"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-14"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"( dark) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-15"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-16"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap-dark.css
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-18"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap.min.css
&lt;a name="rest_code_2264b068a1514c4aa52017e0a493929a-19"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap-dark.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap-dark.min.css
&lt;/pre&gt;&lt;p&gt;The “manual copy” solution was inconvenient, but it worked.&lt;/p&gt;
&lt;p&gt;Well, most of the time Some lags/glitches with the clipboard meant that sometimes, files had the incorrect content. So, I wanted to fix it, and build it in a more modern, JS-y way. The way Bootstrap does it is a lot of shell commands (that run various Node tools). I don’t feel like building this pipeline with Bash, it would feel fragile. Let’s do it the JS way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-1-webpack"&gt;
&lt;h2&gt;Attempt 1: webpack&lt;/h2&gt;
&lt;p&gt;I’ve used webpack for &lt;a class="reference external" href="https://github.com/Kwpolska/django-expenses/blob/master/ts/webpack.config.js"&gt;another project of mine&lt;/a&gt;. It was okay, and it did the job (namely, compiling TypeScript into browser-usable JS).&lt;/p&gt;
&lt;p&gt;I wanted to give it a try for this one. I googled “webpack sass”. The first result was &lt;a class="reference external" href="https://github.com/webpack-contrib/sass-loader"&gt;sass-loader&lt;/a&gt;. The pipeline for it was:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_5100048cbd714dc4b6ebf05d7f835ab1-1"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"style-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// creates style nodes from JS strings&lt;/span&gt;
&lt;a name="rest_code_5100048cbd714dc4b6ebf05d7f835ab1-2"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"css-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// translates CSS into CommonJS&lt;/span&gt;
&lt;a name="rest_code_5100048cbd714dc4b6ebf05d7f835ab1-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"sass-loader"&lt;/span&gt; &lt;span class="c1"&gt;// compiles Sass to CSS, using Node Sass by default&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s recap. Someone thought that the right way to do CSS is to use JS imports.&lt;/p&gt;
&lt;p&gt;Yes. &lt;tt class="docutils literal"&gt;import &lt;span class="pre"&gt;"./style.css";&lt;/span&gt;&lt;/tt&gt; in a JS file. So that your fancy build tool knows about CSS.&lt;/p&gt;
&lt;p&gt;Webpack wasn’t the right tool for my project, but even if I had JS code there, &lt;strong&gt;WHY WOULD I MENTION STYLESHEETS IN MY JS CODE?!&lt;/strong&gt; Webpack’s website also lists .jpg and .png assets, are they meant to be imported in JS as well? This is absurd.&lt;/p&gt;
&lt;p&gt;Going back to googling “webpack sass”… The next two results were Medium posts. The stupidity of Medium as a blog platform notwithstanding, one of the posts was from 2017, referring to webpack 2. The next post was a year older, a completely unreadable mess, and it was for webpack 4. That’s not helpful in any way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-gulp"&gt;
&lt;h2&gt;Attempt 2: Gulp&lt;/h2&gt;
&lt;p&gt;Let’s try something else from the JS world: Gulp. Now, the tool is not terrible, but it still requires a lot of dependencies.&lt;/p&gt;
&lt;p&gt;The pipeline that was required for this task sounds very simple:&lt;/p&gt;
&lt;blockquote&gt;
bootstrap-kw{,-dark}.sass → Sass compiler → Autoprefixer → bootstrap{,-dark}.css → minify → bootstrap{,-dark}.min.css&lt;/blockquote&gt;
&lt;p&gt;The Gulp version is fairly simple: (I based it on examples on Gulp’s website, and pages of all my dependencies).&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minifyCSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-csso'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp-rename"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-7"&gt;&lt;/a&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'node-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*.scss'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-13"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;()]))&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-14"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-kw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-17"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minifyCSS&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-19"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-20"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;".min"&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-21"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-22"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_95941b59de18455a9c0e9cde7e483488-25"&gt;&lt;/a&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="a-node-modules-extravaganza"&gt;
&lt;h2&gt;A node_modules extravaganza&lt;/h2&gt;
&lt;p&gt;Can you see all the &lt;tt class="docutils literal"&gt;require&lt;/tt&gt; lines at the top? Every one of them is a dependency of my build script. With the exception of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gulp-rename&lt;/span&gt;&lt;/tt&gt;, which IMO should be a built-in part of Gulp (it’s 45 lines of code and no external dependencies), the list is sensible.&lt;/p&gt;
&lt;p&gt;Well, I already mentioned the size of &lt;tt class="docutils literal"&gt;node_modules&lt;/tt&gt;: 51 MiB according to &lt;tt class="docutils literal"&gt;du&lt;/tt&gt; (size-on-disk measurement). How many packages are there?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="545"&gt;
&lt;li&gt;Five hundred and forty-five packages.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoa, when did that happen? Most of it comes from gulp/gulp-cli (384 packages), with node-sass taking the second place (177 packages). Some of those are shared between libraries, and a few more belong to the other requirements. And many of these dependencies are a disgrace to programming.&lt;/p&gt;
&lt;p&gt;After a full install of my &lt;tt class="docutils literal"&gt;package.json&lt;/tt&gt;, npm says &lt;tt class="docutils literal"&gt;added 545 packages from 331 contributors and audited 10500 packages in 22.458s&lt;/tt&gt;.  I’ve implicitly agreed to licenses imposed by 331 random people. All to build some simple CSS files out of SASS.&lt;/p&gt;
&lt;p&gt;Let’s go on a tour of &lt;tt class="docutils literal"&gt;node_modules&lt;/tt&gt; and see what we ended up with.&lt;/p&gt;
&lt;div class="section" id="polyfills-reimplementations-oh-my"&gt;
&lt;h3&gt;Polyfills, reimplementations, oh my!&lt;/h3&gt;
&lt;p&gt;Everything I’ve installed is meant to be used on top of Node.js. Node runs on top of the V8 engine, coming from Chrome. They’ve had almost-full ES2015 (ES6) support since April 2016. And yet, my node_modules is full of small polyfills.&lt;/p&gt;
&lt;p&gt;Let’s pick a random one and work back from it: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_9a877b3856fc4f999dbaf6f5b2f56de1-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Copyright © Sindre Sorhus, MIT license&lt;/span&gt;
&lt;a name="rest_code_9a877b3856fc4f999dbaf6f5b2f56de1-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_9a877b3856fc4f999dbaf6f5b2f56de1-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_9a877b3856fc4f999dbaf6f5b2f56de1-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s a one-liner that re-implements &lt;tt class="docutils literal"&gt;Number.isNaN&lt;/tt&gt; if it’s not available, which is, according to MDN, &lt;cite&gt;a more robust version of the original, global
isNaN() &amp;lt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN&amp;gt;&lt;/cite&gt;. The original function coerced everything to Number before testing, which apparently wasn’t enough. That’s what you get for using a language designed in a week. The function was added to all sane browsers and Node around 2013, the polyfill was created in 2015.&lt;/p&gt;
&lt;p&gt;It was pulled in by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-fullwidth-code-point&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-finite&lt;/span&gt;&lt;/tt&gt;, both by the same author. The latter one is especially interesting: it’s at version 1.0.2. Version 1.0.1improved the codebase from &lt;tt class="docutils literal"&gt;if (x) { return false; } return true&lt;/tt&gt; (via pull request), and version 1.0.2 replaced a manual &lt;tt class="docutils literal"&gt;val !== val&lt;/tt&gt; comparison with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan``has&lt;/span&gt; 7.5 million weekly downloads, &lt;span class="pre"&gt;``is-finite&lt;/span&gt;&lt;/tt&gt; has 6.7M. The build of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/tt&gt; &lt;a class="reference external" href="https://travis-ci.org/sindresorhus/number-is-nan/builds/363709421"&gt;is currently failing.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fifty-shades-of-terminal"&gt;
&lt;h3&gt;Fifty shades of terminal&lt;/h3&gt;
&lt;p&gt;Every Node-based CLI tool wants to be cool. And for that, they need colors.&lt;/p&gt;
&lt;p&gt;How does this work in Bash? You could use &lt;tt class="docutils literal"&gt;tput setaf XX&lt;/tt&gt;, but many people would just manually echo '033[XXm', the codes are available &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit"&gt;in Wikipedia&lt;/a&gt; or elsewhere.&lt;/p&gt;
&lt;p&gt;How does this work in Python? There are a few libraries for this (and you can always do it manually), but the most popular one is &lt;a class="reference external" href="https://pypi.org/project/colorama/"&gt;colorama&lt;/a&gt;. That library can even handle Windows.&lt;/p&gt;
&lt;p&gt;What is available in Node?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;color-support&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;supports-color&lt;/span&gt;&lt;/tt&gt; are both part of my &lt;tt class="docutils literal"&gt;node_modules&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;There seems to be a fairly advanced &lt;tt class="docutils literal"&gt;chalk&lt;/tt&gt; library, by the aforementioned Sindre Sorhus.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-colors&lt;/span&gt;&lt;/tt&gt; seems to be another, smaller option for it, it claims to be 10-20x faster than &lt;tt class="docutils literal"&gt;chalk&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;There’s a package called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;has-ansi&lt;/span&gt;&lt;/tt&gt; which checks if a string has ANSI escapes in it. It depends on &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Also, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;strip-ansi&lt;/span&gt;&lt;/tt&gt; also uses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/tt&gt;. All three packages are basically one liners. One exports a regex, the other two do replacement/search with it.&lt;/li&gt;
&lt;li&gt;There’s &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/tt&gt; intelligently wraps a string with ANSI escapes in it.  &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/tt&gt; takes three strings and  returns &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;'\u001b['+&lt;/span&gt; a + 'm' + msg + '\u001b[' + b + 'm'&lt;/tt&gt; (Copyright © Jon Schlinkert, MIT license)&lt;/li&gt;
&lt;li&gt;There’s also &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/tt&gt;, which calls &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/tt&gt; with a = 90, b = 39, and a user-specified message. (Copyright © Jon Schlinkert, MIT license)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-red&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-cyan&lt;/span&gt;&lt;/tt&gt; are very similar libraries to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/tt&gt;. Is this a joke?!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are definitely other &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-$color&lt;/span&gt;&lt;/tt&gt; libraries, although they are not in my &lt;tt class="docutils literal"&gt;node_modules&lt;/tt&gt;. And probably other libraries for color support, but either they are not installed, or I haven’t managed to spot them in my &lt;tt class="docutils literal"&gt;npm list&lt;/tt&gt; output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="copyrighted-one-liners"&gt;
&lt;h3&gt;Copyrighted one-liners&lt;/h3&gt;
&lt;p&gt;Another famous library by Jon Schlinkert is called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/tt&gt;. Here is the complete code, verbatim:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-even &amp;lt;https://github.com/jonschlinkert/is-even&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015, 2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-odd'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-13"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_4eb50799402243c892b78ba2a2689e76-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/tt&gt; is slightly longer:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-odd &amp;lt;https://github.com/jonschlinkert/is-odd&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015-2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-10"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-13"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-14"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected a number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-16"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-17"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected an integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-20"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isSafeInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'value exceeds maximum safe integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-22"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-23"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_0343397733364fe99896b3f4c44af663-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-number&lt;/span&gt;&lt;/tt&gt; is another fun library; it says &lt;tt class="docutils literal"&gt;true&lt;/tt&gt; for strings of numbers, and &lt;tt class="docutils literal"&gt;false&lt;/tt&gt; for NaN (&lt;tt class="docutils literal"&gt;typeof NaN === 'number'&lt;/tt&gt;). &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/tt&gt; is used by, for example, &lt;tt class="docutils literal"&gt;even&lt;/tt&gt;, which calls &lt;tt class="docutils literal"&gt;Array.filter&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/tt&gt; as the argument. There’s also &lt;tt class="docutils literal"&gt;odd&lt;/tt&gt;, and for some reason, the two packages are separate.&lt;/p&gt;
&lt;p&gt;The checks found in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/tt&gt; make some more sense if you’re working with a dynamically-typed language where every number is a float (like JS). But you could release &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;check-odd&lt;/span&gt;&lt;/tt&gt;, which is 100x faster than &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/tt&gt; (it assumes its input is correct), and exports &lt;tt class="docutils literal"&gt;function checkOdd(value) { return (value % 2) !== 0; }&lt;/tt&gt; &lt;s&gt;(Copyright © 2019, Chris Warrick. Licensed under the 4-clause BSD license.)&lt;/s&gt; &lt;i&gt;(No, not really.)&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-product-includes-software-developed-by"&gt;
&lt;h3&gt;This product includes software developed by…&lt;/h3&gt;
&lt;p&gt;Hold on a second, 4-clause BSD? That license contains the following clause:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_37e4aa30186f4cb9b35370af70ee4d96-1"&gt;&lt;/a&gt;Redistribution and use in source and binary forms, with or without
&lt;a name="rest_code_37e4aa30186f4cb9b35370af70ee4d96-2"&gt;&lt;/a&gt;modification, are permitted provided that the following conditions are met:
&lt;a name="rest_code_37e4aa30186f4cb9b35370af70ee4d96-3"&gt;&lt;/a&gt;3. All advertising materials mentioning features or use of this software
&lt;a name="rest_code_37e4aa30186f4cb9b35370af70ee4d96-4"&gt;&lt;/a&gt;   must display the following acknowledgement:
&lt;a name="rest_code_37e4aa30186f4cb9b35370af70ee4d96-5"&gt;&lt;/a&gt;     This product includes software developed by the University of
&lt;a name="rest_code_37e4aa30186f4cb9b35370af70ee4d96-6"&gt;&lt;/a&gt;     California, Berkeley and its contributors.
&lt;/pre&gt;&lt;p&gt;This clause was removed by UC Berkeley in 1999, but there is still old code that has clauses (with other names), and someone could create something with the old license. I actually found one such clause in my &lt;tt class="docutils literal"&gt;node_modules&lt;/tt&gt; (from &lt;tt class="docutils literal"&gt;bcrypt_pbkdf&lt;/tt&gt;). &lt;a class="reference external" href="https://www.gnu.org/licenses/bsd.html"&gt;NetBSD had 75 different clauses&lt;/a&gt; in 1997. It would be fun to see figures for the Node ecosystem… or more packages with equally problematic clauses.&lt;/p&gt;
&lt;p&gt;Most people aren’t aware of the licenses of their node dependencies. Going back to Colorama, I can quickly verify that Colorama has no dependencies, and itself uses the 3-clause BSD license. (That version of the license lacks the advertising clause and is considered GPL-compatible.) There is a helpful &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;license-checker&lt;/span&gt;&lt;/tt&gt; package that can tell you what licenses you have (based on the details provided in &lt;tt class="docutils literal"&gt;package.json&lt;/tt&gt;)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-1"&gt;&lt;/a&gt;├─ MIT: 380
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-2"&gt;&lt;/a&gt;├─ ISC: 64
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-3"&gt;&lt;/a&gt;├─ Apache-2.0: 10
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-4"&gt;&lt;/a&gt;├─ BSD-3-Clause: 10
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-5"&gt;&lt;/a&gt;├─ BSD-2-Clause: 3
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-6"&gt;&lt;/a&gt;├─ CC-BY-3.0: 2
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-7"&gt;&lt;/a&gt;├─ BSD-3-Clause OR MIT: 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-8"&gt;&lt;/a&gt;├─ MIT*: 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-9"&gt;&lt;/a&gt;├─ (MIT OR Apache-2.0): 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-10"&gt;&lt;/a&gt;├─ CC-BY-4.0: 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-11"&gt;&lt;/a&gt;├─ AFLv2.1,BSD: 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-12"&gt;&lt;/a&gt;├─ MPL-2.0: 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-13"&gt;&lt;/a&gt;├─ (BSD-2-Clause OR MIT OR Apache-2.0): 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-14"&gt;&lt;/a&gt;├─ CC0-1.0: 1
&lt;a name="rest_code_b375a6b174f44b729420c5cf4822571c-15"&gt;&lt;/a&gt;└─ Unlicense: 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-back-to-bash"&gt;
&lt;h2&gt;Attempt 2: back to Bash&lt;/h2&gt;
&lt;p&gt;I decided to get rid of Gulp, it’s not necessary for this pipeline. I replaced
it with Bash and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;postcss-cli&lt;/span&gt;&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;node-sass&lt;/span&gt;&lt;/tt&gt; was replaced by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dart-sass&lt;/span&gt;&lt;/tt&gt;
(a two-file binary distribution), and &lt;tt class="docutils literal"&gt;csso&lt;/tt&gt; was replaced by &lt;tt class="docutils literal"&gt;cssnano&lt;/tt&gt; (it
works with postcss). Here is the resulting Bash file:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_3cee7ef319b44b74ab4e88ad868c5938-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap.css
&lt;a name="rest_code_3cee7ef319b44b74ab4e88ad868c5938-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap-dark.css
&lt;a name="rest_code_3cee7ef319b44b74ab4e88ad868c5938-3"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap.min.css assets/css/bootstrap.css
&lt;a name="rest_code_3cee7ef319b44b74ab4e88ad868c5938-4"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap-dark.min.css assets/css/bootstrap-dark.css
&lt;/pre&gt;&lt;p&gt;The simplified dependency list cost me 37 MiB of disk space, and I’ve got 438
packages from 232 contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-3-node-clis-are-unnecessary"&gt;
&lt;h2&gt;Attempt 3: node CLIs are unnecessary&lt;/h2&gt;
&lt;p&gt;Let’s try something else: replace &lt;tt class="docutils literal"&gt;npx postcss&lt;/tt&gt; with a custom tool.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fs'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get-stdin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cssnano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cssnano'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-8"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-10"&gt;&lt;/a&gt;&lt;span class="nx"&gt;getStdin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-11"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-12"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-14"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;cssnano&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result2&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.min.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_8598157748ac4a4caeff099dc14f0651-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The bash script now pipes &lt;tt class="docutils literal"&gt;sass&lt;/tt&gt; output to &lt;tt class="docutils literal"&gt;node run_postcss.js &lt;span class="pre"&gt;bootstrap(-dark)&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Doing this… cost me a new dependency. Its name is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/tt&gt;. We’ve already met its author, Sindre Sorhus. While the library has its deficiencies &lt;a class="reference external" href="https://github.com/sindresorhus/get-stdin/issues/21"&gt;(namely, it doesn’t support reading from TTY)&lt;/a&gt;, it’s good enough. I could do it manually or use some other tricks, but since &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/tt&gt; does not pull in any other dependencies, I’m going to accept it. After cleaning up &lt;tt class="docutils literal"&gt;packages.json&lt;/tt&gt;, we end up with:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_8f5811c6715d4bef9130a0abd3c476d3-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install
&lt;a name="rest_code_8f5811c6715d4bef9130a0abd3c476d3-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;added 144 packages from 119 contributors and audited 637 packages in 8.127s&lt;/span&gt;
&lt;a name="rest_code_8f5811c6715d4bef9130a0abd3c476d3-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;found 0 vulnerabilities&lt;/span&gt;
&lt;a name="rest_code_8f5811c6715d4bef9130a0abd3c476d3-4"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; du -hs node_modules
&lt;a name="rest_code_8f5811c6715d4bef9130a0abd3c476d3-5"&gt;&lt;/a&gt;&lt;span class="go"&gt; 21M    node_modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The task at hand was very simple. So was the JS code (Gulp and custom) I had to write to implement it. But underneath, there was a mess of unknown, unaudited code, duplicated libraries, and libraries created effectively to bump people’s npm download stats. There were already incidents, like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;left-pad&lt;/span&gt;&lt;/tt&gt; (the removal of which broke Babel), or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;event-stream&lt;/span&gt;&lt;/tt&gt; (which was taken over and modified to steal cryptocurrencies). The modern web development ecosystem is a huge mess of dependencies and one-line packages. Some of them are necessary due to the lackluster JS standard library — but some are just useless. And some of these micro-packages would be better off as larger libraries.&lt;/p&gt;
&lt;p&gt;PS. Five of the packages (in the “large” set) had a &lt;tt class="docutils literal"&gt;.DS_Store&lt;/tt&gt; file left over. I’m wondering if there are any other files that shouldn’t be shipped with packages, lurking in &lt;tt class="docutils literal"&gt;node_modules&lt;/tt&gt; directories all over the world…&lt;/p&gt;
&lt;p&gt;PPS. I’ve replaced Disqus with Isso, because it had too many advertisements. If you experience any issues with the comment system (after force-refreshing), e-mail me.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</guid><pubDate>Fri, 15 Feb 2019 18:00:00 GMT</pubDate></item><item><title>Static Site Generator Speed Test (Nikola, Pelican, Hexo, Octopress)</title><link>https://chriswarrick.com/pl/blog/2015/07/23/ssg-speed-test/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I tested the speed of four static site generators: Nikola, Pelican, Hexo and Octopress, in a clean environment.  Spoiler alert: Nikola won.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; author is a developer and user of Nikola.  The test environments used were the same for all four generators.&lt;/p&gt;
&lt;div class="section" id="generators-tested"&gt;
&lt;h2&gt;Generators tested&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; v7.6.1, by Roberto Alsina, Chris Warrick and contributors; Python; MIT license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; v3.6.0, by Alexis Metaireau and contributors; Python; GNU AGPL license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hexo.io/"&gt;Hexo&lt;/a&gt; v3.1.1, by Tommy Chen and contributors; Node.js; MIT license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; v2.0, by Brandon Mathis and contributors; Ruby; MIT license (based on Jekyll)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Every site generator was set up in an identical &lt;strong&gt;clean&lt;/strong&gt; environment, using Ubuntu 15.04, x64, as a 512 MB DigitalOcean VM with a 20 GB SSD drive. The machine was updated, an user account with passwordless sudo was created, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;build-essential&lt;/span&gt;&lt;/tt&gt; was installed. Tests were run by an automated installer and timer, written in Bash and C, respectively (custom; source code is available). Pre-compiled wheels for lxml and Pillow were used for Nikola testing, because lxml cannot be compiled with less than 1.5 GB of RAM; they were built with &lt;tt class="docutils literal"&gt;pip wheel lxml pillow&lt;/tt&gt; outside of the testing environment (on a local VM). The machine was reimaged after every test. Lists of installed Python/Ruby/Node packages are available in the GitHub repo (see below).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="input"&gt;
&lt;h2&gt;Input&lt;/h2&gt;
&lt;p&gt;Every site generator was given the same set of 179 log files from #nikola on freenode. The raw logs contain 1209507 bytes (1.1 MiB) of plain text. The logs were processed into post files, which fit the format of each engine (reST or Markdown), containing mandatory metadata, an introductory paragraph and a code block (using &lt;tt class="docutils literal"&gt;::&lt;/tt&gt; for reST, four spaces for Markdown). One file had to be altered, because they contained the &lt;tt class="docutils literal"&gt;{{&lt;/tt&gt;  sequence, which was misinterpreted as internal templating by Hexo and Octopress — it was replaced by a harmless &lt;tt class="docutils literal"&gt;~~&lt;/tt&gt; sequence for all four generators.&lt;/p&gt;
&lt;p&gt;The generators used default config, with one exception: highlighting was disabled for Hexo. The highlighting would cause an unfair advantage (other generators did not automatically highlight the code boxes), and led to very high build times (see table 4 in comparison spreadsheet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build"&gt;
&lt;h2&gt;Build&lt;/h2&gt;
&lt;p&gt;Sites were built a total of 110 times, in 10 cycles of 11 builds each. The first build of a cycle was a fresh build, the remaining 10 were rebuilds. Sites and cache files were removed after each cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;Because Nikola and Hexo use incremental rebuilds, the results were compared in two groups: 11 and 10 runs.&lt;/p&gt;
&lt;div class="section" id="average-build-times-in-seconds"&gt;
&lt;h3&gt;Average build times (in seconds)&lt;/h3&gt;
&lt;table class="table table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Generator&lt;/th&gt;
&lt;th&gt;Average of 11 runs&lt;/th&gt;
&lt;th&gt;Average of 10 runs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;1&lt;/th&gt;
&lt;td&gt;Nikola&lt;/td&gt;
&lt;td&gt;2.38290&lt;/td&gt;
&lt;td&gt;2.06057&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;2&lt;/th&gt;
&lt;td&gt;Pelican&lt;/td&gt;
&lt;td&gt;2.61924&lt;/td&gt;
&lt;td&gt;2.62352&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;3&lt;/th&gt;
&lt;td&gt;Hexo&lt;/td&gt;
&lt;td&gt;6.27361&lt;/td&gt;
&lt;td&gt;6.21267&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;4&lt;/th&gt;
&lt;td&gt;Octopress&lt;/td&gt;
&lt;td&gt;9.57618&lt;/td&gt;
&lt;td&gt;9.47550&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="full-results"&gt;
&lt;h3&gt;Full results&lt;/h3&gt;
&lt;p class="lead"&gt;Full results are available in &lt;a class="reference external" href="https://chriswarrick.com/pub/ssg-test-results.ods"&gt;ods format&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-results-and-configuration"&gt;
&lt;h3&gt;Raw results and configuration&lt;/h3&gt;
&lt;p&gt;Raw results (&lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt; files from the test runner) and configuration is available in the &lt;a class="reference external" href="https://github.com/Kwpolska/ssg-test"&gt;GitHub repo&lt;/a&gt;. Log files and converted posts are not available publicly; however, they can be provided to interested parties (&lt;a class="reference external" href="https://chriswarrick.com/contact/"&gt;contact me&lt;/a&gt; to obtain them).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="questions-and-answers"&gt;
&lt;h2&gt;Questions and answers&lt;/h2&gt;
&lt;div class="section" id="why-not-plain-jekyll"&gt;
&lt;h3&gt;Why not plain Jekyll?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Plain Jekyll was disqualified&lt;/strong&gt; on the basis of missing many features other generators have, leading to an unfair advantage. The aim of this test was to provide similar setups for each of the four generators. Jekyll generates a very basic site that lacks some elements; a Jekyll site does not have paginated indexes, (partial) post text on indexes, any sort of archives, etc. A Jekyll site contains only one CSS file, index.html, feed.xml, and the log posts. On the other hand, sites generated by Pelican, Nikola and Hexo contain more files, which makes the builds longer and the website experience richer (archives, JS, sitemaps, tag listings).&lt;/p&gt;
&lt;p&gt;On the basis of the above, &lt;strong&gt;Octopress&lt;/strong&gt; was chosen to represent the Jekyll universe at large. Octopress sites have more assets, a sitemap, archives and category listings — making it comparable to the other four contenders. However, tests were performed for Jekyll. The average result from 11 builds was 2.22118, while the average result from 10 builds was 2.23903. The result would land Jekyll on the 1st place for 11 builds, and on the 2nd place for 10 builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-not-myfavoritessg"&gt;
&lt;h3&gt;Why not $MYFAVORITESSG?&lt;/h3&gt;
&lt;p&gt;I tested only four popular generators that were easy enough to set up. I could easily extend the set if I had time and friendly enough documentation to do so. I can add a SSG, provided that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it’s easy to configure&lt;/li&gt;
&lt;li&gt;it has a default config that provides a working site with a feature set comparable to other SSGs tested here (see &lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2015/07/23/ssg-speed-test/#why-not-plain-jekyll"&gt;Why not plain Jekyll?&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2015/07/23/ssg-speed-test/</guid><pubDate>Thu, 23 Jul 2015 15:10:00 GMT</pubDate></item><item><title>Inbox (by Google) Review</title><link>https://chriswarrick.com/pl/blog/2014/11/09/inbox-review/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;figure&gt;&lt;img src="https://chriswarrick.com/galleries/inbox-by-google/10%20All%20done%20view.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;I got a &lt;a class="reference external" href="http://www.google.com/inbox/"&gt;Inbox&lt;/a&gt; invite (hat tip to &lt;a class="reference external" href="https://twitter.com/dav4dav4"&gt;Dawid Róż @dav4dav4&lt;/a&gt;) and spent a day
with it.  The same day, I got the Material Design upgrade for Gmail.  Let’s review it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/galleries/inbox-by-google/" class="btn btn-primary btn-secondary"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Screenshots/Gallery
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;em&gt;I tested the mobile version; the web app works the same.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="task-oriented-e-mail"&gt;
&lt;h2&gt;Task-oriented e-mail&lt;/h2&gt;
&lt;p&gt;Inbox changes how e-mail works.  E-mails are now tasks.&lt;/p&gt;
&lt;p&gt;First off, e-mails are &lt;em&gt;bundled&lt;/em&gt; into categories (Travel, Purchases, Finance,
Social, Updates, Forums, Promos) — the last four of which were available in
Gmail before if you used inbox categories (the tabs).  The difference is, all
the messages are &lt;em&gt;bundled&lt;/em&gt; in the inbox.  All the categories show up as one
entry in the inbox view.  Also, “humans” get their own entries.  When you click
on an entry, it expands and all the threads in this category.  You can also
bundle other labels in the inbox, provided that there are any &lt;strong&gt;filters&lt;/strong&gt; that
send them here (as filters are one of the main elements of Inbox)&lt;/p&gt;
&lt;div class="section" id="actions"&gt;
&lt;h3&gt;Actions&lt;/h3&gt;
&lt;p&gt;There are four actions you can perform on each message.  They are:&lt;/p&gt;
&lt;div class="section" id="pin"&gt;
&lt;h4&gt;Pin&lt;/h4&gt;
&lt;p&gt;A pinned message appears outside of its bundle.  It can’t be sweeped away, you
must explicitly mark it as done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mark-done"&gt;
&lt;h4&gt;Mark done&lt;/h4&gt;
&lt;p&gt;Marking a message done is equivalent to archiving it in Gmail.  If you had a
workflow that involved archiving things you don’t need anymore, you will find
yourself at home in Inbox.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="snooze"&gt;
&lt;h4&gt;Snooze&lt;/h4&gt;
&lt;p&gt;A snoozed message disappears from your Inbox for the time being.  It will
appear at the time you set.  Helpful for decluttering your inbox while not
getting rid of things you need to come back to later.  The catch: no
notifications &lt;em&gt;at all&lt;/em&gt; — you must check your inbox yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="move-to"&gt;
&lt;h4&gt;Move to…&lt;/h4&gt;
&lt;p&gt;Inbox’s algorithms are pretty good, but sometimes you may need to move messages
to a different bundle/label.  This lets you do just that.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="right-handed-people-do-left-handed-people-postpone"&gt;
&lt;h3&gt;&lt;em&gt;Right-handed people do, left-handed people postpone.&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;This is something funny I was taught by Inbox.  You see, I am left-handed.
I primarily use my phone with my left-hand (though I use a
normal/“right-handed” computer mouse).  For me, the best way to swipe things
away is right-to-left.  That’s how I am usually doing it in Gmail.  I can do it
both ways, it registers as an archive.&lt;/p&gt;
&lt;p&gt;Inbox, however, has two distinctive swipe actions: if you swipe from the left
side, the conversation is archived (&lt;em&gt;marked done&lt;/em&gt;).  However, if you swipe from
the right side, it will be snoozed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reminders"&gt;
&lt;h3&gt;Reminders&lt;/h3&gt;
&lt;p&gt;There are also &lt;strong&gt;Reminders&lt;/strong&gt;.  Reminders are just email-less items appearing in
Inbox.  They don’t serve any special purpose.  Some of them, however, contain
hints — for example, the contact data of the place mentioned in your reminder
(if there is any).&lt;/p&gt;
&lt;p&gt;Reminders can be snoozed, but again: there are no notifications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="material-design-galore"&gt;
&lt;h2&gt;Material Design Galore&lt;/h2&gt;
&lt;p&gt;One of the parts that made me get interested in the first place is Material
Design.  I believe in its principles.  As mentioned earlier, I also have access
to the Gmail app with Material Design (version 5.0).  So, I can compare them
both.&lt;/p&gt;
&lt;p&gt;Both apps look nicely; however, Inbox is prettier.  Multiple things look and
work better in Inbox than in Gmail.  The app feels nicer overall — mainly
because it was redone from scratch and not just upgraded from something that’s
around for YEARS.  Gmail works pretty much the same as it did on Friday.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;I really loved the experience.  But will Inbox ever be my main e-mail client?  &lt;strong&gt;No — at least not today.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Inbox is either minimalistic, or an unfinished piece of software.  It lacks a
few important features — for example, you can only send HTML mail, and you
cannot have a signature.  Moreover, you can’t have multiple From: addresses.&lt;/p&gt;
&lt;p&gt;One thing I noticed is, Inbox &lt;strong&gt;defaults&lt;/strong&gt; to &lt;em&gt;Reply All&lt;/em&gt;.  No questions asked.  We all know &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Email_storm"&gt;what Reply All leads to&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Moreover, I like e-mail the way it is.  I have very comprehensive labels, which
are much more helpful and granular than the bundles.  I have also developed a
perfect Priority Inbox setup: Gmail knows exactly what I care about and need
notifications for.&lt;/p&gt;
&lt;p&gt;Finally: I currently do my GTD in &lt;a class="reference external" href="https://www.evernote.com/"&gt;Evernote&lt;/a&gt; (via &lt;a class="reference external" href="http://www.thesecretweapon.org/"&gt;The Secret Weapon&lt;/a&gt; plus Reminders).  It’s &lt;em&gt;nicer&lt;/em&gt;, at least for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aside-the-four-themes-of-android"&gt;
&lt;h2&gt;Aside: The Four Themes of Android&lt;/h2&gt;
&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;After spending most of the day in Material Design land, coming back to Holo apps feels weird.&lt;/p&gt;— Chris Warrick (@Kwpolska) &lt;a href="https://twitter.com/Kwpolska/status/531172678536003584?ref_src=twsrc%5Etfw"&gt;November 8, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;p&gt;Modern Android has &lt;strong&gt;FOUR&lt;/strong&gt; different themes that can be encountered by the
user.  Just look at this madness:&lt;/p&gt;
&lt;table border="1" class="table table-bordered table-striped docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%"&gt;
&lt;col width="43%"&gt;
&lt;col width="42%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Internal Name&lt;/th&gt;
&lt;th class="head"&gt;Description&lt;/th&gt;
&lt;th class="head"&gt;Modern usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Theme&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;the original theme of Android, last updated in Android 2.3&lt;/td&gt;
&lt;td&gt;very old apps; games (for compatibility with older versions)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Theme.Holo&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;the Holo theme, the main theme of Android 3.0 through 4.4&lt;/td&gt;
&lt;td&gt;most apps currently in Play Store&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Theme.Material&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;tne new Material theme, introduced in Android 5.0&lt;/td&gt;
&lt;td&gt;newly updated apps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;Theme.DeviceDefault&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;the (ugly) theme specific to this phone’s manufacturer (eg. Samsung)&lt;/td&gt;
&lt;td&gt;Settings and other apps written/modified by the device manufacturer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(The new themes are backported to old versions in the Android Support Library.)&lt;/p&gt;
&lt;p&gt;You can easily find apps in all four styles on a typical Android device.  Apps looking differently.  Nobody cares about consistency in the Android world…&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/galleries/inbox-by-google/" class="btn btn-primary btn-secondary"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Screenshots/Gallery
&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2014/11/09/inbox-review/</guid><pubDate>Sun, 09 Nov 2014 18:30:00 GMT</pubDate></item></channel></rss>