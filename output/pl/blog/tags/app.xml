<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o app)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/app.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Sat, 01 Sep 2018 09:06:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id3" id="id1"&gt;[1]&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id4" id="id2"&gt;[2]&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mirroring&lt;/li&gt;
&lt;li&gt;screen resolution&lt;/li&gt;
&lt;li&gt;dock position and icon size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item><item><title>Nowy projekt: upass — konsolowy interfejs dla pass</title><link>https://chriswarrick.com/pl/blog/2015/07/06/upass/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.passwordstore.org/"&gt;pass&lt;/a&gt; to standardowy Uniksowy manager haseł.
A ja właśnie stworzyłem odrobinę przyjaźniejszy, klikalniejszy interfejs przy
użyciu biblioteki urwid w Pythonie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/upass/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Strona projektu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/upass/" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; używa biblioteki urwid, co oznacza, że ma przyjazny pełnoekranowy interfejs konsolowy.
Pokazuje strukturę katalogów (ze spłaszczonymi podkatalogami) i wywołuje
&lt;tt class="docutils literal"&gt;pass&lt;/tt&gt; na żądanie.  (Nie używa &lt;tt class="docutils literal"&gt;pass &lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; przez problemy z podprocesami, w
zamian samodzielnie kopiując tekst — zauważ, że schowek &lt;strong&gt;nie zostanie
wyczyszczony&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;Jeśli chcesz zobaczyć, jak wygląda &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt;, odwiedź &lt;a class="reference external" href="https://chriswarrick.com/pl/galleries/upass/"&gt;galerię zrzutów ekranu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; jest ciągle rozwijany (i został pierwotnie napisany w jeden wieczór).
Jeśli masz pomysły, znalazłeś błędy, lub chcesz pomóc, odwiedź
&lt;a class="reference external" href="https://github.com/Kwpolska/upass"&gt;stronę na GitHubie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Możesz zainstalować &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; z &lt;a class="reference external" href="https://pypi.python.org/pypi/upass"&gt;PyPI&lt;/a&gt; (przy uzyciu &lt;tt class="docutils literal"&gt;pip install upass&lt;/tt&gt;). Użytkownicy
Arch Linux mogą zainstalować pakiet &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; z AUR.&lt;/p&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>Linux</category><category>password</category><category>projects</category><category>Python</category><category>upass</category><guid>https://chriswarrick.com/pl/blog/2015/07/06/upass/</guid><pubDate>Mon, 06 Jul 2015 12:30:00 GMT</pubDate></item><item><title>Nowy projekt: think (Terminal Think Music)</title><link>https://chriswarrick.com/pl/blog/2015/05/30/think/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Czy uruchamiasz proces, który długo się wykonuje?  Czy chcesz wiedzieć, kiedy
skończy pracę, gdy używasz innego Terminala/parzysz kawę?  Czy masz ulubioną
muzykę z teleturnieju do odtworzenia gdy coś robisz?&lt;/p&gt;
&lt;p&gt;Jeśli tak: &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; jest właśnie dla ciebie.  By dowiedzieć się więcej, czytaj dalej lub &lt;a class="reference external" href="https://github.com/Kwpolska/think"&gt;odwiedź stronę na GitHubie [en]&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/think/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Strona projektu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think/releases" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (GitHub)
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobierz (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;div class="section" id="instalacja"&gt;
&lt;h2&gt;Instalacja&lt;/h2&gt;
&lt;p&gt;Możesz zainstalować &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; z &lt;a class="reference external" href="https://pypi.python.org/pypi/think"&gt;PyPI&lt;/a&gt; (przy uzyciu &lt;tt class="docutils literal"&gt;pip install think&lt;/tt&gt;). Użytkownicy Arch Linux
mogą zainstalować pakiet &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; z AUR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="konfiguracja"&gt;
&lt;h2&gt;Konfiguracja&lt;/h2&gt;
&lt;p&gt;Utwórz plik &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/think.conf&lt;/span&gt;&lt;/tt&gt; (tam, gdzie jest &lt;tt class="docutils literal"&gt;XDG_CONFIG_HOME&lt;/tt&gt;),
zawierający poniższe cztery linie:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_3e63338497e44b6592af55a9cc3fb1f6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[Think]&lt;/span&gt;
&lt;a name="rest_code_3e63338497e44b6592af55a9cc3fb1f6-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;play&lt;/span&gt;
&lt;a name="rest_code_3e63338497e44b6592af55a9cc3fb1f6-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kwpolska/Dropbox/Media/Wielka Gra.mp3&lt;/span&gt;
&lt;a name="rest_code_3e63338497e44b6592af55a9cc3fb1f6-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;command&lt;/tt&gt; to komenda odtwarzacza, która zostanie wywołana. Możesz użyć
&lt;tt class="docutils literal"&gt;play&lt;/tt&gt; (z pakietu &lt;tt class="docutils literal"&gt;sox&lt;/tt&gt;) albo jakiegokolwiek innego szybkiego odtwarzacza
muzyki działającego w konsoli.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;file&lt;/tt&gt; to nazwa pliku, który zostanie podany jako jedyny argument do komendy odtwarzacza. Nie jest potrzebne żadne escape’owanie. Ja używam czołówki z &lt;a class="reference external" href="https://www.youtube.com/watch?v=Nnu7I3b7ZbY"&gt;Wielkiej Gry&lt;/a&gt; (BTW: właśnie dodałem wersję MP3 na pierwszą rocznicę uploadu na YouTube!), Amerykanie mogą wybrać &lt;a class="reference external" href="https://www.youtube.com/watch?v=vXGhvoekY44"&gt;Jeopardy! Think Music&lt;/a&gt; (która jest źródłem nazwy komendy), Brytyjczycy mogą wybrać temat muzyczny z &lt;a class="reference external" href="https://www.youtube.com/watch?v=M2dhD9zR6hk"&gt;Countdown&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;behavior&lt;/tt&gt; może być jednym z:&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;return&lt;/tt&gt; — oddaj kontrolę do terminala jak tylko program skończy działać, bez zatrzymywania muzyki&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;wait&lt;/tt&gt; — poczekaj aż muzyka się skończy przed oddaniem kontroli&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;stop&lt;/tt&gt; — zatrzymaj muzykę i oddaj kontrolę natychmiastowo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="uzycie"&gt;
&lt;h2&gt;Użycie&lt;/h2&gt;
&lt;p&gt;Dodaj &lt;tt class="docutils literal"&gt;think&lt;/tt&gt; przed komendą, która długo się wykonuje:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_2beed0690b2d4e8c822ef96dad69c9c5-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;think sleep 120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>game show</category><category>Jeopardy!</category><category>Linux</category><category>projects</category><category>Python</category><category>think</category><guid>https://chriswarrick.com/pl/blog/2015/05/30/think/</guid><pubDate>Sat, 06 Jun 2015 12:15:00 GMT</pubDate></item><item><title>Speeker — moja mała aplikacja na Androida</title><link>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;a class="android-adventure-logo-robot reference external image-reference" href="https://chriswarrick.com/pl/blog/2014/08/01/series-android-adventure/"&gt;&lt;img alt="/blog-content/android-adventure/robot.png" src="https://chriswarrick.com/blog-content/android-adventure/robot.png"&gt;&lt;/a&gt;
&lt;p&gt;Skoro mam używalny telefon, mogę zająć się tworzeniem aplikacji na Androida.
Co uczyniłem.  Zacząłem od aplikacji do testowania i zabawy z usługami
text-to-speech systemu Android.  Nazwałem ją Speeker.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;img src="https://chriswarrick.com/blog-content/android-adventure/speeker.png" alt="Speeker logo"&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/speeker/" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker/releases" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobieranie
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;Speeker jest małym i prostym frontendem dla systemowej usługi TTS.  W obecnej
iteracji jest dosyć ograniczony.  Kompletny zestaw funkcji to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;wypowiedz tekst wpisany przez użytkownika&lt;/li&gt;
&lt;li&gt;wypowiedz tekst w domyślnym języku TTS systemu (wybranym w ustawieniach
Androida, i nie ma obecnie przycisku otwierającego to menu)&lt;/li&gt;
&lt;li&gt;wyczyść pole tekstowe&lt;/li&gt;
&lt;li&gt;pokaż okno &lt;em&gt;O programie&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;pokaż licencje open source&lt;/li&gt;
&lt;li&gt;otwórz moją stronę internetową&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To SZEŚĆ funkcji! I nie można nawet ściągnąć go z Google Play, bo jestem zbyt
skąpy by zapłacić $25 opłaty startowej!&lt;/p&gt;
&lt;p&gt;Będę lub nie kontynuował rozwoju i być może dodam kilka funkcji.  W każdym
razie, moje doświadczenia z tworzeniem na Androida nie były dobre: nie ma
wystarczająco dużo dobrej dokumentacji, i musiałem często zgadywać w niektórych
miejscach, np. przy importach.  Dokumentacja mogłaby zostać znacznie
poprawiona.&lt;/p&gt;
&lt;p&gt;Innym problemem jest wybór IDE.  O ile można oczywiście pracować nad Androidem
w dowolnym środowisku, w tym tylko w Vimie i w terminalu, oficjalnym i
rekomendowanym środowiskiem jest Eclipse.  Który okazuje się być najgorszym IDE
które kiedykolwiek powstało.  Jest nieprzyjazny i nieporęczny — czyli
standardowe cechy dużych aplikacji Javovych.  Jednym razem Eclipse udało się
otworzyć plik w jakieś dziesięć sekund.  Bardzo imponujące, dopóki nie
zauważysz, że cokolwiek innego zrobiłoby to w mniej czasu.  Nie, nie zmyślam.
To jest problem z dużymi IDE: próbują zrobić za dużo naraz.&lt;/p&gt;
&lt;p&gt;Tworzenie na Androida nie było najlepszym doświadczeniem — ale da się, i nie
trzeba mieć za dużo doświadczenia z samą platformą by to robić.  Android ma
potencjał, ale musi być udoskonalony, by być przyjaznym dla developerów.&lt;/p&gt;&lt;/div&gt;</description><category>android</category><category>app</category><category>devel</category><category>programming</category><category>projects</category><guid>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</guid><pubDate>Tue, 26 Aug 2014 13:00:00 GMT</pubDate></item></channel></rss>