<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o Python hackery)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/python-hackery.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Mon, 22 Jun 2020 19:06:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Hackery: merging signatures of two Python functions</title><link>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Today’s blog post is going to contain fairly advanced Python hackery. We’ll
take two functions — one is a wrapper for the other, but also adds some
positional arguments.  And we’ll change the signature displayed everywhere from
the uninformative &lt;code class="docutils literal"&gt;f(new_arg, *args, **kwargs)&lt;/code&gt; to something more
appropriate.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This blog post was inspired by F4D3C0D3 on #python (freenode IRC). I also took
some inspiration from
Gynvael Coldwind’s classic &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;Python 101&lt;/a&gt; (April Fools) video. (Audio and some comments are in Polish, but even if you don’t speak the language, it’s still worth it to click through the time bar and see some (fairly unusual) magic happen.)&lt;/p&gt;
&lt;div class="section" id="starting-point"&gt;
&lt;h2&gt;Starting point&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""This is old's docstring."""&lt;/span&gt;
&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_78c4b49b3ff640369c0fafa663d6a798-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s test it.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;a b&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;!a b&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' - '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;ab - !ab&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-7"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function old in module __main__:&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;old(foo, bar)&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;    This is old's docstring.&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-13"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-14"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function new in module __main__:&lt;/span&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_6a0e9620df4f4bdea462982382d27481-16"&gt;&lt;/a&gt;&lt;span class="go"&gt;new(prefix, foo, *args, **kwargs)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The last line is not exactly informative — it doesn’t tell us that we need to
pass &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as an argument.  Sure, you could define &lt;code class="docutils literal"&gt;new&lt;/code&gt; as just &lt;code class="docutils literal"&gt;(prefix, foo,
bar)&lt;/code&gt; — but that means every change to &lt;code class="docutils literal"&gt;old&lt;/code&gt; requires editing &lt;code class="docutils literal"&gt;new&lt;/code&gt; as
well. So, not ideal. Let’s try to fix this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-existing-infrastructure-functools-wraps"&gt;
&lt;h2&gt;The existing infrastructure: functools.wraps&lt;/h2&gt;
&lt;p&gt;First, let’s start with the basic facility Python already has.  The standard
library already comes with &lt;code class="docutils literal"&gt;functools.wraps&lt;/code&gt; and
&lt;code class="docutils literal"&gt;functools.update_wrapper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you’ve never heard of those two functions, here’s a crash course:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-2"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-4"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Inside wrapper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-10"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Square a number."""&lt;/span&gt;
&lt;a name="rest_code_71b9acee91404044b86af402bfeefcac-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we try to inspect the &lt;code class="docutils literal"&gt;square&lt;/code&gt; function, we’ll see the original name, arguments,
annotations, and the docstring.  If we ran this code again, but with the
&lt;code class="docutils literal"&gt;@functools.wraps(f)&lt;/code&gt; line commented out, we would only see &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrapper(*args,&lt;/span&gt;
**kwargs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This approach gives us a hint of what we need to do.  However, if we apply
&lt;code class="docutils literal"&gt;wraps&lt;/code&gt; (or &lt;code class="docutils literal"&gt;update_wrapper&lt;/code&gt;, which is what &lt;code class="docutils literal"&gt;wraps&lt;/code&gt; ends up calling)
to our function, it will only have &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as arguments, and its
name will be displayed as &lt;code class="docutils literal"&gt;old&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, let’s take a look at &lt;a class="reference external" href="https://github.com/python/cpython/blob/4fe8dc68577f9e22aaf24db08fb6647277c42d4c/Lib/functools.py#L27-L79"&gt;functools.update_wrapper&lt;/a&gt;. What does it do? Two things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;copy some attributes from the old function to the new one
(&lt;code class="docutils literal"&gt;__module__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__name__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__qualname__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__doc__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update &lt;code class="docutils literal"&gt;__dict__&lt;/code&gt; of the new function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;wrapper.__wrapped__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we try to experiment with it — by changing the list of things to copy, for
example — we’ll find out that the annotations, the docstring, and the displayed name come from
the copied attributes, but the signature itself is apparently taken from &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Further investigation reveals this fact about &lt;code class="docutils literal"&gt;inspect.signature&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;inspect.signature(callable, *, follow_wrapped=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New in version 3.5:&lt;/em&gt; &lt;code class="docutils literal"&gt;follow_wrapped&lt;/code&gt; parameter. Pass &lt;code class="docutils literal"&gt;False&lt;/code&gt; to get a signature of callable specifically (&lt;code class="docutils literal"&gt;callable.__wrapped__&lt;/code&gt; will not be used to unwrap decorated callables.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so, this is our &lt;strong&gt;end goal:&lt;/strong&gt;&lt;/p&gt;
&lt;p class="lead"&gt;Craft a function with a specific signature (that merges &lt;code class="docutils literal"&gt;old&lt;/code&gt; and &lt;code class="docutils literal"&gt;new&lt;/code&gt;) and set it as &lt;code class="docutils literal"&gt;new.__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But first, we need to talk about parallel universes.&lt;/p&gt;
&lt;p&gt;Or actually, code objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-a-function-programmatically"&gt;
&lt;h2&gt;Defining a function programmatically&lt;/h2&gt;
&lt;p&gt;Let’s try an experiment.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_b605d85a3931404ba2143e7e44646912-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_b605d85a3931404ba2143e7e44646912-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__wrapped__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_b605d85a3931404ba2143e7e44646912-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b605d85a3931404ba2143e7e44646912-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;foo(x, y)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So, there are two ways to do this.  The first one would be to generate a string
with the signature and just use &lt;code class="docutils literal"&gt;eval&lt;/code&gt; to get a &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt; function. But
that would be cheating, and honestly, quite boring. (The inspect module could
help us with preparing the string.)  The second one? Create code objects
manually.&lt;/p&gt;
&lt;div class="section" id="code-objects"&gt;
&lt;h3&gt;Code objects&lt;/h3&gt;
&lt;p&gt;To create a function, we’ll need the &lt;code class="docutils literal"&gt;types&lt;/code&gt; module. &lt;code class="docutils literal"&gt;types.FunctionType&lt;/code&gt;
gives us a function, but it asks us for a code object. As the &lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html"&gt;docs&lt;/a&gt; state,
&lt;em&gt;Code objects represent byte-compiled executable Python code, or bytecode.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create one by
hand, we’ll need &lt;code class="docutils literal"&gt;types.CodeType&lt;/code&gt;. Well, not exactly by hand — we’ll end up doing a three-way merge between
&lt;code class="docutils literal"&gt;source&lt;/code&gt; (&lt;code class="docutils literal"&gt;old&lt;/code&gt;), &lt;code class="docutils literal"&gt;dest&lt;/code&gt; (&lt;code class="docutils literal"&gt;new&lt;/code&gt;) and &lt;code class="docutils literal"&gt;def &lt;span class="pre"&gt;_blank():&lt;/span&gt; pass&lt;/code&gt; (a function
that does nothing).&lt;/p&gt;
&lt;p&gt;Let’s look at the docstring for &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_24df0e82b80e4f079a78c51715136799-1"&gt;&lt;/a&gt;code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
&lt;a name="rest_code_24df0e82b80e4f079a78c51715136799-2"&gt;&lt;/a&gt;    constants, names, varnames, filename, name, firstlineno,
&lt;a name="rest_code_24df0e82b80e4f079a78c51715136799-3"&gt;&lt;/a&gt;    lnotab[, freevars[, cellvars]])
&lt;a name="rest_code_24df0e82b80e4f079a78c51715136799-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_24df0e82b80e4f079a78c51715136799-5"&gt;&lt;/a&gt;Create a code object.  Not for the faint of heart.
&lt;/pre&gt;&lt;p&gt;All of the arguments end up being fields of a code objects (name starts with
&lt;code class="docutils literal"&gt;co_&lt;/code&gt;).  For each
function &lt;code class="docutils literal"&gt;f&lt;/code&gt;, its code object is &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt;. You can find the filename in
&lt;code class="docutils literal"&gt;f.__code__.co_filename&lt;/code&gt;, for example. The meaning of all fields can be
found in docs for the &lt;a class="reference external" href="https://docs.python.org/3/library/inspect.html#types-and-members"&gt;inspect module&lt;/a&gt;. We’ll be
interested in the following three fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;argcount&lt;/code&gt; — number of arguments (not including keyword only arguments, * or ** args)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;kwonlyargcount&lt;/code&gt; — number of keyword only arguments (not including ** arg)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;varnames&lt;/code&gt; — tuple of names of arguments and local variables&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all the other fields, we’ll copy them from the appropriate function (one of
the three).  We don’t expect anyone to call the wrapped function directly; as
long as &lt;code class="docutils literal"&gt;help&lt;/code&gt; and &lt;code class="docutils literal"&gt;inspect&lt;/code&gt; members don’t crash when they look into it,
we’re fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="everything-you-need-to-know-about-function-arguments"&gt;
&lt;h3&gt;Everything you need to know about function arguments&lt;/h3&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_1ce02e85cf5a4ed1aa4bdd02bd7d1157-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_1ce02e85cf5a4ed1aa4bdd02bd7d1157-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfullargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1ce02e85cf5a4ed1aa4bdd02bd7d1157-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;FullArgSpec(args=['a', 'b', 'c'], varargs=None, varkw=None, defaults=(1, 2), kwonlyargs=['d'], kwonlydefaults={'d': 3}, annotations={})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A function signature has the following syntax:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Any positional (non-optional) arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable positional arguments (&lt;code class="docutils literal"&gt;*x&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varargs&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arguments with defaults (keyword-maybe arguments); their value is stored in &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt; left-to-right&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keyword-only arguments (after an asterisk); their values are stored in a dictionary.  Cannot be used if &lt;code class="docutils literal"&gt;varargs&lt;/code&gt; are defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable keyword arguments (&lt;code class="docutils literal"&gt;**y&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varkw&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’re going to make one assumption: we aren’t going to support a &lt;code class="docutils literal"&gt;source&lt;/code&gt;
function that uses variable arguments of any kind.  So, our final signature
will be composed like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That will be saved into &lt;code class="docutils literal"&gt;co_names&lt;/code&gt;.  The first two arguments are counts —
the first one is &lt;code class="docutils literal"&gt;len(1+2+3+4)&lt;/code&gt; and the other is &lt;code class="docutils literal"&gt;len(5+6)&lt;/code&gt;. The remaining
arguments to &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt; will be either safe minimal defaults, or things taken from
one of the three functions.&lt;/p&gt;
&lt;p&gt;We’ll also need to do one more thing: we must ensure &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt;,
&lt;code class="docutils literal"&gt;__kwdefaults__&lt;/code&gt;, and &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt; are all in the right places.
That’s also a fairly simple thing to do (it requires more tuple/dict merging).
And with that, we’re done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-results"&gt;
&lt;h2&gt;Final results&lt;/h2&gt;
&lt;p&gt;Before I show you the code, let’s test it out:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ae7603a8b7d04194ac93f890b4306b99-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# old defined as before&lt;/span&gt;
&lt;a name="rest_code_ae7603a8b7d04194ac93f890b4306b99-2"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@merge_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ae7603a8b7d04194ac93f890b4306b99-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ae7603a8b7d04194ac93f890b4306b99-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And the end result — &lt;code class="docutils literal"&gt;help(new)&lt;/code&gt; says:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_88e865bca5664d97b2ead61881ec2178-1"&gt;&lt;/a&gt;new(prefix, foo, bar)
&lt;a name="rest_code_88e865bca5664d97b2ead61881ec2178-2"&gt;&lt;/a&gt;    This is old's docstring.
&lt;/pre&gt;&lt;p&gt;We did it!&lt;/p&gt;
&lt;p class="lead"&gt;The code is available on &lt;a class="reference external" href="https://github.com/Kwpolska/merge_args"&gt;GitHub&lt;/a&gt; and on &lt;a class="reference external" href="https://pypi.org/project/merge-args/"&gt;PyPI&lt;/a&gt; (&lt;code class="docutils literal"&gt;pip install merge_args&lt;/code&gt;).
There’s also an extensive test suite.&lt;/p&gt;
&lt;p&gt;PS. you might be interested in another related post of mine, in which I
reverse-engineer the compilation of a function: &lt;a class="reference external" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/"&gt;Gynvael’s Mission 11 (en): Python bytecode reverse-engineering&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</guid><pubDate>Thu, 20 Sep 2018 13:52:20 GMT</pubDate></item><item><title>Misja Gynvaela 11 (stream anglojęzyczny): reverse-engineering bajtkodu Pythona</title><link>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Gynvael Coldwind jest badaczem bezpieczeństwa pracującym w Google, który organizuje cotygodniowe livestreamy na tematy bezpieczeństwa i programowania &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;po polsku&lt;/a&gt; i  &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;po angielsku&lt;/a&gt;). Częścią streamów są misje — w skrócie, zadania w stylu CTF-owym dotyczące inżynierii wstecznej. Wczorajsza misja była o elfickim — znaczy o Paint’cie — znaczy o programowaniu w Pythonie i jego bajtkodzie.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-9"&gt;&lt;/a&gt;files.
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-19"&gt;&lt;/a&gt;Good luck!
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a name="rest_code_ce5cb30b0f414683b8916c7db8141ad7-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;p&gt;Kod firmware:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-3"&gt;&lt;/a&gt;co_flags 67
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-4"&gt;&lt;/a&gt;co_name check_password
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a name="rest_code_1fe5fcbd6cd0455d8c0a95117b9e0db0-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Dla niewtajemniczonych to może wyglądać na &lt;em&gt;elficki&lt;/em&gt;. W rzeczywistości jest to bajtkod Pythona — zestaw instrukcji używany przez maszynę wirtualną Pythona (CPython 2.7.) Python, podobnie jak wiele innych języków, używa kompilatora do tłumaczenia kodu źródłowego czytelnego dla ludzi na coś bardziej odpowiedniego dla komputerów. Kod Pythona tłumaczony jest na bajtkod, który jest wykonywany przez maszynę wirtualną CPythona. Bajtkod CPythona może być używany na różnym sprzęcie, podczas gdy kod maszynowy nie może. Z drugiej strony kod maszynowy jest zazwyczaj szybszy niż języki oparte na maszynach wirtualnych i bajtkodzie. (Java i C# działają tak jak Python, C jest tłumaczone prosto do kodu maszynowego)&lt;/p&gt;
&lt;p&gt;To jest wewnętrzna reprezentacja funkcji Pythona. Pierwsze kilka linii to zmienne należące do obiektu &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt; naszej funkcji. Wiemy, że funkcja:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;ma 1 argument&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma 7 stałych: None, długi ciąg cyfr hex, i liczby: 89, 255, 115 ,50.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flagi&lt;/a&gt; ustawione na 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). Jest to “standardowa” wartość używana przez większość nieskomplikowanych funkcji.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nazywa się &lt;code class="docutils literal"&gt;check_password&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;używa następujących zmiennych globalnych lub nazw atrybutów: &lt;code class="docutils literal"&gt;decode&lt;/code&gt;, &lt;code class="docutils literal"&gt;len&lt;/code&gt;, &lt;code class="docutils literal"&gt;False&lt;/code&gt;, &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ma 4 zmienne lokalne&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;używa stosu o rozmiarze 6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jej zmienne nazywają się &lt;code class="docutils literal"&gt;s&lt;/code&gt;, &lt;code class="docutils literal"&gt;good&lt;/code&gt;, &lt;code class="docutils literal"&gt;cs&lt;/code&gt;, &lt;code class="docutils literal"&gt;cg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Są dwa sposoby na rozwiązanie tego zadania: można spróbować zreasemblować wyjście &lt;code class="docutils literal"&gt;dis&lt;/code&gt; przy pomocy modułu &lt;code class="docutils literal"&gt;opcode&lt;/code&gt; lub odtworzyć funkcję ręcznie, używając bajtkodu. Wybrałem tę drugą opcję.&lt;/p&gt;
&lt;div class="section" id="reverse-engineering-bajtkodu-pythona-reczne-odtwarzanie-funkcji"&gt;
&lt;h2&gt;Reverse-engineering bajtkodu Pythona: ręczne odtwarzanie funkcji&lt;/h2&gt;
&lt;p&gt;Zacząłem od odtworzenia oryginalnego pliku z firmware’em. Utworzyłem pustą funkcję i napisałem trochę kodu, który wypisuje zawartość &lt;code class="docutils literal"&gt;__code__&lt;/code&gt; i wyjście &lt;code class="docutils literal"&gt;dis.dis&lt;/code&gt;. Dodałem też kolorowanie wyjścia, by łatwiej się czytało:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_90063794de25457a8211c131d20ae9e9-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli uruchomimy ten solver, otrzymamy następujące wyjście (tekst w nawiasach kwadratowych dopisany przeze mnie):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 się zgadza]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-5"&gt;&lt;/a&gt;co_names ()              [0/6 się zgadza]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-6"&gt;&lt;/a&gt;co_nlocals 1             [powinno być 4]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-7"&gt;&lt;/a&gt;co_stacksize 1           [powinno być 6]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 się zgadza]
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a name="rest_code_8d4dc7a435ce4d41811f1603ee676a28-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy (przy pomocy kolorów, których tu nie ma), że &lt;code class="docutils literal"&gt;co_argcount&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_flags&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_name&lt;/code&gt; są ustawione poprawnie. Mamy też jedną ze zmiennych (&lt;code class="docutils literal"&gt;None&lt;/code&gt;, jest w każdej funkcji) i jedną nazwę zmiennej (nazwę argumentu &lt;code class="docutils literal"&gt;s&lt;/code&gt;). Widzimy wyjście &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt;. O ile jest podobne do tego z zadania, to jest kilka zauważalnych różnic: nie ma &lt;code class="docutils literal"&gt;7&lt;/code&gt; na początku (numer linii), a instrukcje &lt;code class="docutils literal"&gt;LOAD_CONST&lt;/code&gt; nie miały niczego w nawiasach (tylko porównania i pętle coś miały). To utrudnia czytanie bajtkodu, ale to jest wciąż możliwe. (Początkowo chciałem sobie pomóc narzędziem &lt;code class="docutils literal"&gt;diff&lt;/code&gt;, ale nie jest trudno to zrobić ręcznie. Użyłem &lt;code class="docutils literal"&gt;diff&lt;/code&gt; do ostatecznego sprawdzenia po ręcznej „konwersji”)&lt;/p&gt;
&lt;p&gt;Zatrzymajmy się na chwilę i spójrzmy na stałe i nazwy. Po długim stringu pojawia się &lt;code class="docutils literal"&gt;hex&lt;/code&gt;, a jedną ze stałych jest &lt;code class="docutils literal"&gt;decode&lt;/code&gt;. To znaczy, że musimy użyć &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/code&gt; by utworzyć (byte)string z pewną informacją. Odpowiedzi do misji są czytelne dla ludzi, a ten string nie jest — więc musimy zrobić coś więcej.&lt;/p&gt;
&lt;p&gt;Spróbujmy odtworzyć oryginalny kod misji. VM Pythona opiera się na stosie. W bajtkodzie powyżej widzimy, że instrukcje przyjmują 0 lub 1 argument. Niektóre z nich dodają obiekty na stos, inne wykonują akcje i usuwają rzeczy ze stosu. Większość nazw instrukcji jest łatwa do zrozumienia, ale pełna lista jest dostępna w &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacji modułu dis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instrukcje takie jak &lt;code class="docutils literal"&gt;LOAD&lt;/code&gt; czy &lt;code class="docutils literal"&gt;STORE&lt;/code&gt; odwołują się do indeksów w krotkach constants/names/varnames. Aby było łatwiej, oto “tabelka” tych indeksów:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-1"&gt;&lt;/a&gt;constants
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a name="rest_code_74778781e45a4d30b609d0de008b344a-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;p&gt;W celu poprawienia czytelności, użyję “nowe” wyjście &lt;code class="docutils literal"&gt;dis&lt;/code&gt; z nazwami w nawiasach poniżej:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_6e55bfd1918044709a98578d184288fd-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a name="rest_code_6e55bfd1918044709a98578d184288fd-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a name="rest_code_6e55bfd1918044709a98578d184288fd-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a name="rest_code_6e55bfd1918044709a98578d184288fd-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # funkcja pobiera 1 argument ze stosu
&lt;a name="rest_code_6e55bfd1918044709a98578d184288fd-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;p&gt;Jak wcześniej zgadywałem, pierwsza linia funkcji wygląda tak:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_732cb78aad814982a17b53d27475b49d-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_732cb78aad814982a17b53d27475b49d-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Jeśli jeszcze raz uruchomimy solver, zobaczymy że pierwsze 12 bajtów w bajtkodzie zgadza się z treścią misji. Widzimy też, że &lt;code class="docutils literal"&gt;varnames&lt;/code&gt; jest wypełnione w połowie, dodaliśmy dwie stałe, i jedną nazwę. Następne kilka linii wygląda tak:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a name="rest_code_7ce4c5d7df7b44b3b14e240880703b9d-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;Widzimy że umieszczamy obiekt globalny na stosie i wywołujemy go z jednym argumentem. W obu przypadkach, obiekt globalny ma indeks 1, czyli &lt;code class="docutils literal"&gt;len&lt;/code&gt;. Dwa argumenty to &lt;code class="docutils literal"&gt;s&lt;/code&gt; i &lt;code class="docutils literal"&gt;good&lt;/code&gt;. Umieszczamy obie długości na stosie i je porównujemy. Jeśli porównanie się nie uda (są równe), przeskakujemy do instrukcji zaczynającej się na bajcie 43, w przeciwnym razie kontynuujemy wykonywanie, by załadować drugi global (False) i go zwrócić. Ta ściana tekstu tłumaczy się na następujący prosty kod:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_9373bf69d8274aea9f585d173e8254bc-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_9373bf69d8274aea9f585d173e8254bc-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9373bf69d8274aea9f585d173e8254bc-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a name="rest_code_9373bf69d8274aea9f585d173e8254bc-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# newr&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Popatrzmy się jeszcze raz na nasze nazwy. Widzimy, że brakuje &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;. Można zauważyć pewien znany wzorzec: iterujemy po obu stringach na raz (używając &lt;code class="docutils literal"&gt;zip&lt;/code&gt;), wykonujemy obliczenia na podstawie kodów znaków (&lt;code class="docutils literal"&gt;ord&lt;/code&gt;) i sprawdzamy czy wszystkie (&lt;code class="docutils literal"&gt;all&lt;/code&gt;) wyniki (zazwyczaj porównania) są prawdziwe.&lt;/p&gt;
&lt;p&gt;Oto bajtkod z dopisanymi wartościami i komentarzami które tłumaczą, co się gdzie dzieje:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Początek iteracji: iter()
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # początek iteracji pętli for (jeśli koniec iteratora, skocz +52 bajty do pozycji 117)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # rozpakuj sekwencję (a, b = sequence)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = wartość z s
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = wartość z good
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [odejmij 89 od wartości na górze stosu]
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND z wartością na górze stosu]
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR z wartością na górze stosu]
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # umieść ord(cs) na stosie
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # porównaj dwie wartości na stosie
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # dodaj wartość umieszczoną na górze sotosu do listy góra-1; usuń górę stosu (dopisz do listy tworzonej w list comprehension)
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # przeskocz na początek pętli
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # po pętli: wywołaj all([wynik list comprehension])
&lt;a name="rest_code_285c6863a7ec464e89b739e4091e92ba-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # zwróć wartość zwróconą przez all()
&lt;/pre&gt;&lt;p&gt;Możemy teraz zapisać pełną odpowiedź.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d2f9b521540343708221601382d0bd0b-1"&gt;1&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d2f9b521540343708221601382d0bd0b-2"&gt;2&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d2f9b521540343708221601382d0bd0b-3"&gt;3&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d2f9b521540343708221601382d0bd0b-4"&gt;4&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d2f9b521540343708221601382d0bd0b-5"&gt;5&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_d2f9b521540343708221601382d0bd0b-6"&gt;6&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_d2f9b521540343708221601382d0bd0b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d2f9b521540343708221601382d0bd0b-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d2f9b521540343708221601382d0bd0b-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_d2f9b521540343708221601382d0bd0b-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;a name="rest_code_d2f9b521540343708221601382d0bd0b-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_d2f9b521540343708221601382d0bd0b-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Ostatecznie, wyjście &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt; zgadza się z tekstem z misji (za wyjątkiem usuniętych wartości, ale ID się zgadzają), nasze zmienne &lt;code class="docutils literal"&gt;co_*&lt;/code&gt; są zielone, i możemy rozwiązać prawdziwą zagadkę!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Na marginesie:&lt;/strong&gt; zadanie używa list comprehension. Możesz chcieć ją zoptymalizować, usunąć nawiasy kwadratowe, i otrzymać generator expression. W ten sposób zadanie stałoby się trudniejsze, gdyż wymagałoby pracy również z wewnętrznym obiektem kodu generatora:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_35e348aeef444b0292733033619bbc70-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a name="rest_code_35e348aeef444b0292733033619bbc70-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_35e348aeef444b0292733033619bbc70-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;BINARY_*&lt;/code&gt; i &lt;code class="docutils literal"&gt;ord&lt;/code&gt; zniknęły z nowego listingu. Możesz zobaczyć &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;zmodyfikowany kod&lt;/a&gt; (który różni się dwoma bajtami) i &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;wyjście solvera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Na marginesie marginesu: zna ktoś jakieś dobre tłumaczenie &lt;code class="docutils literal"&gt;list comprehension&lt;/code&gt;? Polska język trudna język.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rozwiazywanie-prawdziwej-zagadki"&gt;
&lt;h2&gt;Rozwiązywanie prawdziwej zagadki&lt;/h2&gt;
&lt;p&gt;Rozwiązałem dodatkową część zagadki. Jej &lt;em&gt;prawdziwym&lt;/em&gt; celem było odzyskanie hasła — tekstu, dla którego &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt; zwróci True.&lt;/p&gt;
&lt;p&gt;Ta część jest dosyć nudna. Zbudowałem słownik, w którym przypisałem każdy bajt (0…255) do wyniku obliczeń wykonywanych w pętli funkcji &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt;. Potem użyłem jej do odzyskania oryginalnego tekstu.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-11"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_498903199f4f44068e4b4cccdd5fde55-12"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Hasło brzmi:&lt;/strong&gt; &lt;code class="docutils literal"&gt;huh, that actually worked!&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-co-chodzilo-z-tym-paintem"&gt;
&lt;h2&gt;O co chodziło z tym Paintem?&lt;/h2&gt;
&lt;blockquote&gt;Wczorajsza misja była o elfickim — &lt;strong&gt;znaczy o Paint’cie&lt;/strong&gt; — znaczy o programowaniu w Pythonie i bytecode.&lt;footer&gt;niżej podpisany, w leadzie tego posta&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Większość moich czytelników była zdziwiona wspomnieniem programu Paint. Stali widzowie polskich streamów Gynvaela pamiętają film Python 101, który opublikował 1 kwietnia 2016. Zobacz &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;oryginalny film&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;wyjaśnienie&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;kod&lt;/a&gt; (po polsku) &lt;strong&gt;Uwaga, spoilery.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;W tym dowcipie primaaprilisowym, Gynvael uczył podstaw Pythona. Pierwsza część dotyczyła pisania bytecodu ręcznie. Druga (ok. 12 minuty) dotyczyła rysowania swoich własnych modułów Pythona. W programie Paint. Tak, Paint, prostym programie graficznym dołączonym do Windowsa. Narysował swój własny moduł Pythona w Paint’cie i zapisał jako BMP. Wyglądało to tak (powiększony PNG poniżej; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;pobierz gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;Jak to działa? Są trzy powody:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python może importować kod z pliku ZIP (dopisanego do sys.path). Niektóre narzędzia które tworzą pliki &lt;code class="docutils literal"&gt;.exe&lt;/code&gt; z kodu Pythona używają tej metody; stary format &lt;code class="docutils literal"&gt;.egg&lt;/code&gt; również używał ZIPów w ten sposób.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pliki BMP mają nagłówki na początku pliku.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pliki ZIP mają nagłówki na końcu pliku.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Więc jeden plik może być jednocześnie poprawnym plikiem BMP i poprawnym ZIPem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wziąłem kod &lt;code class="docutils literal"&gt;check_password&lt;/code&gt; i umieściłem go w pliku &lt;code class="docutils literal"&gt;mission11.py&lt;/code&gt; (wcześniej zacytowanym). Potem skompilowałem do &lt;code class="docutils literal"&gt;.pyc&lt;/code&gt; i utworzyłem z niego &lt;code class="docutils literal"&gt;.zip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_967b469cbba84d67b7d810faef2a7b23-1"&gt;1&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_967b469cbba84d67b7d810faef2a7b23-2"&gt;2&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_967b469cbba84d67b7d810faef2a7b23-3"&gt;3&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_967b469cbba84d67b7d810faef2a7b23-4"&gt;4&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_967b469cbba84d67b7d810faef2a7b23-5"&gt;5&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_967b469cbba84d67b7d810faef2a7b23-6"&gt;6&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_967b469cbba84d67b7d810faef2a7b23-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_967b469cbba84d67b7d810faef2a7b23-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_967b469cbba84d67b7d810faef2a7b23-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_967b469cbba84d67b7d810faef2a7b23-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;a name="rest_code_967b469cbba84d67b7d810faef2a7b23-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_967b469cbba84d67b7d810faef2a7b23-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Ponieważ nie jestem ekspertem w żadnym z formatów, uruchomiłem maszynę wirtualną z Windowsem i na ślepo &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;przekopiowałem parametry użyte przez Gynvaela&lt;/a&gt; do otwarcia pliku ZIP (nazwanego &lt;code class="docutils literal"&gt;.raw&lt;/code&gt;) w IrfanView i zapisałem jako &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt;. Zmieniłem rozmiar na 83×2, ponieważ mój ZIP miał 498 bajty (3 BPP * 83 px * 2 px = 498 bytes) — dzięki temu i odpowiedniemu rozmiarowi plików, mogłem nie dodawać komentarzy i edytowaniu ZIPa. Dostałem ten obrazek (znowu PNG; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;pobierz mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;Plik &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt; można uruchomić! Używamy tego kodu:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Źródło)&lt;/a&gt;&lt;/p&gt;
&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ec4a4045c20f40f3889db2bb36fe1704-1"&gt;1&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ec4a4045c20f40f3889db2bb36fe1704-2"&gt;2&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ec4a4045c20f40f3889db2bb36fe1704-3"&gt;3&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ec4a4045c20f40f3889db2bb36fe1704-4"&gt;4&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ec4a4045c20f40f3889db2bb36fe1704-5"&gt;5&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ec4a4045c20f40f3889db2bb36fe1704-6"&gt;6&lt;/a&gt;
&lt;a href="https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ec4a4045c20f40f3889db2bb36fe1704-7"&gt;7&lt;/a&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code python"&gt;&lt;a name="rest_code_ec4a4045c20f40f3889db2bb36fe1704-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_ec4a4045c20f40f3889db2bb36fe1704-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec4a4045c20f40f3889db2bb36fe1704-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_ec4a4045c20f40f3889db2bb36fe1704-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ec4a4045c20f40f3889db2bb36fe1704-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec4a4045c20f40f3889db2bb36fe1704-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;
&lt;a name="rest_code_ec4a4045c20f40f3889db2bb36fe1704-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;I dostajemy to:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="materialy"&gt;
&lt;h2&gt;Materiały&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (pełny kod solvera)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (używane w notatce na marginesie dot. vs list comprehensions)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py, kod użyty w pliku BMP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, plik uruchamiający moduł BMP/ZIP&lt;/a&gt; (na bazie utworzonego przez Gynvaela)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dokumentacja modułu dis&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dzięki za misję (i pomysł z BMP), Gynvael!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>Python hackery</category><category>Python internals</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/pl/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item></channel></rss>