<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o devel)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/devel.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Sun, 18 Jun 2017 18:50:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Revamping My Projects Page with Nikola</title><link>https://chriswarrick.com/pl/blog/2014/10/13/revamping-my-projects-page-with-nikola/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A week ago, I was inspired to produce a new &lt;a class="reference external" href="https://chriswarrick.com/projects/"&gt;projects page&lt;/a&gt; for
myself.  The previous one was a trainwreck with a lot of hacks.  Also hosted on
GitHub Pages for some reason.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;So, considering I’m so invested in &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; already,
I produced the &lt;a class="reference external" href="http://plugins.getnikola.com/#projectpages"&gt;projectpages plugin&lt;/a&gt;
and also made it publicly available.  The plugin produces two files,
&lt;tt class="docutils literal"&gt;projects/index.html&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;projects/projects.json&lt;/tt&gt;, and also enforces a
specific framework for the stories used for the individual projects, because
all the metadata are taken from special meta fields.&lt;/p&gt;
&lt;p&gt;In Nikola, post metadata is completely arbitrary (in fact, that’s my fault; I
&lt;a class="reference external" href="https://github.com/getnikola/nikola/pull/304"&gt;contributed the feature&lt;/a&gt; back in February 2013).
You can put anything you want, and Nikola will let any plugin and template use the information in any way it likes.&lt;/p&gt;
&lt;p&gt;And that is basically the gist of the projectpages plugin.  Using some specific
&lt;a class="reference external" href="https://github.com/getnikola/plugins/tree/master/v7/projectpages#meta-fields"&gt;meta fields&lt;/a&gt;,
the plugin produces all the files.  It also provides ready-made templates for
the story pages (though the default templates are designed to fit my site
only).&lt;/p&gt;
&lt;p&gt;This plugin is basically a special index page generator.  It takes all the
stories in the designated projects directory, looks at the metadata, and
lists them in a nice format (slider of featured projects + a list of everything
else that is not hidden).  Everything automated and done for you, as is always
with Nikola — which values simplicity and ease of use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The result:&lt;/strong&gt; a pretty &lt;strong&gt;&lt;a href="https://chriswarrick.com/projects/"&gt;projects page&lt;/a&gt;&lt;/strong&gt;.  And some good OSS work done.&lt;/p&gt;&lt;p&gt;PS. I just underwent a move to &lt;a class="reference external" href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;
and I love them.  Moreover, this blog is proudly &lt;em&gt;HTTPS only&lt;/em&gt; as of yesterday.&lt;/p&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2014/10/13/revamping-my-projects-page-with-nikola/</guid><pubDate>Mon, 13 Oct 2014 12:15:00 GMT</pubDate></item><item><title>Python Apps the Right Way: entry points and scripts</title><link>https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;There are multiple ways to write an app in Python.  However, not all of them
provide your users with the best experience.&lt;/p&gt;
&lt;p&gt;One of the problems some people encounter is &lt;em&gt;writing launch scripts&lt;/em&gt;.  The
best way to handle this is the &lt;em&gt;Entry Points&lt;/em&gt; mechanism of Setuptools, and a
&lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; file.  It’s quite easy to implement.  If you’re interested,
read on to learn more!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="requirements-and-desired-results"&gt;
&lt;h2&gt;Requirements and Desired Results&lt;/h2&gt;
&lt;p&gt;You will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;a Python project&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;a setup.py file using &lt;a class="reference external" href="https://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;the following directory structure:&lt;/p&gt;
&lt;ul class="list-nobullets"&gt;
    &lt;li&gt;
    &lt;a href="https://chriswarrick.com/listings/entry_points_project/"&gt;&lt;i class="fa fa-folder-open"&gt;&lt;/i&gt;
    entry_points_project/&lt;/a&gt;
    &lt;/li&gt;&lt;li&gt;
        &lt;ul class="list-nobullets"&gt;
        &lt;li&gt;
        &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/"&gt;&lt;i class="fa fa-folder-open"&gt;&lt;/i&gt; my_project/&lt;/a&gt;
            &lt;/li&gt;&lt;li&gt;
            &lt;ul class="list-nobullets"&gt;
                &lt;li&gt;
                &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/__init__.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt;
                __init__.py&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt;
                __main__.py&lt;/a&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
        &lt;li&gt;
        &lt;a href="https://chriswarrick.com/listings/entry_points_project/setup.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt; setup.py&lt;/a&gt;
        &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;tt class="docutils literal"&gt;entry_points_project&lt;/tt&gt; is also where the README and other auxiliary files
go, while &lt;tt class="docutils literal"&gt;my_project&lt;/tt&gt; contains all the Python code.)&lt;/p&gt;
&lt;p&gt;When you’re done, you will have a project that can be executed by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; my_project&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;my_project&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Provided that you have your Python directory and its &lt;tt class="docutils literal"&gt;Scripts\&lt;/tt&gt; subdirectory on
the %PATH%, this will &lt;strong&gt;also work in Windows&lt;/strong&gt;.&lt;/p&gt;
 &lt;div class="panel panel-info"&gt;
   &lt;div class="panel-heading"&gt;
     &lt;h4 class="panel-title"&gt;Looking for a project template?&lt;/h4&gt;
   &lt;/div&gt;
   &lt;div class="panel-body"&gt;
    If you want to create a well-structured project with release automation and
some other goodies, check out my &lt;a href="https://github.com/Kwpolska/python-project-template" style="font-weight: bold;"&gt;Python Project Template&lt;/a&gt;.
   &lt;/div&gt;
 &lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="step-1-create-a-main-py-file"&gt;
&lt;h2&gt;Step 1: create a &lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; file&lt;/h2&gt;
&lt;p&gt;In order to implement the first desired result, you need to create a
&lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; file in your package.  This file needs to contain a &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt;
function that takes no arguments, and also a special passage to determine code
to run:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py.html"&gt;entry_points_project/my_project/__main__.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-5"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""The main routine."""&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-9"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"This is the main routine."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-10"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"It should do something interesting."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Do argument parsing here (eg. with argparse) and anything else&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# you want your project to do.&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-15"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0ee8db7c3a8e4a0695f7c920d60974ff-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;if __name__ == "__main__":&lt;/tt&gt; idiom, as &lt;a class="reference external" href="https://docs.python.org/3/library/__main__.html"&gt;documented here&lt;/a&gt;, is used to check whether
this is executed as the top-level file, or if it has been imported by someone
else (in this case, executing the &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; function is not always intended).&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;main()&lt;/tt&gt; function must not take any arguments, because that’s how
&lt;tt class="docutils literal"&gt;entry_points&lt;/tt&gt; executes things.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-adjust-setup-py-accordingly"&gt;
&lt;h2&gt;Step 2: adjust &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; accordingly&lt;/h2&gt;
&lt;p&gt;This is the real deal: create the entry points in your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/setup.py.html"&gt;entry_points_project/setup.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/setup.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'my_project'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-4"&gt;&lt;/a&gt;      &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'0.1.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-5"&gt;&lt;/a&gt;      &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'my_project'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-6"&gt;&lt;/a&gt;      &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-7"&gt;&lt;/a&gt;          &lt;span class="s1"&gt;'console_scripts'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-8"&gt;&lt;/a&gt;              &lt;span class="s1"&gt;'my_project = my_project.__main__:main'&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-9"&gt;&lt;/a&gt;          &lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-10"&gt;&lt;/a&gt;      &lt;span class="p"&gt;},&lt;/span&gt;
&lt;a name="rest_code_4582ba2594b4468593f43ff526518e47-11"&gt;&lt;/a&gt;      &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;You must use setuptools, otherwise this won’t work.&lt;/li&gt;
&lt;li&gt;The most important piece of code is the &lt;tt class="docutils literal"&gt;entry_points&lt;/tt&gt; declaration
(unsurprisingly).&lt;/li&gt;
&lt;li&gt;The declaration reads&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_257052b6987a417cab52fef912079792-1"&gt;&lt;/a&gt;"name_of_executable = module.with:function_to_execute"
&lt;/pre&gt;&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;If you are developing a GUI application (in Tkinter, PyQt/PySide,
WxPython, PyGTK, PyGame…), you should change the declaration to
&lt;tt class="docutils literal"&gt;gui_scripts&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You can create &lt;strong&gt;multiple scripts&lt;/strong&gt; this way.  You can also have multiple
&lt;tt class="docutils literal"&gt;console_scripts&lt;/tt&gt; &lt;em&gt;and&lt;/em&gt; &lt;tt class="docutils literal"&gt;gui_scripts&lt;/tt&gt; in one setup file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="text-muted"&gt;All &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/"&gt;code samples&lt;/a&gt; are freely reusable, but if you mention where you got them from, it’d be really nice.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/</guid><pubDate>Mon, 15 Sep 2014 16:00:00 GMT</pubDate></item><item><title>Speeker — moja mała aplikacja na Androida</title><link>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;a class="android-adventure-logo-robot reference external image-reference" href="https://chriswarrick.com/pl/blog/2014/08/01/series-android-adventure/"&gt;&lt;img alt="/blog-content/android-adventure/robot.png" src="https://chriswarrick.com/blog-content/android-adventure/robot.png"&gt;&lt;/a&gt;
&lt;p&gt;Skoro mam używalny telefon, mogę zająć się tworzeniem aplikacji na Androida.
Co uczyniłem.  Zacząłem od aplikacji do testowania i zabawy z usługami
text-to-speech systemu Android.  Nazwałem ją Speeker.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;img src="https://chriswarrick.com/blog-content/android-adventure/speeker.png" alt="Speeker logo"&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/speeker/" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-picture-o"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker/releases" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobieranie
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;Speeker jest małym i prostym frontendem dla systemowej usługi TTS.  W obecnej
iteracji jest dosyć ograniczony.  Kompletny zestaw funkcji to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;wypowiedz tekst wpisany przez użytkownika&lt;/li&gt;
&lt;li&gt;wypowiedz tekst w domyślnym języku TTS systemu (wybranym w ustawieniach
Androida, i nie ma obecnie przycisku otwierającego to menu)&lt;/li&gt;
&lt;li&gt;wyczyść pole tekstowe&lt;/li&gt;
&lt;li&gt;pokaż okno &lt;em&gt;O programie&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;pokaż licencje open source&lt;/li&gt;
&lt;li&gt;otwórz moją stronę internetową&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To SZEŚĆ funkcji! I nie można nawet ściągnąć go z Google Play, bo jestem zbyt
skąpy by zapłacić $25 opłaty startowej!&lt;/p&gt;
&lt;p&gt;Będę lub nie kontynuował rozwoju i być może dodam kilka funkcji.  W każdym
razie, moje doświadczenia z tworzeniem na Androida nie były dobre: nie ma
wystarczająco dużo dobrej dokumentacji, i musiałem często zgadywać w niektórych
miejscach, np. przy importach.  Dokumentacja mogłaby zostać znacznie
poprawiona.&lt;/p&gt;
&lt;p&gt;Innym problemem jest wybór IDE.  O ile można oczywiście pracować nad Androidem
w dowolnym środowisku, w tym tylko w Vimie i w terminalu, oficjalnym i
rekomendowanym środowiskiem jest Eclipse.  Który okazuje się być najgorszym IDE
które kiedykolwiek powstało.  Jest nieprzyjazny i nieporęczny — czyli
standardowe cechy dużych aplikacji Javovych.  Jednym razem Eclipse udało się
otworzyć plik w jakieś dziesięć sekund.  Bardzo imponujące, dopóki nie
zauważysz, że cokolwiek innego zrobiłoby to w mniej czasu.  Nie, nie zmyślam.
To jest problem z dużymi IDE: próbują zrobić za dużo naraz.&lt;/p&gt;
&lt;p&gt;Tworzenie na Androida nie było najlepszym doświadczeniem — ale da się, i nie
trzeba mieć za dużo doświadczenia z samą platformą by to robić.  Android ma
potencjał, ale musi być udoskonalony, by być przyjaznym dla developerów.&lt;/p&gt;&lt;/div&gt;</description><category>android</category><category>app</category><category>devel</category><category>programming</category><category>projects</category><guid>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</guid><pubDate>Tue, 26 Aug 2014 13:00:00 GMT</pubDate></item></channel></rss>