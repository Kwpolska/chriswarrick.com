<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posty o devel)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/pl/blog/tags/devel.xml" rel="self" type="application/rss+xml"></atom:link><language>pl</language><lastBuildDate>Thu, 31 Dec 2020 22:44:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What an ARM Mac means for developers and Windows users</title><link>https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;The rumor mill was right this time, and Apple has just announced they will
transition Macs to ARM processors. These news have some side effects for
software developers, particularly those not working with the Apple ecosystem.
And they also affect people who depend on both macOS and Windows.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#how-will-it-work-out-in-apple-land" id="id1"&gt;How will it work out in Apple land?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#who-needs-non-apple-operating-systems" id="id2"&gt;Who needs non-Apple operating systems?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#is-virtualization-possible-on-arm" id="id3"&gt;Is virtualization possible on ARM?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#can-we-emulate-x86-64-and-run-x86-64-windows-10" id="id4"&gt;Can we emulate x86(_64) and run x86(_64) Windows 10?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#whats-next-for-people-who-rely-on-both-macos-and-windows" id="id5"&gt;What’s next for people who rely on both macOS and Windows?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#post-m1-announcement-update-2020-11-14" id="id6"&gt;Post-M1 announcement update (2020-11-14)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;In this post, I am not going to focus in the differences between x86_64 and ARM,
RISC and CISC, and all the benchmarks. Let’s assume that Apple manages to offer
ARM-based CPUs that can match performance of most Intel processors in Apple’s
lineup, and let’s even assume they can make an ARM Mac Pro. (A note on naming:
Apple Silicon is the official name, but it sounds ugly. I’ll just call it ARM.
For Intel, I’ll use either Intel or x86(_64).)&lt;/p&gt;
&lt;p&gt;For many users, the transition will be more-or-less transparent. Sure, they’ll
lose some apps, just like they probably did with Catalina (which dropped
support for 32-bit Intel apps), or some apps will not be available/will be
buggy in the first few months of the transition (though it will be easier than
the PowerPC transition, because Apple uses little-endian byte order on ARM).&lt;/p&gt;
&lt;div class="section" id="how-will-it-work-out-in-apple-land"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id1"&gt;How will it work out in Apple land?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For developers who work only on iOS apps, the transition also won’t mean much.
Maybe a faster, more accurate Simulator. They’ll need to buy an ARM Mac sooner
or later (within the next 5 years), because Apple requires them to use the
latest Xcode version for App Store submissions, and Xcode supports at best the
previous version of macOS.  But that has been Apple’s policy forever, and the
Intel Macs will probably be within the usual deprecation range when that
happens.&lt;/p&gt;
&lt;p&gt;The requirements for macOS-only developers are pretty obvious, they will need
to buy an ARM Mac on day one, so they can test their apps on the new platform.
They will also need to work on ARM compatibility — although updating your app
for the new OS is a yearly ritual in Apple land, so that’s also mostly
business-as-usual (unless you do a lot of unportable low-level stuff in your
code). There are some pro apps that tend to lag behind new Apple decrees (some
might have been hit by Catalina), and users of those apps might prefer to stay
with Intel for a little bit longer.&lt;/p&gt;
&lt;p&gt;But then, we get to the requirements of developers who use Macs, but don’t work
exclusively with the Apple platforms. This is a fairly large group, since many
developers like Macs for the good hardware, Unix-based software, and the
integration of both. And for some part, non-developers are affected too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-needs-non-apple-operating-systems"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id2"&gt;Who needs non-Apple operating systems?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first group are people tied to Windows, somehow. Some of them might be
using Boot Camp to play games. Others might be using Boot Camp or
virtualization software (Parallels Desktop, VMware Fusion, Oracle VM
VirtualBox) to run Windows and Windows-specific apps — perhaps they need the
Windows version of Office, or various Windows-onlypro apps, or they need
Windows to file their taxes, because their government does not care about
non-Windows OSes. Or perhaps they’re web developers, and they need to test
compatibility with the Windows versions of browsers, or the old Microsoft
browsers (IE and pre-Chromium Edge).&lt;/p&gt;
&lt;p&gt;The second group is software developers who need Linux. While macOS provides a
very competent development environment, and many things can be run directly on
macOS, some use-cases may require a Linux VM.  Perhaps the most notable case is
Docker.&lt;/p&gt;
&lt;p&gt;Docker is a solution for lightweight app containers, that can offer separation
between apps, and that can simplify and standardize deployment. Docker itself
is not a virtualization solution (at least in the traditional sense). Docker
must run on top of Linux (there’s also Docker-on-Windows, but that’s another
story). The Docker Desktop for Mac app runs a lightweight Linux VM, and runs
containers in that VM. The virtualization solution &lt;a class="reference external" href="https://github.com/docker/for-mac"&gt;Docker for Mac uses&lt;/a&gt; is &lt;code class="docutils literal"&gt;Hypervisor.framework&lt;/code&gt;, which is
part of macOS itself.&lt;/p&gt;
&lt;p&gt;Who else needs virtualization? Android developers. The Android Emulator is also
a virtual machine that runs the Android operating system. Android can run on
different architectures, and so, a x86 system image is typically used for the
Emulator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-virtualization-possible-on-arm"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id3"&gt;Is virtualization possible on ARM?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, definitely. Apple has been testing it much earlier, since the
aforementioned &lt;code class="docutils literal"&gt;Hypervisor.framework&lt;/code&gt; was found &lt;a class="reference external" href="https://twitter.com/never_released/status/1250533740557852674"&gt;on iOS in April&lt;/a&gt;.
And Apple announced virtualization support for ARM Macs during the keynote, and
showed an example of a Linux VM. That VM was, of course, running an ARM64
distribution of Linux.&lt;/p&gt;
&lt;p&gt;But what can we use this for? Turns out, it’s complicated. The easiest thing
from the few use-cases mentioned before is Android. Google just needs to get
the Emulator working on ARM Macs and ship that to the devs.&lt;/p&gt;
&lt;p&gt;What about Linux in general? Many mainstream distributions
support ARM64, so that’s not a problem in general. The support for a particular
distro or software might be worse than on x86_64, but it’s generally not a
problem for users.&lt;/p&gt;
&lt;p&gt;But for Docker, there’s a problem. One of the many advantages of Docker is
dev-prod parity. If you deploy your app with Docker to an x86_64 Linux server,
you can also install Docker on an x86_64 Linux developer machine (or a Linux VM on an
Intel Mac/Windows PC). Both the server and the dev machine can run &lt;strong&gt;the same&lt;/strong&gt;
image, the same code, the same configuration. That won’t happen if they are a
different architecture. This means that you can end up with bugs happening
because of different environments, and it’s also possible that some images you
depend on are not available for both architectures.&lt;/p&gt;
&lt;p&gt;And then we get to Windows. Windows also has an ARM version, but it’s currently
available only with a new ARM device (you can’t buy it standalone). If
Microsoft were to sell this, we’d have an issue with the software. Windows 10
on ARM supports 32/64-bit ARM software, and can run 32-bit Intel (x86) software
using emulation. It cannot, however, emulate apps that require 64-bit Intel
processors (x86_64).  This makes the software situation on that platform a bit
better. While many developers don’t care about ARM and might not have builds
for ARM available, most Windows software is available in both x86 and x86_64
versions, or is exclusively 32-bit. But certain pro apps are x86_64 only, so if
there is no ARM build of it, an ARM Windows PC currently cannot run it.
(&lt;em&gt;Update:&lt;/em&gt; Microsoft announced &lt;a class="reference external" href="https://blogs.windows.com/windowsexperience/2020/09/30/now-more-essential-than-ever-the-role-of-the-windows-pc-has-changed/"&gt;x86_64 emulation on ARM&lt;/a&gt;,
which means more software will work.)&lt;/p&gt;
&lt;p&gt;And note that Microsoft knows about the transition, but we haven’t heard
anything about Windows during the keynote…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-we-emulate-x86-64-and-run-x86-64-windows-10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id4"&gt;Can we emulate x86(_64) and run x86(_64) Windows 10?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Theoretically? Yes. Practically? No.&lt;/p&gt;
&lt;p&gt;The issue with emulation is speed. There are a few x86 emulators available, and
those emulators can be run on an ARM device just fine. You can find videos on
YouTube (not a very reliable source of information, I know) in which people try
to benchmark those, or try to run Windows using an emulator like that. And even
with an ancient Windows version, the emulation is painfully slow. Windows 10
would be basically unusable if you tried to emulate all of it.&lt;/p&gt;
&lt;p&gt;How does the x86 emulation on Windows 10 for ARM work? You can watch &lt;a class="reference external" href="https://channel9.msdn.com/Events/Build/2017/P4171"&gt;the
Channel 9 video about Windows 10 on ARM&lt;/a&gt; (around 6:00) for more
details. The trick is that system DLLs are using a hybrid x86/ARM64 library
format, which means x86 code can call those DLLs at native speeds. This means
that many apps run at near-native speed (depending on the ratio of custom code
to system DLL calls). This technique cannot work for emulating the entire
operating system. If Windows 10 on ARM was made available for ARM Macs, running
x86 Windows apps would become feasible.&lt;/p&gt;
&lt;p&gt;Rosetta probably uses similar technique. Most apps will be translated at
install time, not at run time. But you can’t do that with an entire OS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-next-for-people-who-rely-on-both-macos-and-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id5"&gt;What’s next for people who rely on both macOS and Windows?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a few more years, Intel Macs will still be supported by Apple (with new
macOS versions) and by software vendors. But after that? Well, you’re stuck
with two machines, at least until Windows on ARM becomes viable and runnable on
Macs. Or you can start exploring alternatives to macOS software. If you’re one
of the macOS-as-UNIX-with-great-UX developers (hello!), perhaps you’ll have to
switch to Linux — or perhaps Windows with Windows Subsystem for Linux? (The
latter is becoming more usable with every Windows release, so keep an eye on
that… I wrote this post in NeoVim in WSL2, with Windows Terminal supporting
many advanced terminal features, and the transparent filesystem integration
letting me access Windows files directly).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="post-m1-announcement-update-2020-11-14"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/#id6"&gt;Post-M1 announcement update (2020-11-14)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Parallels have confirmed &lt;a class="reference external" href="https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/"&gt;support for M1 Macs&lt;/a&gt; and
are offering a Technical Preview of their M1 virtualization product. This
announcement’s mention of Windows 10 ARM supporting x86_64 apps has caused
some tech writers to assume Parallels will support Windows 10 ARM on M1
Macs. This is &lt;strong&gt;not&lt;/strong&gt; what the post says. Parallels is not, and cannot
announce support for that OS, because Windows 10 ARM is (still) available to
ARM OEMs only to install on their devices — making an official announcement
about this feature today would be admitting to doing something illegal/not
allowed by the EULA. I’m pretty sure they are not working on support for
Windows 10 ARM now and in the foreseeable future, until Microsoft opens up
Windows 10 ARM to the public — their own legal issues aside, who would they sell
the Windows support to?&lt;/p&gt;
&lt;p&gt;In other news, &lt;a class="reference external" href="https://github.com/docker/for-mac/issues/4733"&gt;Docker is not ready yet&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2020/06/22/what-an-arm-mac-means-for-developers-and-windows-users/</guid><pubDate>Mon, 22 Jun 2020 19:00:00 GMT</pubDate></item><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;There are two main tools used to create virtual environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt; has
been the de facto standard tool for many years. It can be used with both
Python 2 and 3, including very old versions of Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; (aka pyvenv) was added to the
standard library in Python 3.3, and with the addition of &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt; in 3.4,
it’s an even easier way to get a virtual environment created.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;virtualenv can be installed with your system package manager, or &lt;code class="docutils literal"&gt;pip
install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;venv comes built-in with Python 3, although
Debian/Ubuntu users will need to run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/code&gt; to
make it work. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id5" id="id1"&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which one to use? It’s up to you. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;code class="docutils literal"&gt;env&lt;/code&gt;, use (depending on your tool of
choice):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_075cab9e505b491aa877a629140720a6-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_fca312a914fc41b1af938846d12a7828-1"&gt;&lt;/a&gt;$ python3 -m venv env
&lt;/pre&gt;&lt;p&gt;Afterwards, you will end up with a folder named &lt;code class="docutils literal"&gt;env&lt;/code&gt; that contains folders
named &lt;code class="docutils literal"&gt;bin&lt;/code&gt; (&lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; on Windows — contains executables, including
&lt;code class="docutils literal"&gt;python&lt;/code&gt;), &lt;code class="docutils literal"&gt;lib&lt;/code&gt; (contains code), and &lt;code class="docutils literal"&gt;include&lt;/code&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;setuptools&lt;/code&gt;, but &lt;code class="docutils literal"&gt;venv&lt;/code&gt; does not ship with
&lt;code class="docutils literal"&gt;wheel&lt;/code&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick (first command is Unix, second is Windows): &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id6" id="id2"&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_56aec17272924aefb1ad11201707bece-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a name="rest_code_56aec17272924aefb1ad11201707bece-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;div class="section" id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Have one global place for them, like &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store them in each project’s directory, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option comes with tools that make it easier, such as
&lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/"&gt;virtualenvwrapper&lt;/a&gt;.
The second option is equally easy to work with, but comes with one caveat —
you must add the venv directory to your &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; file, since you don’t
want it in your repository (it’s binary bloat, and works only on your machine).&lt;/p&gt;
&lt;p&gt;And if you don’t want to install virtualenvwrapper but want to put virtualenvs
in one global place, all you need is a short function in your shell
configuration file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fd347f98d80e480ebcc89fc3b91cd015-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fd347f98d80e480ebcc89fc3b91cd015-1"&gt;&lt;/a&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/virtualenvs
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fd347f98d80e480ebcc89fc3b91cd015-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fd347f98d80e480ebcc89fc3b91cd015-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fd347f98d80e480ebcc89fc3b91cd015-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fd347f98d80e480ebcc89fc3b91cd015-3"&gt;&lt;/a&gt; &lt;span class="k"&gt;function&lt;/span&gt; workon &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fd347f98d80e480ebcc89fc3b91cd015-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fd347f98d80e480ebcc89fc3b91cd015-4"&gt;&lt;/a&gt;     &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#rest_code_fd347f98d80e480ebcc89fc3b91cd015-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fd347f98d80e480ebcc89fc3b91cd015-5"&gt;&lt;/a&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;activation (run &lt;code class="docutils literal"&gt;source env/bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;env\Scripts\activate&lt;/code&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;executing &lt;code class="docutils literal"&gt;env/bin/python&lt;/code&gt; (&lt;code class="docutils literal"&gt;env\Scripts\python&lt;/code&gt;) and other scripts directly, as
activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is, and that
method is failsafe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a name="rest_code_ec500fd72c5b447daa4302a823af7a61-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;/pre&gt;&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt;, calling it as
&lt;code class="docutils literal"&gt;./manage.py&lt;/code&gt; requires activation, or you can run
&lt;code class="docutils literal"&gt;venv/bin/python manage.py&lt;/code&gt;.)&lt;/p&gt;
&lt;div class="section" id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option is deprecated and generally fails to
solve the problem.) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id7" id="id3"&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_9f9d96ce26074f94b2210624f04bd13e-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a name="rest_code_9f9d96ce26074f94b2210624f04bd13e-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a name="rest_code_9f9d96ce26074f94b2210624f04bd13e-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a name="rest_code_9f9d96ce26074f94b2210624f04bd13e-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id8" id="id4"&gt;4&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;div class="section" id="do-i-need-to-install-the-virtualenv-tool-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;Do I need to install the virtualenv tool for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;code class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/code&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;code class="docutils literal"&gt;sudo pip&lt;/code&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The thing you’re actually installing is &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; if you want to upgrade the package manager itself.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;div class="contents right-toc topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is not in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; your process gets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the hard-coded path is not correct on the end user’s system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id5" id="id1"&gt;1&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;code class="docutils literal"&gt;grep&lt;/code&gt;, &lt;code class="docutils literal"&gt;sed&lt;/code&gt; and
&lt;code class="docutils literal"&gt;awk&lt;/code&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;code class="docutils literal"&gt;os&lt;/code&gt; or &lt;code class="docutils literal"&gt;shutil&lt;/code&gt;. Your language of
choice can also handle things like networking (don’t call &lt;code class="docutils literal"&gt;curl&lt;/code&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;code class="docutils literal"&gt;execve()&lt;/code&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id6" id="id2"&gt;2&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id7" id="id3"&gt;3&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id8" id="id4"&gt;4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;directly, by calling &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;through the shell (&lt;code class="docutils literal"&gt;sh&lt;/code&gt;), usually by calling &lt;code class="docutils literal"&gt;system()&lt;/code&gt;. As Linux’s
manpage for &lt;code class="docutils literal"&gt;system(3)&lt;/code&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;system()&lt;/code&gt; library function uses &lt;code class="docutils literal"&gt;fork(2)&lt;/code&gt; to create a child process that executes the shell command specified in command using &lt;code class="docutils literal"&gt;execl(3)&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_1fd0327ef44d48fab2cc5bd0b4a63913-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e2162abc2be14642ac606a5fe96aec60-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_e2162abc2be14642ac606a5fe96aec60-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_e2162abc2be14642ac606a5fe96aec60-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a name="rest_code_4fd7dbd99e3446f68f0a7acd2932a1ea-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;quotes and escapes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding expressions in braces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wildcards (glob, &lt;code class="docutils literal"&gt;*&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redirections and pipes (&lt;code class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command substitution (backticks or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running multiple commands on the same line (&lt;code class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="dl-horizontal simple"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Perform fork-exec by yourself, or use &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;code class="docutils literal"&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the subprocess module. Always pass &lt;code class="docutils literal"&gt;shell=False&lt;/code&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;code class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/code&gt; (and not &lt;code class="docutils literal"&gt;_shell&lt;/code&gt;), but note it takes &lt;code class="docutils literal"&gt;*args&lt;/code&gt; and not a list. Never use &lt;code class="docutils literal"&gt;os.system&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.popen&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;IO.popen&lt;/code&gt;. Pass multiple arguments to &lt;code class="docutils literal"&gt;system()&lt;/code&gt; (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/code&gt;). Never use &lt;code class="docutils literal"&gt;%x{command}&lt;/code&gt; or backticks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;Runtime.exec&lt;/code&gt;. Pass multiple arguments or list to &lt;code class="docutils literal"&gt;ProcessBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All the standard methods go through the shell. Try &lt;code class="docutils literal"&gt;escapeshellcmd()&lt;/code&gt;, &lt;code class="docutils literal"&gt;escapeshellarg()&lt;/code&gt; — or better, switch to Python. Or anything, really.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;os/exec&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.StartProcess&lt;/code&gt; are safe.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use &lt;code class="docutils literal"&gt;child_process.execFile&lt;/code&gt; or &lt;code class="docutils literal"&gt;child_process.spawn&lt;/code&gt; with &lt;code class="docutils literal"&gt;shell&lt;/code&gt; set to false.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; on Windows. Instead, &lt;code class="docutils literal"&gt;CreateProcess()&lt;/code&gt;,
&lt;code class="docutils literal"&gt;ShellExecute()&lt;/code&gt;, or lower-level &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/code&gt; functions are used. &lt;code class="docutils literal"&gt;cmd.exe
/c&lt;/code&gt; is called in shell calls.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The function that does the real work is &lt;code class="docutils literal"&gt;execve()&lt;/code&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;code class="docutils literal"&gt;execl()&lt;/code&gt; does the last two.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Quoted from &lt;code class="docutils literal"&gt;execve(2)&lt;/code&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An alternative is &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Setting up a Python development environment</title><link>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Setting up Python is usually simple, but there are some places where newcomers
(and experienced users) need to be careful. What versions are there? What’s the
difference between Python, CPython, Anaconda, PyPy? Those and many other
questions may stump new developers, or people wanting to use Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note: this guide is opinionated.&lt;/p&gt;
&lt;div class="contents right-toc topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#glossary-and-questions" id="id2"&gt;Glossary and questions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#python-versions-2-vs-3" id="id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-run-multiple-pythons-on-the-same-machine" id="id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#implementations" id="id5"&gt;Implementations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions" id="id6"&gt;Distributions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-make-exe-files-from-python-programs" id="id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#where-to-learn-python-where-to-get-help" id="id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-python" id="id9"&gt;Installing Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#windows" id="id10"&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#macos" id="id11"&gt;macOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#linux-and-other-unix-like-oses" id="id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installing-packages" id="id13"&gt;Installing packages&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#user-installs" id="id14"&gt;User installs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#virtual-environments" id="id15"&gt;Virtual environments&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#tools-and-management" id="id16"&gt;Tools and management&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#installation-and-usage" id="id17"&gt;Installation and usage&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#upgrading-and-moving" id="id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#packages-with-c-extensions-binary" id="id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#other-stuff" id="id20"&gt;Other stuff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#editors-and-ides" id="id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#update-history" id="id22"&gt;Update history&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="glossary-and-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id2"&gt;Glossary and questions&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="python-versions-2-vs-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Python community has undergone sort of a &lt;em&gt;schism&lt;/em&gt; in recent years. Python
3, released in 2008, broke backwards compatibility: deprecated some bad
constructs and libraries (eg. &lt;code class="docutils literal"&gt;raw_input()&lt;/code&gt; became &lt;code class="docutils literal"&gt;input()&lt;/code&gt; and the
original Python 2 function that ran code input by users is gone; &lt;code class="docutils literal"&gt;print()&lt;/code&gt;
became a function; many things that returned lists now are iterators — &lt;code class="docutils literal"&gt;zip&lt;/code&gt;,
&lt;code class="docutils literal"&gt;range&lt;/code&gt;), and completely remodelled strings (which are now Unicode by
default, and the interpreter behavior is stricter when the wrong type is used)&lt;/p&gt;
&lt;p&gt;For new code, you should use Python 3. &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Most popular packages support Python 3&lt;/a&gt;, and many of them support both Pythons at
the same time. The early bugs were ironed out in the first few point releases,
some features that made porting easier were added (back).&lt;/p&gt;
&lt;p&gt;But what if you end up needing Python 2 later? No problem: you can learn the
differences in a short time, and with the help of a few libraries (eg. &lt;code class="docutils literal"&gt;six&lt;/code&gt;)
you can easily write code that is compatible with Python 2 and 3 at the same
time, using the same codebase (most libraries out there do that).&lt;/p&gt;
&lt;p&gt;Python 2 will go EOL and lose official support and updates in 2020.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/Python2orPython3"&gt;Python 2 or Python 3 on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-run-multiple-pythons-on-the-same-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes. Note that multiple Python interpreters are completely separate: they have
their own pip and packages, and you can’t run Python 2 code in a Python 3
interpreter. You need to specify which interpreter to use when installing
packages and running some scripts (eg. &lt;code class="docutils literal"&gt;pip2&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip3&lt;/code&gt; or &lt;code class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It’s best to limit yourself to the latest Python 2 and 3 versions. Python is
backwards-compatible within the major release, so Python 2.7 runs code
written with older 2.x versions in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id5"&gt;Implementations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A programming language is an abstract construct. To run code written in that
language, an interpreter or compiler needs to be written. In Python’s case,
there’s a plethora of implementations. Some of them are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt; is the reference implementation. This is the implementation
distributed on &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt; and as part of many operating systems.
Most Python features are first implemented in CPython, and then they are
ported to other implementations.  If you don’t know what to choose, use
CPython.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PyPy&lt;/strong&gt; is a fast implementation, written in a subset of Python. It’s compatible with
Python 2.7 and 3.5 (beta support). It can run all pure Python code, and many
extension libraries that use CFFI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;IronPython&lt;/strong&gt; is a .NET CLR implementation. It can integrate with .NET code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jython&lt;/strong&gt; is a Java JVM implementation. It can integrate with Java code, as
well as other JVM languages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Implementations on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="distributions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id6"&gt;Distributions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are also Python (CPython) distributions. They ship the CPython
interpreter and add some extra packages/features.  They are maintained by other
communities or corporate entities.&lt;/p&gt;
&lt;p&gt;The most popular third-party distribution is &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum Analytics. It’s popular
for data scientists, and includes over 100 packages, with extra pre-built
binaries available from the &lt;code class="docutils literal"&gt;conda&lt;/code&gt; package manager.&lt;/p&gt;
&lt;p&gt;I personally recommend to avoid Anaconda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Most packages have binary wheels for Windows, macOS and Linux (yes, Linux!)
making the installation as simple as &lt;code class="docutils literal"&gt;pip install numpy&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You waste disk space for packages Anaconda installs that you won’t ever need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s provided by some random for-profit company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ve seen bugs that were not reproducible outside of Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can still do data science using the official distribution. There’s
nothing special about Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDistributions"&gt;Python distributions on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-make-exe-files-from-python-programs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, you can. There are tools for this — &lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is the best one. Note that you usually need to
run it on the destination operating system. And remember that “compiling” to
exe files like that &lt;strong&gt;is not&lt;/strong&gt; a security measure — your source code is still
easily recoverable. (It’s not a security measure in other languages either,
even if getting source code back might be more expensive/tricky in those.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-learn-python-where-to-get-help"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of learning material is important. If you get a bad book, it might
discourage you from learning (because it’s boring), or may teach you
bad/outdated practices.&lt;/p&gt;
&lt;p&gt;If you can already program in another language, I recommend the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official
Python tutorial&lt;/a&gt;. For newcomers to
programming, I recommend &lt;a class="reference external" href="http://greenteapress.com/wp/think-python-2e/"&gt;Think Python&lt;/a&gt; or &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff
with Python&lt;/a&gt;.  They teach Python 3, and
(mostly) best practices.&lt;/p&gt;
&lt;p&gt;If you need help, try &lt;code class="docutils literal"&gt;#python&lt;/code&gt; on freenode IRC, the &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/tutor"&gt;Tutor&lt;/a&gt; or &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list"&gt;Python-list&lt;/a&gt; mailing lists, or a bunch of other communities. (I’m a regular on &lt;code class="docutils literal"&gt;#python&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id9"&gt;Installing Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This guide will focus on installing CPython 2.7 and 3.x (latest), using the standard
distribution. This choice is satisfactory for most people. Third-party
distributions, while handy in some cases, are not needed for most. (See
&lt;a class="reference internal" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#distributions"&gt;Distributions&lt;/a&gt; for arguments)&lt;/p&gt;
&lt;p&gt;Throughout this guide, I’ll refer to the Python interpreter executable as
&lt;code class="docutils literal"&gt;python&lt;/code&gt;. The exact name depends on your system and desired version. On most
OSes, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 2 and &lt;code class="docutils literal"&gt;python3&lt;/code&gt; is 3; &lt;code class="docutils literal"&gt;python2&lt;/code&gt; should also
exist.  On Arch Linux, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 3. On Windows, use the &lt;code class="docutils literal"&gt;py&lt;/code&gt;
launcher.&lt;/p&gt;
&lt;div class="section" id="windows"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id10"&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Download the installer(s): &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those installers come with &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, and modern Python 3.x versions come with
the &lt;code class="docutils literal"&gt;py&lt;/code&gt; launcher.  You can use that launcher to pick a specific Python
version, eg.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2&lt;/span&gt; somefile.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2.7&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py&lt;/code&gt; (default system version)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s recommended for most use, and mandatory for upgrading pip.&lt;/p&gt;
&lt;p&gt;The 32-bit versions are more versatile. Most packages support both (the only
exception I’m aware of is Tensorflow, which only allows 64-bit Python 3.5 as of
now).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="macos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id11"&gt;macOS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS ships with Python 2.7.10 (as of macOS Sierra). It’s not the latest
version; it’s good enough for most people, but I still recommend installing
your own (the system Python doesn’t include &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, for example). You can
install the latest 2.7 version, as well as Python 3, using a package manager. I
recommend Homebrew — it’s the most popular solution, and lets you install many
other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use the python.org installers: they do not have uninstallers, so you
will have outdated versions lying around after some time. There is no
auto-update as well.  &lt;strong&gt;DO NOT&lt;/strong&gt; attempt to remove the system-installed Python,
this will only damage your system and you’ll need to reinstall.&lt;/p&gt;
&lt;p&gt;If you already have a package manager installed (MacPorts, Fink), don’t install
a new one and just use the existing one.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;brew install python python3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should now have &lt;code class="docutils literal"&gt;python&lt;/code&gt;, &lt;code class="docutils literal"&gt;python3&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To update Homebrew and Python, run &lt;code class="docutils literal"&gt;brew update&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-and-other-unix-like-oses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On Linux, there usually are good enough packages in your OS repositories. You
should be able to install the appropriate package for Python (2 and/or 3).
Most (if not all) distributions require Python — &lt;strong&gt;do not&lt;/strong&gt; remove the
pre-installed packages, and be careful not to overwrite them with something
newer.&lt;/p&gt;
&lt;p&gt;If the version that ships with your distribution is too old, there are some
options. There might be some repositories with better versions, eg. the
&lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes PPA&lt;/a&gt;
for Ubuntu. Then there’s the other option of compiling Python. There
are some tools to help with this, like &lt;code class="docutils literal"&gt;pyenv&lt;/code&gt; or &lt;code class="docutils literal"&gt;pythonz&lt;/code&gt; (they can also
manage multiple Python versions), or you can do it manually.
The instructions depend on your exact requirements, but here’s a summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;a class="reference external" href="https://www.python.org/downloads/source/"&gt;source distribution from Python.org&lt;/a&gt; and unpack it. Go into the unpacked source directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure you’ve got a functional C compiler and Python’s dependencies. You can
usually use your system’s package manager to install the build dependencies
of your system Python. Some dependencies are optional (eg. &lt;code class="docutils literal"&gt;sqlite3&lt;/code&gt;
requires SQLite headers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=/opt/python3.6&lt;/span&gt;&lt;/code&gt; and then &lt;code class="docutils literal"&gt;make&lt;/code&gt;. (You may add other options to both. It will
take a while.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;make altinstall&lt;/code&gt; as root. Avoid &lt;code class="docutils literal"&gt;make install&lt;/code&gt;, as it can override
&lt;code class="docutils literal"&gt;python&lt;/code&gt; executables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember: compiling Python should be considered a &lt;strong&gt;last resort&lt;/strong&gt;, unless you
have very specific Python version requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id13"&gt;Installing packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install third-party packages, you should use pip, the Python package
manager. If you’re using Windows or macOS (from Homebrew), pip is included with
your copy of Python.  If you’re on Linux and installed Python from a system
repository, install the correct system package (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-pip&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/code&gt;). If you compiled your own Python, pip is also included.&lt;/p&gt;
&lt;p&gt;To run pip, use &lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (Windows), &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (other platforms),
or the short &lt;code class="docutils literal"&gt;pip&lt;/code&gt;/&lt;code class="docutils literal"&gt;pip3&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEVER use sudo pip.&lt;/strong&gt; This can cause numerous problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;conflicts between packages installed by pip and your system package
manager&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip modifying system packages, leading to issues when updating them, or
breaking dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no isolation between package versions, which is sometimes needed to satisfy
dependencies&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package install is specific to the Python interpreter used to run
&lt;code class="docutils literal"&gt;pip&lt;/code&gt;. Packages installed to a virtualenv are separate from system packages;
packages installed for “global” Python 2.7 are separate from 3.6 packages.
Virtual environments generally don’t use the system packages, unless
specifically enabled during creation.&lt;/p&gt;
&lt;p&gt;Some distros have popular packages in their repositories. Sometimes they’re
good; in other cases they’re terribly outdated or they lack important
components, making package managers angry and sick of supporting a 2-year-old
version. (Especially since most bugs are closed with “we’ve fixed that long
ago”)&lt;/p&gt;
&lt;div class="section" id="user-installs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id14"&gt;User installs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a small scale, you can install packages with pip for a single user.  Use
&lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; PACKAGE&lt;/code&gt; to do this. If your package installs &lt;a class="reference external" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/"&gt;scripts&lt;/a&gt;,
they will be installed to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt; on Linux, and
&lt;code class="docutils literal"&gt;~/Library/Python/X.Y/bin&lt;/code&gt; on macOS (X.Y is Python version), or you can use
&lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/code&gt; if the package supports it.&lt;/p&gt;
&lt;p&gt;For most people and projects, virtual environments are better. There are,
however, use cases for putting some packages user-wide — if you don’t work on
projects, but instead are doing one-off research projects, those are better
suited by user-wide installs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id15"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p class="lead"&gt;I wrote a newer, more detailed post about virtualenvs: &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/"&gt;Python Virtual
Environments in Five Minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Virtual environments are the best way to install and manage Python packages.
Advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Isolation of projects and their requirements: if one app/package requires
library version X, but another requires version Y, they can live in separate
virtual environments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Independent from system-wide packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lightweight (an empty virtualenv is about 10 MB)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple to re-create in any place (&lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; → &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tools-and-management"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id16"&gt;Tools and management&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are two tools to facilitate creation of virtual environments: the older
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; project, and the newer
&lt;code class="docutils literal"&gt;venv&lt;/code&gt; module. The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is shipped with Python 3.x; some
distributions may put it in a separate package or remove it altogether. Use
whichever works for you.  Virtualenv is compatible with more Python versions
and cannot be broken by incompetent OS package maintainers (&lt;code class="docutils literal"&gt;venv&lt;/code&gt; requires
an extra package on Debian).&lt;/p&gt;
&lt;p&gt;There are multiple schools of thought regarding virtualenv placement and
content. Myself, I use &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to manage virtualenvs
and put them in &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;. Other people put virtualenvs inside their
git repositories (but they &lt;em&gt;must&lt;/em&gt; be in &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;) Virtualenvs should only contain packages
installed with &lt;code class="docutils literal"&gt;pip&lt;/code&gt; so they can be recreated quickly.&lt;/p&gt;
&lt;p&gt;I also use the &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; plugin for Oh My Zsh, which also
activates virtualenvs with the same name as a git repo, or the environment
named by a &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-and-usage"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id17"&gt;Installation and usage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install virtualenv user-wide, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;. You can
then use it with &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; virtualenv DIRECTORY&lt;/code&gt;. You may pass extra
options, eg. interpreter to use (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; python3&lt;/code&gt;). Sometimes you need to install
virtualenv for every Python version; usually, one copy is enough.&lt;/p&gt;
&lt;p&gt;How to use them? This is a subject of heated debate in the Python community.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Some people believe that activating (&lt;code class="docutils literal"&gt;source bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;Scripts\activate&lt;/code&gt; on Windows) is the right thing to do and simplifies work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others think that you should use &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; (or other scripts in that
directory) directly, as activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper
variables — those variables are not mandatory for operation, running
the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others still think &lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;virtualenvs should be used in subshells&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, if activating virtualenvs works in your environment, you should
do it — it’s the most convenient option. There are, however, cases when
activation fails, or is otherwise impossible — calling &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; directly
is your best bet in that case. If you are working inside shell scripts, do not
activate virtualenvs.  I’m not a fan of the subshell option, because it
complicates stuff if you work on multiple projects, and requires tracking usage
manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrading-and-moving"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Upgrading the system Python may make your virtualenvs unusable.
For patch version upgrades, you can just update symlinks (see &lt;a class="reference external" href="https://github.com/Kwpolska/scripts/blob/master/fix-venvs.sh"&gt;fix-venvs.sh&lt;/a&gt;).
However, if the minor version changes, it’s best to re-create the virtualenv
(you need to create &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; ahead of time).&lt;/p&gt;
&lt;p&gt;You cannot move a virtualenv between directories/machines or rename
virtualenvs. You need to use &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;, create a new
virtualenv, and run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; (you can then delete
the old environment with a simple &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packages-with-c-extensions-binary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The situation improved drastically in the past year or so. Nowadays, almost
all packages have a pre-compiled package available in PyPI. Those packages work
for Windows, macOS, and Linux. There are packages for some of the most
common &lt;em&gt;offenders&lt;/em&gt;, including Pillow, lxml, PyQt5, numpy… However, there might
still be packages without wheels on PyPI.&lt;/p&gt;
&lt;p&gt;If there is no wheel for a package and you are on Windows, check out &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph
Gohlke’s unofficial binaries&lt;/a&gt;.
If you can’t find any wheels online, you would have to resort to compiling it
manually — this requires installing Visual Studio (Visual C++) in a version
that matches your Python, and it’s kind of a pain to do.&lt;/p&gt;
&lt;p&gt;If you are not on Windows, you must install a C compiler and toolchain.
If you get a warning about missing &lt;code class="docutils literal"&gt;Python.h&lt;/code&gt;, install the appropriate development
package — for example, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-dev&lt;/span&gt;&lt;/code&gt;) on Debian/Ubuntu,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-devel&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-devel&lt;/span&gt;&lt;/code&gt; on RHEL/Fedora. The package you’re trying
to install might have other dependencies that you need to install (the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-dev(el)&lt;/span&gt;&lt;/code&gt; part is important, too)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id20"&gt;Other stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re working on a project, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-e&lt;/span&gt; .&lt;/code&gt; inside the project
directory to install the package in your environment in development (editable)
mode. This loads code directly from your repository — you don’t need to
re-install on every change; you might need to re-install when your version
number changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="editors-and-ides"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another important thing a developer should take care of is the choice of an
editor. This is an important decision, and is the reason for many holy wars in
the programmer community.&lt;/p&gt;
&lt;p&gt;A good editor should have syntax highlighting for all languages you need to
work with. It should also have features like visual block/multiple selections,
sophisticated find-and-replace, file finding, code completion, and many more minor
but helpful features.&lt;/p&gt;
&lt;p&gt;Then there’s the difference between IDEs and text editors. Text editors are
simpler, whereas IDEs try to include many extra things not necessarily related
to writing code. IDEs often use more resources, but you won’t notice it with a
modern computer (especially with a SSD).&lt;/p&gt;
&lt;p&gt;The best IDE out there is &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from
JetBrains. It has both a free Community and paid Professional edition. The
JetBrains folks are experts at IDEs — they have fully-fledged tools for many
languages. Their Python solution offers a plethora of options that aid
programmers in their work.  Also, if you work with Java, or otherwise more than
one IDEA-supported language, then install IntelliJ IDEA and the Python plugin
(which has the same features as PyCharm).  Students can get &lt;a class="reference external" href="https://www.jetbrains.com/student/"&gt;free
Professional/Ultimate licenses for JetBrains products&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also spend a lot of time in &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; (&lt;a class="reference external" href="https://neovim.io/"&gt;neovim&lt;/a&gt;/&lt;a class="reference external" href="http://vimr.org/"&gt;VimR&lt;/a&gt; to be precise). Vim is the
most powerful text editor out there, and with the right set of plugins it can
beat IDEs at speed and productivity. Vim has a steep learning curve, but it’s
worth it — you can do large changes with just a few keystrokes. Vim is
considered so good that many IDEs (Visual Studio, IntelliJ IDEA/PyCharm) have
Vim emulation plugins.&lt;/p&gt;
&lt;p&gt;Another option is &lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; — it’s
a text editor, but can offer many IDE-like features with the right set of
plugins. It’s Electron-based architecture, or effectively being based on top of
Google’s Chromium, is unfortunate and can lead to terrible performance on
lower-end machines, and on higher-end ones in some cases. (In my experience,
it’s better than Atom.) You can also try &lt;a class="reference external" href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; ($80).&lt;/p&gt;
&lt;p&gt;But really, almost any editor will do. But please &lt;strong&gt;avoid&lt;/strong&gt; IDLE, the editor
included with Python. It lacks some of the most basic things — it doesn’t even
have an option to show line numbers. Not to mention its ugliness. Also, don’t
use Notepad and TextEdit. Those are too simple, and Notepad has encoding
issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/#id22"&gt;Update history&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;2018-09-21&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Link to python-virtual-environments post.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-19&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Better description of problems caused by using sudo pip.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-10&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Added notes about not removing built-in Pythons.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-07&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Spelling fixes and updates to the virtualenv usage section.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2017/07/03/setting-up-a-python-development-environment/</guid><pubDate>Mon, 03 Jul 2017 10:40:00 GMT</pubDate></item><item><title>Revamping My Projects Page with Nikola</title><link>https://chriswarrick.com/pl/blog/2014/10/13/revamping-my-projects-page-with-nikola/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A week ago, I was inspired to produce a new &lt;a class="reference external" href="https://chriswarrick.com/projects/"&gt;projects page&lt;/a&gt; for
myself.  The previous one was a trainwreck with a lot of hacks.  Also hosted on
GitHub Pages for some reason.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;So, considering I’m so invested in &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; already,
I produced the &lt;a class="reference external" href="http://plugins.getnikola.com/#projectpages"&gt;projectpages plugin&lt;/a&gt;
and also made it publicly available.  The plugin produces two files,
&lt;code class="docutils literal"&gt;projects/index.html&lt;/code&gt; and &lt;code class="docutils literal"&gt;projects/projects.json&lt;/code&gt;, and also enforces a
specific framework for the stories used for the individual projects, because
all the metadata are taken from special meta fields.&lt;/p&gt;
&lt;p&gt;In Nikola, post metadata is completely arbitrary (in fact, that’s my fault; I
&lt;a class="reference external" href="https://github.com/getnikola/nikola/pull/304"&gt;contributed the feature&lt;/a&gt; back in February 2013).
You can put anything you want, and Nikola will let any plugin and template use the information in any way it likes.&lt;/p&gt;
&lt;p&gt;And that is basically the gist of the projectpages plugin.  Using some specific
&lt;a class="reference external" href="https://github.com/getnikola/plugins/tree/master/v7/projectpages#meta-fields"&gt;meta fields&lt;/a&gt;,
the plugin produces all the files.  It also provides ready-made templates for
the story pages (though the default templates are designed to fit my site
only).&lt;/p&gt;
&lt;p&gt;This plugin is basically a special index page generator.  It takes all the
stories in the designated projects directory, looks at the metadata, and
lists them in a nice format (slider of featured projects + a list of everything
else that is not hidden).  Everything automated and done for you, as is always
with Nikola — which values simplicity and ease of use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The result:&lt;/strong&gt; a pretty &lt;strong&gt;&lt;a href="https://chriswarrick.com/projects/"&gt;projects page&lt;/a&gt;&lt;/strong&gt;.  And some good OSS work done.&lt;/p&gt;&lt;p&gt;PS. I just underwent a move to &lt;a class="reference external" href="https://www.digitalocean.com/"&gt;DigitalOcean&lt;/a&gt;
and I love them.  Moreover, this blog is proudly &lt;em&gt;HTTPS only&lt;/em&gt; as of yesterday.&lt;/p&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2014/10/13/revamping-my-projects-page-with-nikola/</guid><pubDate>Mon, 13 Oct 2014 12:15:00 GMT</pubDate></item><item><title>Python Apps the Right Way: entry points and scripts</title><link>https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;There are multiple ways to write an app in Python.  However, not all of them
provide your users with the best experience.&lt;/p&gt;
&lt;p&gt;One of the problems some people encounter is &lt;em&gt;writing launch scripts&lt;/em&gt;.  The
best way to handle this is the &lt;em&gt;Entry Points&lt;/em&gt; mechanism of Setuptools, and a
&lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file.  It’s quite easy to implement.  If you’re interested,
read on to learn more!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="requirements-and-desired-results"&gt;
&lt;h2&gt;Requirements and Desired Results&lt;/h2&gt;
&lt;p&gt;You will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a Python project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a setup.py file using &lt;a class="reference external" href="https://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the following directory structure:&lt;/p&gt;
&lt;ul class="list-nobullets"&gt;
    &lt;li&gt;
    &lt;a href="https://chriswarrick.com/listings/entry_points_project/"&gt;&lt;i class="fa fa-folder-open"&gt;&lt;/i&gt;
    entry_points_project/&lt;/a&gt;
    &lt;/li&gt;&lt;li&gt;
        &lt;ul class="list-nobullets"&gt;
        &lt;li&gt;
        &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/"&gt;&lt;i class="fa fa-folder-open"&gt;&lt;/i&gt; my_project/&lt;/a&gt;
            &lt;/li&gt;&lt;li&gt;
            &lt;ul class="list-nobullets"&gt;
                &lt;li&gt;
                &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/__init__.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt;
                __init__.py&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt;
                __main__.py&lt;/a&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
        &lt;li&gt;
        &lt;a href="https://chriswarrick.com/listings/entry_points_project/setup.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt; setup.py&lt;/a&gt;
        &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code class="docutils literal"&gt;entry_points_project&lt;/code&gt; is also where the README and other auxiliary files
go, while &lt;code class="docutils literal"&gt;my_project&lt;/code&gt; contains all the Python code.)&lt;/p&gt;
&lt;p&gt;When you’re done, you will have a project that can be executed by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; my_project&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;my_project&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Provided that you have your Python directory and its &lt;code class="docutils literal"&gt;Scripts\&lt;/code&gt; subdirectory on
the %PATH%, this will &lt;strong&gt;also work in Windows&lt;/strong&gt;.&lt;/p&gt;
 &lt;div class="panel panel-info"&gt;
   &lt;div class="panel-heading"&gt;
     &lt;h4 class="panel-title"&gt;Looking for a project template?&lt;/h4&gt;
   &lt;/div&gt;
   &lt;div class="panel-body"&gt;
    If you want to create a well-structured project with release automation and
some other goodies, check out my &lt;a href="https://github.com/Kwpolska/python-project-template" style="font-weight: bold;"&gt;Python Project Template&lt;/a&gt;.
   &lt;/div&gt;
 &lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="step-1-create-a-main-py-file"&gt;
&lt;h2&gt;Step 1: create a &lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;In order to implement the first desired result, you need to create a
&lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file in your package.  This file needs to contain a &lt;code class="docutils literal"&gt;main()&lt;/code&gt;
function that takes no arguments, and also a special passage to determine code
to run:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py.html"&gt;entry_points_project/my_project/__main__.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-3"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-5"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""The main routine."""&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-8"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-9"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"This is the main routine."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-10"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"It should do something interesting."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-11"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Do argument parsing here (eg. with argparse) and anything else&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# you want your project to do. Return values are exit codes.&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-14"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-15"&gt;&lt;code data-line-number="15"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-15"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-16"&gt;&lt;code data-line-number="16"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-16"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-17"&gt;&lt;code data-line-number="17"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_58a1cbb4c3ff48f5aac1c8baa168d8c2-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;if __name__ == "__main__":&lt;/code&gt; idiom, as &lt;a class="reference external" href="https://docs.python.org/3/library/__main__.html"&gt;documented here&lt;/a&gt;, is used to check whether
this is executed as the top-level file, or if it has been imported by someone
else (in this case, executing the &lt;code class="docutils literal"&gt;main()&lt;/code&gt; function is not always intended).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;main()&lt;/code&gt; function must not take any arguments, because that’s how
&lt;code class="docutils literal"&gt;entry_points&lt;/code&gt; executes things.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-adjust-setup-py-accordingly"&gt;
&lt;h2&gt;Step 2: adjust &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; accordingly&lt;/h2&gt;
&lt;p&gt;This is the real deal: create the entry points in your &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/setup.py.html"&gt;entry_points_project/setup.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/setup.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"my_project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"my_project"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-8"&gt;&lt;/a&gt;        &lt;span class="s2"&gt;"console_scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-9"&gt;&lt;/a&gt;            &lt;span class="s2"&gt;"my_project = my_project.__main__:main"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-10"&gt;&lt;/a&gt;        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_be2f3549dad14662bf8762ad8013f915-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_be2f3549dad14662bf8762ad8013f915-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You must use setuptools, otherwise this won’t work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The most important piece of code is the &lt;code class="docutils literal"&gt;entry_points&lt;/code&gt; declaration
(unsurprisingly).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The declaration reads&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_109970e744b949f19add6d2551f1be99-1"&gt;&lt;/a&gt;"name_of_executable = module.with:function_to_execute"
&lt;/pre&gt;&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;p&gt;If you are developing a GUI application (in Tkinter, PyQt/PySide,
wxPython, PyGTK, PyGame…), you should change the declaration to
&lt;code class="docutils literal"&gt;gui_scripts&lt;/code&gt;.  On *nix, this makes no difference, but on Windows, it
means that running your script by opening the created &lt;code class="docutils literal"&gt;.exe&lt;/code&gt; files does
not show a console window. Note that stdout/stderr do not work in that mode
under Windows, which can lead to spurious application crashes.  (GUI-only
processes cannot use stdout/stderr because they don’t have a console
attached)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create &lt;strong&gt;multiple scripts&lt;/strong&gt; this way.  You can also have multiple
&lt;code class="docutils literal"&gt;console_scripts&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code class="docutils literal"&gt;gui_scripts&lt;/code&gt; in one setup file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="text-muted"&gt;All &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/"&gt;code samples&lt;/a&gt; are freely reusable, but if you mention where you got them from, it’d be really nice.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><guid>https://chriswarrick.com/pl/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/</guid><pubDate>Mon, 15 Sep 2014 16:00:00 GMT</pubDate></item><item><title>Speeker — moja mała aplikacja na Androida</title><link>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;a class="android-adventure-logo-robot reference external image-reference" href="https://chriswarrick.com/pl/blog/2014/08/01/series-android-adventure/"&gt;&lt;img alt="/blog-content/android-adventure/robot.png" src="https://chriswarrick.com/blog-content/android-adventure/robot.png"&gt;&lt;/a&gt;
&lt;p&gt;Skoro mam używalny telefon, mogę zająć się tworzeniem aplikacji na Androida.
Co uczyniłem.  Zacząłem od aplikacji do testowania i zabawy z usługami
text-to-speech systemu Android.  Nazwałem ją Speeker.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;img src="https://chriswarrick.com/blog-content/android-adventure/speeker.png" alt="Speeker logo"&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/pl/galleries/speeker/" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Zrzuty ekranu
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker/releases" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Pobieranie
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;Speeker jest małym i prostym frontendem dla systemowej usługi TTS.  W obecnej
iteracji jest dosyć ograniczony.  Kompletny zestaw funkcji to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;wypowiedz tekst wpisany przez użytkownika&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wypowiedz tekst w domyślnym języku TTS systemu (wybranym w ustawieniach
Androida, i nie ma obecnie przycisku otwierającego to menu)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wyczyść pole tekstowe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pokaż okno &lt;em&gt;O programie&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pokaż licencje open source&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;otwórz moją stronę internetową&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To SZEŚĆ funkcji! I nie można nawet ściągnąć go z Google Play, bo jestem zbyt
skąpy by zapłacić $25 opłaty startowej!&lt;/p&gt;
&lt;p&gt;Będę lub nie kontynuował rozwoju i być może dodam kilka funkcji.  W każdym
razie, moje doświadczenia z tworzeniem na Androida nie były dobre: nie ma
wystarczająco dużo dobrej dokumentacji, i musiałem często zgadywać w niektórych
miejscach, np. przy importach.  Dokumentacja mogłaby zostać znacznie
poprawiona.&lt;/p&gt;
&lt;p&gt;Innym problemem jest wybór IDE.  O ile można oczywiście pracować nad Androidem
w dowolnym środowisku, w tym tylko w Vimie i w terminalu, oficjalnym i
rekomendowanym środowiskiem jest Eclipse.  Który okazuje się być najgorszym IDE
które kiedykolwiek powstało.  Jest nieprzyjazny i nieporęczny — czyli
standardowe cechy dużych aplikacji Javovych.  Jednym razem Eclipse udało się
otworzyć plik w jakieś dziesięć sekund.  Bardzo imponujące, dopóki nie
zauważysz, że cokolwiek innego zrobiłoby to w mniej czasu.  Nie, nie zmyślam.
To jest problem z dużymi IDE: próbują zrobić za dużo naraz.&lt;/p&gt;
&lt;p&gt;Tworzenie na Androida nie było najlepszym doświadczeniem — ale da się, i nie
trzeba mieć za dużo doświadczenia z samą platformą by to robić.  Android ma
potencjał, ale musi być udoskonalony, by być przyjaznym dla developerów.&lt;/p&gt;&lt;/div&gt;</description><category>android</category><category>app</category><category>devel</category><category>programming</category><category>projects</category><guid>https://chriswarrick.com/pl/blog/2014/08/26/speeker/</guid><pubDate>Tue, 26 Aug 2014 13:00:00 GMT</pubDate></item></channel></rss>