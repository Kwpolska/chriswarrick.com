<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Programming)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/programming/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 12 Apr 2017 18:30:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Structuring and automating a Python project with the Python Project Template</title><link>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;To create a project that other people can use and contribute to, you need to
follow a specific directory structure. Moreover, releasing a new version should
be as simple and painless as possible. For my projects, I use a template that
has the structure already in place, and comes with automation for almost every
part of a release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project Template&lt;/a&gt; is my approach to this. It comes with a good (IMO) structure and automation.&lt;/p&gt;
&lt;p&gt;What does it include? A whole lot of things. Documentation, Sphinx
configuration, a simple test suite, a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file, some AUR stuff, and
perhaps the most important part — the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. It can automate a lot
of tasks that are part of a release.&lt;/p&gt;
&lt;p&gt;You see, releasing a package is error-prone. There are a lot of things that can go wrong:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Version numbers. They may appear in code comments, Sphinx configuration,
README files and documentation, and setup.py. Some people claim to have
“solutions” for this. Most of those solutions don’t work right — either they
import a file from the project (which may break if &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; is too
magical), read a file from that place (which might not get included
properly), or use some setuptools extension to get the version from VCS or
whatever (which needs to be installed before the package). Using &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; to
fix the version numbers is much simpler.&lt;/li&gt;
&lt;li&gt;Forgetting about changelogs.&lt;/li&gt;
&lt;li&gt;Not updating translations or other important files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve had quite a few botched releases in the &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; project. I wrote a
&lt;a class="reference external" href="http://getnikola.github.io/releng/checklist.html"&gt;checklist&lt;/a&gt; to prevent things like those. You may notice that the most
prominent step is to run a &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. This step replaced 21 others —
now the checklist only talks about writing announcements, sending e-mails,
updating the website, and doing some GitHub stuff that is not yet automated.&lt;/p&gt;
&lt;p&gt;The template promotes a &lt;em&gt;release early, release often&lt;/em&gt; workflow: since making a
new release requires almost no human intervention, you might as well do it
every time you make a bunch of changes. In my projects, &lt;em&gt;everything&lt;/em&gt; gets
automated, and it might as well be possible in yours.&lt;/p&gt;
&lt;div class="section" id="the-complete-feature-list-as-of-v2-1-5"&gt;
&lt;h2&gt;The complete feature list (as of v2.1.5)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pre-configured Sphinx with:&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;CONTRIBUTING.rst&lt;/tt&gt; guide (used by GitHub when sending a pull request or an issue)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;LICENSE.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;an empty &lt;tt class="docutils literal"&gt;CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;a bare-bones &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt; page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The exact same files in &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;, which are fragile and &lt;strong&gt;MAY NOT&lt;/strong&gt; be modified
as they are replaced with copies in &lt;tt class="docutils literal"&gt;/docs&lt;/tt&gt; by the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;template.py&lt;/tt&gt; files in the Python package directory&lt;/li&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file that could be good enough for people, and that supports
&lt;tt class="docutils literal"&gt;entry_points&lt;/tt&gt; (see &lt;a class="reference external" href="https://go.chriswarrick.com/entry_points"&gt;https://go.chriswarrick.com/entry_points&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests/&lt;/tt&gt; containing some &lt;em&gt;Is My Python Sane?&lt;/em&gt;-style tests (using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;An automated global update script (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.pypt/PYPT-UPDATE&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Entry points configuration ready to be uncommented (and a matching
&lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; file)&lt;/li&gt;
&lt;li&gt;Add-ons for Qt users (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/Qt&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;A sample hook for AUR updates (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/AUR&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;PKGBUILDs for the Arch Linux User Repository (AUR)&lt;/li&gt;
&lt;li&gt;A state-of-the-art &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script, the operations of which are:&lt;ul&gt;
&lt;li&gt;querying the user for version number, commit message and changes&lt;/li&gt;
&lt;li&gt;updating &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;bumping the version number in all the files, changing dates where necessary&lt;/li&gt;
&lt;li&gt;copying over &lt;tt class="docutils literal"&gt;/docs/README.rst&lt;/tt&gt;,  &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/docs/CONTRIBUTING.rst&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;locale generation (via the &lt;tt class="docutils literal"&gt;.pypt/localegen&lt;/tt&gt; script)&lt;/li&gt;
&lt;li&gt;running &lt;tt class="docutils literal"&gt;import $PROJECTLC&lt;/tt&gt; and the test suite&lt;/li&gt;
&lt;li&gt;uploading a source distribution and a wheel to PyPI&lt;/li&gt;
&lt;li&gt;Making a Git commit and tagging the release&lt;/li&gt;
&lt;li&gt;creating a GitHub Releases entry&lt;/li&gt;
&lt;li&gt;updating the AUR packages (by using hooks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;
&lt;a href="https://github.com/Kwpolska/python-project-template" class="btn btn-lg btn-info"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Check it out on GitHub&lt;/a&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>guide</category><category>Nikola</category><category>projects</category><category>PyPT</category><category>Python</category><guid>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</guid><pubDate>Sun, 09 Apr 2017 09:00:00 GMT</pubDate></item><item><title>CSV is not a standard</title><link>https://chriswarrick.com/blog/2017/04/07/csv-is-not-a-standard/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;CSV is not a standard. What does that really mean for anyone using that format?
The file’s recipient may be unable to read it the way you intended. Separators,
decimal marks, escaping and encodings are all problems — and Excel does them
all pretty badly.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;So first, some people might claim that &lt;a class="reference external" href="http://www.ietf.org/rfc/rfc4180.txt"&gt;RFC 4180&lt;/a&gt; is the CSV standard. Those
people also have not read the document they’re referring to. It states:&lt;/p&gt;
&lt;blockquote&gt;
This memo provides information for the Internet community.  It does
not specify an Internet standard of any kind.&lt;/blockquote&gt;
&lt;p&gt;The problem with this is the fact that a &lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt; file does not mean much. There
are a few problems. The first question is,&lt;/p&gt;
&lt;blockquote&gt;
What is the field separator? Is it a comma or a semicolon?&lt;/blockquote&gt;
&lt;p&gt;Hey, wait a minute, doesn’t the file format/extension stand for
&lt;em&gt;comma-separated values&lt;/em&gt;? Yes, it does. But that does not matter in the
slightest. You see, Microsoft Excel — which most people will use to read/write
their CSV files — makes this decision based on the user locale settings. If the
OS is set to a locale where the comma is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Decimal_mark#Hindu.E2.80.93Arabic_numeral_system"&gt;decimal mark&lt;/a&gt; (eg. most of
Europe), the list separator is set to &lt;tt class="docutils literal"&gt;;&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;,&lt;/tt&gt; — and Excel uses
that.&lt;/p&gt;
&lt;p&gt;Of course, there’s also the TSV data format — those are tab-separated values.
And some people might name their TSV files &lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To read files saved in a different locale, or with a different separator, Excel
users need to change the file extension to &lt;tt class="docutils literal"&gt;.txt&lt;/tt&gt;, or go to Data → Get
External Data → From Text &lt;a class="reference external" href="https://support.office.com/en-us/article/Text-Import-Wizard-c5b02af6-fda1-4440-899f-f78bafe41857"&gt;(documentation)&lt;/a&gt; and use the import wizard. You
can’t double-click on files.&lt;/p&gt;
&lt;p&gt;On a side note, Apple Numbers guesses the format — one of the few things it
gets right. LibreOffice always asks the user to pick import settings, but by
default it uses tab AND comma AND semicolon for CSV files, which brings its own
host of problems.&lt;/p&gt;
&lt;p&gt;Here’s a quick test:&lt;/p&gt;
&lt;blockquote&gt;
What does &lt;tt class="docutils literal"&gt;foo;bar,baz;quux&lt;/tt&gt; mean? What about &lt;tt class="docutils literal"&gt;foo,bar;baz,quux&lt;/tt&gt;?&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;LibreOffice assumes it’s (Chinese) UTF-16 text, but after telling it the real encoding, both
files contain &lt;strong&gt;4 columns&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Microsoft Excel says one of the files contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other contains &lt;strong&gt;2 columns&lt;/strong&gt;
(which is which depends on locale)&lt;/li&gt;
&lt;li&gt;Apple Numbers says the first file contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other
contains &lt;strong&gt;2 columns&lt;/strong&gt; if set to English, and both files contain &lt;strong&gt;3
columns&lt;/strong&gt; if set to Polish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But let’s get back to gotchas:&lt;/p&gt;
&lt;blockquote&gt;
What is the decimal mark? Is it a dot or a comma?&lt;/blockquote&gt;
&lt;p&gt;That’s a direct consequence of the previous question. However, one can’t simply
assume &lt;tt class="docutils literal"&gt;comma/dot&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;semicolon/comma&lt;/tt&gt;, because users might do crazy
stuff.&lt;/p&gt;
&lt;blockquote&gt;
What is used to escape rows containing the field separator? Quotes?
Backslashes?  What is used to escape the escape character?&lt;/blockquote&gt;
&lt;p&gt;Excel, for example, puts some things in &lt;tt class="docutils literal"&gt;"quotes"&lt;/tt&gt;. If a literal quote
character appears in the spreadsheet, it’s represented as &lt;tt class="docutils literal"&gt;""&lt;/tt&gt;, and
the entire cell is quoted as well. But there might be programs that use
backslashes for escapes, or even bad code that does not consider the need of
escaping like this, with tragic results.&lt;/p&gt;
&lt;p&gt;There’s still one more thing to cover: encodings. You see, even though the TSV
format effectively solves the issues I named before, both CSV and TSV suffer
from one problem:&lt;/p&gt;
&lt;blockquote&gt;
Which encoding to use when reading this file?&lt;/blockquote&gt;
&lt;p&gt;I already mentioned that LibreOffice believed my sample file was UTF-16,
containing Chinese text — in reality, this file was UTF-8 (or ASCII).&lt;/p&gt;
&lt;p&gt;What does Microsoft Excel do then? It looks like it follows &lt;em&gt;System locale for
non-Unicode programs&lt;/em&gt;. While there is an encoding option hidden in the Save
dialog, it does not seem to affect the output. So what does that mean? You
can’t expect a CSV file that contains characters outside of your system locale
— or outside of ASCII if you’re working with people around the world — to look
right. Unless you’re on &lt;a class="reference external" href="https://answers.microsoft.com/en-us/msoffice/forum/msoffice_install-mso_win10/announcing-october-feature-update-for-office-2016/927eea90-eea3-479a-a78a-45f7612460e1"&gt;Excel 2016&lt;/a&gt; and Office 365 — if you have the October
2016 update, you can read and write UTF-8 files. But if you’re using an older
version of Excel, or you’re using a non-Office 365 license, tough luck.&lt;/p&gt;
&lt;p&gt;So, to reiterate: CSV can mean a lot of things. And you can’t trust it to work
well most of the time, unless you’re dealing with people in one country, all
using the same locale settings and software. Which is pretty unlikely. TSV
can work around most of the problems, but encodings are still troublesome.&lt;/p&gt;&lt;/div&gt;</description><category>CSV</category><category>Excel</category><category>Microsoft</category><category>Microsoft Office</category><guid>https://chriswarrick.com/blog/2017/04/07/csv-is-not-a-standard/</guid><pubDate>Fri, 07 Apr 2017 18:00:00 GMT</pubDate></item><item><title>Code writing code: Python and Vim as development aids</title><link>https://chriswarrick.com/blog/2016/05/27/code-writing-code-python-and-vim/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I was working on some C# and Java code. And along the way, I used
Python and Vim to (re)write my code. A small Python script and a 6-keystroke
Vim macro did it faster and better than a human would.&lt;/p&gt;
&lt;p&gt;Every programmer should learn a good scripting language and use a programmable
editor like Vim. Why? Here are two examples, after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="episode-i-inotifypropertychanged-or-python-writing-c"&gt;
&lt;h2&gt;Episode I: &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt;, or Python writing C#&lt;/h2&gt;
&lt;p&gt;I was building a private C# weekend project (that turned into a weeklong
project) — and by the way, WPF and C# are quite pleasant (Windows Forms is a
trainwreck, though). One of the things I used in that project was a DataGrid
bound to a list of custom objects (a DataGrid is a table, basically). And in
order to use it, you need to use the &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt; interface &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms229614(v=vs.100).aspx"&gt;(MSDN)&lt;/a&gt;.
It involves doing something like this:&lt;/p&gt;
&lt;pre class="code csharp"&gt;&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// can also be a field&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;[JsonProperty]&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;NotifyPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_930799f9a07d4cbea3dcf87850fdea63-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s 12 lines of code (excluding &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt; which comes from the
Json.NET library) for that pattern. Oh: and I need to do that for &lt;strong&gt;every&lt;/strong&gt;
field/property of my class, because otherwise any changes to them would not be
reflected in the tables (and maybe one or two fields were &lt;em&gt;not&lt;/em&gt; in the table).&lt;/p&gt;
&lt;p&gt;Doing that by hand is really not feasible: you need to copy-paste this
large block 14 times and take care of 5 instances of the name (3 with
underscores, 2 without), 2 instances of the type, and the &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt;
attribute (which does not appear on all properties).&lt;/p&gt;
&lt;p&gt;So, I used one of those intelligent computer things to do it for me. I wrote a
really simple &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script and ran it. And I ended up with all 14 fields built
for me.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py.html"&gt;code-writing-code/write_properties.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;public &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-4"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            get {&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                return &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_;&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            set {&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                if (value != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_) {&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ = value;&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    NotifyPropertyChanged("&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;");&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                }&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[JsonProperty]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;        '&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-25"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'1 string name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'0 int another'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 12 fields omitted for brevity&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Private definitions (internal)&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"        private &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ { get; set; }"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-35"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Public definitions (with notifications)&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-37"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_e41a20a72a254913b7af63592e6dea06-38"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That script takes a list of properties and spits out a block of code, ready to
be pasted into the code. Visual Studio has a nice &lt;em&gt;Insert File as Text&lt;/em&gt;
feature, so redirecting the output to a file and using that option is enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="episode-ii-fixing-argument-order-or-vim-re-writing-java"&gt;
&lt;h2&gt;Episode II: Fixing argument order, or Vim (re)writing Java&lt;/h2&gt;
&lt;p&gt;Another project, &lt;a class="reference external" href="https://github.com/Kwpolska/numbernamer"&gt;Number Namer&lt;/a&gt;, written in Java, and it does what it says on
the tin: takes a number and writes it out as words, while being multilingual and
extensible. I used Eclipse for this project, because it looks good, is really
helpful with its code linting, and does not run slowly on my aging system (I’m
looking at you, IntelliJ IDEA aka PyCharm aka Android Studio…)&lt;/p&gt;
&lt;p&gt;And so, I was building a test suite, using &lt;a class="reference external" href="http://junit.org/"&gt;JUnit&lt;/a&gt;. It’s pretty
straightforward, and I remember the syntax from Python’s unittest (even though
I write tests with &lt;a class="reference external" href="http://pytest.org/"&gt;pytest&lt;/a&gt; nowadays). Or so I thought.&lt;/p&gt;
&lt;pre class="code java"&gt;&lt;a name="rest_code_2d0f7c793f8747d8a300d8508932af04-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (incorrect)&lt;/span&gt;
&lt;a name="rest_code_2d0f7c793f8747d8a300d8508932af04-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;a name="rest_code_2d0f7c793f8747d8a300d8508932af04-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (fixed)                              ^ cursor&lt;/span&gt;
&lt;a name="rest_code_2d0f7c793f8747d8a300d8508932af04-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You see, the typical Python spelling is &lt;tt class="docutils literal"&gt;self.assertEquals(actual,
expected)&lt;/tt&gt;. Java adds a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt; message parameter and it also swaps
&lt;tt class="docutils literal"&gt;actual&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;expected&lt;/tt&gt;. Which I didn’t notice at first, and I wrote my
assertions incorrectly. While it doesn’t &lt;em&gt;really&lt;/em&gt; matter (it will still work),
the output looked a bit weird.&lt;/p&gt;
&lt;p&gt;And I noticed only when I finished writing my tests (and I had a typo in my
expected output). I wanted to fix them all — not manually, of course. So, I
closed this file, brought up Vim, searched for the motion I need (it’s
&lt;tt class="docutils literal"&gt;t{char}&lt;/tt&gt; — see &lt;tt class="docutils literal"&gt;:help t&lt;/tt&gt;). And I ended up with this
(cursor placed on the comma after the first argument):&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;kbd style="font-size: 2em;"&gt;dt,&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;t)&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;p&lt;/kbd&gt;
&lt;/div&gt;&lt;p&gt;What does this do, you may ask? It’s actually pretty self-explanatory:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;d&lt;/b&gt;elete &lt;b&gt;t&lt;/b&gt;ill comma, (go) &lt;b&gt;t&lt;/b&gt;ill closing parenthesis, &lt;b&gt;p&lt;/b&gt;aste.
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This fixes one line. Automatically. Make it a macro (wrap in &lt;tt class="docutils literal"&gt;qq&lt;/tt&gt; … &lt;tt class="docutils literal"&gt;q&lt;/tt&gt;,
use with &lt;tt class="docutils literal"&gt;@q&lt;/tt&gt;) and now you can run it on all lines, either by moving manually or by
searching for &lt;tt class="docutils literal"&gt;,&lt;/tt&gt; and pressing &lt;tt class="docutils literal"&gt;n@q&lt;/tt&gt; until you run out of lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Some of you might say “but VS/Eclipse/IDEA has an option for that somewhere” or
“[expensive tool] can do that” — and a Google search shows that there is an
Eclipse plugin to swap arguments and that I could also write a regex to solve
my second issue. Nevertheless, Python is a great tool in a programmer’s toolbox
— especially the interactive interpreter. And Vim is an awesome editor that can
accomplish magic in a few keystrokes — and there are many more things you can
do with it.&lt;/p&gt;
&lt;p class="lead"&gt;Go learn &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;Also: don’t even bother with VsVim or IdeaVim or any other Vim emulation
plugins, they work in unusual ways and often don’t give you everything — for
example, VsVim has a Vim visual mode (&lt;tt class="docutils literal"&gt;v&lt;/tt&gt; key) and Visual Studio selection
mode (mouse), and only one allows Vim keystrokes (the other will replace
selected text).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>C#</category><category>Java</category><category>programming</category><category>Python</category><category>Vim</category><guid>https://chriswarrick.com/blog/2016/05/27/code-writing-code-python-and-vim/</guid><pubDate>Fri, 27 May 2016 08:46:35 GMT</pubDate></item></channel></rss>