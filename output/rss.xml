<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Blog)</title><link>https://chriswarrick.com/</link><description>A rarely updated blog, mostly about programming.</description><atom:link href="https://chriswarrick.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 24 Apr 2020 13:07:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>When HTML is not enough: a tale of the &lt;datalist&gt; element</title><link>https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;HTML 5.0 was finalized in 2014 (and its drafts were published even earlier), and with it came the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; element.  It’s
2020, and even though it might look like a good replacement for custom
autocomplete widgets, browser issues made me get rid of it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I’ve built a web app to help me track my expenses. The app is written in Django,
and &lt;a class="reference external" href="https://github.com/Kwpolska/django-expenses"&gt;it’s open source&lt;/a&gt;. One of
the goals was to have a simple codebase with limited external JS dependencies,
as well as basic usability with JS disabled. This is partially to facilitate
learning of standard DOM manipulation routines and TypeScript.&lt;/p&gt;
&lt;p&gt;The JS/TS bits are called the &lt;em&gt;Scripting Enhancements&lt;/em&gt; to reflect their nature.
The biggest items are an interactive bill editor (a table with add/edit/remove
operations, that submits its data as a regular HTML POST &lt;code class="docutils literal"&gt;&amp;lt;form&amp;gt;&lt;/code&gt;) and an
autocomplete framework (used by the bill editor in an advanced way, and by
other screens in the app with a more basic featureset). The autocomplete
framework is exactly what you’d expect: point it at an input field and a URL,
and keypresses lead to the URL being queried for previous values for this
field, which are displayed as possible values to the user to save typing.&lt;/p&gt;
&lt;div class="section" id="autocomplete-with-html-5-the-datalist-tag"&gt;
&lt;h2&gt;Autocomplete with HTML 5: the &amp;lt;datalist&amp;gt; tag&lt;/h2&gt;
&lt;p&gt;But how to display the options to the user? Most people would display a
&lt;code class="docutils literal"&gt;position: absolute&lt;/code&gt; box with links/buttons, throw in some more logic around
the focus and blur events, and call it a day. There are tons of ready-made
solutions that do all that for you, although most of them are terrible. But!
HTML 5 introduced a &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag. And it looks like everything you could
need. You link a &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag to an &lt;code class="docutils literal"&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and it shows matching
options in an autocomplete-style box.  In fact, here’s a simple demo, in case
your browser supports it:&lt;/p&gt;
&lt;div class="card mb-3 text-center"&gt;
    &lt;div class="card-body"&gt;
        &lt;label for="dldemo" class="ml-1 mr-1"&gt;Favorite programming language:&lt;/label&gt;
        &lt;input class="form-control d-inline-block ml-1 mr-1" style="width: auto" placeholder="Start typing…" list="dldemolist" id="dldemo"&gt;
        &lt;datalist id="dldemolist"&gt;
            &lt;option value="Swift"&gt;
            &lt;/option&gt;&lt;option value="Rust"&gt;
            &lt;/option&gt;&lt;option value="Ruby"&gt;
            &lt;/option&gt;&lt;option value="Python"&gt;
            &lt;/option&gt;&lt;option value="PHP"&gt;
            &lt;/option&gt;&lt;option value="Kotlin"&gt;
            &lt;/option&gt;&lt;option value="JavaScript"&gt;
            &lt;/option&gt;&lt;option value="Java"&gt;
            &lt;/option&gt;&lt;option value="Go"&gt;
            &lt;/option&gt;&lt;option value="C++"&gt;
            &lt;/option&gt;&lt;option value="C#"&gt;C Sharp&lt;/option&gt;
            &lt;option value="C"&gt;
        &lt;/option&gt;&lt;/datalist&gt;
    &lt;/div&gt;
    &lt;div class="card-footer"&gt;&lt;a href="https://chriswarrick.com/listings/datalist/datalist-demo.html.html"&gt;View demo source&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, here are a few takeaways from that demo:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Options are displayed in the same order as in the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag in the
source, this list was sorted reverse-alphabetically in the source, and
that’s how it appears in the source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The list is filtered case-insensitively based on user-input substrings. In
Chrome, Firefox and Safari, the substring can appear at any point in the
string.  But in Edge (old Microsoft engine), it looks only at the beginning
of the string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some browsers show an arrow on the field to show the entries, sometimes
double-clicking opens the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entry for C# is as follows: &lt;code class="docutils literal"&gt;&amp;lt;option &lt;span class="pre"&gt;value="C#"&amp;gt;C&lt;/span&gt; &lt;span class="pre"&gt;Sharp&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;/code&gt;.
Chrome displays it on as &lt;span class="raw-html"&gt;“&lt;strong&gt;C#&lt;/strong&gt; &lt;small&gt;C
Sharp&lt;/small&gt;”&lt;/span&gt; (on two lines), Safari shows only “C#”, Firefox and Edge
show “C Sharp”. Selecting the option always inputs C#.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mobile Safari does not expand the list by default, but displays some of the
options above the keyboard (as typing predictions). You can click on the
arrow to display all the options in a &lt;a class="reference external" href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers/"&gt;scrolling picker&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chrome on Android displays it the same way as on desktop (drop-down list).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This demo uses static, hardcoded data. Doing that for the Expenses app would
be terrible for performance — that would waste bandwidth, force the browser to
parse a fairly long list, and it could easily overload the browser when it
tries to expand the list. But wiring it up to a &lt;code class="docutils literal"&gt;fetch()&lt;/code&gt; call to a REST API
should not be hard, and browsers work correctly when the datalist changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-emoji-hack"&gt;
&lt;h2&gt;An emoji hack&lt;/h2&gt;
&lt;p&gt;One of the features I needed was to make the auto-complete fill out more than
one field at once. Well, &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; has no specific support for that. It only
supports showing a list and putting the value in the input box it’s connected
to. But choosing something from the list fires the usual &lt;code class="docutils literal"&gt;input&lt;/code&gt; event. I
opted to do this: show every entry with a sparkles emoji (✨) in front, with the
two other fields also inside this string, delimited by other emoji, and then
catch the &lt;code class="docutils literal"&gt;input&lt;/code&gt; event.  If the field beigns with ✨, then use a regex to go
from one emoji-delimited string to three, and place the correct strings in
three input boxes (while also removing the sparkles from the first field).&lt;/p&gt;
&lt;p&gt;Yes, it’s a hack. But it’s pretty okay appearance-wise, and it does work. It
wouldn’t have worked so well in Edge, but I didn’t even know about this
behavior before writing this blog post, and the initial sparkles emoji could be
dropped and I could still make it work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="works-on-mobile-yes-except"&gt;
&lt;h2&gt;Works on mobile? Yes, except…&lt;/h2&gt;
&lt;p&gt;I went on and deployed the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;-based autocomplete to my site. It
looked good, worked fine. To use the thing on mobile, I’ve got a special
launcher app. Its main reason for existence? I want a home screen icon, but
Chrome only allows progressive web apps to do that (and that’s busywork I don’t
feel like doing), and back then, Firefox (which has no such restrictions) did
not support &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; on Android.  The app is fairly simple, with a
standard WebView widget and a slide-out navigation drawer, and a few other nice
things, and it’s 120 SLOC of Kotlin.&lt;/p&gt;
&lt;p&gt;But then, I bought a new phone, and with it, upgraded from Android 7 to 9. And
I hit a bug in Chrome, which is still not fixed. The bug?
&lt;a class="reference external" href="https://bugs.chromium.org/p/chromium/issues/detail?id=949555"&gt;HTML datalist doesn’t work on Android 8 or higher in WebView&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh. We’ve got a bit of a problem. Firefox still didn’t seem to support
&lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. But there’s one more way to make an app show a webpage: Custom
Tabs. This is a feature you’ve probably seen around Android, and it’s somewhere
in between. The app gets minimum control over the appearance of the toolbar,
but the “real” web browser is responsible for rendering the page. Chrome in a
Custom Tab supports &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. So I built a small app to do what I wanted.&lt;/p&gt;
&lt;p&gt;There was just one minor thing to fix. My default browser on mobile is &lt;a class="reference external" href="https://support.mozilla.org/en-US/kb/focus"&gt;Firefox
Focus&lt;/a&gt;. The main features of
Focus are tracking protection, content blocking, and storing zero
history and cookies (permanent incognito mode with one-click clearing). This is
perfect for clicking random links, especially since I hate Chrome’s insistence
on showing webpages you visited 5 years ago once when autocompleting URLs.
(Chrome is my secondary browser on mobile; on desktop, I almost always have an
incognito window open.)&lt;/p&gt;
&lt;p&gt;Why is Focus relevant to this story? One, it (still) does not support the tag.
Two, the default browser is also the provider of the Custom Tabs. Which is
great for my web-browsing habits, but won’t solve the problem.  Fortunately,
it’s just a one-line change to send the intent directly to Chrome. The entire
thing is less than 30 lines long. You can see the full &lt;a class="reference external" href="https://chriswarrick.com/listings/android-chrome-custom-tabs/CustomTabsActivity.java.html"&gt;CustomTabsActivity.java&lt;/a&gt; file, but the relevant bits are below.&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_2de2e5bb4d174bfc8bde665628d2a481-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2de2e5bb4d174bfc8bde665628d2a481-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_2de2e5bb4d174bfc8bde665628d2a481-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2de2e5bb4d174bfc8bde665628d2a481-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Optionally, configure appearance and buttons on toolbar.&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_2de2e5bb4d174bfc8bde665628d2a481-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2de2e5bb4d174bfc8bde665628d2a481-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_2de2e5bb4d174bfc8bde665628d2a481-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2de2e5bb4d174bfc8bde665628d2a481-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Force browser to Chrome instead of system default.&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_2de2e5bb4d174bfc8bde665628d2a481-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2de2e5bb4d174bfc8bde665628d2a481-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.android.chrome"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_2de2e5bb4d174bfc8bde665628d2a481-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2de2e5bb4d174bfc8bde665628d2a481-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://chriswarrick.com/"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;It seems to work well, the list is displayed, and it can be used to input
stuff, the emoji hack works too.&lt;/p&gt;
&lt;p&gt;There was one more bug with Chrome on Android. Typing a character sometimes led to
it appearing twice: I typed &lt;em&gt;A&lt;/em&gt;, the hints appeared, then the text box started
showing &lt;em&gt;AA&lt;/em&gt;, and my hints disappeared. I can’t reproduce it right now, but
that also made the entire flow just annoying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aftermath"&gt;
&lt;h2&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;With all the browser bugs, support issues, and various glitches, I decided to
build an autocomplete widget of my own. I took the CSS from Bootstrap 4, and
used Popper.js to do the positioning. It looks and works better, has keyboard
support, and is definitely less hacky (the emoji is still there, because they
look good, but my entries know the original object they were made from and can
just tell the handler to use that instead of using regex). And it beats many of
the autocomplete widgets out there, because they often fail when you hold the
mouse a bit longer; also, it can reposition itself to the top if there’s more
space. All that in just 198 SLOC of TypeScript. (I also discovered a bug in my
code that made it work a bit worse, fixing it for the old implementation would
still not fix the other issues.)&lt;/p&gt;
&lt;p&gt;What’s the moral of the story? Even though HTML 5 has been a standard for many
years, browser support for the new tags still seems to be an issue. And
sometimes, it’s better to just put in the extra work and build a good UI on
your own, instead of trusting the browser to do it right.&lt;/p&gt;
&lt;p&gt;The same applies to other “new” HTML 5 form elements.  &lt;code class="docutils literal"&gt;&amp;lt;input &lt;span class="pre"&gt;type="date"&amp;gt;&lt;/span&gt;&lt;/code&gt;
is not supported in desktop Safari, and is fairly ugly in desktop Firefox and
Chrome.  It displays the standard OS picker on mobile, which gets you a
calendar on Android, but a &lt;a class="reference external" href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers/"&gt;scrolling picker&lt;/a&gt; on iOS.
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;datetime-local&lt;/span&gt;&lt;/code&gt; is currently Chrome-only.  &lt;code class="docutils literal"&gt;month&lt;/code&gt; lets you click on a day
and end up with an entire month selected in Chrome.  A custom component with
JavaScript would be far more consistent and often easier to use.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>HTML</category><category>HTML5</category><category>JavaScript</category><category>TypeScript</category><category>web development</category><guid>https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/</guid><pubDate>Sun, 09 Feb 2020 15:30:00 GMT</pubDate></item><item><title>Modern Web Development: where you need 500 packages to build Bootstrap</title><link>https://chriswarrick.com/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;This humble blog is written by an old-school developer who sometimes does web stuff. An attempt to customize the Bootstrap CSS theme requires 50 MB of node_modules, over 500 packages, and comes with a bit of frustration at stupid tools and terrible documentation.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;You might notice that this website is based on Bootstrap. You might also notice it’s been heavily customized, especially if you’re browsing in the (currently default) Dark Mode. Back in Bootstrap v3 days, the task was accomplished by &lt;a class="reference external" href="https://getbootstrap.com/docs/3.4/customize/"&gt;a simple online tool&lt;/a&gt; that required no local installs. Bootstrap 4 changed the landscape: now you need to manually compile Sass. Moreover, Autoprefixer is required to make the CSS usable by web browsers.&lt;/p&gt;
&lt;p&gt;Now, when it comes to web development, I believe the old ways were better. Back when nobody thought to make a client-side-JS-based blog or pastebin, and only apps that needed interactivity were JS-first. Gmail is a good example of that, although they &lt;em&gt;still&lt;/em&gt; offer a &lt;a class="reference external" href="https://support.google.com/mail/answer/15049?hl=en"&gt;basic HTML view&lt;/a&gt; and it works good — in fact, I suppose it might be less buggy than the JS-ladden version. (A lot of single-page apps like to randomly glitch out in my experience.)&lt;/p&gt;
&lt;p&gt;I still remember the days when all that one had to do is &lt;code class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; yuicompressor.jar style.css &amp;gt; style.min.css&lt;/code&gt;. Then Less and Sass became more popular — and that’s good. The ability to use variables and functions makes it possible to produce well-organized stylesheets. The idea of Autoprefixer is also fine, humans should not waste their time with browser-specific prefixes for experimental features, that can be neatly automated.&lt;/p&gt;
&lt;p&gt;But to use all these fancy tools, glue code is necessary. Autoprefixer is (mainly server-side) JS-only, Sass is currently Node or Dart, minifier tools are available in many languages.&lt;/p&gt;
&lt;div class="section" id="attempt-0-no-js-stuff-no-node-modules"&gt;
&lt;h2&gt;Attempt 0: no JS stuff, no node_modules&lt;/h2&gt;
&lt;p&gt;I installed a Sass compiler. There are web services like cssminifier.com that can be easily used with curl in a Bash script. Autoprefixer has a webpage that lets you use the service without installing it as well. The catch is, the code runs locally in your web browser. Automating a web browser requires some effort. I decided to leave this part un-automated. Here is the Bash script I hacked together (with some messages removed):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &amp;gt; bootstrap.noprefix.css
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &amp;gt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Go to https://autoprefixer.github.io/."&lt;/span&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-6"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap.noprefix.css
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"(light) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-8"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-9"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap.css
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-11"&gt;&lt;/a&gt;sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-13"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-14"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"( dark) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-15"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-16"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap-dark.css
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-18"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap.min.css
&lt;a name="rest_code_9c93f788f26647218cf34251cf1fa60f-19"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap-dark.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap-dark.min.css
&lt;/pre&gt;&lt;p&gt;The “manual copy” solution was inconvenient, but it worked.&lt;/p&gt;
&lt;p&gt;Well, most of the time Some lags/glitches with the clipboard meant that sometimes, files had the incorrect content. So, I wanted to fix it, and build it in a more modern, JS-y way. The way Bootstrap does it is a lot of shell commands (that run various Node tools). I don’t feel like building this pipeline with Bash, it would feel fragile. Let’s do it the JS way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-1-webpack"&gt;
&lt;h2&gt;Attempt 1: webpack&lt;/h2&gt;
&lt;p&gt;I’ve used webpack for &lt;a class="reference external" href="https://github.com/Kwpolska/django-expenses/blob/master/ts/webpack.config.js"&gt;another project of mine&lt;/a&gt;. It was okay, and it did the job (namely, compiling TypeScript into browser-usable JS).&lt;/p&gt;
&lt;p&gt;I wanted to give it a try for this one. I googled “webpack sass”. The first result was &lt;a class="reference external" href="https://github.com/webpack-contrib/sass-loader"&gt;sass-loader&lt;/a&gt;. The pipeline for it was:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_08ec0608e47149dfabe1f498a3ba9b61-1"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"style-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// creates style nodes from JS strings&lt;/span&gt;
&lt;a name="rest_code_08ec0608e47149dfabe1f498a3ba9b61-2"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"css-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// translates CSS into CommonJS&lt;/span&gt;
&lt;a name="rest_code_08ec0608e47149dfabe1f498a3ba9b61-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"sass-loader"&lt;/span&gt; &lt;span class="c1"&gt;// compiles Sass to CSS, using Node Sass by default&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s recap. Someone thought that the right way to do CSS is to use JS imports.&lt;/p&gt;
&lt;p&gt;Yes. &lt;code class="docutils literal"&gt;import &lt;span class="pre"&gt;"./style.css";&lt;/span&gt;&lt;/code&gt; in a JS file. So that your fancy build tool knows about CSS.&lt;/p&gt;
&lt;p&gt;Webpack wasn’t the right tool for my project, but even if I had JS code there, &lt;strong&gt;WHY WOULD I MENTION STYLESHEETS IN MY JS CODE?!&lt;/strong&gt; Webpack’s website also lists .jpg and .png assets, are they meant to be imported in JS as well? This is absurd.&lt;/p&gt;
&lt;p&gt;Going back to googling “webpack sass”… The next two results were Medium posts. The stupidity of Medium as a blog platform notwithstanding, one of the posts was from 2017, referring to webpack 2. The next post was a year older, a completely unreadable mess, and it was for webpack 4. That’s not helpful in any way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-gulp"&gt;
&lt;h2&gt;Attempt 2: Gulp&lt;/h2&gt;
&lt;p&gt;Let’s try something else from the JS world: Gulp. Now, the tool is not terrible, but it still requires a lot of dependencies.&lt;/p&gt;
&lt;p&gt;The pipeline that was required for this task sounds very simple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bootstrap-kw{,-dark}.sass → Sass compiler → Autoprefixer → bootstrap{,-dark}.css → minify → bootstrap{,-dark}.min.css&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Gulp version is fairly simple: (I based it on examples on Gulp’s website, and pages of all my dependencies).&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minifyCSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-csso'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp-rename"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-7"&gt;&lt;/a&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'node-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*.scss'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-13"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;()]))&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-14"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-kw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-17"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minifyCSS&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-19"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-20"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;".min"&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-21"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-22"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_249cd47942124b4f8566f0be05f1be0e-25"&gt;&lt;/a&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="a-node-modules-extravaganza"&gt;
&lt;h2&gt;A node_modules extravaganza&lt;/h2&gt;
&lt;p&gt;Can you see all the &lt;code class="docutils literal"&gt;require&lt;/code&gt; lines at the top? Every one of them is a dependency of my build script. With the exception of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;gulp-rename&lt;/span&gt;&lt;/code&gt;, which IMO should be a built-in part of Gulp (it’s 45 lines of code and no external dependencies), the list is sensible.&lt;/p&gt;
&lt;p&gt;Well, I already mentioned the size of &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;: 51 MiB according to &lt;code class="docutils literal"&gt;du&lt;/code&gt; (size-on-disk measurement). How many packages are there?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="545"&gt;
&lt;li&gt;&lt;p&gt;Five hundred and forty-five packages.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoa, when did that happen? Most of it comes from gulp/gulp-cli (384 packages), with node-sass taking the second place (177 packages). Some of those are shared between libraries, and a few more belong to the other requirements. And many of these dependencies are a disgrace to programming.&lt;/p&gt;
&lt;p&gt;After a full install of my &lt;code class="docutils literal"&gt;package.json&lt;/code&gt;, npm says &lt;code class="docutils literal"&gt;added 545 packages from 331 contributors and audited 10500 packages in 22.458s&lt;/code&gt;.  I’ve implicitly agreed to licenses imposed by 331 random people. All to build some simple CSS files out of SASS.&lt;/p&gt;
&lt;p&gt;Let’s go on a tour of &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; and see what we ended up with.&lt;/p&gt;
&lt;div class="section" id="polyfills-reimplementations-oh-my"&gt;
&lt;h3&gt;Polyfills, reimplementations, oh my!&lt;/h3&gt;
&lt;p&gt;Everything I’ve installed is meant to be used on top of Node.js. Node runs on top of the V8 engine, coming from Chrome. They’ve had almost-full ES2015 (ES6) support since April 2016. And yet, my node_modules is full of small polyfills.&lt;/p&gt;
&lt;p&gt;Let’s pick a random one and work back from it: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cf53ff89bdbb44519db1ab162830f063-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Copyright © Sindre Sorhus, MIT license&lt;/span&gt;
&lt;a name="rest_code_cf53ff89bdbb44519db1ab162830f063-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cf53ff89bdbb44519db1ab162830f063-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cf53ff89bdbb44519db1ab162830f063-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s a one-liner that re-implements &lt;code class="docutils literal"&gt;Number.isNaN&lt;/code&gt; if it’s not available, which is, according to MDN, &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"&gt;a more robust version of the original, global
isNaN()&lt;/a&gt;. The original function coerced everything to Number before testing, which apparently wasn’t enough. That’s what you get for using a language designed in a week. The function was added to all sane browsers and Node around 2013, the polyfill was created in 2015.&lt;/p&gt;
&lt;p&gt;It was pulled in by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-fullwidth-code-point&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-finite&lt;/span&gt;&lt;/code&gt;, both by the same author. The latter one is especially interesting: it’s at version 1.0.2. Version 1.0.1improved the codebase from &lt;code class="docutils literal"&gt;if (x) { return false; } return true&lt;/code&gt; (via pull request), and version 1.0.2 replaced a manual &lt;code class="docutils literal"&gt;val !== val&lt;/code&gt; comparison with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt; has 7.5 million weekly downloads, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-finite&lt;/span&gt;&lt;/code&gt; has 6.7M. The build of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt; &lt;a class="reference external" href="https://travis-ci.org/sindresorhus/number-is-nan/builds/363709421"&gt;is currently failing.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fifty-shades-of-terminal"&gt;
&lt;h3&gt;Fifty shades of terminal&lt;/h3&gt;
&lt;p&gt;Every Node-based CLI tool wants to be cool. And for that, they need colors.&lt;/p&gt;
&lt;p&gt;How does this work in Bash? You could use &lt;code class="docutils literal"&gt;tput setaf XX&lt;/code&gt;, but many people would just manually &lt;code class="docutils literal"&gt;echo '\033[XXm'&lt;/code&gt;, the codes are available &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit"&gt;in Wikipedia&lt;/a&gt; or elsewhere.&lt;/p&gt;
&lt;p&gt;How does this work in Python? There are a few libraries for this (and you can always do it manually), but the most popular one is &lt;a class="reference external" href="https://pypi.org/project/colorama/"&gt;colorama&lt;/a&gt;. That library can even handle Windows.&lt;/p&gt;
&lt;p&gt;What is available in Node?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;color-support&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;supports-color&lt;/span&gt;&lt;/code&gt; are both part of my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There seems to be a fairly advanced &lt;code class="docutils literal"&gt;chalk&lt;/code&gt; library, by the aforementioned Sindre Sorhus.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-colors&lt;/span&gt;&lt;/code&gt; seems to be another, smaller option for it, it claims to be 10-20x faster than &lt;code class="docutils literal"&gt;chalk&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s a package called &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;has-ansi&lt;/span&gt;&lt;/code&gt; which checks if a string has ANSI escapes in it. It depends on &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;strip-ansi&lt;/span&gt;&lt;/code&gt; also uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/code&gt;. All three packages are basically one liners. One exports a regex, the other two do replacement/search with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/code&gt; intelligently wraps a string with ANSI escapes in it.  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt; takes three strings and  returns &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;'\u001b['+&lt;/span&gt; a + 'm' + msg + '\u001b[' + b + 'm'&lt;/code&gt; (Copyright © Jon Schlinkert, MIT license)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s also &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/code&gt;, which calls &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt; with a = 90, b = 39, and a user-specified message. (Copyright © Jon Schlinkert, MIT license)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-red&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-cyan&lt;/span&gt;&lt;/code&gt; are very similar libraries to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/code&gt;. Is this a joke?!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are definitely other &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-$color&lt;/span&gt;&lt;/code&gt; libraries, although they are not in my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;. And probably other libraries for color support, but either they are not installed, or I haven’t managed to spot them in my &lt;code class="docutils literal"&gt;npm list&lt;/code&gt; output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="copyrighted-one-liners"&gt;
&lt;h3&gt;Copyrighted one-liners&lt;/h3&gt;
&lt;p&gt;Another famous library by Jon Schlinkert is called &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt;. Here is the complete code, verbatim:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-even &amp;lt;https://github.com/jonschlinkert/is-even&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015, 2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-odd'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-13"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_93c12936a46542b992f54a4afb2ce1cf-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; is slightly longer:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-odd &amp;lt;https://github.com/jonschlinkert/is-odd&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015-2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-10"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-13"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-14"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected a number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-16"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-17"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected an integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-20"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isSafeInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'value exceeds maximum safe integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-22"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-23"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d53b5c9e7d1d413ca7eeaf0a3e6311be-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-number&lt;/span&gt;&lt;/code&gt; is another fun library; it says &lt;code class="docutils literal"&gt;true&lt;/code&gt; for strings of numbers, and &lt;code class="docutils literal"&gt;false&lt;/code&gt; for NaN (&lt;code class="docutils literal"&gt;typeof NaN === 'number'&lt;/code&gt;). &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; is used by, for example, &lt;code class="docutils literal"&gt;even&lt;/code&gt;, which calls &lt;code class="docutils literal"&gt;Array.filter&lt;/code&gt; with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; as the argument. There’s also &lt;code class="docutils literal"&gt;odd&lt;/code&gt;, and for some reason, the two packages are separate.&lt;/p&gt;
&lt;p&gt;The checks found in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; make some more sense if you’re working with a dynamically-typed language where every number is a float (like JS). But you could release &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;check-odd&lt;/span&gt;&lt;/code&gt;, which is 100x faster than &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; (it assumes its input is correct), and exports &lt;code class="docutils literal"&gt;function checkOdd(value) { return (value % 2) !== 0; }&lt;/code&gt; &lt;s&gt;(Copyright © 2019, Chris Warrick. Licensed under the 4-clause BSD license.)&lt;/s&gt; &lt;i&gt;(No, not really.)&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-product-includes-software-developed-by"&gt;
&lt;h3&gt;This product includes software developed by…&lt;/h3&gt;
&lt;p&gt;Hold on a second, 4-clause BSD? That license contains the following clause:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_ea7a2f34c6ab470b88e8597ebac469f6-1"&gt;&lt;/a&gt;Redistribution and use in source and binary forms, with or without
&lt;a name="rest_code_ea7a2f34c6ab470b88e8597ebac469f6-2"&gt;&lt;/a&gt;modification, are permitted provided that the following conditions are met:
&lt;a name="rest_code_ea7a2f34c6ab470b88e8597ebac469f6-3"&gt;&lt;/a&gt;3. All advertising materials mentioning features or use of this software
&lt;a name="rest_code_ea7a2f34c6ab470b88e8597ebac469f6-4"&gt;&lt;/a&gt;   must display the following acknowledgement:
&lt;a name="rest_code_ea7a2f34c6ab470b88e8597ebac469f6-5"&gt;&lt;/a&gt;     This product includes software developed by the University of
&lt;a name="rest_code_ea7a2f34c6ab470b88e8597ebac469f6-6"&gt;&lt;/a&gt;     California, Berkeley and its contributors.
&lt;/pre&gt;&lt;p&gt;This clause was removed by UC Berkeley in 1999, but there is still old code that has clauses (with other names), and someone could create something with the old license. I actually found one such clause in my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; (from &lt;code class="docutils literal"&gt;bcrypt_pbkdf&lt;/code&gt;). &lt;a class="reference external" href="https://www.gnu.org/licenses/bsd.html"&gt;NetBSD had 75 different clauses&lt;/a&gt; in 1997. It would be fun to see figures for the Node ecosystem… or more packages with equally problematic clauses.&lt;/p&gt;
&lt;p&gt;Most people aren’t aware of the licenses of their node dependencies. Going back to Colorama, I can quickly verify that Colorama has no dependencies, and itself uses the 3-clause BSD license. (That version of the license lacks the advertising clause and is considered GPL-compatible.) There is a helpful &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;license-checker&lt;/span&gt;&lt;/code&gt; package that can tell you what licenses you have (based on the details provided in &lt;code class="docutils literal"&gt;package.json&lt;/code&gt;)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-1"&gt;&lt;/a&gt;├─ MIT: 380
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-2"&gt;&lt;/a&gt;├─ ISC: 64
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-3"&gt;&lt;/a&gt;├─ Apache-2.0: 10
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-4"&gt;&lt;/a&gt;├─ BSD-3-Clause: 10
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-5"&gt;&lt;/a&gt;├─ BSD-2-Clause: 3
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-6"&gt;&lt;/a&gt;├─ CC-BY-3.0: 2
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-7"&gt;&lt;/a&gt;├─ BSD-3-Clause OR MIT: 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-8"&gt;&lt;/a&gt;├─ MIT*: 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-9"&gt;&lt;/a&gt;├─ (MIT OR Apache-2.0): 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-10"&gt;&lt;/a&gt;├─ CC-BY-4.0: 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-11"&gt;&lt;/a&gt;├─ AFLv2.1,BSD: 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-12"&gt;&lt;/a&gt;├─ MPL-2.0: 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-13"&gt;&lt;/a&gt;├─ (BSD-2-Clause OR MIT OR Apache-2.0): 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-14"&gt;&lt;/a&gt;├─ CC0-1.0: 1
&lt;a name="rest_code_979d921bf0de42f4aafabb3b6fbd758e-15"&gt;&lt;/a&gt;└─ Unlicense: 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-back-to-bash"&gt;
&lt;h2&gt;Attempt 2: back to Bash&lt;/h2&gt;
&lt;p&gt;I decided to get rid of Gulp, it’s not necessary for this pipeline. I replaced
it with Bash and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;postcss-cli&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node-sass&lt;/span&gt;&lt;/code&gt; was replaced by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;dart-sass&lt;/span&gt;&lt;/code&gt;
(a two-file binary distribution), and &lt;code class="docutils literal"&gt;csso&lt;/code&gt; was replaced by &lt;code class="docutils literal"&gt;cssnano&lt;/code&gt; (it
works with postcss). Here is the resulting Bash file:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8683d0ec64c24aaabe5cb274a6fc308b-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap.css
&lt;a name="rest_code_8683d0ec64c24aaabe5cb274a6fc308b-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap-dark.css
&lt;a name="rest_code_8683d0ec64c24aaabe5cb274a6fc308b-3"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap.min.css assets/css/bootstrap.css
&lt;a name="rest_code_8683d0ec64c24aaabe5cb274a6fc308b-4"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap-dark.min.css assets/css/bootstrap-dark.css
&lt;/pre&gt;&lt;p&gt;The simplified dependency list cost me 37 MiB of disk space, and I’ve got 438
packages from 232 contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-3-node-clis-are-unnecessary"&gt;
&lt;h2&gt;Attempt 3: node CLIs are unnecessary&lt;/h2&gt;
&lt;p&gt;Let’s try something else: replace &lt;code class="docutils literal"&gt;npx postcss&lt;/code&gt; with a custom tool.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fs'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get-stdin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cssnano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cssnano'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-8"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-10"&gt;&lt;/a&gt;&lt;span class="nx"&gt;getStdin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-11"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-12"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-14"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;cssnano&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result2&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.min.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_e86d7ee3207142a598054d77f7a61648-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The bash script now pipes &lt;code class="docutils literal"&gt;sass&lt;/code&gt; output to &lt;code class="docutils literal"&gt;node run_postcss.js &lt;span class="pre"&gt;bootstrap(-dark)&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Doing this… cost me a new dependency. Its name is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/code&gt;. We’ve already met its author, Sindre Sorhus. While the library has its deficiencies &lt;a class="reference external" href="https://github.com/sindresorhus/get-stdin/issues/21"&gt;(namely, it doesn’t support reading from TTY)&lt;/a&gt;, it’s good enough. I could do it manually or use some other tricks, but since &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/code&gt; does not pull in any other dependencies, I’m going to accept it. After cleaning up &lt;code class="docutils literal"&gt;packages.json&lt;/code&gt;, we end up with:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_d4d1eb148c3049b3964185f193e902f9-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install
&lt;a name="rest_code_d4d1eb148c3049b3964185f193e902f9-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;added 144 packages from 119 contributors and audited 637 packages in 8.127s&lt;/span&gt;
&lt;a name="rest_code_d4d1eb148c3049b3964185f193e902f9-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;found 0 vulnerabilities&lt;/span&gt;
&lt;a name="rest_code_d4d1eb148c3049b3964185f193e902f9-4"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; du -hs node_modules
&lt;a name="rest_code_d4d1eb148c3049b3964185f193e902f9-5"&gt;&lt;/a&gt;&lt;span class="go"&gt; 21M    node_modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The task at hand was very simple. So was the JS code (Gulp and custom) I had to write to implement it. But underneath, there was a mess of unknown, unaudited code, duplicated libraries, and libraries created effectively to bump people’s npm download stats. There were already incidents, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;left-pad&lt;/span&gt;&lt;/code&gt; (the removal of which broke Babel), or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;event-stream&lt;/span&gt;&lt;/code&gt; (which was taken over and modified to steal cryptocurrencies). The modern web development ecosystem is a huge mess of dependencies and one-line packages. Some of them are necessary due to the lackluster JS standard library — but some are just useless. And some of these micro-packages would be better off as larger libraries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sure, the package count went down from the original 545 to 144. But the original point still stands: too much useless stuff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS. Five of the packages (in the “large” set) had a &lt;code class="docutils literal"&gt;.DS_Store&lt;/code&gt; file left over. I’m wondering if there are any other files that shouldn’t be shipped with packages, lurking in &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; directories all over the world…&lt;/p&gt;
&lt;p&gt;PPS. I’ve replaced Disqus with Isso, because it had too many advertisements. If you experience any issues with the comment system (after force-refreshing), e-mail me.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>JavaScript</category><category>rant</category><category>web development</category><category>webmastering</category><guid>https://chriswarrick.com/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</guid><pubDate>Fri, 15 Feb 2019 18:00:00 GMT</pubDate></item><item><title>Python Hackery: merging signatures of two Python functions</title><link>https://chriswarrick.com/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Today’s blog post is going to contain fairly advanced Python hackery. We’ll
take two functions — one is a wrapper for the other, but also adds some
positional arguments.  And we’ll change the signature displayed everywhere from
the uninformative &lt;code class="docutils literal"&gt;f(new_arg, *args, **kwargs)&lt;/code&gt; to something more
appropriate.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This blog post was inspired by F4D3C0D3 on #python (freenode IRC). I also took
some inspiration from
Gynvael Coldwind’s classic &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;Python 101&lt;/a&gt; (April Fools) video. (Audio and some comments are in Polish, but even if you don’t speak the language, it’s still worth it to click through the time bar and see some (fairly unusual) magic happen.)&lt;/p&gt;
&lt;div class="section" id="starting-point"&gt;
&lt;h2&gt;Starting point&lt;/h2&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-2"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""This is old's docstring."""&lt;/span&gt;
&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_612ad27c72f3453f8225b87c5a384627-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s test it.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;a b&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;!a b&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-5"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' - '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;ab - !ab&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-7"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-8"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function old in module __main__:&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-10"&gt;&lt;/a&gt;&lt;span class="go"&gt;old(foo, bar)&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-11"&gt;&lt;/a&gt;&lt;span class="go"&gt;    This is old's docstring.&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-13"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-14"&gt;&lt;/a&gt;&lt;span class="go"&gt;Help on function new in module __main__:&lt;/span&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_8af82fe8b0cc4a329f78a315348ae440-16"&gt;&lt;/a&gt;&lt;span class="go"&gt;new(prefix, foo, *args, **kwargs)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The last line is not exactly informative — it doesn’t tell us that we need to
pass &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as an argument.  Sure, you could define &lt;code class="docutils literal"&gt;new&lt;/code&gt; as just &lt;code class="docutils literal"&gt;(prefix, foo,
bar)&lt;/code&gt; — but that means every change to &lt;code class="docutils literal"&gt;old&lt;/code&gt; requires editing &lt;code class="docutils literal"&gt;new&lt;/code&gt; as
well. So, not ideal. Let’s try to fix this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-existing-infrastructure-functools-wraps"&gt;
&lt;h2&gt;The existing infrastructure: functools.wraps&lt;/h2&gt;
&lt;p&gt;First, let’s start with the basic facility Python already has.  The standard
library already comes with &lt;code class="docutils literal"&gt;functools.wraps&lt;/code&gt; and
&lt;code class="docutils literal"&gt;functools.update_wrapper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you’ve never heard of those two functions, here’s a crash course:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-2"&gt;&lt;/a&gt;    &lt;span class="nd"&gt;@functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-4"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Inside wrapper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-8"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-9"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-10"&gt;&lt;/a&gt;    &lt;span class="sd"&gt;"""Square a number."""&lt;/span&gt;
&lt;a name="rest_code_82529aa7abf04ca499a7ecfca4618162-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we try to inspect the &lt;code class="docutils literal"&gt;square&lt;/code&gt; function, we’ll see the original name, arguments,
annotations, and the docstring.  If we ran this code again, but with the
&lt;code class="docutils literal"&gt;@functools.wraps(f)&lt;/code&gt; line commented out, we would only see &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrapper(*args,&lt;/span&gt;
**kwargs)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This approach gives us a hint of what we need to do.  However, if we apply
&lt;code class="docutils literal"&gt;wraps&lt;/code&gt; (or &lt;code class="docutils literal"&gt;update_wrapper&lt;/code&gt;, which is what &lt;code class="docutils literal"&gt;wraps&lt;/code&gt; ends up calling)
to our function, it will only have &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and &lt;code class="docutils literal"&gt;bar&lt;/code&gt; as arguments, and its
name will be displayed as &lt;code class="docutils literal"&gt;old&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, let’s take a look at &lt;a class="reference external" href="https://github.com/python/cpython/blob/4fe8dc68577f9e22aaf24db08fb6647277c42d4c/Lib/functools.py#L27-L79"&gt;functools.update_wrapper&lt;/a&gt;. What does it do? Two things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;copy some attributes from the old function to the new one
(&lt;code class="docutils literal"&gt;__module__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__name__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__qualname__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__doc__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;update &lt;code class="docutils literal"&gt;__dict__&lt;/code&gt; of the new function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;wrapper.__wrapped__&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we try to experiment with it — by changing the list of things to copy, for
example — we’ll find out that the annotations, the docstring, and the displayed name come from
the copied attributes, but the signature itself is apparently taken from &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Further investigation reveals this fact about &lt;code class="docutils literal"&gt;inspect.signature&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;inspect.signature(callable, *, follow_wrapped=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;New in version 3.5:&lt;/em&gt; &lt;code class="docutils literal"&gt;follow_wrapped&lt;/code&gt; parameter. Pass &lt;code class="docutils literal"&gt;False&lt;/code&gt; to get a signature of callable specifically (&lt;code class="docutils literal"&gt;callable.__wrapped__&lt;/code&gt; will not be used to unwrap decorated callables.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And so, this is our &lt;strong&gt;end goal:&lt;/strong&gt;&lt;/p&gt;
&lt;p class="lead"&gt;Craft a function with a specific signature (that merges &lt;code class="docutils literal"&gt;old&lt;/code&gt; and &lt;code class="docutils literal"&gt;new&lt;/code&gt;) and set it as &lt;code class="docutils literal"&gt;new.__wrapped__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But first, we need to talk about parallel universes.&lt;/p&gt;
&lt;p&gt;Or actually, code objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-a-function-programmatically"&gt;
&lt;h2&gt;Defining a function programmatically&lt;/h2&gt;
&lt;p&gt;Let’s try an experiment.&lt;/p&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_8fe3174d4dee4297b464e6a1ad7defcc-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_8fe3174d4dee4297b464e6a1ad7defcc-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__wrapped__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_8fe3174d4dee4297b464e6a1ad7defcc-3"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8fe3174d4dee4297b464e6a1ad7defcc-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;foo(x, y)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So, there are two ways to do this.  The first one would be to generate a string
with the signature and just use &lt;code class="docutils literal"&gt;eval&lt;/code&gt; to get a &lt;code class="docutils literal"&gt;__wrapped__&lt;/code&gt; function. But
that would be cheating, and honestly, quite boring. (The inspect module could
help us with preparing the string.)  The second one? Create code objects
manually.&lt;/p&gt;
&lt;div class="section" id="code-objects"&gt;
&lt;h3&gt;Code objects&lt;/h3&gt;
&lt;p&gt;To create a function, we’ll need the &lt;code class="docutils literal"&gt;types&lt;/code&gt; module. &lt;code class="docutils literal"&gt;types.FunctionType&lt;/code&gt;
gives us a function, but it asks us for a code object. As the &lt;a class="reference external" href="https://docs.python.org/3/reference/datamodel.html"&gt;docs&lt;/a&gt; state,
&lt;em&gt;Code objects represent byte-compiled executable Python code, or bytecode.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To create one by
hand, we’ll need &lt;code class="docutils literal"&gt;types.CodeType&lt;/code&gt;. Well, not exactly by hand — we’ll end up doing a three-way merge between
&lt;code class="docutils literal"&gt;source&lt;/code&gt; (&lt;code class="docutils literal"&gt;old&lt;/code&gt;), &lt;code class="docutils literal"&gt;dest&lt;/code&gt; (&lt;code class="docutils literal"&gt;new&lt;/code&gt;) and &lt;code class="docutils literal"&gt;def &lt;span class="pre"&gt;_blank():&lt;/span&gt; pass&lt;/code&gt; (a function
that does nothing).&lt;/p&gt;
&lt;p&gt;Let’s look at the docstring for &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1f49dfb0b3cf4741b21503178d2202fb-1"&gt;&lt;/a&gt;code(argcount, kwonlyargcount, nlocals, stacksize, flags, codestring,
&lt;a name="rest_code_1f49dfb0b3cf4741b21503178d2202fb-2"&gt;&lt;/a&gt;    constants, names, varnames, filename, name, firstlineno,
&lt;a name="rest_code_1f49dfb0b3cf4741b21503178d2202fb-3"&gt;&lt;/a&gt;    lnotab[, freevars[, cellvars]])
&lt;a name="rest_code_1f49dfb0b3cf4741b21503178d2202fb-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f49dfb0b3cf4741b21503178d2202fb-5"&gt;&lt;/a&gt;Create a code object.  Not for the faint of heart.
&lt;/pre&gt;&lt;p&gt;All of the arguments end up being fields of a code objects (name starts with
&lt;code class="docutils literal"&gt;co_&lt;/code&gt;).  For each
function &lt;code class="docutils literal"&gt;f&lt;/code&gt;, its code object is &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt;. You can find the filename in
&lt;code class="docutils literal"&gt;f.__code__.co_filename&lt;/code&gt;, for example. The meaning of all fields can be
found in docs for the &lt;a class="reference external" href="https://docs.python.org/3/library/inspect.html#types-and-members"&gt;inspect module&lt;/a&gt;. We’ll be
interested in the following three fields:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;argcount&lt;/code&gt; — number of arguments (not including keyword only arguments, * or ** args)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;kwonlyargcount&lt;/code&gt; — number of keyword only arguments (not including ** arg)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;varnames&lt;/code&gt; — tuple of names of arguments and local variables&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all the other fields, we’ll copy them from the appropriate function (one of
the three).  We don’t expect anyone to call the wrapped function directly; as
long as &lt;code class="docutils literal"&gt;help&lt;/code&gt; and &lt;code class="docutils literal"&gt;inspect&lt;/code&gt; members don’t crash when they look into it,
we’re fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="everything-you-need-to-know-about-function-arguments"&gt;
&lt;h3&gt;Everything you need to know about function arguments&lt;/h3&gt;
&lt;pre class="code pycon"&gt;&lt;a name="rest_code_4c4e262fb5c24152b6af796996e979b8-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_4c4e262fb5c24152b6af796996e979b8-2"&gt;&lt;/a&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getfullargspec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4c4e262fb5c24152b6af796996e979b8-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;FullArgSpec(args=['a', 'b', 'c'], varargs=None, varkw=None, defaults=(1, 2), kwonlyargs=['d'], kwonlydefaults={'d': 3}, annotations={})&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;A function signature has the following syntax:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Any positional (non-optional) arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable positional arguments (&lt;code class="docutils literal"&gt;*x&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varargs&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arguments with defaults (keyword-maybe arguments); their value is stored in &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt; left-to-right&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keyword-only arguments (after an asterisk); their values are stored in a dictionary.  Cannot be used if &lt;code class="docutils literal"&gt;varargs&lt;/code&gt; are defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Variable keyword arguments (&lt;code class="docutils literal"&gt;**y&lt;/code&gt;, name stored in &lt;code class="docutils literal"&gt;varkw&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’re going to make one assumption: we aren’t going to support a &lt;code class="docutils literal"&gt;source&lt;/code&gt;
function that uses variable arguments of any kind.  So, our final signature
will be composed like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; positional arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-maybe arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;dest&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;source&lt;/code&gt; keyword-only arguments&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That will be saved into &lt;code class="docutils literal"&gt;co_names&lt;/code&gt;.  The first two arguments are counts —
the first one is &lt;code class="docutils literal"&gt;len(1+2+3+4)&lt;/code&gt; and the other is &lt;code class="docutils literal"&gt;len(5+6)&lt;/code&gt;. The remaining
arguments to &lt;code class="docutils literal"&gt;CodeType&lt;/code&gt; will be either safe minimal defaults, or things taken from
one of the three functions.&lt;/p&gt;
&lt;p&gt;We’ll also need to do one more thing: we must ensure &lt;code class="docutils literal"&gt;__defaults__&lt;/code&gt;,
&lt;code class="docutils literal"&gt;__kwdefaults__&lt;/code&gt;, and &lt;code class="docutils literal"&gt;__annotations__&lt;/code&gt; are all in the right places.
That’s also a fairly simple thing to do (it requires more tuple/dict merging).
And with that, we’re done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-results"&gt;
&lt;h2&gt;Final results&lt;/h2&gt;
&lt;p&gt;Before I show you the code, let’s test it out:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_2bba8ae5baaa486583544a3e3d194cd4-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# old defined as before&lt;/span&gt;
&lt;a name="rest_code_2bba8ae5baaa486583544a3e3d194cd4-2"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@merge_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_2bba8ae5baaa486583544a3e3d194cd4-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_2bba8ae5baaa486583544a3e3d194cd4-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And the end result — &lt;code class="docutils literal"&gt;help(new)&lt;/code&gt; says:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_9e024c4b09904e4c8918d045d045b252-1"&gt;&lt;/a&gt;new(prefix, foo, bar)
&lt;a name="rest_code_9e024c4b09904e4c8918d045d045b252-2"&gt;&lt;/a&gt;    This is old's docstring.
&lt;/pre&gt;&lt;p&gt;We did it!&lt;/p&gt;
&lt;p class="lead"&gt;The code is available on &lt;a class="reference external" href="https://github.com/Kwpolska/merge_args"&gt;GitHub&lt;/a&gt; and on &lt;a class="reference external" href="https://pypi.org/project/merge-args/"&gt;PyPI&lt;/a&gt; (&lt;code class="docutils literal"&gt;pip install merge_args&lt;/code&gt;).
There’s also an extensive test suite.&lt;/p&gt;
&lt;p&gt;PS. you might be interested in another related post of mine, in which I
reverse-engineer the compilation of a function: &lt;a class="reference external" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/"&gt;Gynvael’s Mission 11 (en): Python bytecode reverse-engineering&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>hacking</category><category>Python</category><category>Python hackery</category><category>Python internals</category><guid>https://chriswarrick.com/blog/2018/09/20/python-hackery-merging-signatures-of-two-python-functions/</guid><pubDate>Thu, 20 Sep 2018 13:52:20 GMT</pubDate></item><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;There are two main tools used to create virtual environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt; has
been the de facto standard tool for many years. It can be used with both
Python 2 and 3, including very old versions of Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; (aka pyvenv) was added to the
standard library in Python 3.3, and with the addition of &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt; in 3.4,
it’s an even easier way to get a virtual environment created.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;virtualenv can be installed with your system package manager, or &lt;code class="docutils literal"&gt;pip
install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;venv comes built-in with Python 3, although
Debian/Ubuntu users will need to run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/code&gt; to
make it work. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id5" id="id1"&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Which one to use? It’s up to you. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;code class="docutils literal"&gt;env&lt;/code&gt;, use (depending on your tool of
choice):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2c3ad72d41fc477baff4c9ee6e4641d5-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1965b42691604cb89e9c36fcce012a9b-1"&gt;&lt;/a&gt;$ python3 -m venv env
&lt;/pre&gt;&lt;p&gt;Afterwards, you will end up with a folder named &lt;code class="docutils literal"&gt;env&lt;/code&gt; that contains folders
named &lt;code class="docutils literal"&gt;bin&lt;/code&gt; (&lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; on Windows — contains executables, including
&lt;code class="docutils literal"&gt;python&lt;/code&gt;), &lt;code class="docutils literal"&gt;lib&lt;/code&gt; (contains code), and &lt;code class="docutils literal"&gt;include&lt;/code&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;setuptools&lt;/code&gt;, but &lt;code class="docutils literal"&gt;venv&lt;/code&gt; does not ship with
&lt;code class="docutils literal"&gt;wheel&lt;/code&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick (first command is Unix, second is Windows): &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id6" id="id2"&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_68f2df2b2f3f473cba6b8fa1a7f2e68c-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a name="rest_code_68f2df2b2f3f473cba6b8fa1a7f2e68c-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;div class="section" id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Have one global place for them, like &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store them in each project’s directory, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option comes with tools that make it easier, such as
&lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/"&gt;virtualenvwrapper&lt;/a&gt;.
The second option is equally easy to work with, but comes with one caveat —
you must add the venv directory to your &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; file, since you don’t
want it in your repository (it’s binary bloat, and works only on your machine).&lt;/p&gt;
&lt;p&gt;And if you don’t want to install virtualenvwrapper but want to put virtualenvs
in one global place, all you need is a short function in your shell
configuration file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_131eab7c5de44574ad3455c8ea41b836-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_131eab7c5de44574ad3455c8ea41b836-1"&gt;&lt;/a&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/virtualenvs&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_131eab7c5de44574ad3455c8ea41b836-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_131eab7c5de44574ad3455c8ea41b836-2"&gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_131eab7c5de44574ad3455c8ea41b836-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_131eab7c5de44574ad3455c8ea41b836-3"&gt;&lt;/a&gt; &lt;span class="k"&gt;function&lt;/span&gt; workon &lt;span class="o"&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_131eab7c5de44574ad3455c8ea41b836-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_131eab7c5de44574ad3455c8ea41b836-4"&gt;&lt;/a&gt;     &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate"&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_131eab7c5de44574ad3455c8ea41b836-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_131eab7c5de44574ad3455c8ea41b836-5"&gt;&lt;/a&gt; &lt;span class="o"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;activation (run &lt;code class="docutils literal"&gt;source env/bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;env\Scripts\activate&lt;/code&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;executing &lt;code class="docutils literal"&gt;env/bin/python&lt;/code&gt; (&lt;code class="docutils literal"&gt;env\Scripts\python&lt;/code&gt;) and other scripts directly, as
activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is, and that
method is failsafe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a name="rest_code_d09020a27b6c4ef19b1c0ff78db3b7d2-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;/pre&gt;&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt;, calling it as
&lt;code class="docutils literal"&gt;./manage.py&lt;/code&gt; requires activation, or you can run
&lt;code class="docutils literal"&gt;venv/bin/python manage.py&lt;/code&gt;.)&lt;/p&gt;
&lt;div class="section" id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option is deprecated and generally fails to
solve the problem.) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id7" id="id3"&gt;3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5dc10e0f39324be1a282e1393cc68d87-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a name="rest_code_5dc10e0f39324be1a282e1393cc68d87-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a name="rest_code_5dc10e0f39324be1a282e1393cc68d87-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a name="rest_code_5dc10e0f39324be1a282e1393cc68d87-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id8" id="id4"&gt;4&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;div class="section" id="do-i-need-to-install-the-virtualenv-tool-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;Do I need to install the virtualenv tool for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;code class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/code&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;code class="docutils literal"&gt;sudo pip&lt;/code&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The thing you’re actually installing is &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; if you want to upgrade the package manager itself.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><category>venv</category><category>virtual environments</category><category>virtualenv</category><guid>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item><item><title>Pipenv: promises a lot, delivers very little</title><link>https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Pipenv is a Python packaging tool that does one thing reasonably well — application dependency management. However, it is also plagued by issues, limitations and a break-neck development process. In the past, Pipenv’s promotional material was highly misleading as to its purpose and backers.&lt;/p&gt;
&lt;p&gt;In this post, I will explore the problems with Pipenv. Was it really
recommended by Python.org? Can everyone — or at least, the vast majority
of people — benefit from it?&lt;/p&gt;
&lt;p&gt;(This post has been updated in February 2020 to reflect the current state of
Pipenv.)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="contents alert alert-primary topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#a-2020-update" id="id14"&gt;A 2020 update&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#officially-recommended-tool-or-how-we-got-here" id="id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-does" id="id16"&gt;What pipenv does&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#application-dependencies" id="id17"&gt;Application dependencies&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly" id="id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#finishing-it-all-up" id="id19"&gt;Finishing it all up&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#what-pipenv-doesnt-do" id="id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#setup-py-source-distributions-and-wheels" id="id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#working-outside-of-the-project-root" id="id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#nikola" id="id23"&gt;Nikola&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-part-where-i-try-to-measure-times" id="id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#alternative-tools" id="id25"&gt;Alternative tools&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-tools-locking-and-hashing-and-that-is-all" id="id26"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#poetry-better-but-still-not-convincing" id="id27"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#pip-is-here-to-stay" id="id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv" id="id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#conclusion" id="id30"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-2020-update"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id14"&gt;A 2020 update&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This blog post was written in 2018, and it’s still pretty accurate when it
comes to the criticisms of Pipenv, but something else happened since then.&lt;/p&gt;
&lt;p class="lead"&gt;As of 2020, Pipenv is dead.&lt;/p&gt;
&lt;p&gt;The last release of Pipenv was in November 2018. No new releases were made in
2019. There were about 683 new commits made to Pipenv since then, but this is
fairly slow progress considering this project’s status and previous
release cadence. The developers claimed &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/4058#issuecomment-565550646"&gt;a new release is in the works&lt;/a&gt; in
mid December, but not much has happened in almost 2 months since that post.
All in all, Pipenv is effectively not maintained anymore. Yes, one of the
chapters in this post is &lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#the-break-neck-pace-of-pipenv"&gt;The break-neck pace of Pipenv&lt;/a&gt;, and that is a
problem. But zero updates in over a year to a packaging tool is also worrying.
Pip has updates every few months in a fairly stable pace (with the exception of
emergency bugfixe releases), and Pip has years of development behind it, unlike
the fairly new pipenv.&lt;/p&gt;
&lt;p&gt;In February 2020, the &lt;em&gt;Alternative tools&lt;/em&gt; section was updated to remove
mentions of Hatch, and pip-tools was added. Poetry information was updated:
it’s kinda slow, and the documentation is lacking.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="officially-recommended-tool-or-how-we-got-here"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id15"&gt;“Officially recommended tool”, or how we got here&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pipenv’s README used to have a version of the above line in their README for
many months: it was added on  &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6e06fc451767a57e6fccb828c74a1412f6cef687"&gt;2017-08-31&lt;/a&gt; and eventually disappeared on &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/47debed9a1c2a3649bef4d59a3f1cf01bf059522"&gt;2018-05-19&lt;/a&gt;. For a short while (2018-05-16), it was clarified (&lt;em&gt;managing application dependencies&lt;/em&gt;, and &lt;em&gt;PyPA&lt;/em&gt; instead of &lt;em&gt;Python.org&lt;/em&gt;), and for about 15 minutes, the tagline called Pipenv &lt;em&gt;the world’s worst&lt;/em&gt; or &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/6d77e4a0551528d5d72d81e8a15da4722ad82f26"&gt;something&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/1c956d37e6ad20babdb5021610b2ed2c9c4203f2"&gt;along&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/e3c72e167d21b921bd3bd89d4217b04628919bb2"&gt;these&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/commit/fe78628903948013e8687d1a3be9fd4da2b6bd3d"&gt;lines&lt;/a&gt; (this coming from the maintainer).&lt;/p&gt;
&lt;p&gt;The README tagline claimed that Pipenv is the be-all, end-all of Python
packaging. The problem is: it isn’t that. There are some use cases that benefit
from Pipenv, but for many others, trying to use that tool will only lead to
frustration. We will explore this issue later.&lt;/p&gt;
&lt;p&gt;Another issue with this tagline was the &lt;em&gt;Python.org&lt;/em&gt; and &lt;em&gt;official&lt;/em&gt; parts. The
thing that made it “official” was a &lt;a class="reference external" href="https://packaging.python.org/tutorials/managing-dependencies/"&gt;short tutorial&lt;/a&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id10" id="id1"&gt;1&lt;/a&gt; on packaging.python.org,
which is the PyPA’s packaging user guide. Also of note is the &lt;em&gt;Python.org&lt;/em&gt;
domain used. It makes it sound as if Pipenv was endorsed by the Python core
team. PyPA (Python Packaging Authority) is a separate organization — they are
responsible for the packaging parts (including pypi.org, setuptools, pip,
wheel, virtualenv, etc.) of Python. This made the endorsement misleading. Of
course, PyPA is a valued part of the Python world; an endorsement by the core
team — say, &lt;a class="reference external" href="https://docs.python.org/3/library/ensurepip.html"&gt;inclusion in official Python distributions&lt;/a&gt; — is something far more
important.&lt;/p&gt;
&lt;p&gt;This tagline has led to many discussions and flamewars, perhaps with &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8jd6aq/why_is_pipenv_the_recommended_packaging_tool_by/"&gt;this
Reddit thread from May&lt;/a&gt; being the most heated and most important. The change
was the direct result of this Reddit thread. I recommend reading this thread in
full.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-does"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id16"&gt;What pipenv does&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve already learned that Pipenv is used to &lt;em&gt;manage application dependencies&lt;/em&gt;.
Let’s learn what that term really means.&lt;/p&gt;
&lt;div class="section" id="application-dependencies"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id17"&gt;Application dependencies&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Here is an example use case for Pipenv:
I’m working on a website based on Django.  I create &lt;code class="docutils literal"&gt;~/git/website&lt;/code&gt; and run
&lt;code class="docutils literal"&gt;pipenv install Django&lt;/code&gt; in that directory.  Pipenv:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;automatically creates a virtualenv somewhere in my home directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;writes a Pipfile, which lists Django as my dependency&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;installs Django using pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;proceeds to write &lt;code class="docutils literal"&gt;Pipfile.lock&lt;/code&gt;, which stores the exact version and source file hash &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id11" id="id5"&gt;2&lt;/a&gt; of each package installed (including &lt;code class="docutils literal"&gt;pytz&lt;/code&gt;, Django’s dependency).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part of the process was the most time consuming. At one point, while
locking the dependency versions, Pipenv hangs for 46 seconds. This is one of
Pipenv’s notable issues: &lt;strong&gt;it’s slow.&lt;/strong&gt; Of course, this isn’t the only one,
but it defintely doesn’t help. Losing 46 seconds isn’t much, but when we get to
the longer waits in the timing test section later, we’ll see something that
could easily discourage users from using a package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-scripts-badly"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id18"&gt;Running scripts (badly)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;But let’s continue with our workflow. &lt;code class="docutils literal"&gt;pipenv run &lt;span class="pre"&gt;django-admin&lt;/span&gt; startproject
foobanizer&lt;/code&gt; is what I must use now, which is rather unwieldy to type, and
requires running pipenv even for the smallest things. (The &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt; script
has &lt;code class="docutils literal"&gt;/usr/bin/env python&lt;/code&gt; in its shebang.) I can run &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; to get
a new shell which runs the &lt;code class="docutils literal"&gt;activate&lt;/code&gt; script by default, giving you the worst
of both worlds when it comes to virtualenv activation: the unwieldiness of a
new shell, and the activate script, which the proponents of the shell spawning
dislike.&lt;/p&gt;
&lt;p&gt;Using &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; means spawning a new subshell, executing the shell
startup scripts (eg. &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt;), and requiring you to exit with &lt;code class="docutils literal"&gt;exit&lt;/code&gt; or
^D. If you type &lt;code class="docutils literal"&gt;deactivate&lt;/code&gt;, you are working with an extra shell, but now
outside of the virtualenv. Or you can use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--fancy&lt;/span&gt;&lt;/code&gt; mode that manipulates
&lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; before launching the subshell, but it requires a specific shell
configuration, in which &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; is not overridden in non-login shells — and
also often changing the config of your terminal emulator to run a login shell,
as many of the Linux terminals don’t do it.&lt;/p&gt;
&lt;p&gt;Now, why does all this happen? Because a command cannot manipulate the
environment of the shell it spawns. This means that Pipenv must pretend what it
does is a reasonable thing instead of a workaround. This can be solved with
manual activation using &lt;code class="docutils literal"&gt;source $(pipenv &lt;span class="pre"&gt;--venv)/bin/activate&lt;/span&gt;&lt;/code&gt; (can be made
into a neat alias), or shell wrappers (similar to what virtualenvwrapper does).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finishing-it-all-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id19"&gt;Finishing it all up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Anyway, I want a blog on my site. I want to write them in Markdown syntax, so I
run &lt;code class="docutils literal"&gt;pipenv install Markdown&lt;/code&gt;, and a few long seconds later, it’s added to
both Pipfiles.  Another thing I can do is &lt;code class="docutils literal"&gt;pipenv install &lt;span class="pre"&gt;--dev&lt;/span&gt; ipython&lt;/code&gt; and
get a handy shell for tinkering, but it will be marked as a development
dependency — so, not installed in production. That last part is an important
advantage of using Pipenv.&lt;/p&gt;
&lt;p&gt;When I’m done working on my website, I commit both Pipfiles to my git
repository, and push it to the remote server. Then I can clone it to, say,
&lt;code class="docutils literal"&gt;/srv/website&lt;/code&gt;. Now I can just &lt;code class="docutils literal"&gt;pipenv install&lt;/code&gt; to get all the production
packages installed (but not the development ones — Django, pytz, Markdown will
be installed, but IPython and all its million dependencies won’t). There’s just
one caveat: by default, the virtualenv will still be created in the current
user’s home directory. This is a problem in this case, since it needs to be
accessible by &lt;a class="reference external" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/"&gt;nginx and uWSGI&lt;/a&gt;, which do not have access to my (or root’s)
home directory, and don’t have a home directory of their own.  This can be
solved with &lt;code class="docutils literal"&gt;export PIPENV_VENV_IN_PROJECT=1&lt;/code&gt;. But note that I will now need
to export this environment variable every time I work with the app in &lt;code class="docutils literal"&gt;/srv&lt;/code&gt;
via Pipenv. The tool supports loading &lt;code class="docutils literal"&gt;.env&lt;/code&gt; files, &lt;strong&gt;but&lt;/strong&gt; only when
running &lt;code class="docutils literal"&gt;pipenv shell&lt;/code&gt; and &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;. You can’t use it to configure
Pipenv. And to run my app with nginx/uWSGI, I will need to know the exact virtualenv
path anyway, since I can’t use &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt; as part of uWSGI configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-pipenv-doesnt-do"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id20"&gt;What pipenv doesn’t do&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The workflow I mentioned above looks pretty reasonable, right? There are some
deficiencies, but other than that, it seems to work well. The main issue with
Pipenv is: &lt;strong&gt;it works with one workflow, and one workflow only.&lt;/strong&gt; Try to do
anything else, and you end up facing multiple obstacles.&lt;/p&gt;
&lt;div class="section" id="setup-py-source-distributions-and-wheels"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id21"&gt;Setup.py, source distributions, and wheels&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pipenv only concerns itself with managing dependencies. &lt;strong&gt;It isn’t a packaging
tool.&lt;/strong&gt; If you want your thing up on PyPI, Pipenv won’t help you with anything.
You still need to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; with &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;, because the
Pipfile format only specifies the dependencies and runtime requirements (Python
version), there is no place in it for the package name, and Pipenv does not
mandate/expect you to install your project. It can come in handy to manage the
development environment (as a &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; replacement, or something
used to write said file), but if your project has a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;, you still
need to manually manage &lt;code class="docutils literal"&gt;install_requires&lt;/code&gt;. Pipenv can’t create wheels on its
own either. And &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; is going to be a lot faster than Pipenv ever
will be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="working-outside-of-the-project-root"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id22"&gt;Working outside of the project root&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another issue with Pipenv is the use of the working directory to select
the virtual environment. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id12" id="id6"&gt;3&lt;/a&gt; Let’s say I’m a library author.  A user of my &lt;code class="docutils literal"&gt;foobar&lt;/code&gt;
library has just reported a bug and attached a &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; file that lets me
reproduce the issue. I download that file to &lt;code class="docutils literal"&gt;~/Downloads&lt;/code&gt; on my filesystem.
With plain old virtualenv, I can easily confirm the reproduction in a spare
shell with:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_3bfed889da7a49528d32c82f5880b962-1"&gt;&lt;/a&gt;$ ~/virtualenvs/foobar/bin/python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;And then I can launch my fancy IDE to fix the bug.  I don’t have to &lt;code class="docutils literal"&gt;cd&lt;/code&gt; into
the project. But with Pipenv, I can’t really do that.  If I put the virtualenv
in &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; with the command line option, I can type
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv/bin/python&lt;/span&gt; ~/Downloads/repro.py&lt;/code&gt;. If I use the
centralized directory + hashes thing, Tab completion becomes mandatory, if I
haven’t memorized the hash.&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_4efa116d601e429ca73777c41cc440d8-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_4efa116d601e429ca73777c41cc440d8-2"&gt;&lt;/a&gt;$ pipenv run python ~/Downloads/repro.py
&lt;/pre&gt;&lt;p&gt;What if I had two &lt;code class="docutils literal"&gt;.py&lt;/code&gt; files, or &lt;code class="docutils literal"&gt;repro.py&lt;/code&gt; otherwise depended on being in
the current working directory?&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_74c4712ba9da4011997a60a8bd4bc97e-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/git/foobar
&lt;a name="rest_code_74c4712ba9da4011997a60a8bd4bc97e-2"&gt;&lt;/a&gt;$ pipenv shell
&lt;a name="rest_code_74c4712ba9da4011997a60a8bd4bc97e-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_74c4712ba9da4011997a60a8bd4bc97e-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_74c4712ba9da4011997a60a8bd4bc97e-5"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar-Mwd1l2m9&lt;span class="o"&gt;)&lt;/span&gt;$ &lt;span class="nb"&gt;exit&lt;/span&gt;  &lt;span class="c1"&gt;# (not deactivate!)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;This is becoming ugly fairly quickly.&lt;/strong&gt; Also, with virtualenvwrapper, I can
do this:&lt;/p&gt;
&lt;pre class="code shell"&gt;&lt;a name="rest_code_10f90f87bc8f41e0b225766417533ab6-1"&gt;&lt;/a&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;a name="rest_code_10f90f87bc8f41e0b225766417533ab6-2"&gt;&lt;/a&gt;$ workon foobar
&lt;a name="rest_code_10f90f87bc8f41e0b225766417533ab6-3"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ python repro.py
&lt;a name="rest_code_10f90f87bc8f41e0b225766417533ab6-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;(&lt;/span&gt;foobar&lt;span class="o"&gt;)&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;p&gt;And let’s not forget that Pipenv doesn’t help me to write a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;,
distribute code, or manage releases.  It just manages dependencies.  And it
does it pretty badly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nikola"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id23"&gt;Nikola&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I’m a co-maintainer of a static site generator, &lt;a class="reference external" href="https://getnikola.com"&gt;Nikola&lt;/a&gt;.  As part of this, I have the following places where
I need to run Nikola:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-site&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-plugins&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/nikola-themes&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;~/website&lt;/code&gt; (this blog)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;/Volumes/RAMDisk/n&lt;/code&gt; (demo site, used for testing and created when needed, on a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RAM_drive"&gt;RAM disk&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That list is long.  End users of Nikola probably don’t have a list that long,
but they might just have more than one Nikola site.  For me, and for the
aforementioned users, Pipenv does not work.  To use Pipenv, all those
repositories would need to live in one directory. I would also need to have a
&lt;em&gt;separate&lt;/em&gt; Pipenv environment for &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;nikola-users&lt;/span&gt;&lt;/code&gt;, because that needs Django.
Moreover, the Pipfile would have to be symlinked from &lt;code class="docutils literal"&gt;~/git/nikola&lt;/code&gt; if we
were to make use of those in the project.  So, I would have a &lt;code class="docutils literal"&gt;~/nikola&lt;/code&gt;
directory just to make Pipenv happy, do testing/bug reproduction on a SSD (and
wear it out faster), and so on… Well, I could also use the virtualenv directly.
But in that case, Pipenv loses its usefulness, and makes my workflow more
complicated. I can’t use &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, because I would need to hack a
fuzzy matching system onto it, or memorize the random string appended to my
virtualenv name.  All because Pipenv relies on the current directory too much.&lt;/p&gt;
&lt;p&gt;Nikola end users who want to use Pipenv will also have a specific directory
structure forced on them. What if the site serves as docs for a project, and
lives inside another project’s repo? Two virtualenvs, 100 megabytes wasted.
Or worse, Nikola ends up in the other project’s Pipfile, which is technically
good for our download stats, but not really good for the other project’s
contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-try-to-measure-times"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id24"&gt;The part where I try to measure times&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pipenv is famous for being slow.  But how slow is it really?
I put it to the test.  I used two test environments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Remote: a DigitalOcean VPS, the cheapest option (1 vCPU), Python 3.6/Fedora
28, in Frankfurt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Local: my 2015 13” MacBook Pro (base model), Python 3.7, on a rather slow
Internet connection (10 Mbps on a good day, and the test was not performed on
one of them)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both were runninng Pipenv 2018.7.1, installed from pip.&lt;/p&gt;
&lt;p&gt;And with the following cache setups:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Removed: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.cache/pipenv&lt;/span&gt;&lt;/code&gt; removed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Partial: &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/depcache-py*.json&lt;/span&gt; &lt;span class="pre"&gt;~/.cache/pipenv/hash-cache/&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kept: no changes done from previous run&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, turns out Pipenv likes doing strange things with caching and locking.  A
look at the Activity Monitor hinted that there is network activity going on
when Pipenv displays its &lt;em&gt;Locking [packages] dependencies...&lt;/em&gt; line and
hangs. Now, the docs don’t tell you that. The most atrocious example was a
local Nikola install that was done in two runs: the first &lt;code class="docutils literal"&gt;pipenv install
Nikola&lt;/code&gt; run was interrupted &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id13" id="id8"&gt;4&lt;/a&gt; right after it was done installing packages,
so the cache had all the necessary wheels in it. The install took 10 minutes
and 7 seconds, 9:50 of which were taken by locking dependencies and installing
the locked dependencies — so, roughly nine and a half minutes were spent
staring at a static screen, with the tool doing &lt;em&gt;something&lt;/em&gt; in the background —
and Pipenv doesn’t tell you what happens in this phase.&lt;/p&gt;
&lt;p&gt;(Updated 2018-07-22: In the pipenv measurements: the first entry is the total
time of pipenv executon. The second is the long wait for pipenv to do its
“main” job: locking dependencies and installing them. The timing starts when
pipenv starts locking dependencies and ends when the prompt appears. The third
item is pipenv’s reported installation time.  So, pipenv install ⊇ locking/installing ⊇ Pipfile.lock install.)&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;colgroup&gt;
&lt;col style="width: 4%"&gt;
&lt;col style="width: 26%"&gt;
&lt;col style="width: 10%"&gt;
&lt;col style="width: 10%"&gt;
&lt;col style="width: 21%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;col style="width: 7%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Task&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Action&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Measurement
method&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Environment&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;&lt;p&gt;Cache&lt;/p&gt;&lt;/th&gt;
&lt;th class="head" colspan="4"&gt;&lt;p&gt;Times in seconds&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Attempt 1&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 2&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Attempt 3&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Average&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.911&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4.052&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.914&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.959&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.562&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.943&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.773&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.759&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.404&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.681&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.569&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7.551&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.536&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;62.973&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;71.305&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;67.271&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;42.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;40.9&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13.667&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to an environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (only Nikola in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;39.576&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;32&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;adding Django to another environment&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept (both in cache)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;37.978&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;30.2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.612&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.666&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.665&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;20.648&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6.333&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django (new env)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;17.615&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3.5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;9&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Remote&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;61.507&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;38.40&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Django&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Removed&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;73.933&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;46&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;11&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;virtualenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;(not applicable)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.864&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;12&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pip install Nikola (cached)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;—&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.951&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;&lt;p&gt;13&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install Nikola&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;p&gt;Partial, after interruption&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(10m 7s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;607.647&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;├─ locking/installing from lockfile&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;stopwatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(9m 50s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;590.85&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;└─ Pipfile.lock install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;14&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;pipenv install&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;time&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Local&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kept&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;p&gt;(L/I: 10.51 s)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;31.399&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id25"&gt;Alternative tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python packaging is something with the state of which nobody seems to be
satisfied. As such, there are many new contenders for the role of “best new
packaging tool”.&lt;/p&gt;
&lt;p&gt;Two popular alternatives packaging tools are &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; (by Vincent Driessen
and Jazzband) and &lt;a class="reference external" href="https://github.com/sdispater/poetry"&gt;Poetry&lt;/a&gt; (by Sébastien Eustace).&lt;/p&gt;
&lt;div class="section" id="pip-tools-locking-and-hashing-and-that-is-all"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id26"&gt;Pip-tools: locking and hashing, and that is all&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Pip-tools&lt;/strong&gt; contains two tools. The first one is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt;. It locks
dependencies in &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files, and that’s all it does. It allows
updating dependencies in the file based on what’s on PyPI. You can optionally
add hashes to that file. The second tool is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-sync&lt;/span&gt;&lt;/code&gt;. It will synchronize
your virtualenv and the requirements file: it will delete packages not in that
file, so that you don’t work with stuff not declared in requirements, and will
ensure versions match the requirements file.  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; takes roughly
10-20 seconds to run in the Nikola repo with a clean pip-tools cache (but with
the pip cache intact).&lt;/p&gt;
&lt;p&gt;Its speed is fairly reasonable, and it does not try to be the be-all-end-all
tool for development. It handles a specific task, does it well, and does not
try to handle tasks it should not. Pip-tools lets you work with venvs in any
way you like, and it does not require anything specific. Unlike Pipenv and
Poetry, you can install it into the virtualenvs that need it, and not
system-wide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poetry-better-but-still-not-convincing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id27"&gt;Poetry: better, but still not convincing&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Poetry&lt;/strong&gt; is somewhere in between. Its main aim is close to Pipenv, but it
also makes it possible to distribute things to PyPI. It tries really hard to
hide that it uses Pip behind the scenes. Its README comes with an extensive
&lt;a class="reference external" href="https://github.com/sdispater/poetry#what-about-pipenv"&gt;“What about Pipenv?”&lt;/a&gt;
section, which I recommend reading — it has a few more examples of bad Pipenv
features.  Poetry claims to use the standardized (PEP 518) &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt;
file to replace the usual lot of files. Unfortunately, the only thing that is
standardized is the file name and syntax. Poetry uses custom &lt;code class="docutils literal"&gt;[tool.poetry]&lt;/code&gt;
sections, which means that one needs Poetry to fully use the packages created
with it, leading to vendor lock-in. There is a &lt;code class="docutils literal"&gt;build&lt;/code&gt; feature to produce a
sdist with setup.py and friends.&lt;/p&gt;
&lt;p&gt;In February 2020, in a simple &lt;code class="docutils literal"&gt;poetry add Nikola&lt;/code&gt; test, it took &lt;strong&gt;about a
minute&lt;/strong&gt; (55.1/50.8/53.6 s) to resolve dependencies (according to Poetry’s own
count, Local environment, Poetry cache removed), complete with reassuring output and
no quiet lockups.  Not as good as pip, but it’s more reasonable than Pipenv.
Also, the codebase and its layout are rather convoluted, and the docs are very
sparse and lacking. Poetry produces packages instead of just managing
dependencies, so it’s generally more useful than Pipenv. That said, I am not
convinced by that tool either.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pip-is-here-to-stay"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id28"&gt;Pip is here to stay!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But in all the talk about new tools, we’re forgetting about the old ones, and
they do their job well — so well in fact, that the new tools still need them
under the covers.&lt;/p&gt;
&lt;p&gt;Pip is fast. It does its job well enough. It lacks support for splitting
packages between production and development (as Pipenv and Poetry do). This
means that &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip install&lt;/code&gt; are instant, at the cost of (a)
needing two separate environments, or (b) installing development dependencies
in production (which &lt;em&gt;should&lt;/em&gt; only be a waste of HDD space and nothing more in
a well-architected system). But at the same time, pip-tools can help keep the
environments separate, as long as you take some time to write separate
&lt;code class="docutils literal"&gt;requirements.in&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;The virtualenv management features can be provided by virtualenvwrapper. That
tool’s main advantage is the shell script implementation, which means that
&lt;code class="docutils literal"&gt;workon foo&lt;/code&gt; activates the &lt;code class="docutils literal"&gt;foo&lt;/code&gt; virtualenv without spawning a new
subshell (an issue with Pipenv and Poetry, that I already covered when
describing Pipenv’s operation in the &lt;a class="reference internal" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#running-scripts-badly"&gt;Running scripts (badly)&lt;/a&gt; chapter.) An
argument often raised by Pipenv proponents is that one does not need to concern
itself with creating the virtualenv, and doesn’t need to care where it is.
Unfortuntately, many tools require this knowledge from their user, or force a
specific location, or require it to be different to the home directory.&lt;/p&gt;
&lt;p&gt;And for a reasonable project template with release automation — well, I have my
own entry in that category, called (rather unoriginally) the &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project
Template (PyPT)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, setup.py files are not ideal, since they use &lt;code class="docutils literal"&gt;.py&lt;/code&gt; code and a function
execution, making access to meta information hard (&lt;code class="docutils literal"&gt;./setup.py egg_info&lt;/code&gt;
creates tool-accessible text files). Their main advantage is that they are the
&lt;em&gt;only&lt;/em&gt; format that is widely supported — pip is the de-facto default
Python package manager (which is pre-installed on Windows and Mac), and other
tools would require installation/bootstrapping first.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-break-neck-pace-of-pipenv"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id29"&gt;The break-neck pace of Pipenv&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A good packaging tool is stable. In other words, it doesn’t change often, and
it strives to support existing environments. It wouldn’t be fun to re-download
everything on your system, because someone decided that &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; is now called
&lt;code class="docutils literal"&gt;/stuff&lt;/code&gt;, and all the files in &lt;code class="docutils literal"&gt;/usr&lt;/code&gt; would become forgotten and not
removed. Well, this is what Pipenv did:&lt;/p&gt;
&lt;table class="table table-striped table-bordered"&gt;
&lt;colgroup&gt;
&lt;col style="width: 11%"&gt;
&lt;col style="width: 89%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Date/Time (UTC)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Event&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-01-31 22:01&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.2.14 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;./.venv&lt;/span&gt;&lt;/code&gt; (eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foo/.venv&lt;/span&gt;&lt;/code&gt;). Last version with the original behavior of pipenv.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 05:36&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.0 released. &lt;code class="docutils literal"&gt;pipenv &lt;span class="pre"&gt;--three&lt;/span&gt;&lt;/code&gt; creates &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo&lt;/span&gt;&lt;/code&gt; (to be precise, &lt;code class="docutils literal"&gt;$WORKON_HOME/foo&lt;/code&gt;).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/178"&gt;Issue #178&lt;/a&gt; is reported regarding the behavior change.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-01 06:18&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “no plans for making it configurable.” and closes the issue.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 03:05&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Kenneth Reitz responds: “added &lt;code class="docutils literal"&gt;PIPENV_VENV_IN_PROJECT&lt;/code&gt; mode for classic operation. Not released yet.”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-02-02 04:29&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.3.3 released. The default is still uses a “remote” location, but &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; can now be used.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2017-03-02 13:48&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;v3.5.0 released. The new default path is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$WORKON_HOME/foo-HASH&lt;/span&gt;&lt;/code&gt;, eg. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/share/virtualenvs/foo-7pl2iuUI&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Over the course of a month, the location of the virtualenv changed twice. If
the user didn’t read the changelog and didn’t manually intervene (also of note,
the option name was mentioned in the issue and in v3.3.4’s changelog), they
would have a stale &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; directory, since the new scheme was adopted for
them. And then, after switching to v3.5.0, they would have a stale virtualenv
hidden somewhere in their home directory, because pipenv decided to add hashes.&lt;/p&gt;
&lt;p&gt;Also, this is not configurable. One cannot disable the hashes in paths, even
though &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/589"&gt;users&lt;/a&gt; &lt;a class="reference external" href="https://github.com/pypa/pipenv/issues/1049"&gt;wanted&lt;/a&gt; to. It would also help people
who want to mix Pipenv and virtualenvwrapper.&lt;/p&gt;
&lt;p&gt;Pipenv is a very &lt;strong&gt;opinionated&lt;/strong&gt; tool, and if the dev team changes their mind,
the old way is not supported.&lt;/p&gt;
&lt;p&gt;Pipenv moves fast and doesn’t care if anything breaks. As an example, between
2018-03-13 13:21 and 2018-03-14 13:44 (a little over 24 hours), Pipenv had 10
releases, ranging from v11.6.2 to v11.7.3. The &lt;a class="reference external" href="https://github.com/pypa/pipenv/blob/25df09c171a548fd71d4df735767bf763a653b83/HISTORY.txt"&gt;changelog&lt;/a&gt; is rather unhelpful
when it comes to informing users what happened in each of the releases.&lt;/p&gt;
&lt;p&gt;Extra reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://web.archive.org/web/20180717140106/https://journal.kennethreitz.org/entry/r-python"&gt;Kenneth Reitz, A Letter to /r/python (with some notes about bipolar disorder)&lt;/a&gt; (replaced with Wayback Machine link on 2020-02-07)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reddit comment threads for the letter: &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kdfd6/kenneth_reitz_a_letter_to_rpython_with_some_notes/"&gt;first&lt;/a&gt; and &lt;a class="reference external" href="https://np.reddit.com/r/Python/comments/8kjv8x/a_letter_to_rpython_kenneth_reitzs_journal/"&gt;second&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id30"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pipenv, contrary to popular belief and (now removed) propaganda, is not an
officially recommended tool of Python.org. It merely has a tutorial written
about it on packaging.python.org (page run by the PyPA).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv solves one use case reasonably well, but fails at many others, because
it forces a particular workflow on its users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv does not handle any parts of packaging (cannot produce sdists and
wheels).  Users who want to upload to PyPI need to manage a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file
manually, alongside and independently of Pipenv.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pipenv produces lockfiles, which are useful for reproducibility, at the cost
of installation speed. The speed is a noticeable issue with the tool. &lt;code class="docutils literal"&gt;pip
freeze&lt;/code&gt; is good enough for this, even if there are no dependency classes
(production vs development) and no hashes (which
have minor benefits) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id11" id="id9"&gt;2&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hatch attempts to replace many packaging tools, but some of its practices and
ideas can be questionable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Poetry supports the same niche Pipenv does, while also adding the ability to
create packages and improving over many gripes of Pipenv. A notable issue is
the use of a custom all-encompassing file format, which makes switching tools
more difficult (vendor lock-in).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pip, setup.py, and virtualenv — the traditional, tried-and-true tools — are
still available, undergoing constant development. Using them can lead to a
simpler, better experience.  Also of note, tools like virtualenvwrapper
can manage virtualenvs better than the aforementioned new Python tools,
because it is based on shell scripts (which can modify the enivironment).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id10"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;On a side note, the tutorial explains nothing. A prospective user only learns it’s similar to npm or bundler (what does that mean?), installs one package, and runs a &lt;code class="docutils literal"&gt;.py&lt;/code&gt; file through &lt;code class="docutils literal"&gt;pipenv run&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id11"&gt;&lt;span class="brackets"&gt;2&lt;/span&gt;&lt;span class="fn-backref"&gt;(&lt;a href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id5"&gt;1&lt;/a&gt;,&lt;a href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id9"&gt;2&lt;/a&gt;)&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Note that one can’t change the file on PyPI after uploading it, so this would only be protection against rogue PyPI admins or a MitM attack (in which case you’ve got bigger problems anyways). &lt;a class="reference external" href="https://github.com/nedbat/coveragepy/issues/679#issuecomment-406396761"&gt;Also, the feature is fairly broken.&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id12"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id6"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Fortunately, it looks in the parent directories for Pipfiles as well. Otherwise, you might end up with one environment for &lt;code class="docutils literal"&gt;foo&lt;/code&gt; and another for &lt;code class="docutils literal"&gt;foo/foo&lt;/code&gt; and yet another for &lt;code class="docutils literal"&gt;foo/docs&lt;/code&gt; and so on…&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id13"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/#id8"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The interruption happened by mistake due to the RAM disk running out of space, but it was actually a good thing to have happened.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr class="docutils"&gt;
&lt;p class="alert alert-info"&gt;&lt;strong&gt;Other discussion threads:&lt;/strong&gt; &lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/a3h81m/pipenv_promises_a_lot_delivers_very_little/"&gt;r/Python&lt;/a&gt;, &lt;a class="reference external" href="https://news.ycombinator.com/item?id=18612590"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>packaging</category><category>Pipenv</category><category>Python</category><guid>https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/</guid><pubDate>Tue, 17 Jul 2018 17:40:00 GMT</pubDate></item><item><title>Mobile phone woes, or how my carrier didn’t want my money</title><link>https://chriswarrick.com/blog/2017/09/22/mobile-phone-woes-or-how-my-carrier-didnt-want-my-money/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I used up 0.99 GB out of my 1 GB allowance. So, I had to buy some more. My (former) operator, Orange, sells a 1GB package for an ultra-low price (not really) of 15 PLN. (You can get the same package for less money, even half of that price, with other carriers.)&lt;/p&gt;
&lt;p&gt;How to turn that on? You can send a text message or call a robot. I’ll give them a call then.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p class="lead text-muted"&gt;&lt;strong&gt;Czytelnikom z Polski polecam &lt;a href="https://chriswarrick.com/pl/blog/2017/09/22/mobile-phone-woes-or-how-my-carrier-didnt-want-my-money/"&gt;czytać po polsku&lt;/a&gt;.&lt;/strong&gt;
(Polish readers are advised to read the Polish version of this post.)&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Welcome to Orange, Network Number One!&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To sum up, the main carriers in Poland are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the orange &lt;em&gt;Network Number One&lt;/em&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a class="reference external" href="https://www.t-mobile.com/company/legal-notices/trademarks.html"&gt;magenta™&lt;/a&gt; &lt;em&gt;Best Network&lt;/em&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the purple &lt;em&gt;Most Chosen Network in Poland&lt;/em&gt;,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and the green network, whose ads may give you a seizure from flashing lights and say &lt;em&gt;Congrats, you!&lt;/em&gt; at the same time&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, of course, &lt;a class="reference external" href="https://pl.wikipedia.org/wiki/Operator_wirtualny#Wirtualni_operatorzy_na_rynku_polskim"&gt;a bunch of MVNOs and alternate brands (pl)&lt;/a&gt;.
And all of them — no matter if they’re number one, the best, or else — love their customers, care for the highest quality of their services and their customers’ satisfaction, and their main goal is for their customers to have the lowest bills possible.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Oh wait, I’m sorry.&lt;/em&gt; Their main goal is maximizing profits, and the word &lt;em&gt;love&lt;/em&gt; doesn’t really apply.&lt;/p&gt;
&lt;p&gt;After three more advertisements for their services, we reach the main menu. It took a while to reach the &lt;em&gt;one-shot Internet packages&lt;/em&gt; option. I chose the 1 GB package. &lt;em&gt;Great Success?&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The service will be activated on midnight.&lt;/p&gt;
&lt;footer&gt;Mr. Service Bureau Robot, among other useless info&lt;/footer&gt;
&lt;/blockquote&gt;&lt;p&gt;After I hung up, I received two texts (translated):&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;We’ve received the request to enable a one-shot 1 GB package. We’ll turn the service on &lt;em&gt;[today]&lt;/em&gt;. The price is 15 zł. Regards, Orange&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We’ll turn the package on within 24 hours. Regards, Orange&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s the Network Number One — and they can’t even clearly tell me when they’ll start the service? A service that’s so simple and requires zero extra work from them? The service will be enabled:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Today — now at the earliest, right before midnight at the latest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On midnight.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within 24 hours — now at the earliest, same time tomorrow at the latest.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img src="https://chriswarrick.com/images/20170922-orange-time-graph.svg" class="align-center" alt="A visual representation of the three time possibilities."&gt;&lt;p&gt;Half an hour later, when my phone claims I used over 1 GB, Network Number One tells me I used 80% of my “standard” allowance. Android and Orange seem to have a different definition of a gigabyte — at least it’s Network Number One who has the better one.&lt;/p&gt;
&lt;p&gt;Ten hours later, Android’s meter shows 1.36 GB. Network Number One tells me that I’ve just used up 1 GB, and the speed limiter has been activated — one text message claims it’s 16 kb/s, and another says 16 kB/s. (Gotta love their double messages with different information in each. Although either limit is unusable.) Fast.com says 52 Kbps. To quote the green carrier’s ads — &lt;em&gt;Congrats, You!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dear orange-colored operator of the Network Number One!&lt;/strong&gt; Does activating a service so simple — primitive, even — and definitely popular, require waiting until midnight? Couldn’t you turn it on when it’s requested? And why are there three different grace periods and two speed limits in your messages?&lt;/p&gt;
&lt;p&gt;I left the Network Number One. And I’m pretty happy — paying less for more.&lt;/p&gt;&lt;/div&gt;</description><category>mobile</category><category>Orange</category><category>phone</category><category>telecom</category><guid>https://chriswarrick.com/blog/2017/09/22/mobile-phone-woes-or-how-my-carrier-didnt-want-my-money/</guid><pubDate>Fri, 22 Sep 2017 14:00:00 GMT</pubDate></item><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is not in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; your process gets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the hard-coded path is not correct on the end user’s system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id5" id="id1"&gt;1&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;code class="docutils literal"&gt;grep&lt;/code&gt;, &lt;code class="docutils literal"&gt;sed&lt;/code&gt; and
&lt;code class="docutils literal"&gt;awk&lt;/code&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;code class="docutils literal"&gt;os&lt;/code&gt; or &lt;code class="docutils literal"&gt;shutil&lt;/code&gt;. Your language of
choice can also handle things like networking (don’t call &lt;code class="docutils literal"&gt;curl&lt;/code&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;code class="docutils literal"&gt;execve()&lt;/code&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id6" id="id2"&gt;2&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id7" id="id3"&gt;3&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id8" id="id4"&gt;4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;directly, by calling &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;through the shell (&lt;code class="docutils literal"&gt;sh&lt;/code&gt;), usually by calling &lt;code class="docutils literal"&gt;system()&lt;/code&gt;. As Linux’s
manpage for &lt;code class="docutils literal"&gt;system(3)&lt;/code&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;system()&lt;/code&gt; library function uses &lt;code class="docutils literal"&gt;fork(2)&lt;/code&gt; to create a child process that executes the shell command specified in command using &lt;code class="docutils literal"&gt;execl(3)&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_75b49cadacf842d786dc608d617515bb-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8dbedf8f94cc47b2a218cd3cb843b86f-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_8dbedf8f94cc47b2a218cd3cb843b86f-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_8dbedf8f94cc47b2a218cd3cb843b86f-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;quotes and escapes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding expressions in braces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wildcards (glob, &lt;code class="docutils literal"&gt;*&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redirections and pipes (&lt;code class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command substitution (backticks or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running multiple commands on the same line (&lt;code class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="dl-horizontal simple"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Perform fork-exec by yourself, or use &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;code class="docutils literal"&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the subprocess module. Always pass &lt;code class="docutils literal"&gt;shell=False&lt;/code&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;code class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/code&gt; (and not &lt;code class="docutils literal"&gt;_shell&lt;/code&gt;), but note it takes &lt;code class="docutils literal"&gt;*args&lt;/code&gt; and not a list. Never use &lt;code class="docutils literal"&gt;os.system&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.popen&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;IO.popen&lt;/code&gt;. Pass multiple arguments to &lt;code class="docutils literal"&gt;system()&lt;/code&gt; (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/code&gt;). Never use &lt;code class="docutils literal"&gt;%x{command}&lt;/code&gt; or backticks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;Runtime.exec&lt;/code&gt;. Pass multiple arguments or list to &lt;code class="docutils literal"&gt;ProcessBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All the standard methods go through the shell. Try &lt;code class="docutils literal"&gt;escapeshellcmd()&lt;/code&gt;, &lt;code class="docutils literal"&gt;escapeshellarg()&lt;/code&gt; — or better, switch to Python. Or anything, really.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;os/exec&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.StartProcess&lt;/code&gt; are safe.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use &lt;code class="docutils literal"&gt;child_process.execFile&lt;/code&gt; or &lt;code class="docutils literal"&gt;child_process.spawn&lt;/code&gt; with &lt;code class="docutils literal"&gt;shell&lt;/code&gt; set to false.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; on Windows. Instead, &lt;code class="docutils literal"&gt;CreateProcess()&lt;/code&gt;,
&lt;code class="docutils literal"&gt;ShellExecute()&lt;/code&gt;, or lower-level &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/code&gt; functions are used. &lt;code class="docutils literal"&gt;cmd.exe
/c&lt;/code&gt; is called in shell calls.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The function that does the real work is &lt;code class="docutils literal"&gt;execve()&lt;/code&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;code class="docutils literal"&gt;execl()&lt;/code&gt; does the last two.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Quoted from &lt;code class="docutils literal"&gt;execve(2)&lt;/code&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An alternative is &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>best practices</category><category>C</category><category>devel</category><category>guide</category><category>Linux</category><category>Python</category><category>security</category><category>subprocess</category><category>Unix</category><guid>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Gynvael’s Mission 11 (en): Python bytecode reverse-engineering</title><link>https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Gynvael Coldwind is a security researcher at Google, who hosts weekly livestreams about security and programming in &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;Polish&lt;/a&gt; and &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;English&lt;/a&gt;). As part of the streams, he gives out missions — basically, CTF-style reverse engineering tasks. Yesterday’s mission was about Elvish — I mean Paint — I mean Python programming and bytecode.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-9"&gt;&lt;/a&gt;files.
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-19"&gt;&lt;/a&gt;Good luck!
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a name="rest_code_4fd77fde63dd46f3bfc1c50221870176-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;p&gt;Here’s the firmware:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-3"&gt;&lt;/a&gt;co_flags 67
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-4"&gt;&lt;/a&gt;co_name check_password
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a name="rest_code_91ec58dbcb8744b59199e4bd682cafc5-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;To the uninitiated, this might look like &lt;em&gt;Elvish&lt;/em&gt;. In reality, this is Python bytecode — the instruction set understood by Python’s (CPython 2.7) virtual machine. Python, like many other languages, uses a compiler to translate human-readable source code into something more appropriate for computers. Python code compiles to bytecode, which is then executed by CPython’s virtual machine. CPython bytecode can be ported between different hardware, while machine code cannot. However, machine code can often be faster than languages based on virtual machines and bytecode. (Java and C# work the same way as Python, C compiles directly to machine code)&lt;/p&gt;
&lt;p&gt;This is the internal representation of a Python function. The first few lines are the member variables of the &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt; object of our function. We know that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;it takes 1 argument&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it has 7 constants: None, a long string of hex digits, the string &lt;code class="docutils literal"&gt;'hex'&lt;/code&gt;, and numbers: 89, 255, 115, 50.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flags&lt;/a&gt; are set to 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). This is the “standard” value that most uncomplicated functions take.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its name is &lt;code class="docutils literal"&gt;check_password&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it uses the following globals or attribute names: &lt;code class="docutils literal"&gt;decode&lt;/code&gt;, &lt;code class="docutils literal"&gt;len&lt;/code&gt;, &lt;code class="docutils literal"&gt;False&lt;/code&gt;, &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it has 4 local variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it uses a stack of size 6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its variables are named &lt;code class="docutils literal"&gt;s&lt;/code&gt;, &lt;code class="docutils literal"&gt;good&lt;/code&gt;, &lt;code class="docutils literal"&gt;cs&lt;/code&gt;, &lt;code class="docutils literal"&gt;cg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two ways to solve this task: you can re-assemble the &lt;code class="docutils literal"&gt;dis&lt;/code&gt; output with the help of the &lt;code class="docutils literal"&gt;opcode&lt;/code&gt; module, or try to re-create the function by hand, using the bytecode. I chose the latter method.&lt;/p&gt;
&lt;div class="section" id="reverse-engineering-python-bytecode-re-creating-the-function-by-hand"&gt;
&lt;h2&gt;Reverse-engineering Python bytecode: re-creating the function by hand&lt;/h2&gt;
&lt;p&gt;I started by recreating the original firmware file. I created an empty function and wrote some code to print out &lt;code class="docutils literal"&gt;__code__&lt;/code&gt; contents and &lt;code class="docutils literal"&gt;dis.dis&lt;/code&gt; output. I also added color-coding to help me read it:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_4b6226c5792e4bc3b27ed9c12f21ee45-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we run this solver, we get the following output (text in brackets added by me):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 match]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-5"&gt;&lt;/a&gt;co_names ()              [0/6 match]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-6"&gt;&lt;/a&gt;co_nlocals 1             [should be 4]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-7"&gt;&lt;/a&gt;co_stacksize 1           [should be 6]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 match]
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a name="rest_code_263e1112c7ba435ebcb47feb3118631e-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;We can see (with the help of colors, not reproduced here), that we’ve got &lt;code class="docutils literal"&gt;co_argcount&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_flags&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_name&lt;/code&gt; correctly. We also have one constant (&lt;code class="docutils literal"&gt;None&lt;/code&gt;, in every function) and one variable name (&lt;code class="docutils literal"&gt;s&lt;/code&gt;, the argument name). We can also see &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt; output. While it looks similar to the assignment, there are a few noticeable differences: there is no &lt;code class="docutils literal"&gt;7&lt;/code&gt; (line number) at the start, and &lt;code class="docutils literal"&gt;LOAD_CONST&lt;/code&gt; instructions in the original code did not have anything in parentheses (only comparisions and loops did).  This makes reading bytecode harder, but still possible. (I originally thought about using &lt;code class="docutils literal"&gt;diff&lt;/code&gt; for help, but it’s not hard to do it by hand. I did use &lt;code class="docutils literal"&gt;diff&lt;/code&gt; for the final checking after a manual “conversion”)&lt;/p&gt;
&lt;p&gt;Let’s stop to look at the constants and names for a second. The long string is followed by &lt;code class="docutils literal"&gt;hex&lt;/code&gt;, and one of the constants is &lt;code class="docutils literal"&gt;decode&lt;/code&gt;. This means that we need to use &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/code&gt; to create a (byte)string of some information. Puzzle answers tend to be human-readable, and this string isn’t — so we need to do some more work.&lt;/p&gt;
&lt;p&gt;So, let’s try reproducing the start of the original mission code using what we’ve just discussed. Python’s VM is based on a stack. In the bytecode above, you can see that instructions take 0 or 1 arguments. Some of them put things on the stack, others do actions and remove them. Most instruction names are self-explanatory, but the full list can be found in the &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dis module documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instructions like &lt;code class="docutils literal"&gt;LOAD&lt;/code&gt; and &lt;code class="docutils literal"&gt;STORE&lt;/code&gt; refer to indices in the constants/names/varnames tuples. To make it easier, here’s a “table” of them:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-1"&gt;&lt;/a&gt;constants
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a name="rest_code_bf1ad9b44151432d9f5cdbbfe75e8fc0-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;p&gt;In order to improve readability, I will use “new” &lt;code class="docutils literal"&gt;dis&lt;/code&gt; output with names in parentheses below:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_b83f4fc558264628be09ef608dfa490a-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a name="rest_code_b83f4fc558264628be09ef608dfa490a-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a name="rest_code_b83f4fc558264628be09ef608dfa490a-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a name="rest_code_b83f4fc558264628be09ef608dfa490a-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # function takes 1 argument from stack
&lt;a name="rest_code_b83f4fc558264628be09ef608dfa490a-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;p&gt;As I guessed before, the first line of our function is as follows:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_92cbce1aed044948901336f6f14935ae-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_92cbce1aed044948901336f6f14935ae-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we run the solver again, we’ll see that the first 12 bytes of our bytecode match the mission text. We can also see that &lt;code class="docutils literal"&gt;varnames&lt;/code&gt; is filled in half, we’ve added two constants, and one name.  The next few lines are as follows:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a name="rest_code_ea3389b45d184a55a120f76ad32c6fa0-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;We can see that we’re putting a global object on stack and calling it with one argument. In both cases, the global has the index 1, that’s &lt;code class="docutils literal"&gt;len&lt;/code&gt;. The two arguments are &lt;code class="docutils literal"&gt;s&lt;/code&gt; and &lt;code class="docutils literal"&gt;good&lt;/code&gt;. We put both lengths on stack, then compare them. If the comparison fails (they’re equal), we jump to the instruction starting at byte 43, otherwise we continue execution to load the second global (False) and return it.  This wall of text translates to the following simple code:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_73707a099197429e8bed0226447fd685-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_73707a099197429e8bed0226447fd685-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_73707a099197429e8bed0226447fd685-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a name="rest_code_73707a099197429e8bed0226447fd685-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s take another look at our names. We can see we’re missing &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;. You can already see a common pattern here: we will iterate over both strings at once (using &lt;code class="docutils literal"&gt;zip&lt;/code&gt;), do some math based on the character’s codes (&lt;code class="docutils literal"&gt;ord&lt;/code&gt;), and then check if &lt;code class="docutils literal"&gt;all&lt;/code&gt; results (of a comparison, usually) are truthy.&lt;/p&gt;
&lt;p&gt;Here’s the bytecode with value annotations and comments, which explain what happens where:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Start iterating: iter()
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # for loop iteration start (if iterator exhausted, jump +52 bytes to position 117)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # unpack a sequence (a, b = sequence)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = item from s
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = item from good
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # put ord(cs) on stack
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [subtract 89 from topmost value]
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND with topmost value]
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR with topmost value]
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR with topmost value]
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # put ord(cs) on stack
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # compare the two values on stack
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # append topmost value to the list in topmost-1; pop topmost (append to list created in comprehension)
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # jump back to start of loop
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # after loop: call all([list comprehension result])
&lt;a name="rest_code_4e2a518b2bf747bd8c8b3aa09ec0f617-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # return value returned by all()
&lt;/pre&gt;&lt;p&gt;We can now write the full answer.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ab14355c4b1b455c878c7ead5d4c1c08-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_ab14355c4b1b455c878c7ead5d4c1c08-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ab14355c4b1b455c878c7ead5d4c1c08-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_ab14355c4b1b455c878c7ead5d4c1c08-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ab14355c4b1b455c878c7ead5d4c1c08-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_ab14355c4b1b455c878c7ead5d4c1c08-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ab14355c4b1b455c878c7ead5d4c1c08-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_ab14355c4b1b455c878c7ead5d4c1c08-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ab14355c4b1b455c878c7ead5d4c1c08-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_ab14355c4b1b455c878c7ead5d4c1c08-5"&gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_ab14355c4b1b455c878c7ead5d4c1c08-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_ab14355c4b1b455c878c7ead5d4c1c08-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;In the end, our &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt; output matches the mission text (except the removed values, but their IDs do match), our &lt;code class="docutils literal"&gt;co_*&lt;/code&gt; variables are all green, and we can get to work on solving the puzzle itself!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; this task uses a list comprehension. You might want to optimize it, remove the brackets, and end up with a generator expression. This would make the task harder, since would require working with the internal generator code object as well:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_e332369bd5c94824bee450d2c35fa237-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a name="rest_code_e332369bd5c94824bee450d2c35fa237-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e332369bd5c94824bee450d2c35fa237-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;BINARY_*&lt;/code&gt; and &lt;code class="docutils literal"&gt;ord&lt;/code&gt; disappeared from the new listing. You can see the &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;modified code&lt;/a&gt; (which differs by two bytes) and &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;solver output&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solving-the-real-puzzle"&gt;
&lt;h2&gt;Solving the real puzzle&lt;/h2&gt;
&lt;p&gt;I solved the extra credit part of the puzzle. The &lt;em&gt;real&lt;/em&gt; aim of the puzzle was to recover the password — the text for which &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt; will return True.&lt;/p&gt;
&lt;p&gt;This part is pretty boring. I built a dictionary, where I mapped every byte (0…255) to the result of the calculation done in the &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt; function’s loop. Then I used that to recover the original text.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-11"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_b896862f36a84f9abfb9290c60f8b798-12"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;The password is:&lt;/strong&gt; &lt;code class="docutils literal"&gt;huh, that actually worked!&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-was-that-paint-thing-about"&gt;
&lt;h2&gt;What was that Paint thing about?&lt;/h2&gt;
&lt;blockquote&gt;Yesterday’s mission was about Elvish — &lt;strong&gt;I mean Paint&lt;/strong&gt; — I mean Python programming.&lt;footer&gt;yours truly in this post’s teaser&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Most of my readers were probably puzzled by the mention of Paint. Long-time viewers of Gynvael’s streams in Polish remember the Python 101 video he posted on April Fools last year. See &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;original video&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;explanation&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;code&lt;/a&gt; (video and explanation are both Polish; you can get the gist of the video without hearing the audio commentary though.) &lt;strong&gt;Spoilers ahead.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In that prank, Gynvael taught Python basics. The first part concerned itself with writing bytecode by hand. The second part (starts around 12:00) was about drawing custom Python modules. In Paint. Yes, Paint, the simple graphics program included with Microsoft Windows. He drew a custom Python module in Paint, and saved it using the BMP format. It looked like this (zoomed PNG below; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;download gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;How was this done? There are three things that come into play:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python can import modules from a ZIP file (if it’s appended to sys.path). Some tools that produce &lt;code class="docutils literal"&gt;.exe&lt;/code&gt; files of Python code use this technique; the old &lt;code class="docutils literal"&gt;.egg&lt;/code&gt; file format also used ZIPs this way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BMP files have their header at the start of a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ZIP files have their header at the end of a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thus, one file can be a valid BMP and ZIP at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I took the code of &lt;code class="docutils literal"&gt;check_password&lt;/code&gt; and put it in &lt;code class="docutils literal"&gt;mission11.py&lt;/code&gt; (which I already cited above). Then I compiled to &lt;code class="docutils literal"&gt;.pyc&lt;/code&gt; and created a &lt;code class="docutils literal"&gt;.zip&lt;/code&gt; out of it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_fc51398c77484626837843899ccf64f3-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fc51398c77484626837843899ccf64f3-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_fc51398c77484626837843899ccf64f3-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fc51398c77484626837843899ccf64f3-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_fc51398c77484626837843899ccf64f3-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fc51398c77484626837843899ccf64f3-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_fc51398c77484626837843899ccf64f3-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fc51398c77484626837843899ccf64f3-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_fc51398c77484626837843899ccf64f3-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fc51398c77484626837843899ccf64f3-5"&gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_fc51398c77484626837843899ccf64f3-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_fc51398c77484626837843899ccf64f3-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Since I’m not an expert in any of the formats, I booted my Windows virtual machine and blindly copied the &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;parameters used by Gynvael&lt;/a&gt; to open the ZIP file (renamed &lt;code class="docutils literal"&gt;.raw&lt;/code&gt;) in IrfanView and saved as &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt;. I changed the size to 83×2, because my ZIP file was 498 bytes long (3 BPP * 83 px * 2 px = 498 bytes) — by doing that, and through sheer luck with the size, I could avoid adding comments and editing the ZIP archive. I ended up with this (PNG again; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;download mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt; file is runnable! We can use this code:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_2ef48ae31b084d4fa68f579cf11dcf27-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2ef48ae31b084d4fa68f579cf11dcf27-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_2ef48ae31b084d4fa68f579cf11dcf27-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2ef48ae31b084d4fa68f579cf11dcf27-2"&gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_2ef48ae31b084d4fa68f579cf11dcf27-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2ef48ae31b084d4fa68f579cf11dcf27-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_2ef48ae31b084d4fa68f579cf11dcf27-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2ef48ae31b084d4fa68f579cf11dcf27-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_2ef48ae31b084d4fa68f579cf11dcf27-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2ef48ae31b084d4fa68f579cf11dcf27-5"&gt;&lt;/a&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_2ef48ae31b084d4fa68f579cf11dcf27-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2ef48ae31b084d4fa68f579cf11dcf27-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_2ef48ae31b084d4fa68f579cf11dcf27-7"&gt;&lt;code data-line-number="7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_2ef48ae31b084d4fa68f579cf11dcf27-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And we get this:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (full solver code)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (used for side note regarding generator expressions vs. list comprehensions)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py code, used in BMP file&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, file that runs the BMP/ZIP module&lt;/a&gt; (adapted from Gynvael’s)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dis module documentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for the mission (and BMP idea), Gynvael!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>Python hackery</category><category>Python internals</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item><item><title>Setting up a Python development environment</title><link>https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Setting up Python is usually simple, but there are some places where newcomers
(and experienced users) need to be careful. What versions are there? What’s the
difference between Python, CPython, Anaconda, PyPy? Those and many other
questions may stump new developers, or people wanting to use Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note: this guide is opinionated.&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#glossary-and-questions" id="id2"&gt;Glossary and questions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#python-versions-2-vs-3" id="id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-run-multiple-pythons-on-the-same-machine" id="id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#implementations" id="id5"&gt;Implementations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#distributions" id="id6"&gt;Distributions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-make-exe-files-from-python-programs" id="id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#where-to-learn-python-where-to-get-help" id="id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installing-python" id="id9"&gt;Installing Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#windows" id="id10"&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#macos" id="id11"&gt;macOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#linux-and-other-unix-like-oses" id="id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installing-packages" id="id13"&gt;Installing packages&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#user-installs" id="id14"&gt;User installs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#virtual-environments" id="id15"&gt;Virtual environments&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#tools-and-management" id="id16"&gt;Tools and management&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installation-and-usage" id="id17"&gt;Installation and usage&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#upgrading-and-moving" id="id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#packages-with-c-extensions-binary" id="id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#other-stuff" id="id20"&gt;Other stuff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#editors-and-ides" id="id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#update-history" id="id22"&gt;Update history&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="glossary-and-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id2"&gt;Glossary and questions&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="python-versions-2-vs-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Python community has undergone sort of a &lt;em&gt;schism&lt;/em&gt; in recent years. Python
3, released in 2008, broke backwards compatibility: deprecated some bad
constructs and libraries (eg. &lt;code class="docutils literal"&gt;raw_input()&lt;/code&gt; became &lt;code class="docutils literal"&gt;input()&lt;/code&gt; and the
original Python 2 function that ran code input by users is gone; &lt;code class="docutils literal"&gt;print()&lt;/code&gt;
became a function; many things that returned lists now are iterators — &lt;code class="docutils literal"&gt;zip&lt;/code&gt;,
&lt;code class="docutils literal"&gt;range&lt;/code&gt;), and completely remodelled strings (which are now Unicode by
default, and the interpreter behavior is stricter when the wrong type is used)&lt;/p&gt;
&lt;p&gt;For new code, you should use Python 3. &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Most popular packages support Python 3&lt;/a&gt;, and many of them support both Pythons at
the same time. The early bugs were ironed out in the first few point releases,
some features that made porting easier were added (back).&lt;/p&gt;
&lt;p&gt;But what if you end up needing Python 2 later? No problem: you can learn the
differences in a short time, and with the help of a few libraries (eg. &lt;code class="docutils literal"&gt;six&lt;/code&gt;)
you can easily write code that is compatible with Python 2 and 3 at the same
time, using the same codebase (most libraries out there do that).&lt;/p&gt;
&lt;p&gt;Python 2 will go EOL and lose official support and updates in 2020.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/Python2orPython3"&gt;Python 2 or Python 3 on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-run-multiple-pythons-on-the-same-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes. Note that multiple Python interpreters are completely separate: they have
their own pip and packages, and you can’t run Python 2 code in a Python 3
interpreter. You need to specify which interpreter to use when installing
packages and running some scripts (eg. &lt;code class="docutils literal"&gt;pip2&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip3&lt;/code&gt; or &lt;code class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It’s best to limit yourself to the latest Python 2 and 3 versions. Python is
backwards-compatible within the major release, so Python 2.7 runs code
written with older 2.x versions in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id5"&gt;Implementations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A programming language is an abstract construct. To run code written in that
language, an interpreter or compiler needs to be written. In Python’s case,
there’s a plethora of implementations. Some of them are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt; is the reference implementation. This is the implementation
distributed on &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt; and as part of many operating systems.
Most Python features are first implemented in CPython, and then they are
ported to other implementations.  If you don’t know what to choose, use
CPython.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PyPy&lt;/strong&gt; is a fast implementation, written in a subset of Python. It’s compatible with
Python 2.7 and 3.5 (beta support). It can run all pure Python code, and many
extension libraries that use CFFI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;IronPython&lt;/strong&gt; is a .NET CLR implementation. It can integrate with .NET code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jython&lt;/strong&gt; is a Java JVM implementation. It can integrate with Java code, as
well as other JVM languages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Implementations on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="distributions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id6"&gt;Distributions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are also Python (CPython) distributions. They ship the CPython
interpreter and add some extra packages/features.  They are maintained by other
communities or corporate entities.&lt;/p&gt;
&lt;p&gt;The most popular third-party distribution is &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum Analytics. It’s popular
for data scientists, and includes over 100 packages, with extra pre-built
binaries available from the &lt;code class="docutils literal"&gt;conda&lt;/code&gt; package manager.&lt;/p&gt;
&lt;p&gt;I personally recommend to avoid Anaconda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Most packages have binary wheels for Windows, macOS and Linux (yes, Linux!)
making the installation as simple as &lt;code class="docutils literal"&gt;pip install numpy&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You waste disk space for packages Anaconda installs that you won’t ever need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s provided by some random for-profit company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ve seen bugs that were not reproducible outside of Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can still do data science using the official distribution. There’s
nothing special about Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDistributions"&gt;Python distributions on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-make-exe-files-from-python-programs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, you can. There are tools for this — &lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is the best one. Note that you usually need to
run it on the destination operating system. And remember that “compiling” to
exe files like that &lt;strong&gt;is not&lt;/strong&gt; a security measure — your source code is still
easily recoverable. (It’s not a security measure in other languages either,
even if getting source code back might be more expensive/tricky in those.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-learn-python-where-to-get-help"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of learning material is important. If you get a bad book, it might
discourage you from learning (because it’s boring), or may teach you
bad/outdated practices.&lt;/p&gt;
&lt;p&gt;If you can already program in another language, I recommend the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official
Python tutorial&lt;/a&gt;. For newcomers to
programming, I recommend &lt;a class="reference external" href="http://greenteapress.com/wp/think-python-2e/"&gt;Think Python&lt;/a&gt; or &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff
with Python&lt;/a&gt;.  They teach Python 3, and
(mostly) best practices.&lt;/p&gt;
&lt;p&gt;If you need help, try &lt;code class="docutils literal"&gt;#python&lt;/code&gt; on freenode IRC, the &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/tutor"&gt;Tutor&lt;/a&gt; or &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list"&gt;Python-list&lt;/a&gt; mailing lists, or a bunch of other communities. (I’m a regular on &lt;code class="docutils literal"&gt;#python&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id9"&gt;Installing Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This guide will focus on installing CPython 2.7 and 3.x (latest), using the standard
distribution. This choice is satisfactory for most people. Third-party
distributions, while handy in some cases, are not needed for most. (See
&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#distributions"&gt;Distributions&lt;/a&gt; for arguments)&lt;/p&gt;
&lt;p&gt;Throughout this guide, I’ll refer to the Python interpreter executable as
&lt;code class="docutils literal"&gt;python&lt;/code&gt;. The exact name depends on your system and desired version. On most
OSes, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 2 and &lt;code class="docutils literal"&gt;python3&lt;/code&gt; is 3; &lt;code class="docutils literal"&gt;python2&lt;/code&gt; should also
exist.  On Arch Linux, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 3. On Windows, use the &lt;code class="docutils literal"&gt;py&lt;/code&gt;
launcher.&lt;/p&gt;
&lt;div class="section" id="windows"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id10"&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Download the installer(s): &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those installers come with &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, and modern Python 3.x versions come with
the &lt;code class="docutils literal"&gt;py&lt;/code&gt; launcher.  You can use that launcher to pick a specific Python
version, eg.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2&lt;/span&gt; somefile.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2.7&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py&lt;/code&gt; (default system version)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s recommended for most use, and mandatory for upgrading pip.&lt;/p&gt;
&lt;p&gt;The 32-bit versions are more versatile. Most packages support both (the only
exception I’m aware of is Tensorflow, which only allows 64-bit Python 3.5 as of
now).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="macos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id11"&gt;macOS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS ships with Python 2.7.10 (as of macOS Sierra). It’s not the latest
version; it’s good enough for most people, but I still recommend installing
your own (the system Python doesn’t include &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, for example). You can
install the latest 2.7 version, as well as Python 3, using a package manager. I
recommend Homebrew — it’s the most popular solution, and lets you install many
other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use the python.org installers: they do not have uninstallers, so you
will have outdated versions lying around after some time. There is no
auto-update as well.  &lt;strong&gt;DO NOT&lt;/strong&gt; attempt to remove the system-installed Python,
this will only damage your system and you’ll need to reinstall.&lt;/p&gt;
&lt;p&gt;If you already have a package manager installed (MacPorts, Fink), don’t install
a new one and just use the existing one.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;brew install python python3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should now have &lt;code class="docutils literal"&gt;python&lt;/code&gt;, &lt;code class="docutils literal"&gt;python3&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To update Homebrew and Python, run &lt;code class="docutils literal"&gt;brew update&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-and-other-unix-like-oses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On Linux, there usually are good enough packages in your OS repositories. You
should be able to install the appropriate package for Python (2 and/or 3).
Most (if not all) distributions require Python — &lt;strong&gt;do not&lt;/strong&gt; remove the
pre-installed packages, and be careful not to overwrite them with something
newer.&lt;/p&gt;
&lt;p&gt;If the version that ships with your distribution is too old, there are some
options. There might be some repositories with better versions, eg. the
&lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes PPA&lt;/a&gt;
for Ubuntu. Then there’s the other option of compiling Python. There
are some tools to help with this, like &lt;code class="docutils literal"&gt;pyenv&lt;/code&gt; or &lt;code class="docutils literal"&gt;pythonz&lt;/code&gt; (they can also
manage multiple Python versions), or you can do it manually.
The instructions depend on your exact requirements, but here’s a summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;a class="reference external" href="https://www.python.org/downloads/source/"&gt;source distribution from Python.org&lt;/a&gt; and unpack it. Go into the unpacked source directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure you’ve got a functional C compiler and Python’s dependencies. You can
usually use your system’s package manager to install the build dependencies
of your system Python. Some dependencies are optional (eg. &lt;code class="docutils literal"&gt;sqlite3&lt;/code&gt;
requires SQLite headers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=/opt/python3.6&lt;/span&gt;&lt;/code&gt; and then &lt;code class="docutils literal"&gt;make&lt;/code&gt;. (You may add other options to both. It will
take a while.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;make altinstall&lt;/code&gt; as root. Avoid &lt;code class="docutils literal"&gt;make install&lt;/code&gt;, as it can override
&lt;code class="docutils literal"&gt;python&lt;/code&gt; executables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember: compiling Python should be considered a &lt;strong&gt;last resort&lt;/strong&gt;, unless you
have very specific Python version requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id13"&gt;Installing packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install third-party packages, you should use pip, the Python package
manager. If you’re using Windows or macOS (from Homebrew), pip is included with
your copy of Python.  If you’re on Linux and installed Python from a system
repository, install the correct system package (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-pip&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/code&gt;). If you compiled your own Python, pip is also included.&lt;/p&gt;
&lt;p&gt;To run pip, use &lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (Windows), &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (other platforms),
or the short &lt;code class="docutils literal"&gt;pip&lt;/code&gt;/&lt;code class="docutils literal"&gt;pip3&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEVER use sudo pip.&lt;/strong&gt; This can cause numerous problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;conflicts between packages installed by pip and your system package
manager&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip modifying system packages, leading to issues when updating them, or
breaking dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no isolation between package versions, which is sometimes needed to satisfy
dependencies&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package install is specific to the Python interpreter used to run
&lt;code class="docutils literal"&gt;pip&lt;/code&gt;. Packages installed to a virtualenv are separate from system packages;
packages installed for “global” Python 2.7 are separate from 3.6 packages.
Virtual environments generally don’t use the system packages, unless
specifically enabled during creation.&lt;/p&gt;
&lt;p&gt;Some distros have popular packages in their repositories. Sometimes they’re
good; in other cases they’re terribly outdated or they lack important
components, making package managers angry and sick of supporting a 2-year-old
version. (Especially since most bugs are closed with “we’ve fixed that long
ago”)&lt;/p&gt;
&lt;div class="section" id="user-installs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id14"&gt;User installs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a small scale, you can install packages with pip for a single user.  Use
&lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; PACKAGE&lt;/code&gt; to do this. If your package installs &lt;a class="reference external" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/"&gt;scripts&lt;/a&gt;,
they will be installed to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt; on Linux, and
&lt;code class="docutils literal"&gt;~/Library/Python/X.Y/bin&lt;/code&gt; on macOS (X.Y is Python version), or you can use
&lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/code&gt; if the package supports it.&lt;/p&gt;
&lt;p&gt;For most people and projects, virtual environments are better. There are,
however, use cases for putting some packages user-wide — if you don’t work on
projects, but instead are doing one-off research projects, those are better
suited by user-wide installs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id15"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p class="lead"&gt;I wrote a newer, more detailed post about virtualenvs: &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/"&gt;Python Virtual
Environments in Five Minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Virtual environments are the best way to install and manage Python packages.
Advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Isolation of projects and their requirements: if one app/package requires
library version X, but another requires version Y, they can live in separate
virtual environments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Independent from system-wide packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lightweight (an empty virtualenv is about 10 MB)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple to re-create in any place (&lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; → &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tools-and-management"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id16"&gt;Tools and management&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are two tools to facilitate creation of virtual environments: the older
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; project, and the newer
&lt;code class="docutils literal"&gt;venv&lt;/code&gt; module. The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is shipped with Python 3.x; some
distributions may put it in a separate package or remove it altogether. Use
whichever works for you.  Virtualenv is compatible with more Python versions
and cannot be broken by incompetent OS package maintainers (&lt;code class="docutils literal"&gt;venv&lt;/code&gt; requires
an extra package on Debian).&lt;/p&gt;
&lt;p&gt;There are multiple schools of thought regarding virtualenv placement and
content. Myself, I use &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to manage virtualenvs
and put them in &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;. Other people put virtualenvs inside their
git repositories (but they &lt;em&gt;must&lt;/em&gt; be in &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;) Virtualenvs should only contain packages
installed with &lt;code class="docutils literal"&gt;pip&lt;/code&gt; so they can be recreated quickly.&lt;/p&gt;
&lt;p&gt;I also use the &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; plugin for Oh My Zsh, which also
activates virtualenvs with the same name as a git repo, or the environment
named by a &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-and-usage"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id17"&gt;Installation and usage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install virtualenv user-wide, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;. You can
then use it with &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; virtualenv DIRECTORY&lt;/code&gt;. You may pass extra
options, eg. interpreter to use (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; python3&lt;/code&gt;). Sometimes you need to install
virtualenv for every Python version; usually, one copy is enough.&lt;/p&gt;
&lt;p&gt;How to use them? This is a subject of heated debate in the Python community.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Some people believe that activating (&lt;code class="docutils literal"&gt;source bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;Scripts\activate&lt;/code&gt; on Windows) is the right thing to do and simplifies work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others think that you should use &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; (or other scripts in that
directory) directly, as activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper
variables — those variables are not mandatory for operation, running
the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others still think &lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;virtualenvs should be used in subshells&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, if activating virtualenvs works in your environment, you should
do it — it’s the most convenient option. There are, however, cases when
activation fails, or is otherwise impossible — calling &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; directly
is your best bet in that case. If you are working inside shell scripts, do not
activate virtualenvs.  I’m not a fan of the subshell option, because it
complicates stuff if you work on multiple projects, and requires tracking usage
manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrading-and-moving"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Upgrading the system Python may make your virtualenvs unusable.
For patch version upgrades, you can just update symlinks (see &lt;a class="reference external" href="https://github.com/Kwpolska/scripts/blob/master/fix-venvs.sh"&gt;fix-venvs.sh&lt;/a&gt;).
However, if the minor version changes, it’s best to re-create the virtualenv
(you need to create &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; ahead of time).&lt;/p&gt;
&lt;p&gt;You cannot move a virtualenv between directories/machines or rename
virtualenvs. You need to use &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;, create a new
virtualenv, and run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; (you can then delete
the old environment with a simple &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packages-with-c-extensions-binary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The situation improved drastically in the past year or so. Nowadays, almost
all packages have a pre-compiled package available in PyPI. Those packages work
for Windows, macOS, and Linux. There are packages for some of the most
common &lt;em&gt;offenders&lt;/em&gt;, including Pillow, lxml, PyQt5, numpy… However, there might
still be packages without wheels on PyPI.&lt;/p&gt;
&lt;p&gt;If there is no wheel for a package and you are on Windows, check out &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph
Gohlke’s unofficial binaries&lt;/a&gt;.
If you can’t find any wheels online, you would have to resort to compiling it
manually — this requires installing Visual Studio (Visual C++) in a version
that matches your Python, and it’s kind of a pain to do.&lt;/p&gt;
&lt;p&gt;If you are not on Windows, you must install a C compiler and toolchain.
If you get a warning about missing &lt;code class="docutils literal"&gt;Python.h&lt;/code&gt;, install the appropriate development
package — for example, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-dev&lt;/span&gt;&lt;/code&gt;) on Debian/Ubuntu,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-devel&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-devel&lt;/span&gt;&lt;/code&gt; on RHEL/Fedora. The package you’re trying
to install might have other dependencies that you need to install (the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-dev(el)&lt;/span&gt;&lt;/code&gt; part is important, too)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id20"&gt;Other stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re working on a project, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-e&lt;/span&gt; .&lt;/code&gt; inside the project
directory to install the package in your environment in development (editable)
mode. This loads code directly from your repository — you don’t need to
re-install on every change; you might need to re-install when your version
number changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="editors-and-ides"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another important thing a developer should take care of is the choice of an
editor. This is an important decision, and is the reason for many holy wars in
the programmer community.&lt;/p&gt;
&lt;p&gt;A good editor should have syntax highlighting for all languages you need to
work with. It should also have features like visual block/multiple selections,
sophisticated find-and-replace, file finding, code completion, and many more minor
but helpful features.&lt;/p&gt;
&lt;p&gt;Then there’s the difference between IDEs and text editors. Text editors are
simpler, whereas IDEs try to include many extra things not necessarily related
to writing code. IDEs often use more resources, but you won’t notice it with a
modern computer (especially with a SSD).&lt;/p&gt;
&lt;p&gt;The best IDE out there is &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from
JetBrains. It has both a free Community and paid Professional edition. The
JetBrains folks are experts at IDEs — they have fully-fledged tools for many
languages. Their Python solution offers a plethora of options that aid
programmers in their work.  Also, if you work with Java, or otherwise more than
one IDEA-supported language, then install IntelliJ IDEA and the Python plugin
(which has the same features as PyCharm).  Students can get &lt;a class="reference external" href="https://www.jetbrains.com/student/"&gt;free
Professional/Ultimate licenses for JetBrains products&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also spend a lot of time in &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; (&lt;a class="reference external" href="https://neovim.io/"&gt;neovim&lt;/a&gt;/&lt;a class="reference external" href="http://vimr.org/"&gt;VimR&lt;/a&gt; to be precise). Vim is the
most powerful text editor out there, and with the right set of plugins it can
beat IDEs at speed and productivity. Vim has a steep learning curve, but it’s
worth it — you can do large changes with just a few keystrokes. Vim is
considered so good that many IDEs (Visual Studio, IntelliJ IDEA/PyCharm) have
Vim emulation plugins.&lt;/p&gt;
&lt;p&gt;Another option is &lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; — it’s
a text editor, but can offer many IDE-like features with the right set of
plugins. It’s Electron-based architecture, or effectively being based on top of
Google’s Chromium, is unfortunate and can lead to terrible performance on
lower-end machines, and on higher-end ones in some cases. (In my experience,
it’s better than Atom.) You can also try &lt;a class="reference external" href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; ($80).&lt;/p&gt;
&lt;p&gt;But really, almost any editor will do. But please &lt;strong&gt;avoid&lt;/strong&gt; IDLE, the editor
included with Python. It lacks some of the most basic things — it doesn’t even
have an option to show line numbers. Not to mention its ugliness. Also, don’t
use Notepad and TextEdit. Those are too simple, and Notepad has encoding
issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id22"&gt;Update history&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;2018-09-21&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Link to python-virtual-environments post.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-19&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Better description of problems caused by using sudo pip.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-10&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Added notes about not removing built-in Pythons.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-07&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Spelling fixes and updates to the virtualenv usage section.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><guid>https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/</guid><pubDate>Mon, 03 Jul 2017 10:40:00 GMT</pubDate></item><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id3" id="id1"&gt;1&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id4" id="id2"&gt;2&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;mirroring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;screen resolution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dock position and icon size&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id3"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>app</category><category>Apple</category><category>display</category><category>programming</category><category>projects</category><category>Swift</category><guid>https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item></channel></rss>