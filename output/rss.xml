<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Blog)</title><link>https://chriswarrick.com/</link><description>A blog about everything and nothing.</description><atom:link href="https://chriswarrick.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 24 Jun 2017 19:07:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id3" id="id1"&gt;[1]&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id4" id="id2"&gt;[2]&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mirroring&lt;/li&gt;
&lt;li&gt;screen resolution&lt;/li&gt;
&lt;li&gt;dock position and icon size&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>app</category><category>Apple</category><category>display</category><category>programming</category><category>projects</category><category>Swift</category><guid>https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item><item><title>Unix locales vs Unicode (‘ascii’ codec can’t encode character…)</title><link>https://chriswarrick.com/blog/2017/06/18/unix-locales-vs-unicode/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You might get unusual errors about Unicode and inability to convert
to ASCII. Programs might just crash at random. Those are often simple to fix —
all you need is correct locale configuration.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p class="lead"&gt;Has this ever happened to you?&lt;/p&gt;
&lt;pre class="code pytb"&gt;&lt;a name="rest_code_746ad4e9a2af4492a0f0bd8940cba914-1"&gt;&lt;/a&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;a name="rest_code_746ad4e9a2af4492a0f0bd8940cba914-2"&gt;&lt;/a&gt;  File &lt;span class="nb"&gt;"aogonek.py"&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_746ad4e9a2af4492a0f0bd8940cba914-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0105&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_746ad4e9a2af4492a0f0bd8940cba914-4"&gt;&lt;/a&gt;&lt;span class="gr"&gt;UnicodeEncodeError&lt;/span&gt;: &lt;span class="n"&gt;'ascii' codec can't encode character '\u0105' in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_264b5b4d11bf4feaa500f8bdfef2928b-1"&gt;&lt;/a&gt;Nikola: Could not guess locale for language en, using locale C
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_d8618b0b268b42a5bbe1238ec49d147f-1"&gt;&lt;/a&gt;Input: ą
&lt;a name="rest_code_d8618b0b268b42a5bbe1238ec49d147f-2"&gt;&lt;/a&gt;Desired ascii(): '\u0105'
&lt;a name="rest_code_d8618b0b268b42a5bbe1238ec49d147f-3"&gt;&lt;/a&gt;Real ascii(): '\udcc4\udc85'
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_869e9166c1404632b4c09f1c3d7974b7-1"&gt;&lt;/a&gt;perl: warning: Setting locale failed.
&lt;a name="rest_code_869e9166c1404632b4c09f1c3d7974b7-2"&gt;&lt;/a&gt;perl: warning: Please check that your locale settings:
&lt;a name="rest_code_869e9166c1404632b4c09f1c3d7974b7-3"&gt;&lt;/a&gt;    [...]
&lt;a name="rest_code_869e9166c1404632b4c09f1c3d7974b7-4"&gt;&lt;/a&gt;    are supported and installed on your system.
&lt;a name="rest_code_869e9166c1404632b4c09f1c3d7974b7-5"&gt;&lt;/a&gt;perl: warning: Falling back to the standard locale ("C").
&lt;/pre&gt;&lt;p class="lead"&gt;All those errors have the same root cause: incorrect locale configuration.
To fix them all, you need to generate the missing locales and set them.&lt;/p&gt;
&lt;div class="section" id="check-currently-used-locale"&gt;
&lt;h2&gt;Check currently used locale&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;locale&lt;/tt&gt; command (without arguments) should tell you which locales you’re
currently using.  (The list might be shorter on your end)&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-1"&gt;&lt;/a&gt;$ locale
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_CTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NUMERIC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_COLLATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-7"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MONETARY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-8"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MESSAGES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-9"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_PAPER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-10"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TELEPHONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MEASUREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_IDENTIFICATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_b4c80b627b49440a9177769715ce6a51-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If any of those is set to &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;POSIX&lt;/tt&gt;, has a different encoding than
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;UTF-8&lt;/span&gt;&lt;/tt&gt; (sometimes spelled &lt;tt class="docutils literal"&gt;utf8&lt;/tt&gt;) is empty (with the exception of
&lt;tt class="docutils literal"&gt;LC_ALL&lt;/tt&gt;), or if you see any errors, you need to reconfigure your locale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="check-locale-availability-and-install-missing-locales"&gt;
&lt;h2&gt;Check locale availability and install missing locales&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is check locale availability. To do this, run
&lt;tt class="docutils literal"&gt;locale &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;. This will produce a list of all installed locales.  You can use
&lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; to get a more reasonable list.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a38bc857a2794a3cbaa118a1ed368a5c-1"&gt;&lt;/a&gt;$ locale -a | grep -i utf
&lt;a name="rest_code_a38bc857a2794a3cbaa118a1ed368a5c-2"&gt;&lt;/a&gt;&amp;lt;lists all UTF-8 locales&amp;gt;
&lt;a name="rest_code_a38bc857a2794a3cbaa118a1ed368a5c-3"&gt;&lt;/a&gt;$ locale -a | grep -i utf | grep -i en_US
&lt;a name="rest_code_a38bc857a2794a3cbaa118a1ed368a5c-4"&gt;&lt;/a&gt;en_US.UTF-8
&lt;/pre&gt;&lt;p&gt;The best locale to use is the one for your language, with the UTF-8 encoding.
The locale will be used by some console apps for output. I’m going to use
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;en_US.UTF-8&lt;/span&gt;&lt;/tt&gt; in this guide.&lt;/p&gt;
&lt;p&gt;If you can’t see any UTF-8 locales, or no appropriate locale setting for your
language of choice, you might need to generate those. The required actions
depend on your distro/OS.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Debian, Ubuntu, and derivatives: install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;language-pack-en-base&lt;/span&gt;&lt;/tt&gt;, run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;dpkg-reconfigure&lt;/span&gt; locales&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;RHEL, CentOS, Fedora: install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;glibc-langpack-en&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: uncomment relevant entries in &lt;tt class="docutils literal"&gt;/etc/locale.gen&lt;/tt&gt; and run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;locale-gen&lt;/span&gt;&lt;/tt&gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Locale"&gt;(wiki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For other OSes, refer to the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need a UTF-8 locale to ensure compatibility with software. Avoid the &lt;tt class="docutils literal"&gt;C&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;POSIX&lt;/tt&gt; locales (it’s ASCII) and locales with other encodings (those
aren’t used by ~anyone these days)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-system-wide"&gt;
&lt;h2&gt;Configure system-wide&lt;/h2&gt;
&lt;p&gt;On some systems, you may be able to configure locale system-wide.  Check your
system documentation for details. If your system has systemd, run&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_04901a5243fe4deca7a64fa7f603f5bb-1"&gt;&lt;/a&gt;sudo localectl set-locale LANG=en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configure-for-a-single-user"&gt;
&lt;h2&gt;Configure for a single user&lt;/h2&gt;
&lt;p&gt;If your environment does not allow system-wide locale configuration (macOS,
shared server with generated but unconfigured locales), or if you want to
ensure it’s always configured independently of system settings.&lt;/p&gt;
&lt;p&gt;To do this, you need to edit the configuration file for your shell. If you’re
using bash, it’s &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; on macOS). For zsh users,
&lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt;.  Add this line (or equivalent in your shell):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c22f8a4c752a4914ad6ae0a88f8f616d-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/pre&gt;&lt;p&gt;That should be enough. Note that those settings don’t apply to programs
not launched through a shell.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;&lt;strong&gt;Python/Windows corner:&lt;/strong&gt; Python 3.7 will fix this on Unix by assuming UTF-8
if it encounters the C locale.  On Windows, Python 3.6 is using UTF-8
interactively, but not when using shell redirections to files or pipes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post was brought to you by ą — U+0105 LATIN SMALL LETTER A WITH OGONEK.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>guide</category><category>locale</category><category>Python</category><category>Unicode</category><category>Unix</category><guid>https://chriswarrick.com/blog/2017/06/18/unix-locales-vs-unicode/</guid><pubDate>Sun, 18 Jun 2017 18:40:00 GMT</pubDate></item><item><title>Apple’s new pricing strategy: don't buy the 12″ MacBook</title><link>https://chriswarrick.com/blog/2017/06/08/apples-new-pricing-strategy-dont-buy-the-12-macbook/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;On Monday, Apple announced some changes to its Mac lineup. All MacBooks (even
the Air) got CPU upgrades, and the starting price of a MacBook Pro (13″, no
Touch Bar) went down to US$1299. Which makes the 12-inch model effectively
pointless.&lt;/p&gt;
&lt;p&gt;A quick spec comparison reveals that the Pro comes with a much better CPU, GPU,
screen, camera — the only drawback is the storage space.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If you look at the cheapest MacBook in each category, you end up with this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;13″ Air, $999&lt;/li&gt;
&lt;li&gt;12″, &lt;strong&gt;$1299&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;13″ Pro, &lt;strong&gt;$1299&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;13″ Pro with Touch Bar, $1799&lt;/li&gt;
&lt;li&gt;15″ Pro with Touch Bar, $1299&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, this is correct: a 12″ MacBook costs the same as a 13″ Pro. But is it really true? Let's compare the specs:&lt;/p&gt;
&lt;table border="1" class="table table-striped docutils"&gt;
&lt;colgroup&gt;
&lt;col width="31%"&gt;
&lt;col width="29%"&gt;
&lt;col width="40%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Device&lt;/th&gt;
&lt;th class="head"&gt;MacBook (12″)&lt;/th&gt;
&lt;th class="head"&gt;MacBook Pro (13″, no Touch Bar)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;Intel Core m3, 1.2 GHz&lt;/td&gt;
&lt;td&gt;Intel Core i5, 2.3 GHz ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Memory&lt;/td&gt;
&lt;td&gt;8 GB&lt;/td&gt;
&lt;td&gt;8 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Storage&lt;/td&gt;
&lt;td&gt;256 GB ★&lt;/td&gt;
&lt;td&gt;128 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Ports&lt;/td&gt;
&lt;td&gt;1 USB-C&lt;/td&gt;
&lt;td&gt;2 Thunderbolt 3 (USB-C) ★★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Camera&lt;/td&gt;
&lt;td&gt;480p&lt;/td&gt;
&lt;td&gt;720p ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Screen size&lt;/td&gt;
&lt;td&gt;12″&lt;/td&gt;
&lt;td&gt;13″ ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;External displays&lt;/td&gt;
&lt;td&gt;1×4K&lt;/td&gt;
&lt;td&gt;1×5K/2×4K/2×UHD ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;GPU&lt;/td&gt;
&lt;td&gt;Intel HD Graphics 615&lt;/td&gt;
&lt;td&gt;Intel Iris Plus Graphics 640 ★&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Size (height×width×depth)&lt;/td&gt;
&lt;td&gt;0.35–1.31×28.05×19.65 cm&lt;/td&gt;
&lt;td&gt;1.49×30.41×21.24 cm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Weight&lt;/td&gt;
&lt;td&gt;0.92 kg ★&lt;/td&gt;
&lt;td&gt;1.37 kg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Available in Gold/Rose Gold&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For $0 extra, you can get a device with a &lt;strong&gt;much&lt;/strong&gt; better CPU, 2 Thunderbolt 3 ports, a (slightly) larger screen, a better front-facing camera, support for larger/more displays. The “price” for this? Only less storage space, 0.45 kg (roughly 1 lb) of weight. And no gold color options.&lt;/p&gt;
&lt;p&gt;To me, this screams “don’t buy the 12-inch thing” — you can get much more &lt;em&gt;computer&lt;/em&gt; for the same price. And the CPUs in those computers are pretty poor. Last year’s base model is beaten in &lt;a class="reference external" href="https://browser.primatelabs.com/mac-benchmarks"&gt;benchmarks&lt;/a&gt; by much older (and cheaper) machines, eg. 2014’s MacBook Air, 11″ base model in single-core benchmarks and upgraded 2015 Airs in multi-core benchmarks.&lt;/p&gt;
&lt;p&gt;And even if you don’t care about the CPU, there are also other things, like the better camera, or two ports that support more devices. If you want a computer that lets you stay productive, and want a Mac, don’t even try buying the 12″ MacBook &lt;strong&gt;Abomination&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>Apple</category><category>Mac</category><category>MacBook</category><category>MacBook Pro</category><guid>https://chriswarrick.com/blog/2017/06/08/apples-new-pricing-strategy-dont-buy-the-12-macbook/</guid><pubDate>Thu, 08 Jun 2017 17:35:00 GMT</pubDate></item><item><title>Structuring and automating a Python project with the Python Project Template</title><link>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;To create a project that other people can use and contribute to, you need to
follow a specific directory structure. Moreover, releasing a new version should
be as simple and painless as possible. For my projects, I use a template that
has the structure already in place, and comes with automation for almost every
part of a release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project Template&lt;/a&gt; is my approach to this. It comes with a good (IMO) structure and automation.&lt;/p&gt;
&lt;p&gt;What does it include? A whole lot of things. Documentation, Sphinx
configuration, a simple test suite, a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file, some AUR stuff, and
perhaps the most important part — the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. It can automate a lot
of tasks that are part of a release.&lt;/p&gt;
&lt;p&gt;You see, releasing a package is error-prone. There are a lot of things that can go wrong:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Version numbers. They may appear in code comments, Sphinx configuration,
README files and documentation, and setup.py. Some people claim to have
“solutions” for this. Most of those solutions don’t work right — either they
import a file from the project (which may break if &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; is too
magical), read a file from that place (which might not get included
properly), or use some setuptools extension to get the version from VCS or
whatever (which needs to be installed before the package). Using &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; to
fix the version numbers is much simpler.&lt;/li&gt;
&lt;li&gt;Forgetting about changelogs.&lt;/li&gt;
&lt;li&gt;Not updating translations or other important files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve had quite a few botched releases in the &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; project. I wrote a
&lt;a class="reference external" href="http://getnikola.github.io/releng/checklist.html"&gt;checklist&lt;/a&gt; to prevent things like those. You may notice that the most
prominent step is to run a &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. This step replaced 21 others —
now the checklist only talks about writing announcements, sending e-mails,
updating the website, and doing some GitHub stuff that is not yet automated.&lt;/p&gt;
&lt;p&gt;The template promotes a &lt;em&gt;release early, release often&lt;/em&gt; workflow: since making a
new release requires almost no human intervention, you might as well do it
every time you make a bunch of changes. In my projects, &lt;em&gt;everything&lt;/em&gt; gets
automated, and it might as well be possible in yours.&lt;/p&gt;
&lt;div class="section" id="the-complete-feature-list-as-of-v2-1-5"&gt;
&lt;h2&gt;The complete feature list (as of v2.1.5)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pre-configured Sphinx with:&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;CONTRIBUTING.rst&lt;/tt&gt; guide (used by GitHub when sending a pull request or an issue)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;LICENSE.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;an empty &lt;tt class="docutils literal"&gt;CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;a bare-bones &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt; page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The exact same files in &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;, which are fragile and &lt;strong&gt;MAY NOT&lt;/strong&gt; be modified
as they are replaced with copies in &lt;tt class="docutils literal"&gt;/docs&lt;/tt&gt; by the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;template.py&lt;/tt&gt; files in the Python package directory&lt;/li&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file that could be good enough for people, and that supports
&lt;tt class="docutils literal"&gt;entry_points&lt;/tt&gt; (see &lt;a class="reference external" href="https://go.chriswarrick.com/entry_points"&gt;https://go.chriswarrick.com/entry_points&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests/&lt;/tt&gt; containing some &lt;em&gt;Is My Python Sane?&lt;/em&gt;-style tests (using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;An automated global update script (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.pypt/PYPT-UPDATE&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Entry points configuration ready to be uncommented (and a matching
&lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; file)&lt;/li&gt;
&lt;li&gt;Add-ons for Qt users (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/Qt&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;A sample hook for AUR updates (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/AUR&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;PKGBUILDs for the Arch Linux User Repository (AUR)&lt;/li&gt;
&lt;li&gt;A state-of-the-art &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script, the operations of which are:&lt;ul&gt;
&lt;li&gt;querying the user for version number, commit message and changes&lt;/li&gt;
&lt;li&gt;updating &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;bumping the version number in all the files, changing dates where necessary&lt;/li&gt;
&lt;li&gt;copying over &lt;tt class="docutils literal"&gt;/docs/README.rst&lt;/tt&gt;,  &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/docs/CONTRIBUTING.rst&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;locale generation (via the &lt;tt class="docutils literal"&gt;.pypt/localegen&lt;/tt&gt; script)&lt;/li&gt;
&lt;li&gt;running &lt;tt class="docutils literal"&gt;import $PROJECTLC&lt;/tt&gt; and the test suite&lt;/li&gt;
&lt;li&gt;uploading a source distribution and a wheel to PyPI&lt;/li&gt;
&lt;li&gt;Making a Git commit and tagging the release&lt;/li&gt;
&lt;li&gt;creating a GitHub Releases entry&lt;/li&gt;
&lt;li&gt;updating the AUR packages (by using hooks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;
&lt;a href="https://github.com/Kwpolska/python-project-template" class="btn btn-lg btn-info"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Check it out on GitHub&lt;/a&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>guide</category><category>Nikola</category><category>projects</category><category>PyPT</category><category>Python</category><guid>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</guid><pubDate>Sun, 09 Apr 2017 09:00:00 GMT</pubDate></item><item><title>CSV is not a standard</title><link>https://chriswarrick.com/blog/2017/04/07/csv-is-not-a-standard/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;CSV is not a standard. What does that really mean for anyone using that format?
The file’s recipient may be unable to read it the way you intended. Separators,
decimal marks, escaping and encodings are all problems — and Excel does them
all pretty badly.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;So first, some people might claim that &lt;a class="reference external" href="http://www.ietf.org/rfc/rfc4180.txt"&gt;RFC 4180&lt;/a&gt; is the CSV standard. Those
people also have not read the document they’re referring to. It states:&lt;/p&gt;
&lt;blockquote&gt;
This memo provides information for the Internet community.  It does
not specify an Internet standard of any kind.&lt;/blockquote&gt;
&lt;p&gt;The problem with this is the fact that a &lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt; file does not mean much. There
are a few problems. The first question is,&lt;/p&gt;
&lt;blockquote&gt;
What is the field separator? Is it a comma or a semicolon?&lt;/blockquote&gt;
&lt;p&gt;Hey, wait a minute, doesn’t the file format/extension stand for
&lt;em&gt;comma-separated values&lt;/em&gt;? Yes, it does. But that does not matter in the
slightest. You see, Microsoft Excel — which most people will use to read/write
their CSV files — makes this decision based on the user locale settings. If the
OS is set to a locale where the comma is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Decimal_mark#Hindu.E2.80.93Arabic_numeral_system"&gt;decimal mark&lt;/a&gt; (eg. most of
Europe), the list separator is set to &lt;tt class="docutils literal"&gt;;&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;,&lt;/tt&gt; — and Excel uses
that.&lt;/p&gt;
&lt;p&gt;Of course, there’s also the TSV data format — those are tab-separated values.
And some people might name their TSV files &lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To read files saved in a different locale, or with a different separator, Excel
users need to change the file extension to &lt;tt class="docutils literal"&gt;.txt&lt;/tt&gt;, or go to Data → Get
External Data → From Text &lt;a class="reference external" href="https://support.office.com/en-us/article/Text-Import-Wizard-c5b02af6-fda1-4440-899f-f78bafe41857"&gt;(documentation)&lt;/a&gt; and use the import wizard. You
can’t double-click on files.&lt;/p&gt;
&lt;p&gt;On a side note, Apple Numbers guesses the format — one of the few things it
gets right. LibreOffice always asks the user to pick import settings, but by
default it uses tab AND comma AND semicolon for CSV files, which brings its own
host of problems.&lt;/p&gt;
&lt;p&gt;Here’s a quick test:&lt;/p&gt;
&lt;blockquote&gt;
What does &lt;tt class="docutils literal"&gt;foo;bar,baz;quux&lt;/tt&gt; mean? What about &lt;tt class="docutils literal"&gt;foo,bar;baz,quux&lt;/tt&gt;?&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;LibreOffice assumes it’s (Chinese) UTF-16 text, but after telling it the real encoding, both
files contain &lt;strong&gt;4 columns&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Microsoft Excel says one of the files contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other contains &lt;strong&gt;2 columns&lt;/strong&gt;
(which is which depends on locale)&lt;/li&gt;
&lt;li&gt;Apple Numbers says the first file contains &lt;strong&gt;3 columns&lt;/strong&gt; and the other
contains &lt;strong&gt;2 columns&lt;/strong&gt; if set to English, and both files contain &lt;strong&gt;3
columns&lt;/strong&gt; if set to Polish.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But let’s get back to gotchas:&lt;/p&gt;
&lt;blockquote&gt;
What is the decimal mark? Is it a dot or a comma?&lt;/blockquote&gt;
&lt;p&gt;That’s a direct consequence of the previous question. However, one can’t simply
assume &lt;tt class="docutils literal"&gt;comma/dot&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;semicolon/comma&lt;/tt&gt;, because users might do crazy
stuff.&lt;/p&gt;
&lt;blockquote&gt;
What is used to escape rows containing the field separator? Quotes?
Backslashes?  What is used to escape the escape character?&lt;/blockquote&gt;
&lt;p&gt;Excel, for example, puts some things in &lt;tt class="docutils literal"&gt;"quotes"&lt;/tt&gt;. If a literal quote
character appears in the spreadsheet, it’s represented as &lt;tt class="docutils literal"&gt;""&lt;/tt&gt;, and
the entire cell is quoted as well. But there might be programs that use
backslashes for escapes, or even bad code that does not consider the need of
escaping like this, with tragic results.&lt;/p&gt;
&lt;p&gt;There’s still one more thing to cover: encodings. You see, even though the TSV
format effectively solves the issues I named before, both CSV and TSV suffer
from one problem:&lt;/p&gt;
&lt;blockquote&gt;
Which encoding to use when reading this file?&lt;/blockquote&gt;
&lt;p&gt;I already mentioned that LibreOffice believed my sample file was UTF-16,
containing Chinese text — in reality, this file was UTF-8 (or ASCII).&lt;/p&gt;
&lt;p&gt;What does Microsoft Excel do then? It looks like it follows &lt;em&gt;System locale for
non-Unicode programs&lt;/em&gt;. While there is an encoding option hidden in the Save
dialog, it does not seem to affect the output. So what does that mean? You
can’t expect a CSV file that contains characters outside of your system locale
— or outside of ASCII if you’re working with people around the world — to look
right. Unless you’re on &lt;a class="reference external" href="https://answers.microsoft.com/en-us/msoffice/forum/msoffice_install-mso_win10/announcing-october-feature-update-for-office-2016/927eea90-eea3-479a-a78a-45f7612460e1"&gt;Excel 2016&lt;/a&gt; and Office 365 — if you have the October
2016 update, you can read and write UTF-8 files. But if you’re using an older
version of Excel, or you’re using a non-Office 365 license, tough luck.&lt;/p&gt;
&lt;p&gt;So, to reiterate: CSV can mean a lot of things. And you can’t trust it to work
well most of the time, unless you’re dealing with people in one country, all
using the same locale settings and software. Which is pretty unlikely. TSV
can work around most of the problems, but encodings are still troublesome.&lt;/p&gt;&lt;/div&gt;</description><category>CSV</category><category>Excel</category><category>Microsoft</category><category>Microsoft Office</category><guid>https://chriswarrick.com/blog/2017/04/07/csv-is-not-a-standard/</guid><pubDate>Fri, 07 Apr 2017 18:00:00 GMT</pubDate></item><item><title>5 months with a MacBook Pro: beautiful machine that just works</title><link>https://chriswarrick.com/blog/2016/12/28/5-months-with-a-macbook-pro-beautiful-machine-that-just-works/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Five months ago, I decided to make the switch from my trusty old desktop
computer, running Arch Linux, to a MacBook Pro. I picked the 2015 13" base
model with an upgraded hard drive. The device is beautiful, and just works™,
which is pretty important to me.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="mac-as-a-unix-machine-nothing-beats-a-terminal"&gt;
&lt;h2&gt;Mac as a UNIX® machine: nothing beats a terminal&lt;/h2&gt;
&lt;p&gt;What are the first things you should set up on a Mac, as a programmer?
&lt;a class="reference external" href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; (and Homebrew Cask). That’s a package manager
that can install all software necessary to create an useful command-line
environment, including Python, ffmpeg and sox for media needs, git, GCC (clang
is wonderful, but I need plain old GCC sometimes), zsh, and a handful of other
programs. And, of course, Vim.&lt;/p&gt;
&lt;p&gt;And what Homebrew Cask can do for you? Install many GUI programs, without
needing to mess with &lt;tt class="docutils literal"&gt;.dmg&lt;/tt&gt; installers or stuff.  Including web browsers, music
players, or iTerm2.&lt;/p&gt;
&lt;p&gt;Did I mention UNIX®, with the registered trademark sign (belongs to The Open
Group; used for informational purposes only)? macOS has a fancy certificate to
prove it’s compliant with the relevant specifications. It runs the FreeBSD
userland, which is what you expect from a typical *nix system. (Linux converts
might get slightly annoyed at behavioral differences, for example &lt;tt class="docutils literal"&gt;rm
directory &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/tt&gt; will work on Linux with GNU coreutils, but won’t on
macOS/FreeBSD)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-gui-beautiful-fluid-friendly"&gt;
&lt;h2&gt;The GUI: beautiful, fluid, friendly&lt;/h2&gt;
&lt;p&gt;macOS is famous for its user interface. The macOS GUI is well thought out, even
though there are some idiosyncrasies a long-time Linux/Windows user might
consider weird. For example, sorting folders before files is something natural
for Windows, but on macOS, it’s a brand new option — added in macOS Sierra,
which came out in September 2016.&lt;/p&gt;
&lt;p&gt;That aside, the macOS user interface makes one coherent product. You can expect
consistent behavior between apps, and that often extends to third-party
software. Apple has a document, called &lt;a class="reference external" href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/OSXHIGuidelines/index.html"&gt;Human Interface Guidelines&lt;/a&gt;, which
describes how a macOS app should behave. While there are some documents like
this one for Windows, you can see many apps ignoring what it says — including
eg. built-in software, which cannot even decide on which font to use (bitmap MS
Sans Serif vs vectorized Microsoft Sans Serif vs Segoe UI — what is going on?!)&lt;/p&gt;
&lt;p&gt;While the interface is friendly and coherent, it can get a little worse
when &lt;em&gt;foreign&lt;/em&gt; apps are involved — for example, Qt or wxWidgets apps can
sometimes differ in behavior, but that’s not noticeable. X11 apps are another
story, but most of their developers are not aware that someone is running them
on macOS. (Excluding the Inkscape developers, which have a Mac “app” that
basically runs it in X11 and they do not even care…)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="programming-old-habits-die-hard"&gt;
&lt;h2&gt;Programming: old habits die hard&lt;/h2&gt;
&lt;p&gt;Did I mention Vim? Well, I’m still using Vim and a terminal emulator to get a
lot of coding work done. Why? Because they are still the best ways to be
productive. I tried many &lt;em&gt;gooey&lt;/em&gt; solutions for coding, from the heavyweights
(PyCharm, Visual Studio) to the laughable Atom editor (famous for being slow,
and effectively a web browser) — and none of them was able to replace Vim and a
Terminal. They are far too addictive.&lt;/p&gt;
&lt;p&gt;That said, I sometimes use GitHub for Desktop, or other helper tools.
Sometimes, they work well — key word here is &lt;em&gt;sometimes&lt;/em&gt;. Unlike Vim (or
NeoVim, or a GUI: MacVim/VimR), which boosts my productivity by a lot.&lt;/p&gt;
&lt;p&gt;Honorable mention goes to Automator and AppleScript. They are a superb
solution for automating common tasks in the GUI, something other OSes do not
provide. With Automator, everyone can create a workflow to perform repetitive
tasks faster. With AppleScript, you can get even more stuff done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-trackpad-addictive"&gt;
&lt;h2&gt;The trackpad: addictive&lt;/h2&gt;
&lt;p&gt;Apple is famous for their trackpads. Their newest generation of these devices
does not really move when you click it, it uses the Taptic Engine and [insert
smart-sounding words here] to &lt;em&gt;simulate&lt;/em&gt; a click. It also supports Force Touch,
for pressing down harder on something (eg. a word to reveal dictionary
definitions), and haptic feedback for certain operations &lt;em&gt;(in Soviet Russia,
trackpad clicks you!)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Those trackpads also provide intuitive gestures. Working with
full-screen windows or multiple desktops? Just swipe left/right to switch
between them. Need to see all your windows? Swipe up with three fingers. Smooth
zoom, scrolling and rotating can also be done with just the trackpad.&lt;/p&gt;
&lt;p&gt;And recently I had to do some stuff on someone else’s Windows notebook. That
notebook features a touchpad that does not &lt;em&gt;click&lt;/em&gt; — it has two buttons on the
bottom, and tap to click is enabled. I had to drag and drop some files between
two windows. I tried doing it the way I got used on the MBP trackpad, which is
basically the way you’d do it with a mouse: hover cursor above file, click the
trackpad, move mouse to other windows, and release. That doesn’t work on those
non-clicky touchpads. A software developer failing at drag-and-drop must be a
funny thing to see. That’s just how addictive the trackpad is. (Of course,
Windows notebooks with clicky trackpads exist, but are not as popular as the
tappy ones.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="walled-garden-how-can-you-not-love-our-products"&gt;
&lt;h2&gt;Walled garden: how can you NOT love our products?&lt;/h2&gt;
&lt;p&gt;Of course, there are some issues with living in an Apple walled garden. The
main issue is: if you want to use something that is not an Apple product, good
luck with that. Sure, you can use an Android phone, but you won’t get
some of the nice Handoff features, and if you want to transfer files, have fun
using a forgotten barely-working app from 2012. That phone also won’t be able
to access your iCloud stuff, so put your data somewhere else.&lt;/p&gt;
&lt;p&gt;Do you want to use an external hard drive, or a USB stick? With other operating
systems? Well, you might have an issue with the file system. You can choose
between ExFAT, which is not popular but kinda does the job; FAT32, which has a
4GB file size limit (virtual disk images are often larger than that), or NTFS,
but for that you will need to pay a third-party company — and trust them not to
do anything nefarious. Or use experimental built-in support, or an open-source
project, both of which aren’t something one would normally trust with important
data.&lt;/p&gt;
&lt;p&gt;Speaking of external hard drives, here’s a hint: if you want to use a drive for
Time Machine (a wonderful, foolproof, one-click backup solution), and you want
it encrypted, make sure it uses GPT and not MBR. I had to reformat my drive
twice, and that’s not well documented (you need to click the help button,
then go through 3 pages to find a mention of this).&lt;/p&gt;
&lt;p&gt;Do you want to play some games? Well, there is basically no support for
gamepads, only some community beta drivers for the official PS3/Xbox 360 pads.
Apple does not care.&lt;/p&gt;
&lt;p&gt;And then we get to mouse issues. You see, even though the trackpad is awesome,
I also want to use a regular mouse. So I started with my old PC mouse, as a
temporary solution. The mouse was a Logitech M560, which uses the wireless
Unifying USB connector. It turns out the middle mouse button is supposed to be
a Windows button on one click and left mouse button on another, but Linux
drivers seem to change that behavior. To fix that, I’d need drivers for macOS.
Logitech believes this mouse is not worthy of a Mac, and so the mouse is not
detected by their driver suite. I got rid of that mouse and replaced it with a
Microsoft Sculpt Comfort Mouse. The mouse has a real middle button, which is
activated by clicking the scroll wheel, and a Windows button on the side
(generally useless on macOS).&lt;/p&gt;
&lt;p&gt;Sadly, macOS insists on scrolling in a weird accelerated way, where the number
of pixels scrolled grows over time — which means scrolling by one step means
scrolling by 5 pixels, but the longer you scroll, the larger the scroll
becomes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future-im-worried"&gt;
&lt;h2&gt;The future: I’m worried&lt;/h2&gt;
&lt;p&gt;I made the decision to buy the MacBook Pro in the middle of rumor season, after
WWDC which left a lot of people disappointed. I decided that, if all the rumors
about removed ports and touchy-feely screens were true, I would not want that
device on my desk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And boy did Apple deliver!&lt;/strong&gt; The new MacBook Pro has only USB-C ports (and a
headphone jack!), a gimmicky Touch Bar that only helps with emoji (the rest can
be done with standard keyboard shortcuts, or on-screen toolbars — I thought
that was a Pro machine, not a toy?), and a fingerprint reader (which I don’t
care about). And then there’s the cheaper model, with two USB-C ports and no
touch interfaces. My MBP, mainly a desktop replacement, is on AC power all the
time, and runs an external HDMI display. With the cheaper model (worse CPU than
2015; same price as 2015 with the same 256GB drive), I would have zero ports
for any other external devices. And I often have some thing plugged in, in
which case the only unoccupied ports are the Thunderbolt ports (which I don’t
have any devices for).&lt;/p&gt;
&lt;p&gt;So, I hope this 2015 model will live on for years, and hopefully when it fails,
Apple will have a more sensible machine out there. For now, I’ll keep my
&lt;em&gt;MacBook Pro (Retina, 13-inch, Early 2015)&lt;/em&gt; and will be pretty happy with it.&lt;/p&gt;
&lt;p&gt;With just only one exception: two kernel panics in nearly 5 months. A bit
unstable, eh?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Apple</category><category>MacBook Pro</category><category>programming</category><category>review</category><guid>https://chriswarrick.com/blog/2016/12/28/5-months-with-a-macbook-pro-beautiful-machine-that-just-works/</guid><pubDate>Tue, 27 Dec 2016 15:15:00 GMT</pubDate></item><item><title>Code writing code: Python and Vim as development aids</title><link>https://chriswarrick.com/blog/2016/05/27/code-writing-code-python-and-vim/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I was working on some C# and Java code. And along the way, I used
Python and Vim to (re)write my code. A small Python script and a 6-keystroke
Vim macro did it faster and better than a human would.&lt;/p&gt;
&lt;p&gt;Every programmer should learn a good scripting language and use a programmable
editor like Vim. Why? Here are two examples, after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="episode-i-inotifypropertychanged-or-python-writing-c"&gt;
&lt;h2&gt;Episode I: &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt;, or Python writing C#&lt;/h2&gt;
&lt;p&gt;I was building a private C# weekend project (that turned into a weeklong
project) — and by the way, WPF and C# are quite pleasant (Windows Forms is a
trainwreck, though). One of the things I used in that project was a DataGrid
bound to a list of custom objects (a DataGrid is a table, basically). And in
order to use it, you need to use the &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt; interface &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms229614(v=vs.100).aspx"&gt;(MSDN)&lt;/a&gt;.
It involves doing something like this:&lt;/p&gt;
&lt;pre class="code csharp"&gt;&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// can also be a field&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;[JsonProperty]&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;NotifyPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_2c1c55cf8c344104814127652265fd3c-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s 12 lines of code (excluding &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt; which comes from the
Json.NET library) for that pattern. Oh: and I need to do that for &lt;strong&gt;every&lt;/strong&gt;
field/property of my class, because otherwise any changes to them would not be
reflected in the tables (and maybe one or two fields were &lt;em&gt;not&lt;/em&gt; in the table).&lt;/p&gt;
&lt;p&gt;Doing that by hand is really not feasible: you need to copy-paste this
large block 14 times and take care of 5 instances of the name (3 with
underscores, 2 without), 2 instances of the type, and the &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt;
attribute (which does not appear on all properties).&lt;/p&gt;
&lt;p&gt;So, I used one of those intelligent computer things to do it for me. I wrote a
really simple &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script and ran it. And I ended up with all 14 fields built
for me.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py.html"&gt;code-writing-code/write_properties.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;public &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-4"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            get {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                return &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_;&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            set {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                if (value != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_) {&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ = value;&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    NotifyPropertyChanged("&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;");&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[JsonProperty]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;        '&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-25"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'1 string name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'0 int another'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 12 fields omitted for brevity&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Private definitions (internal)&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"        private &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ { get; set; }"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-35"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Public definitions (with notifications)&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-37"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_3731a4d605454e47b9bead863e5a798f-38"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That script takes a list of properties and spits out a block of code, ready to
be pasted into the code. Visual Studio has a nice &lt;em&gt;Insert File as Text&lt;/em&gt;
feature, so redirecting the output to a file and using that option is enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="episode-ii-fixing-argument-order-or-vim-re-writing-java"&gt;
&lt;h2&gt;Episode II: Fixing argument order, or Vim (re)writing Java&lt;/h2&gt;
&lt;p&gt;Another project, &lt;a class="reference external" href="https://github.com/Kwpolska/numbernamer"&gt;Number Namer&lt;/a&gt;, written in Java, and it does what it says on
the tin: takes a number and writes it out as words, while being multilingual and
extensible. I used Eclipse for this project, because it looks good, is really
helpful with its code linting, and does not run slowly on my aging system (I’m
looking at you, IntelliJ IDEA aka PyCharm aka Android Studio…)&lt;/p&gt;
&lt;p&gt;And so, I was building a test suite, using &lt;a class="reference external" href="http://junit.org/"&gt;JUnit&lt;/a&gt;. It’s pretty
straightforward, and I remember the syntax from Python’s unittest (even though
I write tests with &lt;a class="reference external" href="http://pytest.org/"&gt;pytest&lt;/a&gt; nowadays). Or so I thought.&lt;/p&gt;
&lt;pre class="code java"&gt;&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (incorrect)&lt;/span&gt;
&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (fixed)                              ^ cursor&lt;/span&gt;
&lt;a name="rest_code_c742e2e43a784072a8b2b8ef44d7d0cd-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You see, the typical Python spelling is &lt;tt class="docutils literal"&gt;self.assertEquals(actual,
expected)&lt;/tt&gt;. Java adds a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt; message parameter and it also swaps
&lt;tt class="docutils literal"&gt;actual&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;expected&lt;/tt&gt;. Which I didn’t notice at first, and I wrote my
assertions incorrectly. While it doesn’t &lt;em&gt;really&lt;/em&gt; matter (it will still work),
the output looked a bit weird.&lt;/p&gt;
&lt;p&gt;And I noticed only when I finished writing my tests (and I had a typo in my
expected output). I wanted to fix them all — not manually, of course. So, I
closed this file, brought up Vim, searched for the motion I need (it’s
&lt;tt class="docutils literal"&gt;t{char}&lt;/tt&gt; — see &lt;tt class="docutils literal"&gt;:help t&lt;/tt&gt;). And I ended up with this
(cursor placed on the comma after the first argument):&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;kbd style="font-size: 2em;"&gt;dt,&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;t)&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;p&lt;/kbd&gt;
&lt;/div&gt;&lt;p&gt;What does this do, you may ask? It’s actually pretty self-explanatory:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;d&lt;/b&gt;elete &lt;b&gt;t&lt;/b&gt;ill comma, (go) &lt;b&gt;t&lt;/b&gt;ill closing parenthesis, &lt;b&gt;p&lt;/b&gt;aste.
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This fixes one line. Automatically. Make it a macro (wrap in &lt;tt class="docutils literal"&gt;qq&lt;/tt&gt; … &lt;tt class="docutils literal"&gt;q&lt;/tt&gt;,
use with &lt;tt class="docutils literal"&gt;@q&lt;/tt&gt;) and now you can run it on all lines, either by moving manually or by
searching for &lt;tt class="docutils literal"&gt;,&lt;/tt&gt; and pressing &lt;tt class="docutils literal"&gt;n@q&lt;/tt&gt; until you run out of lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Some of you might say “but VS/Eclipse/IDEA has an option for that somewhere” or
“[expensive tool] can do that” — and a Google search shows that there is an
Eclipse plugin to swap arguments and that I could also write a regex to solve
my second issue. Nevertheless, Python is a great tool in a programmer’s toolbox
— especially the interactive interpreter. And Vim is an awesome editor that can
accomplish magic in a few keystrokes — and there are many more things you can
do with it.&lt;/p&gt;
&lt;p class="lead"&gt;Go learn &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;Also: don’t even bother with VsVim or IdeaVim or any other Vim emulation
plugins, they work in unusual ways and often don’t give you everything — for
example, VsVim has a Vim visual mode (&lt;tt class="docutils literal"&gt;v&lt;/tt&gt; key) and Visual Studio selection
mode (mouse), and only one allows Vim keystrokes (the other will replace
selected text).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>C#</category><category>Java</category><category>programming</category><category>Python</category><category>Vim</category><guid>https://chriswarrick.com/blog/2016/05/27/code-writing-code-python-and-vim/</guid><pubDate>Fri, 27 May 2016 08:46:35 GMT</pubDate></item><item><title>Deploying Python Web Applications with nginx and uWSGI Emperor</title><link>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You’ve just written a great Python web application. Now, you want to share it with the world. In order to do that, you need a server, and some software to do that for you.&lt;/p&gt;
&lt;p&gt;The following is a comprehensive guide on how to accomplish that, on multiple Linux-based operating systems, using nginx and uWSGI Emperor. It doesn’t force you to use any specific web framework — Flask, Django, Pyramid, Bottle will all work. Written for Ubuntu, Debian, Fedora, CentOS and Arch Linux (should be helpful for other systems, too). Now with an Ansible Playbook.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Revision 5 (2017-04-29): Better module specification description, environment variable configuration info&lt;/em&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;For easy linking, I set up some aliases: &lt;a class="reference external" href="https://go.chriswarrick.com/pyweb"&gt;https://go.chriswarrick.com/pyweb&lt;/a&gt; and &lt;a class="reference external" href="https://go.chriswarrick.com/uwsgi-tut"&gt;https://go.chriswarrick.com/uwsgi-tut&lt;/a&gt; (powered by a Django web application, deployed with nginx and uWSGI!).&lt;/p&gt;
&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#prerequisites" id="id9"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#automate-everything-ansible-playbook" id="id10"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#how-to-use" id="id11"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#the-manual-guide" id="id12"&gt;The manual guide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#getting-started" id="id13"&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#preparing-your-application" id="id14"&gt;Preparing your application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#configuring-uwsgi-and-nginx" id="id15"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#uwsgi-configuration" id="id16"&gt;uWSGI configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#nginx-configuration" id="id17"&gt;nginx configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#service-setup" id="id18"&gt;Service setup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-arch-linux" id="id19"&gt;For Arch Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-fedora-and-centos" id="id20"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-ubuntu-and-debian" id="id21"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result" id="id22"&gt;End result&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#troubleshooting" id="id23"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id9"&gt;Prerequisites&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to deploy your web application, you need a server that gives you root and ssh access — in other words, a VPS (or a dedicated server, or a datacenter lease…). If you’re looking for a great VPS service for a low price, I recommend &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=7983689b2ecc"&gt;DigitalOcean&lt;/a&gt; (reflink &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id6" id="id1"&gt;[1]&lt;/a&gt;), which offers a $5/mo service &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id7" id="id2"&gt;[2]&lt;/a&gt;. If you want to play along at home, without buying a VPS, you can create a virtual machine on your own, or use Vagrant with a Vagrant box for Fedora 25 (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;fedora/25-cloud-base&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Your server should also run a modern Linux-based operating system. This guide was written and tested on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu 16.04 LTS or newer&lt;/li&gt;
&lt;li&gt;Debian 8 (jessie) or newer&lt;/li&gt;
&lt;li&gt;Fedora 24 or newer (with SELinux enabled and disabled)&lt;/li&gt;
&lt;li&gt;CentOS 7 (with SELinux enabled and disabled) — manual guide should also work on RHEL 7&lt;/li&gt;
&lt;li&gt;Arch Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Users of other Linux distributions (and perhaps other Unix flavors) can also follow this tutorial. This guide assumes &lt;tt class="docutils literal"&gt;systemd&lt;/tt&gt; as your init system; if you are not using systemd, you will have to get your own daemon files somewhere else. In places where the instructions are split three-way, try coming up with your own, reading documentation and config files; the Arch Linux instructions are probably the closest to upstream (but not always).  Unfortunately, all Linux distributions have their own ideas when it comes to running and managing nginx and uWSGI.&lt;/p&gt;
&lt;p&gt;nginx and uWSGI are considered best practices by most people. nginx is a fast, modern web server, with uWSGI support built in (without resorting to reverse proxying).  uWSGI is similarly aimed at speed.  The Emperor mode of uWSGI is recommended for init system integration by the uWSGI team, and it’s especially useful for multi-app deployments. (This guide is opinionated.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-everything-ansible-playbook"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id10"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;/h2&gt;
&lt;p class="lead"&gt;A &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; that automates everything in this tutorial is available.&lt;/p&gt;
&lt;div class="section" id="how-to-use"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id11"&gt;How to use&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://docs.ansible.com/ansible/intro_installation.html"&gt;Ansible&lt;/a&gt; on your control computer (not necessarily the destination server).&lt;/li&gt;
&lt;li&gt;Clone the &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; from GitHub.&lt;/li&gt;
&lt;li&gt;Read &lt;tt class="docutils literal"&gt;README.md&lt;/tt&gt;. You should also understand how Ansible works.&lt;/li&gt;
&lt;li&gt;Configure (change three files: &lt;tt class="docutils literal"&gt;hosts&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;group_vars/all&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;group_vars/os_&amp;lt;destination OS&amp;gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Make sure all the dependencies are installed on your destination server&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansible-playbook&lt;/span&gt; &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;nginx-uwsgi.yml&lt;/span&gt; &lt;span class="pre"&gt;-i&lt;/span&gt; hosts&lt;/tt&gt; and watch magic happen.&lt;/li&gt;
&lt;li&gt;Skip over to &lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result"&gt;End result&lt;/a&gt; and test your site.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-manual-guide"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id12"&gt;The manual guide&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I personally recommend the Playbook as a much less error-prone way to set up your app, it might not be compatible with everyone’s system, or otherwise be the wrong solution. The original manual configuration guide is still maintained.&lt;/p&gt;
&lt;p&gt;Even if you are using the Playbook, you should still read this to find out what happens under the hood, and to find out about other caveats/required configuration changes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;All the commands in this tutorial are meant to be run &lt;strong&gt;as root&lt;/strong&gt; — run &lt;tt class="docutils literal"&gt;su&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;sudo su&lt;/tt&gt; first to get an administrative shell. This tutorial assumes familiarity with basic Linux administration and command-line usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id13"&gt;Getting started&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start by installing virtualenv, nginx and uWSGI. I recommend using your operating system packages. For uWSGI, we need the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugins. (Arch Linux names the &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugin &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;; the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin may be built-in — check with your system repositories!). I’ll also install Git to clone the tutorial app, but it’s optional if your workflow does not involve git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_4d17d579ebde4fd79839840fbfd56ea6-1"&gt;&lt;/a&gt;apt install virtualenv python3 uwsgi uwsgi-emperor uwsgi-plugin-python3 nginx-full git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_03e336d7b4614187a4300da33ff6e2f1-1"&gt;&lt;/a&gt;dnf install python3-virtualenv uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;CentOS:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_026986883257481982425685076b29e0-1"&gt;&lt;/a&gt;yum install epel-release
&lt;a name="rest_code_026986883257481982425685076b29e0-2"&gt;&lt;/a&gt;yum install python34 python34-pip uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx git wget
&lt;a name="rest_code_026986883257481982425685076b29e0-3"&gt;&lt;/a&gt;python3 -m pip install --user virtualenv
&lt;/pre&gt;&lt;p&gt;We need to install virtualenv manually, because the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-virtualenv&lt;/span&gt;&lt;/tt&gt; package is not compatible. It will be available to root only (user install).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_e180718107134d82a27563bfef002f01-1"&gt;&lt;/a&gt;pacman -S python-virtualenv uwsgi uwsgi-plugin-python nginx git
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="preparing-your-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id14"&gt;Preparing your application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tutorial will work for any web framework. I will use &lt;a class="reference external" href="https://github.com/Kwpolska/flask-demo-app"&gt;a really basic Flask app&lt;/a&gt; that has just one route (&lt;tt class="docutils literal"&gt;/&lt;/tt&gt;) &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id8" id="id3"&gt;[3]&lt;/a&gt;, a static &lt;tt class="docutils literal"&gt;hello.png&lt;/tt&gt; file and a &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; for demonstration purposes. Note that the app does not use &lt;tt class="docutils literal"&gt;app.run()&lt;/tt&gt;. While you could add it, it would be used for local development and debugging only, and would have to be prepended by &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; (if it wasn’t, that server would run instead of uWSGI, which is bad)&lt;/p&gt;
&lt;p&gt;The app will be installed somewhere under the &lt;tt class="docutils literal"&gt;/srv&lt;/tt&gt; directory, which is a great place to store things like this. I’ll choose &lt;tt class="docutils literal"&gt;/srv/myapp&lt;/tt&gt; for this tutorial, but for real deployments, you should use something more distinguishable — the domain name is a great idea.&lt;/p&gt;
&lt;p&gt;If you don’t use Flask, this tutorial also has instructions for other web frameworks (Django, Pyramid, Bottle) in the configuration files; it should be adjustable to any other WSGI-compliant framework/script nevertheless.&lt;/p&gt;
&lt;p&gt;We’ll start by creating a virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_941c2b546f6147b08aeac8862d987767-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_941c2b546f6147b08aeac8862d987767-2"&gt;&lt;/a&gt;virtualenv -p /usr/bin/python3 myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora, CentOS, Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_0f6155be226d420aa07c5aed65205e7f-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_0f6155be226d420aa07c5aed65205e7f-2"&gt;&lt;/a&gt;python3 -m virtualenv myapp
&lt;/pre&gt;&lt;p&gt;(This tutorial assumes Python 3. Make sure you use the correct &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; command/argument. If you want to use Python 2.7, you’ll need to adjust your uWSGI configuration as well.)&lt;/p&gt;
&lt;p&gt;Now, we need to put our app there and install requirements. An example for the tutorial demo app:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ba71adab4c09468fa84b25e29f586711-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; myapp
&lt;a name="rest_code_ba71adab4c09468fa84b25e29f586711-2"&gt;&lt;/a&gt;git clone https://github.com/Kwpolska/flask-demo-app appdata
&lt;a name="rest_code_ba71adab4c09468fa84b25e29f586711-3"&gt;&lt;/a&gt;bin/pip install -r appdata/requirements.txt
&lt;/pre&gt;&lt;p&gt;I’m storing my application data in the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; subdirectory so that it doesn’t clutter the virtualenv (or vice versa).  You may also install the &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in the virtualenv, but it’s optional.&lt;/p&gt;
&lt;p&gt;What this directory should be depends on your web framework.  For example, for a Django app, you should have an &lt;tt class="docutils literal"&gt;appdata/manage.py&lt;/tt&gt; file (in other words, &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; is where your app structure starts).  I also assumed that the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; folder should have a &lt;tt class="docutils literal"&gt;static&lt;/tt&gt; subdirectory with all static files, including &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; if you have one (we will add support for both in nginx).&lt;/p&gt;
&lt;p&gt;At this point, you should chown this directory to the user and group your server is going to run as.  This is especially important if uwsgi and nginx run as different users (as they do on Fedora). Run one of the following commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_07f3adaac1a243f6b8fc7064ce095450-1"&gt;&lt;/a&gt;chown -R www-data:www-data /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora, CentOS:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_57f05dec4f794e29b443677376cc9cd2-1"&gt;&lt;/a&gt;chown -R uwsgi:nginx /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_d8d9d46eb2cb4007848b14d8d80733ff-1"&gt;&lt;/a&gt;chown -R http:http /srv/myapp
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configuring-uwsgi-and-nginx"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id15"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Parts of the configuration depend on your operating system. I tried to provide advice for Ubuntu, Debian, Fedora, CentOS and Arch Linux. If you experience any issues, in particular with plugins, please consult the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We need to write a configuration file for uWSGI and nginx.&lt;/p&gt;
&lt;div class="section" id="uwsgi-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id16"&gt;uWSGI configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Start with this, but read the notes below and change the values accordingly:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/uwsgi.sock&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;775&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-5"&gt;&lt;/a&gt;&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-6"&gt;&lt;/a&gt;&lt;span class="na"&gt;binary-path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/bin/uwsgi&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-7"&gt;&lt;/a&gt;&lt;span class="na"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-8"&gt;&lt;/a&gt;&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flaskapp:app&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-9"&gt;&lt;/a&gt;&lt;span class="na"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-10"&gt;&lt;/a&gt;&lt;span class="na"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-11"&gt;&lt;/a&gt;&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-12"&gt;&lt;/a&gt;&lt;span class="na"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-13"&gt;&lt;/a&gt;&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python3,logfile&lt;/span&gt;
&lt;a name="rest_code_47e7a88f4519414881aca9d0bd189797-14"&gt;&lt;/a&gt;&lt;span class="na"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file:/srv/myapp/uwsgi.log&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu, Debian: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/uwsgi-emperor/vassals/myapp.ini&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora, CentOS: &lt;tt class="docutils literal"&gt;/etc/uwsgi.d/myapp.ini&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: &lt;tt class="docutils literal"&gt;/etc/uwsgi/vassals/myapp.ini&lt;/tt&gt; (create the directory first and &lt;strong&gt;chown&lt;/strong&gt; it to http: &lt;tt class="docutils literal"&gt;mkdir &lt;span class="pre"&gt;-p&lt;/span&gt; /etc/uwsgi/vassals; chown &lt;span class="pre"&gt;-R&lt;/span&gt; http:http /etc/uwsgi/vassals&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;socket&lt;/tt&gt; — the socket file that will be used by your application. It’s usually a file path (Unix domain socket). You could use a local TCP socket, but it’s not recommended.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;chdir&lt;/tt&gt; — the app directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;binary-path&lt;/span&gt;&lt;/tt&gt; — the uWSGI executable to use. Remove if you didn’t install the (optional) &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in your virtualenv.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; — the virtualenv for your application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;module&lt;/tt&gt; — the name of the module that houses your application, and the object that speaks the WSGI interface, separated by colons. This depends on your web framework (use the &lt;strong&gt;Module name&lt;/strong&gt;):&lt;/p&gt;
&lt;table border="1" class="table table-striped table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="4%"&gt;
&lt;col width="5%"&gt;
&lt;col width="5%"&gt;
&lt;col width="9%"&gt;
&lt;col width="31%"&gt;
&lt;col width="12%"&gt;
&lt;col width="34%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Framework&lt;/th&gt;
&lt;th class="head"&gt;Package&lt;/th&gt;
&lt;th class="head"&gt;Callable&lt;/th&gt;
&lt;th class="head"&gt;Module name&lt;/th&gt;
&lt;th class="head"&gt;Package is…&lt;/th&gt;
&lt;th class="head"&gt;Callable is…&lt;/th&gt;
&lt;th class="head"&gt;Caveats&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Flask&lt;/td&gt;
&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;filename:app&lt;/td&gt;
&lt;td&gt;module name (for a Python import)&lt;/td&gt;
&lt;td&gt;Flask object&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Django&lt;/td&gt;
&lt;td&gt;project.wsgi&lt;/td&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;project.wsgi:application&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;project&lt;/tt&gt; is name of your project (directory with settings.py); &lt;tt class="docutils literal"&gt;wsgi&lt;/tt&gt; is constant&lt;/td&gt;
&lt;td&gt;constant&lt;/td&gt;
&lt;td&gt;add an environment variable for settings: &lt;tt class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bottle&lt;/td&gt;
&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;filename:app&lt;/td&gt;
&lt;td&gt;module name (for a Python import)&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;app = bottle.default_app()&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pyramid&lt;/td&gt;
&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;filename:app&lt;/td&gt;
&lt;td&gt;module name (for a Python import)&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;app = config.make_wsgi_app()&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;make sure it’s &lt;strong&gt;not&lt;/strong&gt; in an &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; block — the demo app does that!)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;uid&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;gid&lt;/tt&gt; — the names of the user account to use for your server.  Use the same values as in the &lt;tt class="docutils literal"&gt;chown&lt;/tt&gt; command above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;processes&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;threads&lt;/tt&gt; — control the resources devoted to this application. Because this is a simple hello app, I used one process with one thread, but for a real app, you will probably need more (you need to see what works the best; there is no algorithm to decide). Also, remember that if you use multiple processes, they don’t share memory (you need a database to share data between them).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; — the list of uWSGI plugins to use. For Arch Linux, use &lt;tt class="docutils literal"&gt;plugins = python&lt;/tt&gt; (the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin is always active).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;logger&lt;/tt&gt; — the path to your app-specific logfile. (Other logging facilities are available, but this one is the easiest, especially for multiple applications on the same server)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;env&lt;/tt&gt; — environment variables to pass to your app. Useful for configuration, may be specified multiple times. Example for Django: &lt;tt class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test your configuration by running &lt;tt class="docutils literal"&gt;uwsgi &lt;span class="pre"&gt;--ini&lt;/span&gt; /path/to/myapp.ini&lt;/tt&gt; (disable the logger for stderr output or run &lt;tt class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt; /srv/myapp/uwsgi.log&lt;/tt&gt; in another window).&lt;/p&gt;
&lt;p&gt;If you’re using &lt;strong&gt;Fedora&lt;/strong&gt; or &lt;strong&gt;CentOS&lt;/strong&gt;, there are two configuration changes you need to make globally: in &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt;, disable the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;emperor-tyrant&lt;/span&gt;&lt;/tt&gt; option (which seems to be buggy) and set &lt;tt class="docutils literal"&gt;gid = nginx&lt;/tt&gt;.  We’ll need this so that nginx can talk to your socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id17"&gt;nginx configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We need to configure our web server. Here’s a basic configuration that will get us started:&lt;/p&gt;
&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu, Debian: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled/myapp.conf&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora, CentOS: &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: add &lt;tt class="docutils literal"&gt;include &lt;span class="pre"&gt;/etc/nginx/conf.d/*.conf;&lt;/span&gt;&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;http&lt;/tt&gt; directive in &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; and use &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code nginx"&gt;&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTP server:&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-3"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTPS server:&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# listen 443 ssl;&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-6"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt; &lt;span class="s"&gt;myapp.local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-8"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-9"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-10"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/srv/myapp/uwsgi.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-13"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-14"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-15"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-17"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/favicon.ico&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-18"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static/favicon.ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_8889bf0b77c8454fb7910cd9110807f9-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that this file is a very basic and rudimentary configuration. This configuration is fine for local testing, but for a real deployment, you will need to adjust it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;listen&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;443 ssl&lt;/tt&gt; and create a http→https redirect on port 80 (you can get a free SSL certificate from &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;; make sure to &lt;a class="reference external" href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html"&gt;configure SSL properly&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;server_name&lt;/tt&gt; to your real domain name&lt;/li&gt;
&lt;li&gt;you might also want to add custom error pages, log files, or change anything else that relates to your web server — consult other nginx guides for details&lt;/li&gt;
&lt;li&gt;nginx usually has some server already enabled by default — edit &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; or remove their configuration files from your sites directory to disable it&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-setup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id18"&gt;Service setup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After you’ve configured uWSGI and nginx, you need to enable and start the system services.&lt;/p&gt;
&lt;div class="section" id="for-arch-linux"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id19"&gt;For Arch Linux&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;All you need is:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_3c949136893545ca8c05071f5d1d6148-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_3c949136893545ca8c05071f5d1d6148-2"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-fedora-and-centos"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id20"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Make sure you followed the extra note about editing &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt; earlier and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c416090db666447ea3766e6ce87a9401-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx uwsgi
&lt;a name="rest_code_c416090db666447ea3766e6ce87a9401-2"&gt;&lt;/a&gt;systemctl start nginx uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;If you disabled SELinux, this is enough to get an app working and you can skip over to the next section.&lt;/p&gt;
&lt;p&gt;If you want to use SELinux, you need to do the following to allow nginx to read static files:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_eed589ba704744bfbfad95c35747df4f-1"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_eed589ba704744bfbfad95c35747df4f-2"&gt;&lt;/a&gt;chcon -R system_u:system_r:httpd_t:s0 /srv/myapp/appdata/static
&lt;a name="rest_code_eed589ba704744bfbfad95c35747df4f-3"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We now need to install a &lt;a class="reference external" href="https://chriswarrick.com/pub/nginx-uwsgi.pp"&gt;SELinux policy&lt;/a&gt; (that I created for this project) to allow nginx and uWSGI to communicate.
Download it and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_5c879c09aaed435bafc167607798a3b7-1"&gt;&lt;/a&gt;semodule -i nginx-uwsgi.pp
&lt;/pre&gt;&lt;p&gt;Hopefully, this is enough (you can delete the file). In case it isn’t, please read SELinux documentation, check audit logs, and look into &lt;tt class="docutils literal"&gt;audit2allow&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-ubuntu-and-debian"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id21"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ubuntu and Debian (still!) use LSB services for uWSGI. Because LSB services are awful, we’re going to set up our own systemd-based (native) service.&lt;/p&gt;
&lt;p&gt;Start by disabling the LSB service that comes with Ubuntu and Debian:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_d6ce99a9b8c34c8f91b670d0ef5a9549-1"&gt;&lt;/a&gt;systemctl stop uwsgi-emperor
&lt;a name="rest_code_d6ce99a9b8c34c8f91b670d0ef5a9549-2"&gt;&lt;/a&gt;systemctl disable uwsgi-emperor
&lt;/pre&gt;&lt;p&gt;Copy the &lt;tt class="docutils literal"&gt;.service&lt;/tt&gt; file from the &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.org/en/latest/Systemd.html#adding-the-emperor-to-systemd"&gt;uWSGI systemd documentation&lt;/a&gt; to &lt;tt class="docutils literal"&gt;/etc/systemd/system/emperor.uwsgi.service&lt;/tt&gt;.  Change the ExecStart line to:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_750bb659cee54e9c9d8f89e3e39c5792-1"&gt;&lt;/a&gt;&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/uwsgi --ini /etc/uwsgi-emperor/emperor.ini&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can now reload systemd daemons and enable the services:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_6305e66ef2ec40c0ace50023e42c7602-1"&gt;&lt;/a&gt;systemctl daemon-reload
&lt;a name="rest_code_6305e66ef2ec40c0ace50023e42c7602-2"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_6305e66ef2ec40c0ace50023e42c7602-3"&gt;&lt;/a&gt;systemctl reload nginx
&lt;a name="rest_code_6305e66ef2ec40c0ace50023e42c7602-4"&gt;&lt;/a&gt;systemctl start emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;.  (Ignore
the warning about no request plugin)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="end-result"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id22"&gt;End result&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your web service should now be running at &lt;a class="reference external" href="http://localhost/"&gt;http://localhost/&lt;/a&gt; (or wherever you set up server to listen).&lt;/p&gt;
&lt;p&gt;If you used the demo application, you should see something like this (complete with the favicon and image greeting):&lt;/p&gt;
&lt;img alt="/images/nginx-uwsgi-demo.png" class="centered" src="https://chriswarrick.com/images/nginx-uwsgi-demo.png"&gt;
&lt;p&gt;If you want to test with cURL:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_5ff4cff83798493fa4ea464266962466-1"&gt;&lt;/a&gt;curl -v http://localhost/
&lt;a name="rest_code_5ff4cff83798493fa4ea464266962466-2"&gt;&lt;/a&gt;curl -I http://localhost/favicon.ico
&lt;a name="rest_code_5ff4cff83798493fa4ea464266962466-3"&gt;&lt;/a&gt;curl -I http://localhost/static/hello.png
&lt;/pre&gt;&lt;div class="section" id="troubleshooting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id23"&gt;Troubleshooting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hopefully, everything works. If it doesn’t:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check your nginx, system (&lt;tt class="docutils literal"&gt;journalctl&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;systemctl status SERVICE&lt;/tt&gt;) and uwsgi (&lt;tt class="docutils literal"&gt;/srv/myapp/uwsgi.log&lt;/tt&gt;) logs.&lt;/li&gt;
&lt;li&gt;Make sure you followed all instructions.&lt;/li&gt;
&lt;li&gt;If you get a default site, disable that site in nginx config (&lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; or your sites directory).&lt;/li&gt;
&lt;li&gt;If you have a firewall installed, make sure to open the ports your web server runs on (typically 80/443). For &lt;tt class="docutils literal"&gt;firewalld&lt;/tt&gt; (Fedora, CentOS):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_d584def48f4843949bafa9b8bd07a8af-1"&gt;&lt;/a&gt;firewall-cmd --add-service http
&lt;a name="rest_code_d584def48f4843949bafa9b8bd07a8af-2"&gt;&lt;/a&gt;firewall-cmd --add-service https
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;If it still does not work, feel free to ask in the comments, mentioning your distribution, installation method, and what doesn’t work.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This reflink gives you $10 in credit, which is enough to run a server for up to two months without paying a thing. I earn $15.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For the cheapest plan. If you’re in the EU (and thus have to pay VAT), or want DO to handle your backups, it will cost you a little more.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This app does not use templates, but you should in any real project. This app is meant to be as simple as possible.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Ansible</category><category>Arch Linux</category><category>Django</category><category>Flask</category><category>guide</category><category>Internet</category><category>Linux</category><category>nginx</category><category>Python</category><category>systemd</category><category>uWSGI</category><guid>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</guid><pubDate>Wed, 10 Feb 2016 14:00:00 GMT</pubDate></item><item><title>Windows 10 November Upgrade: Windows as a (Dis-)service</title><link>https://chriswarrick.com/blog/2015/12/27/windows-10-november-upgrade-windows-as-a-dis-service/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;div class="pull-right figure" style="width: 20%"&gt;
&lt;a class="reference external image-reference" href="https://chriswarrick.com/images/Windows10-1511.png"&gt;&lt;img alt="/images/Windows10-1511.thumbnail.png" src="https://chriswarrick.com/images/Windows10-1511.thumbnail.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;The &lt;em&gt;About Windows&lt;/em&gt; screen.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I upgraded Windows 10 from the RTM version (build 10240, July 2015) to the
&lt;em&gt;November Upgrade&lt;/em&gt; version (1511/build 10560). It took me a good two hours,
multiple reboots, and a BSOD.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I upgraded to Windows 10 (from Windows 10) back in August. The upgrade
experience was okay. The main issue I had was that the error messages were a
bit uninformative. There was one error, Windows 10 claimed it &lt;em&gt;couldn’t check
available disk space&lt;/em&gt;, which is a really strange way to say &lt;em&gt;your active
partition is a Linux one and you have a Linux bootloader set up&lt;/em&gt;. But after
switching to the Windows bootloader, it worked fine. I only had to fight a bit
with the display drivers, but other than that, it succeeded.&lt;/p&gt;
&lt;p&gt;Windows 10 claims to be &lt;em&gt;Windows as a Service&lt;/em&gt;: a fast update cycle with
new Windows builds released often. Now, Linux users are accustomed to this.
Depending on your distribution, you get new versions somewhere between “every
day” (rolling release: &lt;a class="reference external" href="https://chriswarrick.com/blog/2011/01/06/arch-linux-the-best-distro-ever/"&gt;Arch Linux&lt;/a&gt;,
Gentoo, Debian sid), “every 6 months” (Ubuntu, Fedora), or some other time
scale.
(Three months and two weeks passed between the two “general” builds of Windows 10.)
And most of the time, the upgrades are fast and relatively painless.&lt;/p&gt;
&lt;p&gt;With Windows 10, this is not the case. I booted to Windows yesterday, to set up
some new hardware and mess around with the OS. It offered the upgrade in
Windows Update. After downloading it (3 GB, according to Microsoft), it started
installing, without success. There were no error messages, and “Error” or
“Failed to install” were all I could get.&lt;/p&gt;
&lt;p&gt;I found the setup log files. The error log ended with “failed to
resurrect new system”. Which didn’t make a lot of sense to me, even though I’m
quite proficient with this sort of things.&lt;/p&gt;
&lt;p&gt;This can be dangerous, so I backed up my drives with Clonezilla, which is
really useful — and it ships with the Arch Linux ISO, which helped a lot.&lt;/p&gt;
&lt;p&gt;So, I tried my trusty friend, the Media Creation Tool. I needed it to get the
original install to work, and it came useful now. After yet another download,
I got a USB stick with Windows 10 on it. So, I rebooted to the installer, which
told me I can’t use it and I need to start it from within Windows.&lt;/p&gt;
&lt;p&gt;I rebooted back into Windows, started the installer. It took it a while to
begin the installation process (including waiting forever to get updates,
so I restarted the process and disabled updating now, and another long wait to
make sure it will work on my machine), but then it went quite fast and was at 70%
after less than 10 minutes. Sadly, that’s too good to be true. It rebooted and
started counting from zero. 90 minutes passed since I started, and the login
screen came up. Username, password, log in.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hi, we’ve updated your PC.&lt;/em&gt; Six more minutes, but at long last, I got my
desktop. There’s just one problem though: 1024×768 is not the screen resolution
I started the install with (oddly enough, the “Updating Windows” part was
running at 1080p for part of the process, and then went back to 768p after a
reboot). I tried installing NVIDIA drivers, and it failed — however, Windows
managed to install something and wanted a reboot (what is this, Windows 95?).
Fine, let’s reboot and get a fully functional Windows environment?&lt;/p&gt;
&lt;p&gt;:( &lt;em&gt;Your PC ran into a problem and needs to restart.&lt;/em&gt; A blue screen of death,
on the second boot, talking about &lt;em&gt;critical structure corruption in CI.dll&lt;/em&gt;. Well, shit.
I rebooted, but I first took a little detour to the Arch Linux USB stick I
prepared before to get a sane bootloader back. I’ve done this before, and
usually requires three commands.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_60c91ec4ddff41a9b24314575d61ec43-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;#&lt;/span&gt; mount /dev/sda2 /mnt
&lt;a name="rest_code_60c91ec4ddff41a9b24314575d61ec43-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;Metadata kept in Windows cache, refused to mount.&lt;/span&gt;
&lt;a name="rest_code_60c91ec4ddff41a9b24314575d61ec43-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;Failed to mount '/dev/sda2': Operation not permitted&lt;/span&gt;
&lt;a name="rest_code_60c91ec4ddff41a9b24314575d61ec43-4"&gt;&lt;/a&gt;&lt;span class="go"&gt;The NTFS partition is in an unsafe state. Please resume and shutdown&lt;/span&gt;
&lt;a name="rest_code_60c91ec4ddff41a9b24314575d61ec43-5"&gt;&lt;/a&gt;&lt;span class="go"&gt;Windows fully (no hibernation or fast restarting), or mount the volume&lt;/span&gt;
&lt;a name="rest_code_60c91ec4ddff41a9b24314575d61ec43-6"&gt;&lt;/a&gt;&lt;span class="go"&gt;read-only with the 'ro' mount option.&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Wait, what?! I remember my hard drive layout, and &lt;tt class="docutils literal"&gt;/dev/sda2&lt;/tt&gt; is my Linux
ext4 partition! I checked &lt;tt class="docutils literal"&gt;cfdisk&lt;/tt&gt;, and apparently I now have a &lt;em&gt;Hidden NTFS WinRE&lt;/em&gt;, with Linux moved to &lt;tt class="docutils literal"&gt;/dev/sda3&lt;/tt&gt; and my extended partition moved to &lt;tt class="docutils literal"&gt;/dev/sda4&lt;/tt&gt; (what would happen if I already had four partitions?). This is typical Windows misbehaviour: &lt;strong&gt;not caring about other OSes that might be installed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I accepted this defeat, mounted &lt;tt class="docutils literal"&gt;/dev/sda3&lt;/tt&gt;, ran &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;arch-chroot&lt;/span&gt; /mnt&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;syslinux-install_update&lt;/span&gt; &lt;span class="pre"&gt;-i&lt;/span&gt; &lt;span class="pre"&gt;-a&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; (I’m not a fan of GRUB 2, and I have a MBR
drive layout). I should test this out by rebooting into Linux.&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_18c10698e9394fcf80c12eb2252d558a-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;Error getting authority: Error initializing authority: Could not connect: No such file or directory (g-io-error-quark, 1)&lt;/span&gt;
&lt;a name="rest_code_18c10698e9394fcf80c12eb2252d558a-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;Welcome to emergency mode!&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;systemd &lt;strong&gt;really&lt;/strong&gt; values &lt;tt class="docutils literal"&gt;/etc/fstab&lt;/tt&gt;, and you can’t boot if any entry fails
to mount, which was the case with the Windows drive in &lt;tt class="docutils literal"&gt;/dev/sda1&lt;/tt&gt; and my
other NTFS partition (note that the error message is very unhelpful)&lt;/p&gt;
&lt;p&gt;I guess I have to get into Windows first. I tried booting Windows again, this
time it worked (in glorious 1080p, which was the case on the previous boot
too).&lt;/p&gt;
&lt;p&gt;So, Windows re-enabled Fast Boot (a.k.a. hibernation instead of clean shutdown)
as part of the upgrade. I hunted down the setting and restored sanity.
But when I was doing that, I noticed things were spelt (or spelled) a bit
differently than two hours ago. You see, the original Windows 7 system was US
English. After the upgrade to Windows 10, I took the opportunity to install the
British and Polish language packs (it’s a multi-user machine). Both of which
were gone. I had to fix that, too.&lt;/p&gt;
&lt;p&gt;And all I got out of it were colourful window borders, which are not even in my
desired colour (Windows has a limited colour palette, even though I explicitly
set it to &lt;a class="reference external" href="https://chriswarrick.com/brand/"&gt;#00AADD&lt;/a&gt;). What a great way to waste a Saturday!&lt;/p&gt;
&lt;p&gt;This leaves me wondering, how does this work for Windows Insiders (Microsoft’s
community beta testers)? Is the process better if Windows Update manages to
perform the install? Or is it substantially faster if you’re running on a SSD?
Perhaps the testers have dedicated machines and don’t run experimental builds
on their daily drivers. But I doubt that, because that’s a significant
investment without any financial gain from helping out a corporation. So,
virtual machines? I have no idea how they cope.&lt;/p&gt;
&lt;p&gt;By the way, &lt;tt class="docutils literal"&gt;cmd.exe&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;winver.exe&lt;/tt&gt; claims it’s &lt;em&gt;Copyright © 2016&lt;/em&gt;. Previously, Windows copyright
notices were outdated. Now, they’re in the future.&lt;/p&gt;&lt;/div&gt;</description><category>rant</category><category>review</category><category>Windows</category><guid>https://chriswarrick.com/blog/2015/12/27/windows-10-november-upgrade-windows-as-a-dis-service/</guid><pubDate>Sun, 27 Dec 2015 11:15:00 GMT</pubDate></item><item><title>Rewriting a Flask app in Django</title><link>https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I spent Saturday on rewriting a Flask app in Django.  The app in question was
&lt;a class="reference external" href="https://users.getnikola.com/"&gt;Nikola Users&lt;/a&gt;, which is a very simple CRUD
app.  And yet, the Flask code was a mess, full of bugs and vulnerabilities.
Eight hours later, I had a fully functional Django app that did more and fixed
all problems.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="original-flask-app"&gt;
&lt;h2&gt;Original Flask app&lt;/h2&gt;
&lt;p&gt;The original Flask app had a ton of problems.  In order to make it anywhere
near useful, I would need to spend hours.  Here’s just a few of
them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;357 lines of spaghetti code (295 SLOC), all in one file&lt;/li&gt;
&lt;li&gt;No form data validation, no CSRF &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/#id2" id="id1"&gt;[1]&lt;/a&gt; protection (it did have XSS protection
though)&lt;/li&gt;
&lt;li&gt;Login using Mozilla Persona, which requries JavaScript, is a bit kludgey, and
feels desolate (and also had me store the admin e-mail list in code)&lt;/li&gt;
&lt;li&gt;Geopolitics issues: using country flags for languages&lt;/li&gt;
&lt;li&gt;A lot of things were implemented by hand&lt;/li&gt;
&lt;li&gt;SQLAlchemy is very verbose&lt;/li&gt;
&lt;li&gt;no DB migrations (makes enhancements harder)&lt;/li&gt;
&lt;li&gt;Languages implemented as a PostgreSQL integer array&lt;/li&gt;
&lt;li&gt;Adding a language required running a command-line script and &lt;strong&gt;restarting the
app&lt;/strong&gt; (languages were cached in Python dicts with no way to reload them from
the database; that would require talking through uWSGI anyway because there
were multiple processes involved)&lt;/li&gt;
&lt;li&gt;The templates were slightly hacky (the page title was set in each individual
template and not in the view code); menus hacked together in HTML with no
highlighting&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-rewrite"&gt;
&lt;h2&gt;The rewrite&lt;/h2&gt;
&lt;p&gt;I started the process by opening &lt;a class="reference external" href="https://docs.djangoproject.com/en/"&gt;Django documentation&lt;/a&gt;, with its wonderful
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/"&gt;tutorial&lt;/a&gt;.  Now, I have written a couple basic Django apps before, but
the majority of them didn’t do much.  In other words, I didn’t have a lot of experience.  Especially with taking user input and relationships.  It took me about 8 hours to get feature parity, and more.&lt;/p&gt;
&lt;p&gt;Getting all the features was really simple.  For example, to get a many-to-many
relationship for languages, I had to write just one line.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_39a2e9553a8947d68dc4897779242994-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s it.  I didn’t have to run through complicated SQLAlchemy documentation,
which provides a &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_1_0/orm/basic_relationships.html#many-to-many"&gt;13-line solution&lt;/a&gt; to the same problem.&lt;/p&gt;
&lt;p&gt;Django also simplified New Relic integration, as the browser JS can be implemented
using Django template tags.&lt;/p&gt;
&lt;p&gt;Django is not without its problems, though.  I got a very cryptic traceback
when I did this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_783e3e54a7d24be8bc50e07a5824f107-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;publish_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Publish e-mail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_783e3e54a7d24be8bc50e07a5824f107-2"&gt;&lt;/a&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"BooleanField() got multiple values for argument 'required'"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The real problem with this code?  I forgot the &lt;tt class="docutils literal"&gt;label=&lt;/tt&gt; keyword.  The
problem is, the model API accepts this syntax — &lt;tt class="docutils literal"&gt;verbose_name&lt;/tt&gt; is the first
argument.  (I am not actually using the labels though, I write my own form
HTML)&lt;/p&gt;
&lt;p&gt;Still, the Django version is much cleaner.  And the best part of all?  There
are no magic global objects (&lt;tt class="docutils literal"&gt;g&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;session&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;request&lt;/tt&gt;) and
decorator-based views (which are a bit of syntax abuse IMO).&lt;/p&gt;
&lt;p&gt;In the end, I have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;382 lines of code (297 SLOC) over 6 files — much cleaner, and with less long lines&lt;/li&gt;
&lt;li&gt;form data validation (via Django), CSRF and XSS protection&lt;/li&gt;
&lt;li&gt;Login using Django built-in authentication, without JavaScript&lt;/li&gt;
&lt;li&gt;Language codes (granted, I could’ve done that really easily back in Flask)&lt;/li&gt;
&lt;li&gt;Tried-and-true implementations of common patterns&lt;/li&gt;
&lt;li&gt;Django models are much more readable and friendly&lt;/li&gt;
&lt;li&gt;Django-provided DB migrations (generated automatically!)&lt;/li&gt;
&lt;li&gt;Languages implemented using Django many-to-many relationships&lt;/li&gt;
&lt;li&gt;Adding a language is possible from the Django built-in admin panel and is
reflected immediately (no caching)&lt;/li&gt;
&lt;li&gt;Titles and menus in code&lt;/li&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;New features: featured sites; show only a specified language — were really easy to add&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I had some &lt;tt class="docutils literal"&gt;CSRF_ENABLED&lt;/tt&gt; variable, but it did not seem to be actually
used by anything.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Django</category><category>Flask</category><category>Internet</category><category>Nikola</category><category>Python</category><guid>https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/</guid><pubDate>Sun, 11 Oct 2015 15:24:43 GMT</pubDate></item></channel></rss>