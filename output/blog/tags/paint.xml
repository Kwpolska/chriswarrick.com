<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about Paint)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/paint.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 17 Apr 2023 22:38:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Gynvael’s Mission 11 (en): Python bytecode reverse-engineering</title><link>https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Gynvael Coldwind is a security researcher at Google, who hosts weekly livestreams about security and programming in &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;Polish&lt;/a&gt; and &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;English&lt;/a&gt;). As part of the streams, he gives out missions — basically, CTF-style reverse engineering tasks. Yesterday’s mission was about Elvish — I mean Paint — I mean Python programming and bytecode.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-1" name="rest_code_b7ca42dc469842049459da37643a31e1-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-2" name="rest_code_b7ca42dc469842049459da37643a31e1-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-3" name="rest_code_b7ca42dc469842049459da37643a31e1-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-4" name="rest_code_b7ca42dc469842049459da37643a31e1-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-5" name="rest_code_b7ca42dc469842049459da37643a31e1-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-6" name="rest_code_b7ca42dc469842049459da37643a31e1-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-7" name="rest_code_b7ca42dc469842049459da37643a31e1-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-8" name="rest_code_b7ca42dc469842049459da37643a31e1-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-9" name="rest_code_b7ca42dc469842049459da37643a31e1-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-9"&gt;&lt;/a&gt;files.
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-10" name="rest_code_b7ca42dc469842049459da37643a31e1-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-11" name="rest_code_b7ca42dc469842049459da37643a31e1-11" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-12" name="rest_code_b7ca42dc469842049459da37643a31e1-12" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-13" name="rest_code_b7ca42dc469842049459da37643a31e1-13" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-14" name="rest_code_b7ca42dc469842049459da37643a31e1-14" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-15" name="rest_code_b7ca42dc469842049459da37643a31e1-15" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-16" name="rest_code_b7ca42dc469842049459da37643a31e1-16" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-17" name="rest_code_b7ca42dc469842049459da37643a31e1-17" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-18" name="rest_code_b7ca42dc469842049459da37643a31e1-18" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-19" name="rest_code_b7ca42dc469842049459da37643a31e1-19" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-19"&gt;&lt;/a&gt;Good luck!
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-20" name="rest_code_b7ca42dc469842049459da37643a31e1-20" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-21" name="rest_code_b7ca42dc469842049459da37643a31e1-21" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-22" name="rest_code_b7ca42dc469842049459da37643a31e1-22" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-23" name="rest_code_b7ca42dc469842049459da37643a31e1-23" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-24" name="rest_code_b7ca42dc469842049459da37643a31e1-24" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-25" name="rest_code_b7ca42dc469842049459da37643a31e1-25" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-26" name="rest_code_b7ca42dc469842049459da37643a31e1-26" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a id="rest_code_b7ca42dc469842049459da37643a31e1-27" name="rest_code_b7ca42dc469842049459da37643a31e1-27" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_b7ca42dc469842049459da37643a31e1-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here’s the firmware:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-1" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-2" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-3" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-3"&gt;&lt;/a&gt;co_flags 67
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-4" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-4"&gt;&lt;/a&gt;co_name check_password
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-5" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-6" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-7" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-8" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-9" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-10" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-11" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-11" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-12" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-12" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-13" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-13" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-14" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-14" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-15" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-15" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-16" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-16" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-17" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-17" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-18" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-18" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-19" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-19" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-20" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-20" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-21" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-21" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-22" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-22" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-23" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-23" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-24" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-24" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-25" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-25" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-26" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-26" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-27" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-27" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-28" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-28" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-29" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-29" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-30" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-30" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-31" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-31" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-32" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-32" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-33" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-33" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-34" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-34" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-35" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-35" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-36" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-36" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-37" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-37" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-38" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-38" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-39" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-39" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-40" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-40" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-41" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-41" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-42" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-42" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-43" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-43" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-44" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-44" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-45" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-45" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-46" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-46" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-47" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-47" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-48" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-48" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-49" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-49" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-50" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-50" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-51" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-51" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-52" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-52" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a id="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-53" name="rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-53" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c9cea22f79dd424d95efe9c4d49e9d2d-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To the uninitiated, this might look like &lt;em&gt;Elvish&lt;/em&gt;. In reality, this is Python bytecode — the instruction set understood by Python’s (CPython 2.7) virtual machine. Python, like many other languages, uses a compiler to translate human-readable source code into something more appropriate for computers. Python code compiles to bytecode, which is then executed by CPython’s virtual machine. CPython bytecode can be ported between different hardware, while machine code cannot. However, machine code can often be faster than languages based on virtual machines and bytecode. (Java and C# work the same way as Python, C compiles directly to machine code)&lt;/p&gt;
&lt;p&gt;This is the internal representation of a Python function. The first few lines are the member variables of the &lt;code class="docutils literal"&gt;f.__code__&lt;/code&gt; object of our function. We know that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;it takes 1 argument&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it has 7 constants: None, a long string of hex digits, the string &lt;code class="docutils literal"&gt;'hex'&lt;/code&gt;, and numbers: 89, 255, 115, 50.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flags&lt;/a&gt; are set to 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). This is the “standard” value that most uncomplicated functions take.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its name is &lt;code class="docutils literal"&gt;check_password&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it uses the following globals or attribute names: &lt;code class="docutils literal"&gt;decode&lt;/code&gt;, &lt;code class="docutils literal"&gt;len&lt;/code&gt;, &lt;code class="docutils literal"&gt;False&lt;/code&gt;, &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it has 4 local variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it uses a stack of size 6&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;its variables are named &lt;code class="docutils literal"&gt;s&lt;/code&gt;, &lt;code class="docutils literal"&gt;good&lt;/code&gt;, &lt;code class="docutils literal"&gt;cs&lt;/code&gt;, &lt;code class="docutils literal"&gt;cg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two ways to solve this task: you can re-assemble the &lt;code class="docutils literal"&gt;dis&lt;/code&gt; output with the help of the &lt;code class="docutils literal"&gt;opcode&lt;/code&gt; module, or try to re-create the function by hand, using the bytecode. I chose the latter method.&lt;/p&gt;
&lt;section id="reverse-engineering-python-bytecode-re-creating-the-function-by-hand"&gt;
&lt;h2&gt;Reverse-engineering Python bytecode: re-creating the function by hand&lt;/h2&gt;
&lt;p&gt;I started by recreating the original firmware file. I created an empty function and wrote some code to print out &lt;code class="docutils literal"&gt;__code__&lt;/code&gt; contents and &lt;code class="docutils literal"&gt;dis.dis&lt;/code&gt; output. I also added color-coding to help me read it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-1" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-2" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-3" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-4" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-5" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-6" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-7" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-8" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-9" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-10" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-11" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-11" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-12" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-12" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-13" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-13" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-14" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-14" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-15" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-15" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-16" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-16" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-17" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-17" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-18" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-18" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-19" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-19" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-20" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-20" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-21" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-21" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-22" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-22" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-23" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-23" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-24" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-24" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-25" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-25" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-26" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-26" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-26"&gt;&lt;/a&gt;
&lt;a id="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-27" name="rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-27" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c3e253fb80ab4eda906cd1ecb327d9ff-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run this solver, we get the following output (text in brackets added by me):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-1" name="rest_code_284deaf5b88147b4a4a28fd117db9581-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-2" name="rest_code_284deaf5b88147b4a4a28fd117db9581-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 match]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-3" name="rest_code_284deaf5b88147b4a4a28fd117db9581-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-4" name="rest_code_284deaf5b88147b4a4a28fd117db9581-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-5" name="rest_code_284deaf5b88147b4a4a28fd117db9581-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-5"&gt;&lt;/a&gt;co_names ()              [0/6 match]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-6" name="rest_code_284deaf5b88147b4a4a28fd117db9581-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-6"&gt;&lt;/a&gt;co_nlocals 1             [should be 4]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-7" name="rest_code_284deaf5b88147b4a4a28fd117db9581-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-7"&gt;&lt;/a&gt;co_stacksize 1           [should be 6]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-8" name="rest_code_284deaf5b88147b4a4a28fd117db9581-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 match]
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-9" name="rest_code_284deaf5b88147b4a4a28fd117db9581-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a id="rest_code_284deaf5b88147b4a4a28fd117db9581-10" name="rest_code_284deaf5b88147b4a4a28fd117db9581-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_284deaf5b88147b4a4a28fd117db9581-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see (with the help of colors, not reproduced here), that we’ve got &lt;code class="docutils literal"&gt;co_argcount&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_flags&lt;/code&gt;, &lt;code class="docutils literal"&gt;co_name&lt;/code&gt; correctly. We also have one constant (&lt;code class="docutils literal"&gt;None&lt;/code&gt;, in every function) and one variable name (&lt;code class="docutils literal"&gt;s&lt;/code&gt;, the argument name). We can also see &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt; output. While it looks similar to the assignment, there are a few noticeable differences: there is no &lt;code class="docutils literal"&gt;7&lt;/code&gt; (line number) at the start, and &lt;code class="docutils literal"&gt;LOAD_CONST&lt;/code&gt; instructions in the original code did not have anything in parentheses (only comparisions and loops did).  This makes reading bytecode harder, but still possible. (I originally thought about using &lt;code class="docutils literal"&gt;diff&lt;/code&gt; for help, but it’s not hard to do it by hand. I did use &lt;code class="docutils literal"&gt;diff&lt;/code&gt; for the final checking after a manual “conversion”)&lt;/p&gt;
&lt;p&gt;Let’s stop to look at the constants and names for a second. The long string is followed by &lt;code class="docutils literal"&gt;hex&lt;/code&gt;, and one of the constants is &lt;code class="docutils literal"&gt;decode&lt;/code&gt;. This means that we need to use &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/code&gt; to create a (byte)string of some information. Puzzle answers tend to be human-readable, and this string isn’t — so we need to do some more work.&lt;/p&gt;
&lt;p&gt;So, let’s try reproducing the start of the original mission code using what we’ve just discussed. Python’s VM is based on a stack. In the bytecode above, you can see that instructions take 0 or 1 arguments. Some of them put things on the stack, others do actions and remove them. Most instruction names are self-explanatory, but the full list can be found in the &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dis module documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instructions like &lt;code class="docutils literal"&gt;LOAD&lt;/code&gt; and &lt;code class="docutils literal"&gt;STORE&lt;/code&gt; refer to indices in the constants/names/varnames tuples. To make it easier, here’s a “table” of them:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_c842112382594045aa78932f414a7895-1" name="rest_code_c842112382594045aa78932f414a7895-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-1"&gt;&lt;/a&gt;constants
&lt;a id="rest_code_c842112382594045aa78932f414a7895-2" name="rest_code_c842112382594045aa78932f414a7895-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a id="rest_code_c842112382594045aa78932f414a7895-3" name="rest_code_c842112382594045aa78932f414a7895-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a id="rest_code_c842112382594045aa78932f414a7895-4" name="rest_code_c842112382594045aa78932f414a7895-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_c842112382594045aa78932f414a7895-5" name="rest_code_c842112382594045aa78932f414a7895-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a id="rest_code_c842112382594045aa78932f414a7895-6" name="rest_code_c842112382594045aa78932f414a7895-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a id="rest_code_c842112382594045aa78932f414a7895-7" name="rest_code_c842112382594045aa78932f414a7895-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a id="rest_code_c842112382594045aa78932f414a7895-8" name="rest_code_c842112382594045aa78932f414a7895-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_c842112382594045aa78932f414a7895-9" name="rest_code_c842112382594045aa78932f414a7895-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a id="rest_code_c842112382594045aa78932f414a7895-10" name="rest_code_c842112382594045aa78932f414a7895-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a id="rest_code_c842112382594045aa78932f414a7895-11" name="rest_code_c842112382594045aa78932f414a7895-11" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_c842112382594045aa78932f414a7895-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to improve readability, I will use “new” &lt;code class="docutils literal"&gt;dis&lt;/code&gt; output with names in parentheses below:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_31e99a55f05a4cee8c19af19f373b5af-1" name="rest_code_31e99a55f05a4cee8c19af19f373b5af-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_31e99a55f05a4cee8c19af19f373b5af-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a id="rest_code_31e99a55f05a4cee8c19af19f373b5af-2" name="rest_code_31e99a55f05a4cee8c19af19f373b5af-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_31e99a55f05a4cee8c19af19f373b5af-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a id="rest_code_31e99a55f05a4cee8c19af19f373b5af-3" name="rest_code_31e99a55f05a4cee8c19af19f373b5af-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_31e99a55f05a4cee8c19af19f373b5af-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a id="rest_code_31e99a55f05a4cee8c19af19f373b5af-4" name="rest_code_31e99a55f05a4cee8c19af19f373b5af-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_31e99a55f05a4cee8c19af19f373b5af-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # function takes 1 argument from stack
&lt;a id="rest_code_31e99a55f05a4cee8c19af19f373b5af-5" name="rest_code_31e99a55f05a4cee8c19af19f373b5af-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_31e99a55f05a4cee8c19af19f373b5af-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I guessed before, the first line of our function is as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_65fb08ce214749a1894312b83976c13b-1" name="rest_code_65fb08ce214749a1894312b83976c13b-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_65fb08ce214749a1894312b83976c13b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_65fb08ce214749a1894312b83976c13b-2" name="rest_code_65fb08ce214749a1894312b83976c13b-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_65fb08ce214749a1894312b83976c13b-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run the solver again, we’ll see that the first 12 bytes of our bytecode match the mission text. We can also see that &lt;code class="docutils literal"&gt;varnames&lt;/code&gt; is filled in half, we’ve added two constants, and one name.  The next few lines are as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-1" name="rest_code_3ad2c09368c14494b98418d108614246-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-2" name="rest_code_3ad2c09368c14494b98418d108614246-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-3" name="rest_code_3ad2c09368c14494b98418d108614246-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-4" name="rest_code_3ad2c09368c14494b98418d108614246-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-5" name="rest_code_3ad2c09368c14494b98418d108614246-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-6" name="rest_code_3ad2c09368c14494b98418d108614246-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-7" name="rest_code_3ad2c09368c14494b98418d108614246-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-8" name="rest_code_3ad2c09368c14494b98418d108614246-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-9" name="rest_code_3ad2c09368c14494b98418d108614246-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a id="rest_code_3ad2c09368c14494b98418d108614246-10" name="rest_code_3ad2c09368c14494b98418d108614246-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_3ad2c09368c14494b98418d108614246-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that we’re putting a global object on stack and calling it with one argument. In both cases, the global has the index 1, that’s &lt;code class="docutils literal"&gt;len&lt;/code&gt;. The two arguments are &lt;code class="docutils literal"&gt;s&lt;/code&gt; and &lt;code class="docutils literal"&gt;good&lt;/code&gt;. We put both lengths on stack, then compare them. If the comparison fails (they’re equal), we jump to the instruction starting at byte 43, otherwise we continue execution to load the second global (False) and return it.  This wall of text translates to the following simple code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_f4fe71bb5f214192aaa60448761a6852-1" name="rest_code_f4fe71bb5f214192aaa60448761a6852-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f4fe71bb5f214192aaa60448761a6852-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_f4fe71bb5f214192aaa60448761a6852-2" name="rest_code_f4fe71bb5f214192aaa60448761a6852-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f4fe71bb5f214192aaa60448761a6852-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f4fe71bb5f214192aaa60448761a6852-3" name="rest_code_f4fe71bb5f214192aaa60448761a6852-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f4fe71bb5f214192aaa60448761a6852-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a id="rest_code_f4fe71bb5f214192aaa60448761a6852-4" name="rest_code_f4fe71bb5f214192aaa60448761a6852-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_f4fe71bb5f214192aaa60448761a6852-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s take another look at our names. We can see we’re missing &lt;code class="docutils literal"&gt;all&lt;/code&gt;, &lt;code class="docutils literal"&gt;zip&lt;/code&gt;, &lt;code class="docutils literal"&gt;ord&lt;/code&gt;. You can already see a common pattern here: we will iterate over both strings at once (using &lt;code class="docutils literal"&gt;zip&lt;/code&gt;), do some math based on the character’s codes (&lt;code class="docutils literal"&gt;ord&lt;/code&gt;), and then check if &lt;code class="docutils literal"&gt;all&lt;/code&gt; results (of a comparison, usually) are truthy.&lt;/p&gt;
&lt;p&gt;Here’s the bytecode with value annotations and comments, which explain what happens where:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-1" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-2" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-3" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-4" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-5" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-6" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-7" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Start iterating: iter()
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-8" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # for loop iteration start (if iterator exhausted, jump +52 bytes to position 117)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-9" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # unpack a sequence (a, b = sequence)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-10" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = item from s
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-11" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-11" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = item from good
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-12" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-12" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-13" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-13" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-14" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-14" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # put ord(cs) on stack
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-15" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-15" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-16" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-16" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [subtract 89 from topmost value]
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-17" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-17" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-18" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-18" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND with topmost value]
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-19" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-19" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-20" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-20" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR with topmost value]
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-21" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-21" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-22" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-22" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR with topmost value]
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-23" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-23" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-24" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-24" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-25" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-25" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # put ord(cs) on stack
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-26" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-26" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # compare the two values on stack
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-27" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-27" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # append topmost value to the list in topmost-1; pop topmost (append to list created in comprehension)
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-28" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-28" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # jump back to start of loop
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-29" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-29" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # after loop: call all([list comprehension result])
&lt;a id="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-30" name="rest_code_6a37b4b3f7d04c3b97e7b1995f668924-30" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_6a37b4b3f7d04c3b97e7b1995f668924-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # return value returned by all()
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now write the full answer.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-1" name="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-2" name="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-3" name="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-4" name="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-5" name="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-6" name="rest_code_a355ef3b6e274c2ebbf5a17eb492bf24-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;In the end, our &lt;code class="docutils literal"&gt;dis.dis()&lt;/code&gt; output matches the mission text (except the removed values, but their IDs do match), our &lt;code class="docutils literal"&gt;co_*&lt;/code&gt; variables are all green, and we can get to work on solving the puzzle itself!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; this task uses a list comprehension. You might want to optimize it, remove the brackets, and end up with a generator expression. This would make the task harder, since would require working with the internal generator code object as well:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_16caa9a8a23b462dbfe984fe4db32fc7-1" name="rest_code_16caa9a8a23b462dbfe984fe4db32fc7-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_16caa9a8a23b462dbfe984fe4db32fc7-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a id="rest_code_16caa9a8a23b462dbfe984fe4db32fc7-2" name="rest_code_16caa9a8a23b462dbfe984fe4db32fc7-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_16caa9a8a23b462dbfe984fe4db32fc7-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_16caa9a8a23b462dbfe984fe4db32fc7-3" name="rest_code_16caa9a8a23b462dbfe984fe4db32fc7-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_16caa9a8a23b462dbfe984fe4db32fc7-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;BINARY_*&lt;/code&gt; and &lt;code class="docutils literal"&gt;ord&lt;/code&gt; disappeared from the new listing. You can see the &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;modified code&lt;/a&gt; (which differs by two bytes) and &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;solver output&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="solving-the-real-puzzle"&gt;
&lt;h2&gt;Solving the real puzzle&lt;/h2&gt;
&lt;p&gt;I solved the extra credit part of the puzzle. The &lt;em&gt;real&lt;/em&gt; aim of the puzzle was to recover the password — the text for which &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt; will return True.&lt;/p&gt;
&lt;p&gt;This part is pretty boring. I built a dictionary, where I mapped every byte (0…255) to the result of the calculation done in the &lt;code class="docutils literal"&gt;check_password()&lt;/code&gt; function’s loop. Then I used that to recover the original text.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-1" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-1" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-2" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-2" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-3" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-3" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-4" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-4" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-5" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-5" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-6" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-6" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-7" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-7" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-8" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-8" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-9" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-9" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-10" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-10" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-11" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-11" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-11"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a64fbb63ad954c5a803e371e56d38a0a-12" name="rest_code_a64fbb63ad954c5a803e371e56d38a0a-12" href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_a64fbb63ad954c5a803e371e56d38a0a-12"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The password is:&lt;/strong&gt; &lt;code class="docutils literal"&gt;huh, that actually worked!&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-was-that-paint-thing-about"&gt;
&lt;h2&gt;What was that Paint thing about?&lt;/h2&gt;
&lt;blockquote&gt;Yesterday’s mission was about Elvish — &lt;strong&gt;I mean Paint&lt;/strong&gt; — I mean Python programming.&lt;footer&gt;yours truly in this post’s teaser&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Most of my readers were probably puzzled by the mention of Paint. Long-time viewers of Gynvael’s streams in Polish remember the Python 101 video he posted on April Fools last year. See &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;original video&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;explanation&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;code&lt;/a&gt; (video and explanation are both Polish; you can get the gist of the video without hearing the audio commentary though.) &lt;strong&gt;Spoilers ahead.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In that prank, Gynvael taught Python basics. The first part concerned itself with writing bytecode by hand. The second part (starts around 12:00) was about drawing custom Python modules. In Paint. Yes, Paint, the simple graphics program included with Microsoft Windows. He drew a custom Python module in Paint, and saved it using the BMP format. It looked like this (zoomed PNG below; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;download gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;How was this done? There are three things that come into play:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Python can import modules from a ZIP file (if it’s appended to sys.path). Some tools that produce &lt;code class="docutils literal"&gt;.exe&lt;/code&gt; files of Python code use this technique; the old &lt;code class="docutils literal"&gt;.egg&lt;/code&gt; file format also used ZIPs this way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BMP files have their header at the start of a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ZIP files have their header at the end of a file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thus, one file can be a valid BMP and ZIP at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I took the code of &lt;code class="docutils literal"&gt;check_password&lt;/code&gt; and put it in &lt;code class="docutils literal"&gt;mission11.py&lt;/code&gt; (which I already cited above). Then I compiled to &lt;code class="docutils literal"&gt;.pyc&lt;/code&gt; and created a &lt;code class="docutils literal"&gt;.zip&lt;/code&gt; out of it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_4008d5db56954155898304f2a5400bd6-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_4008d5db56954155898304f2a5400bd6-1" name="rest_code_4008d5db56954155898304f2a5400bd6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_4008d5db56954155898304f2a5400bd6-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_4008d5db56954155898304f2a5400bd6-2" name="rest_code_4008d5db56954155898304f2a5400bd6-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_4008d5db56954155898304f2a5400bd6-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_4008d5db56954155898304f2a5400bd6-3" name="rest_code_4008d5db56954155898304f2a5400bd6-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_4008d5db56954155898304f2a5400bd6-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_4008d5db56954155898304f2a5400bd6-4" name="rest_code_4008d5db56954155898304f2a5400bd6-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_4008d5db56954155898304f2a5400bd6-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_4008d5db56954155898304f2a5400bd6-5" name="rest_code_4008d5db56954155898304f2a5400bd6-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_4008d5db56954155898304f2a5400bd6-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_4008d5db56954155898304f2a5400bd6-6" name="rest_code_4008d5db56954155898304f2a5400bd6-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Since I’m not an expert in any of the formats, I booted my Windows virtual machine and blindly copied the &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;parameters used by Gynvael&lt;/a&gt; to open the ZIP file (renamed &lt;code class="docutils literal"&gt;.raw&lt;/code&gt;) in IrfanView and saved as &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt;. I changed the size to 83×2, because my ZIP file was 498 bytes long (3 BPP * 83 px * 2 px = 498 bytes) — by doing that, and through sheer luck with the size, I could avoid adding comments and editing the ZIP archive. I ended up with this (PNG again; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;download mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;.bmp&lt;/code&gt; file is runnable! We can use this code:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_611a0d19f3174d44a8babf85d8ff7cdc-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-1" name="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_611a0d19f3174d44a8babf85d8ff7cdc-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-2" name="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_611a0d19f3174d44a8babf85d8ff7cdc-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-3" name="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_611a0d19f3174d44a8babf85d8ff7cdc-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-4" name="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_611a0d19f3174d44a8babf85d8ff7cdc-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-5" name="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-5"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_611a0d19f3174d44a8babf85d8ff7cdc-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-6" name="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/#rest_code_611a0d19f3174d44a8babf85d8ff7cdc-7"&gt;&lt;code data-line-number="7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-7" name="rest_code_611a0d19f3174d44a8babf85d8ff7cdc-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And we get this:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/section&gt;
&lt;section id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (full solver code)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (used for side note regarding generator expressions vs. list comprehensions)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py code, used in BMP file&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, file that runs the BMP/ZIP module&lt;/a&gt; (adapted from Gynvael’s)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dis module documentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for the mission (and BMP idea), Gynvael!&lt;/p&gt;
&lt;/section&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>Python hackery</category><category>Python internals</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item></channel></rss>