<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Chris Warrick (programming)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 10 Feb 2016 13:42:33 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Speeker — my little Android app</title><link>https://chriswarrick.com/blog/2014/08/26/speeker/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;a class="android-adventure-logo-robot reference external image-reference" href="https://chriswarrick.com/pl/blog/2014/08/01/series-android-adventure/"&gt;&lt;img alt="/blog-content/android-adventure/robot.png" src="https://chriswarrick.com/blog-content/android-adventure/robot.png"&gt;&lt;/a&gt;
&lt;p&gt;Now that I have an usable phone, I can dwelve into Android app development.
And so I did.  I started with an app to test and play with the text-to-speech
services of Android.  I named it Speeker.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;img src="https://chriswarrick.com/blog-content/android-adventure/speeker.png" alt="Speeker logo"&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/galleries/speeker/" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-picture-o"&gt;&lt;/i&gt;
Screenshots
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker/releases" class="btn btn-default" style="width: 144px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;Speeker is a very small and easy frontend to the system TTS service.  In its
current iteration, it’s quite limited. The complete feature set is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;speak text provided by the user&lt;/li&gt;
&lt;li&gt;speak text in the system default TTS language (as set in Android settings,
and there is currently no button to even get you there)&lt;/li&gt;
&lt;li&gt;clear the text box&lt;/li&gt;
&lt;li&gt;display About screen&lt;/li&gt;
&lt;li&gt;display open source licenses&lt;/li&gt;
&lt;li&gt;open my website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s SIX features!  And you can’t even download it from Google Play, because
I’m too cheap to pay the $25 fee!&lt;/p&gt;
&lt;p&gt;I might or might not continue development and add some features.  Either way,
my experience with Android development wasn’t  quite nice: there is not enough
good documentation, and I had to do a lot of guessing when it comes to things,
including imports.  Documentation could be vastly improved.&lt;/p&gt;
&lt;p&gt;Another problem is the choice of IDE.  While you certainly can do Android work
in any environment you like, including just Vim and the terminal, the official
and recommended environment is Eclipse.  Which just so happens to be the worst
IDE ever created.  It’s unfriendly and bulky — the usual characteristics of
huge Java applications.  Once Eclipse managed to open a file in about ten
seconds.  This is very impressive, until you notice anything else will take
much less time.  No, I am not making this up.  This is the problem with big
IDEs: trying to do too much at once.&lt;/p&gt;
&lt;p&gt;Developing for Android has not been the best experience ever — but it can be
done, and you don’t need that much experience with the platform to do it.
Android clearly has potential, but needs to be improved to be friendly for
developers.&lt;/p&gt;&lt;/div&gt;</description><category>android</category><category>app</category><category>devel</category><category>programming</category><category>projects</category><guid>https://chriswarrick.com/blog/2014/08/26/speeker/</guid><pubDate>Tue, 26 Aug 2014 13:00:00 GMT</pubDate></item><item><title>New Year’s Python Meme 2013/2014</title><link>https://chriswarrick.com/blog/2013/12/31/new-years-python-meme-2013-2014/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Via &lt;a class="reference external" href="http://ziade.org/2013/12/23/new-years-python-meme-2013/"&gt;Tarek Ziadé&lt;/a&gt; (original meme, none this year…) and &lt;a class="reference external" href="http://blog.aclark.net/2014/12/30/new-years-python-meme-2014/"&gt;Alex Clark&lt;/a&gt;.  Right after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Here it comes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. What’s the coolest Python application, framework or library you
discovered this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. What new programming technique did you learn this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lots of them, including writing sane context managers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Which open source project did you contribute to the most this year? What
did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt; yet again!  Up until now, I made 484 commits (or 431
excluding merge commits) — which is quite a lot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Which Python blogs, websites or mailing lists did you read the most this year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nedbatchelder.com/blog/"&gt;Ned Batchelder’s&lt;/a&gt; and &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher’s&lt;/a&gt; blogs and many things that are on Planet Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. What are the three top things you want to learn next year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are lots of them, mainly C, some Ruby and JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. What is the top software, application or library you wish someone would
write next year?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My current todo-list says it all — and I’m working on that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A quick app for CSV display&lt;/li&gt;
&lt;li&gt;A GitHub Releases API client&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nap&lt;/tt&gt; = &lt;tt class="docutils literal"&gt;sleep&lt;/tt&gt; + progressbar (&lt;a class="reference external" href="https://github.com/Kwpolska/nap"&gt;almost-done-thing on GitHub&lt;/a&gt; — C)&lt;/li&gt;
&lt;li&gt;River of Text — Python CLI library (&lt;a class="reference external" href="https://github.com/Kwpolska/rot"&gt;skeleton on GitHub&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Want to do your own list?  Here’s how:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;copy-paste the questions and answer to them in your blog&lt;/li&gt;
&lt;li&gt;tweet it with the &lt;a class="reference external" href="https://twitter.com/search/realtime?q=%232014pythonmeme"&gt;#2014pythonmeme&lt;/a&gt; hashtag&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>Nikola</category><category>programming</category><category>Python</category><guid>https://chriswarrick.com/blog/2013/12/31/new-years-python-meme-2013-2014/</guid><pubDate>Tue, 31 Dec 2013 17:15:00 GMT</pubDate></item><item><title>I love Python!</title><link>https://chriswarrick.com/blog/2011/08/03/i-love-python/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;figure&gt;
&lt;a href="http://python.org" title="Python"&gt;&lt;img src="http://kwpolska.tk/blog-content/logos/python.png" alt="Python logo"&gt;&lt;/a&gt;
&lt;figcaption&gt;Python logo&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;I recently started writing &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; code. And I love it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If you’d ask me a week ago about Python, I’d say “meh.”  Python3K?  I
wouldn’t be happy about it.  Sunday evening?  I love both.&lt;/p&gt;
&lt;div class="section" id="one-project-rewritten"&gt;
&lt;h2&gt;One project, rewritten&lt;/h2&gt;
&lt;p&gt;I wrote a new project.  Or rather re-wrote a Perl “project”.&lt;/p&gt;
&lt;p&gt;The project, once a little help for building AUR packages, now is almost
a fully-featured AUR helper (it has no update function, but I will
write one soon).  It’s the &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Perl version (search in the repo, linked above) had 56 lines.  In
short, it did something like this (rewritten to bash):&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-2"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-3"&gt;&lt;/a&gt;    wget http://aur.archlinux.org/&lt;span class="nv"&gt;$pk&lt;/span&gt;/&lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-4"&gt;&lt;/a&gt;    tar -xzvf &lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-5"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-6"&gt;&lt;/a&gt;    makepkg -si
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-7"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_05e6017362204e698ed80cfda0109c07-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; package in &lt;span class="nv"&gt;$@&lt;/span&gt;, &lt;span class="k"&gt;do&lt;/span&gt; generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This code is really, REALLY bad.  But it worked for me, because the “normal”
AUR helpers were slow.  I wanted to do something about it.  I put an entry on
my TODO list about it.  A few months later I decided to do it.  The TODO list
entry said “write build.py”.  I wanted to use Python because I wanted to learn
it.  In fact, I began &lt;em&gt;loving&lt;/em&gt; Python.&lt;/p&gt;
&lt;p&gt;The Perl version had 56 lines.  A shortened version of it in Bash took only 10
(I skipped a few features, the full version would be around 20 lines or so.)
Take a guess: how long is the Python version? 30 lines?  100?  No.  300 lines.
How could this happen?  No, &lt;em&gt;not&lt;/em&gt; because Python is a pain in the ass to write.
It was because I could implement new, great features EASILY.  The original
version could only download a package and build it.  What if the package didn’t
exist?  The library responsible for untarring it would throw an error.  And
even if makepkg had a problem with building the package, the script would
happily inform the user that it was successfully bulit…  What are the new
features, you may ask?  Install validation, i.e.  checking if the package is
installed or not.  Package searching, sanity checks, dependency solving…  This
is great.  If I’d like to write it in Perl, it will take me ages and I’m not
sure if there is any libalpm wrapper.&lt;/p&gt;
&lt;p&gt;If you think that you can rewrite it in Perl, sure, go for it, if you will:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;find a working libalpm wrapper or write one yourself&lt;/li&gt;
&lt;li&gt;port python3-aur (it heps with the XML-RPC of the AUR) to perl&lt;/li&gt;
&lt;li&gt;implement EVERY feature of the Py3K version&lt;/li&gt;
&lt;li&gt;give me the code and tell me how long did you write it&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Done?  Great then, &lt;a class="reference external" href="https://chriswarrick.com/contact/"&gt;contact me&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Python has the friendliest web documentation ever.  PHP’s looks a bit
harsh.  Perl’s is not easy to search.&lt;/p&gt;
&lt;p&gt;Time for a real world example:  I want to learn how to write a specific
function in Perl, PHP and Python.  This function would print the argument.
For example, in C:&lt;/p&gt;
&lt;pre class="code cpp"&gt;&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_94516a3c65094472861cf1e05188356c-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Notice: by “searching” in docs I mean reading the page and looking for
a thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perl:&lt;/strong&gt; Let’s begin at &amp;lt;&lt;a class="reference external" href="http://perl.org"&gt;http://perl.org&lt;/a&gt;&amp;gt;. Documentation tab, Tutorials.
I need to define a function.  Nothing seems to help me.  I look at the
sidebar and find &lt;em&gt;Reference/Functions&lt;/em&gt;.  Great, that’s what I need, so i
click it…  I can’t see anything about functions.  Langauge reference?
Nothing.  I ask Google and I learn that Perl names them &lt;em&gt;subroutines&lt;/em&gt;.  I
check the Language reference:  it’s the sub function, now I can define my
function and call it.  printf?  Let’s look it up in the Functions list.
We’re done.&lt;/p&gt;
&lt;pre class="code perl"&gt;&lt;a name="rest_code_f7bc6c617ba74337a2ac6c815b0c0ba4-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;writeStuff&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_f7bc6c617ba74337a2ac6c815b0c0ba4-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_f7bc6c617ba74337a2ac6c815b0c0ba4-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_f7bc6c617ba74337a2ac6c815b0c0ba4-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_f7bc6c617ba74337a2ac6c815b0c0ba4-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_f7bc6c617ba74337a2ac6c815b0c0ba4-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Perl’s documentation is anywhere near user-friendliness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PHP:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://php.net"&gt;http://php.net&lt;/a&gt;&amp;gt;.  Why is the &lt;em&gt;documentation&lt;/em&gt; link so small?
Anyways, I need functions.  Language Refernce/Functions.  Here we go, one
more click and I know how to make a function.  And I guess that I’ll have
to search the Function Reference.  I find text processing, go for Strings
and I can happily see printf.  Take a look and we can write this:&lt;/p&gt;
&lt;pre class="code php"&gt;&lt;a name="rest_code_4239ba6bc2ad4aba9535755f54228aaf-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;a name="rest_code_4239ba6bc2ad4aba9535755f54228aaf-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4239ba6bc2ad4aba9535755f54228aaf-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_4239ba6bc2ad4aba9535755f54228aaf-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_4239ba6bc2ad4aba9535755f54228aaf-5"&gt;&lt;/a&gt;&lt;span class="nx"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_4239ba6bc2ad4aba9535755f54228aaf-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://python.org/"&gt;http://python.org/&lt;/a&gt;&amp;gt;.  Documentation element exists in the
menu.  I click it.  They offer me a nice tutorial, so I’ll check it out.
I scan through the Table of Contents and I see a chapter called Defining
Functions.  Great, it will work.  Now I go back to the ToC and, because
this is a tutorial rather than a reference, and I can see chapter &lt;em&gt;7.1:
Fancier output formatting&lt;/em&gt;.  I want to have %s as in other languages, so
I skip this one and see &lt;em&gt;Old string formatting&lt;/em&gt;, which uses the %s.  Now,
assuming they indented the code on purpose because there are no braces,
I can write:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_79786e9c219140f1a504d414a89ee3c9-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_79786e9c219140f1a504d414a89ee3c9-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Input: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;a name="rest_code_79786e9c219140f1a504d414a89ee3c9-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_79786e9c219140f1a504d414a89ee3c9-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;All of them work and output &lt;tt class="docutils literal"&gt;Input: some stuff to print&lt;/tt&gt; followed by a
newline.  The original C example had 8 lines.  Perl made it in 5, PHP
in 6 (or 4 if you won’t count the PHP tags), Python used only 3.&lt;/p&gt;
&lt;p&gt;Which documentation is the most HUMAN-friendly?  Python’s.  Which is the
worst? Perl’s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nothing-is-flawless"&gt;
&lt;h2&gt;Nothing is flawless&lt;/h2&gt;
&lt;p&gt;Everything has some flaws.  What is it in Python, then?
&lt;a class="reference external" href="http://wiki.python.org/moin/Python2orPython3"&gt;Existence of two concurrent versions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most distros and projects use Py2K, while some of them offer Py3K (or both.)
The &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt; is in Py3K, because it requires &lt;tt class="docutils literal"&gt;pyalpm&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;AUR&lt;/tt&gt;
module (I could rewrite the AUR module in Py2K, but pyalpm is much harder to
modify.  UPDATE 2012-08-04: it was re-implemented by me several releases ago,
in version 2.1.0, released over a month after this post)  My other projects
(like KWDv2, another rewrite, this time with minimal changes and 30% less code
or my first ever Python project, trash.py, a partial XDG trash standard
implementation) use the old Py2K (usually v2.6, because I need compatibility
with my shell server.)&lt;/p&gt;
&lt;p&gt;I would rewrite this blog into &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; if I’d &lt;em&gt;own&lt;/em&gt; a VPS or a dedicated
server. (update 2011-10-20: this blog is now based on hyde, jekyll’s evil twin
in Python.  Update 2013-02-08: Now using Nikola, even better engine, yet still
in Python.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>programming</category><category>projects</category><category>Python</category><guid>https://chriswarrick.com/blog/2011/08/03/i-love-python/</guid><pubDate>Tue, 02 Aug 2011 22:00:00 GMT</pubDate></item></channel></rss>