<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about best practices)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/best-practices.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 15 Jan 2024 00:04:04 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;section id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;The best tool that can be used to create virtual environments is the
&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; module, which is part of
the standard library since Python 3.3.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;venv&lt;/code&gt; is built into Python, and most users don’t need to install anything.
However, Debian/Ubuntu users will need to run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/code&gt; to make it work (due to Debian not installing some components
that &lt;code class="docutils literal"&gt;venv&lt;/code&gt; needs by default). &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The alternative (and original, and previously standard) virtual environment tool is &lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt;. It works with Python 2.7, and has a couple
extra fetures (that you generally won’t need). virtualenv can be installed with your system package manager, or &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Which one to use? Probably &lt;code class="docutils literal"&gt;venv&lt;/code&gt;. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;code class="docutils literal"&gt;env&lt;/code&gt;, you need to run the &lt;code class="docutils literal"&gt;venv&lt;/code&gt;
tool with the Python you want to use in that environment.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_f25dd8562c51429195c234fcd4a62e9d-1" name="rest_code_f25dd8562c51429195c234fcd4a62e9d-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f25dd8562c51429195c234fcd4a62e9d-1"&gt;&lt;/a&gt;Linux:   $ python3 -m venv env
&lt;a id="rest_code_f25dd8562c51429195c234fcd4a62e9d-2" name="rest_code_f25dd8562c51429195c234fcd4a62e9d-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f25dd8562c51429195c234fcd4a62e9d-2"&gt;&lt;/a&gt;Windows: &amp;gt; py -m venv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or, if you’re using &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_d3a317cfb6a54f499697341e69c1349f-1" name="rest_code_d3a317cfb6a54f499697341e69c1349f-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_d3a317cfb6a54f499697341e69c1349f-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;a id="rest_code_d3a317cfb6a54f499697341e69c1349f-2" name="rest_code_d3a317cfb6a54f499697341e69c1349f-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_d3a317cfb6a54f499697341e69c1349f-2"&gt;&lt;/a&gt;&amp;gt; py -m virtualenv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, you will end up with a folder named &lt;code class="docutils literal"&gt;env&lt;/code&gt; that contains folders
named &lt;code class="docutils literal"&gt;bin&lt;/code&gt; (&lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; on Windows — contains executables and scripts
installed by packages, including
&lt;code class="docutils literal"&gt;python&lt;/code&gt;), &lt;code class="docutils literal"&gt;lib&lt;/code&gt; (contains code), and &lt;code class="docutils literal"&gt;include&lt;/code&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;setuptools&lt;/code&gt;, but &lt;code class="docutils literal"&gt;venv&lt;/code&gt; does not ship with
&lt;code class="docutils literal"&gt;wheel&lt;/code&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick: &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_20601fb6fe72443096e1bb8018795590-1" name="rest_code_20601fb6fe72443096e1bb8018795590-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_20601fb6fe72443096e1bb8018795590-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a id="rest_code_20601fb6fe72443096e1bb8018795590-2" name="rest_code_20601fb6fe72443096e1bb8018795590-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_20601fb6fe72443096e1bb8018795590-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;section id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Have one global place for them, like &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store them in each project’s directory, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option can be easier to manage, there are tools that can help manage
those (eg. &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, shell auto-activation scripts, or the
&lt;code class="docutils literal"&gt;workon&lt;/code&gt; functions described below).  The second option is equally easy to
work with, but comes with one caveat — you must add the venv directory to your
&lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; file (or &lt;code class="docutils literal"&gt;.git/info/exclude&lt;/code&gt; if you don’t want to commit
changes to &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;), since you don’t want it in your repository (it’s
binary bloat, and works only on your machine).&lt;/p&gt;
&lt;p&gt;If you pick the global virtual environment store option, you can use the following short
function (put it in &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt; / &lt;code class="docutils literal"&gt;.zshrc&lt;/code&gt; / your shell configuration file)
to get a simple way to activate an environment (by running &lt;code class="docutils literal"&gt;workon foo&lt;/code&gt;).
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; also has a &lt;code class="docutils literal"&gt;workon&lt;/code&gt; feature, although I don’t think
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; is really necessary and too helpful — the &lt;code class="docutils literal"&gt;workon&lt;/code&gt;
feature is handy though, and so here’s a way to do it without
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-1" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-1"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/virtualenvs
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-2" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-3" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;workon&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-4" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-5" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-5"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for PowerShell fans, here’s a &lt;code class="docutils literal"&gt;workon.ps1&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_6e65c61277d042928f2fe626a13c5b1e-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_6e65c61277d042928f2fe626a13c5b1e-1" name="rest_code_6e65c61277d042928f2fe626a13c5b1e-1"&gt;&lt;/a&gt; &lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$home\virtualenvs"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_6e65c61277d042928f2fe626a13c5b1e-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_6e65c61277d042928f2fe626a13c5b1e-2" name="rest_code_6e65c61277d042928f2fe626a13c5b1e-2"&gt;&lt;/a&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"$WORKON_HOME\&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="s2"&gt;\Scripts\activate.ps1"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for cmd.exe fans… you should switch to PowerShell, it’s a very nice and
friendly shell (though perhaps requiring some effort to learn how to be
productive with it).&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;activation (run &lt;code class="docutils literal"&gt;source env/bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;env\Scripts\activate&lt;/code&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly. (After installing
scripts, &lt;code class="docutils literal"&gt;hash &lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/code&gt; may be necessary on *nix to use them.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;executing &lt;code class="docutils literal"&gt;env/bin/python&lt;/code&gt; (&lt;code class="docutils literal"&gt;env\Scripts\python&lt;/code&gt;) and other scripts directly, as
activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is, and that
method is failsafe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-1" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-2" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-3" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-3" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-4" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-4" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-5" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-5" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-6" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-6" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-7" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-7" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-8" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-8" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-9" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-9" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-10" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-10" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-11" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-11" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-12" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-12" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-13" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-13" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-14" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-14" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-15" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-15" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-16" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-16" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-17" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-17" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-17"&gt;&lt;/a&gt;## Windows, updating pip/setuptools/wheel ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-18" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-18" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-18"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\python -m pip install -U pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt;, calling it as
&lt;code class="docutils literal"&gt;./manage.py&lt;/code&gt; requires activation, or you can run
&lt;code class="docutils literal"&gt;venv/bin/python manage.py&lt;/code&gt;.)&lt;/p&gt;
&lt;section id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option of &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt; does not work and is deprecated.) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-1" name="rest_code_e48cf39ea2744547973177ceb020ef94-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-2" name="rest_code_e48cf39ea2744547973177ceb020ef94-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-3" name="rest_code_e48cf39ea2744547973177ceb020ef94-3" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-4" name="rest_code_e48cf39ea2744547973177ceb020ef94-4" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;p&gt;To manage those &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files in a more orgnized yet still simple
way, you might be interested in &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;section id="im-using-virtualenv-do-i-need-to-install-it-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;I’m using virtualenv. Do I need to install it for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;code class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/code&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful. (The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is tied to the Python version it’s
installed in.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;code class="docutils literal"&gt;sudo pip&lt;/code&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider using &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; instead.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The thing you’re actually installing is &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; if you want to upgrade the package manager itself.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes (I’m looking at you Homebrew) after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><category>venv</category><category>virtual environments</category><category>virtualenv</category><guid>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;nav class="contents right-toc" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="toc-entry-1"&gt;Use the right tool for the job&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="toc-entry-2"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="toc-entry-3"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="toc-entry-4"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="toc-entry-5"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-1" role="doc-backlink"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is not in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; your process gets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the hard-coded path is not correct on the end user’s system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-2" role="doc-backlink"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;code class="docutils literal"&gt;grep&lt;/code&gt;, &lt;code class="docutils literal"&gt;sed&lt;/code&gt; and
&lt;code class="docutils literal"&gt;awk&lt;/code&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;code class="docutils literal"&gt;os&lt;/code&gt; or &lt;code class="docutils literal"&gt;shutil&lt;/code&gt;. Your language of
choice can also handle things like networking (don’t call &lt;code class="docutils literal"&gt;curl&lt;/code&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-3" role="doc-backlink"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;code class="docutils literal"&gt;execve()&lt;/code&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;directly, by calling &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;through the shell (&lt;code class="docutils literal"&gt;sh&lt;/code&gt;), usually by calling &lt;code class="docutils literal"&gt;system()&lt;/code&gt;. As Linux’s
manpage for &lt;code class="docutils literal"&gt;system(3)&lt;/code&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;system()&lt;/code&gt; library function uses &lt;code class="docutils literal"&gt;fork(2)&lt;/code&gt; to create a child process that executes the shell command specified in command using &lt;code class="docutils literal"&gt;execl(3)&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_fe76242c10854630b34784828aefe998-1" name="rest_code_fe76242c10854630b34784828aefe998-1" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_fe76242c10854630b34784828aefe998-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_2243d588951c4248a123ba7d7fcfa618-1" name="rest_code_2243d588951c4248a123ba7d7fcfa618-1" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_2243d588951c4248a123ba7d7fcfa618-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a id="rest_code_2243d588951c4248a123ba7d7fcfa618-2" name="rest_code_2243d588951c4248a123ba7d7fcfa618-2" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_2243d588951c4248a123ba7d7fcfa618-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a id="rest_code_2243d588951c4248a123ba7d7fcfa618-3" name="rest_code_2243d588951c4248a123ba7d7fcfa618-3" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_2243d588951c4248a123ba7d7fcfa618-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-1" name="rest_code_94efdfdbecf94e999741af30627f4a4a-1" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-2" name="rest_code_94efdfdbecf94e999741af30627f4a4a-2" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-3" name="rest_code_94efdfdbecf94e999741af30627f4a4a-3" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-4" name="rest_code_94efdfdbecf94e999741af30627f4a4a-4" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-5" name="rest_code_94efdfdbecf94e999741af30627f4a4a-5" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-6" name="rest_code_94efdfdbecf94e999741af30627f4a4a-6" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-7" name="rest_code_94efdfdbecf94e999741af30627f4a4a-7" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-8" name="rest_code_94efdfdbecf94e999741af30627f4a4a-8" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-9" name="rest_code_94efdfdbecf94e999741af30627f4a4a-9" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-10" name="rest_code_94efdfdbecf94e999741af30627f4a4a-10" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-11" name="rest_code_94efdfdbecf94e999741af30627f4a4a-11" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-12" name="rest_code_94efdfdbecf94e999741af30627f4a4a-12" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-13" name="rest_code_94efdfdbecf94e999741af30627f4a4a-13" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-14" name="rest_code_94efdfdbecf94e999741af30627f4a4a-14" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-15" name="rest_code_94efdfdbecf94e999741af30627f4a4a-15" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-16" name="rest_code_94efdfdbecf94e999741af30627f4a4a-16" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-17" name="rest_code_94efdfdbecf94e999741af30627f4a4a-17" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-18" name="rest_code_94efdfdbecf94e999741af30627f4a4a-18" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-19" name="rest_code_94efdfdbecf94e999741af30627f4a4a-19" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-20" name="rest_code_94efdfdbecf94e999741af30627f4a4a-20" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-20"&gt;&lt;/a&gt;
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-21" name="rest_code_94efdfdbecf94e999741af30627f4a4a-21" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-22" name="rest_code_94efdfdbecf94e999741af30627f4a4a-22" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-23" name="rest_code_94efdfdbecf94e999741af30627f4a4a-23" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-24" name="rest_code_94efdfdbecf94e999741af30627f4a4a-24" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-25" name="rest_code_94efdfdbecf94e999741af30627f4a4a-25" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-26" name="rest_code_94efdfdbecf94e999741af30627f4a4a-26" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-27" name="rest_code_94efdfdbecf94e999741af30627f4a4a-27" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-28" name="rest_code_94efdfdbecf94e999741af30627f4a4a-28" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-29" name="rest_code_94efdfdbecf94e999741af30627f4a4a-29" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-30" name="rest_code_94efdfdbecf94e999741af30627f4a4a-30" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-31" name="rest_code_94efdfdbecf94e999741af30627f4a4a-31" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-31"&gt;&lt;/a&gt;
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-32" name="rest_code_94efdfdbecf94e999741af30627f4a4a-32" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-33" name="rest_code_94efdfdbecf94e999741af30627f4a4a-33" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a id="rest_code_94efdfdbecf94e999741af30627f4a4a-34" name="rest_code_94efdfdbecf94e999741af30627f4a4a-34" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#rest_code_94efdfdbecf94e999741af30627f4a4a-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;quotes and escapes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding expressions in braces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wildcards (glob, &lt;code class="docutils literal"&gt;*&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redirections and pipes (&lt;code class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command substitution (backticks or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running multiple commands on the same line (&lt;code class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-4" role="doc-backlink"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="simple dl-horizontal"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Perform fork-exec by yourself, or use &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;code class="docutils literal"&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the subprocess module. Always pass &lt;code class="docutils literal"&gt;shell=False&lt;/code&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;code class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/code&gt; (and not &lt;code class="docutils literal"&gt;_shell&lt;/code&gt;), but note it takes &lt;code class="docutils literal"&gt;*args&lt;/code&gt; and not a list. Never use &lt;code class="docutils literal"&gt;os.system&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.popen&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;IO.popen&lt;/code&gt;. Pass multiple arguments to &lt;code class="docutils literal"&gt;system()&lt;/code&gt; (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/code&gt;). Never use &lt;code class="docutils literal"&gt;%x{command}&lt;/code&gt; or backticks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;Runtime.exec&lt;/code&gt;. Pass multiple arguments or list to &lt;code class="docutils literal"&gt;ProcessBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All the standard methods go through the shell. Try &lt;code class="docutils literal"&gt;escapeshellcmd()&lt;/code&gt;, &lt;code class="docutils literal"&gt;escapeshellarg()&lt;/code&gt; — or better, switch to Python. Or anything, really.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;os/exec&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.StartProcess&lt;/code&gt; are safe.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use &lt;code class="docutils literal"&gt;child_process.execFile&lt;/code&gt; or &lt;code class="docutils literal"&gt;child_process.spawn&lt;/code&gt; with &lt;code class="docutils literal"&gt;shell&lt;/code&gt; set to false.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;section id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#toc-entry-5" role="doc-backlink"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; on Windows. Instead, &lt;code class="docutils literal"&gt;CreateProcess()&lt;/code&gt;,
&lt;code class="docutils literal"&gt;ShellExecute()&lt;/code&gt;, or lower-level &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/code&gt; functions are used. &lt;code class="docutils literal"&gt;cmd.exe
/c&lt;/code&gt; is called in shell calls.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The function that does the real work is &lt;code class="docutils literal"&gt;execve()&lt;/code&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;code class="docutils literal"&gt;execl()&lt;/code&gt; does the last two.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Quoted from &lt;code class="docutils literal"&gt;execve(2)&lt;/code&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;An alternative is &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>best practices</category><category>C</category><category>devel</category><category>guide</category><category>Linux</category><category>Python</category><category>security</category><category>subprocess</category><category>Unix</category><guid>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Setting up a Python development environment</title><link>https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Setting up Python is usually simple, but there are some places where newcomers
(and experienced users) need to be careful. What versions are there? What’s the
difference between Python, CPython, Anaconda, PyPy? Those and many other
questions may stump new developers, or people wanting to use Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note: this guide is opinionated.&lt;/p&gt;
&lt;nav class="contents right-toc" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#glossary-and-questions" id="toc-entry-1"&gt;Glossary and questions&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#python-versions-2-vs-3" id="toc-entry-2"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-run-multiple-pythons-on-the-same-machine" id="toc-entry-3"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#implementations" id="toc-entry-4"&gt;Implementations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#distributions" id="toc-entry-5"&gt;Distributions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-make-exe-files-from-python-programs" id="toc-entry-6"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#where-to-learn-python-where-to-get-help" id="toc-entry-7"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installing-python" id="toc-entry-8"&gt;Installing Python&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#windows" id="toc-entry-9"&gt;Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#macos" id="toc-entry-10"&gt;macOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#linux-and-other-unix-like-oses" id="toc-entry-11"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installing-packages" id="toc-entry-12"&gt;Installing packages&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#user-installs" id="toc-entry-13"&gt;User installs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#virtual-environments" id="toc-entry-14"&gt;Virtual environments&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#tools-and-management" id="toc-entry-15"&gt;Tools and management&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installation-and-usage" id="toc-entry-16"&gt;Installation and usage&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#upgrading-and-moving" id="toc-entry-17"&gt;Upgrading and moving&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#packages-with-c-extensions-binary" id="toc-entry-18"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#other-stuff" id="toc-entry-19"&gt;Other stuff&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#editors-and-ides" id="toc-entry-20"&gt;Editors and IDEs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#update-history" id="toc-entry-21"&gt;Update history&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="glossary-and-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-1" role="doc-backlink"&gt;Glossary and questions&lt;/a&gt;&lt;/h2&gt;
&lt;section id="python-versions-2-vs-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-2" role="doc-backlink"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Python community has undergone sort of a &lt;em&gt;schism&lt;/em&gt; in recent years. Python
3, released in 2008, broke backwards compatibility: deprecated some bad
constructs and libraries (eg. &lt;code class="docutils literal"&gt;raw_input()&lt;/code&gt; became &lt;code class="docutils literal"&gt;input()&lt;/code&gt; and the
original Python 2 function that ran code input by users is gone; &lt;code class="docutils literal"&gt;print()&lt;/code&gt;
became a function; many things that returned lists now are iterators — &lt;code class="docutils literal"&gt;zip&lt;/code&gt;,
&lt;code class="docutils literal"&gt;range&lt;/code&gt;), and completely remodelled strings (which are now Unicode by
default, and the interpreter behavior is stricter when the wrong type is used)&lt;/p&gt;
&lt;p&gt;For new code, you should use Python 3. &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Most popular packages support Python 3&lt;/a&gt;, and many of them support both Pythons at
the same time. The early bugs were ironed out in the first few point releases,
some features that made porting easier were added (back).&lt;/p&gt;
&lt;p&gt;But what if you end up needing Python 2 later? No problem: you can learn the
differences in a short time, and with the help of a few libraries (eg. &lt;code class="docutils literal"&gt;six&lt;/code&gt;)
you can easily write code that is compatible with Python 2 and 3 at the same
time, using the same codebase (most libraries out there do that).&lt;/p&gt;
&lt;p&gt;Python 2 will go EOL and lose official support and updates in 2020.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/Python2orPython3"&gt;Python 2 or Python 3 on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="can-i-run-multiple-pythons-on-the-same-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-3" role="doc-backlink"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes. Note that multiple Python interpreters are completely separate: they have
their own pip and packages, and you can’t run Python 2 code in a Python 3
interpreter. You need to specify which interpreter to use when installing
packages and running some scripts (eg. &lt;code class="docutils literal"&gt;pip2&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip3&lt;/code&gt; or &lt;code class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It’s best to limit yourself to the latest Python 2 and 3 versions. Python is
backwards-compatible within the major release, so Python 2.7 runs code
written with older 2.x versions in mind.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="implementations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-4" role="doc-backlink"&gt;Implementations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A programming language is an abstract construct. To run code written in that
language, an interpreter or compiler needs to be written. In Python’s case,
there’s a plethora of implementations. Some of them are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt; is the reference implementation. This is the implementation
distributed on &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt; and as part of many operating systems.
Most Python features are first implemented in CPython, and then they are
ported to other implementations.  If you don’t know what to choose, use
CPython.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PyPy&lt;/strong&gt; is a fast implementation, written in a subset of Python. It’s compatible with
Python 2.7 and 3.5 (beta support). It can run all pure Python code, and many
extension libraries that use CFFI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;IronPython&lt;/strong&gt; is a .NET CLR implementation. It can integrate with .NET code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jython&lt;/strong&gt; is a Java JVM implementation. It can integrate with Java code, as
well as other JVM languages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Implementations on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="distributions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-5" role="doc-backlink"&gt;Distributions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are also Python (CPython) distributions. They ship the CPython
interpreter and add some extra packages/features.  They are maintained by other
communities or corporate entities.&lt;/p&gt;
&lt;p&gt;The most popular third-party distribution is &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum Analytics. It’s popular
for data scientists, and includes over 100 packages, with extra pre-built
binaries available from the &lt;code class="docutils literal"&gt;conda&lt;/code&gt; package manager.&lt;/p&gt;
&lt;p&gt;I personally recommend to avoid Anaconda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Most packages have binary wheels for Windows, macOS and Linux (yes, Linux!)
making the installation as simple as &lt;code class="docutils literal"&gt;pip install numpy&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You waste disk space for packages Anaconda installs that you won’t ever need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s provided by some random for-profit company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ve seen bugs that were not reproducible outside of Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can still do data science using the official distribution. There’s
nothing special about Anaconda.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDistributions"&gt;Python distributions on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="can-i-make-exe-files-from-python-programs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-6" role="doc-backlink"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, you can. There are tools for this — &lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is the best one. Note that you usually need to
run it on the destination operating system. And remember that “compiling” to
exe files like that &lt;strong&gt;is not&lt;/strong&gt; a security measure — your source code is still
easily recoverable. (It’s not a security measure in other languages either,
even if getting source code back might be more expensive/tricky in those.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-to-learn-python-where-to-get-help"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-7" role="doc-backlink"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of learning material is important. If you get a bad book, it might
discourage you from learning (because it’s boring), or may teach you
bad/outdated practices.&lt;/p&gt;
&lt;p&gt;If you can already program in another language, I recommend the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official
Python tutorial&lt;/a&gt;. For newcomers to
programming, I recommend &lt;a class="reference external" href="http://greenteapress.com/wp/think-python-2e/"&gt;Think Python&lt;/a&gt; or &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff
with Python&lt;/a&gt;.  They teach Python 3, and
(mostly) best practices.&lt;/p&gt;
&lt;p&gt;If you need help, try &lt;code class="docutils literal"&gt;#python&lt;/code&gt; on freenode IRC, the &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/tutor"&gt;Tutor&lt;/a&gt; or &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list"&gt;Python-list&lt;/a&gt; mailing lists, or a bunch of other communities. (I’m a regular on &lt;code class="docutils literal"&gt;#python&lt;/code&gt;)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="installing-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-8" role="doc-backlink"&gt;Installing Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This guide will focus on installing CPython 2.7 and 3.x (latest), using the standard
distribution. This choice is satisfactory for most people. Third-party
distributions, while handy in some cases, are not needed for most. (See
&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#distributions"&gt;Distributions&lt;/a&gt; for arguments)&lt;/p&gt;
&lt;p&gt;Throughout this guide, I’ll refer to the Python interpreter executable as
&lt;code class="docutils literal"&gt;python&lt;/code&gt;. The exact name depends on your system and desired version. On most
OSes, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 2 and &lt;code class="docutils literal"&gt;python3&lt;/code&gt; is 3; &lt;code class="docutils literal"&gt;python2&lt;/code&gt; should also
exist.  On Arch Linux, &lt;code class="docutils literal"&gt;python&lt;/code&gt; is Python 3. On Windows, use the &lt;code class="docutils literal"&gt;py&lt;/code&gt;
launcher.&lt;/p&gt;
&lt;section id="windows"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-9" role="doc-backlink"&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Download the installer(s): &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those installers come with &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, and modern Python 3.x versions come with
the &lt;code class="docutils literal"&gt;py&lt;/code&gt; launcher.  You can use that launcher to pick a specific Python
version, eg.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2&lt;/span&gt; somefile.py&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-2.7&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;py&lt;/code&gt; (default system version)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s recommended for most use, and mandatory for upgrading pip.&lt;/p&gt;
&lt;p&gt;The 32-bit versions are more versatile. Most packages support both (the only
exception I’m aware of is Tensorflow, which only allows 64-bit Python 3.5 as of
now).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="macos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-10" role="doc-backlink"&gt;macOS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS ships with Python 2.7.10 (as of macOS Sierra). It’s not the latest
version; it’s good enough for most people, but I still recommend installing
your own (the system Python doesn’t include &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, for example). You can
install the latest 2.7 version, as well as Python 3, using a package manager. I
recommend Homebrew — it’s the most popular solution, and lets you install many
other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use the python.org installers: they do not have uninstallers, so you
will have outdated versions lying around after some time. There is no
auto-update as well.  &lt;strong&gt;DO NOT&lt;/strong&gt; attempt to remove the system-installed Python,
this will only damage your system and you’ll need to reinstall.&lt;/p&gt;
&lt;p&gt;If you already have a package manager installed (MacPorts, Fink), don’t install
a new one and just use the existing one.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;brew install python python3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should now have &lt;code class="docutils literal"&gt;python&lt;/code&gt;, &lt;code class="docutils literal"&gt;python3&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;pip3&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To update Homebrew and Python, run &lt;code class="docutils literal"&gt;brew update&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="linux-and-other-unix-like-oses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-11" role="doc-backlink"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On Linux, there usually are good enough packages in your OS repositories. You
should be able to install the appropriate package for Python (2 and/or 3).
Most (if not all) distributions require Python — &lt;strong&gt;do not&lt;/strong&gt; remove the
pre-installed packages, and be careful not to overwrite them with something
newer.&lt;/p&gt;
&lt;p&gt;If the version that ships with your distribution is too old, there are some
options. There might be some repositories with better versions, eg. the
&lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes PPA&lt;/a&gt;
for Ubuntu. Then there’s the other option of compiling Python. There
are some tools to help with this, like &lt;code class="docutils literal"&gt;pyenv&lt;/code&gt; or &lt;code class="docutils literal"&gt;pythonz&lt;/code&gt; (they can also
manage multiple Python versions), or you can do it manually.
The instructions depend on your exact requirements, but here’s a summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Download the &lt;a class="reference external" href="https://www.python.org/downloads/source/"&gt;source distribution from Python.org&lt;/a&gt; and unpack it. Go into the unpacked source directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure you’ve got a functional C compiler and Python’s dependencies. You can
usually use your system’s package manager to install the build dependencies
of your system Python. Some dependencies are optional (eg. &lt;code class="docutils literal"&gt;sqlite3&lt;/code&gt;
requires SQLite headers).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=/opt/python3.6&lt;/span&gt;&lt;/code&gt; and then &lt;code class="docutils literal"&gt;make&lt;/code&gt;. (You may add other options to both. It will
take a while.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;make altinstall&lt;/code&gt; as root. Avoid &lt;code class="docutils literal"&gt;make install&lt;/code&gt;, as it can override
&lt;code class="docutils literal"&gt;python&lt;/code&gt; executables.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember: compiling Python should be considered a &lt;strong&gt;last resort&lt;/strong&gt;, unless you
have very specific Python version requirements.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="installing-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-12" role="doc-backlink"&gt;Installing packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install third-party packages, you should use pip, the Python package
manager. If you’re using Windows or macOS (from Homebrew), pip is included with
your copy of Python.  If you’re on Linux and installed Python from a system
repository, install the correct system package (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-pip&lt;/span&gt;&lt;/code&gt;,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/code&gt;). If you compiled your own Python, pip is also included.&lt;/p&gt;
&lt;p&gt;To run pip, use &lt;code class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (Windows), &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; (other platforms),
or the short &lt;code class="docutils literal"&gt;pip&lt;/code&gt;/&lt;code class="docutils literal"&gt;pip3&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEVER use sudo pip.&lt;/strong&gt; This can cause numerous problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;conflicts between packages installed by pip and your system package
manager&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pip modifying system packages, leading to issues when updating them, or
breaking dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no isolation between package versions, which is sometimes needed to satisfy
dependencies&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package install is specific to the Python interpreter used to run
&lt;code class="docutils literal"&gt;pip&lt;/code&gt;. Packages installed to a virtualenv are separate from system packages;
packages installed for “global” Python 2.7 are separate from 3.6 packages.
Virtual environments generally don’t use the system packages, unless
specifically enabled during creation.&lt;/p&gt;
&lt;p&gt;Some distros have popular packages in their repositories. Sometimes they’re
good; in other cases they’re terribly outdated or they lack important
components, making package managers angry and sick of supporting a 2-year-old
version. (Especially since most bugs are closed with “we’ve fixed that long
ago”)&lt;/p&gt;
&lt;section id="user-installs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-13" role="doc-backlink"&gt;User installs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a small scale, you can install packages with pip for a single user.  Use
&lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; PACKAGE&lt;/code&gt; to do this. If your package installs &lt;a class="reference external" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/"&gt;scripts&lt;/a&gt;,
they will be installed to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt; on Linux, and
&lt;code class="docutils literal"&gt;~/Library/Python/X.Y/bin&lt;/code&gt; on macOS (X.Y is Python version), or you can use
&lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/code&gt; if the package supports it.&lt;/p&gt;
&lt;p&gt;For most people and projects, virtual environments are better. There are,
however, use cases for putting some packages user-wide — if you don’t work on
projects, but instead are doing one-off research projects, those are better
suited by user-wide installs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-14" role="doc-backlink"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p class="lead"&gt;I wrote a newer, more detailed post about virtualenvs: &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/"&gt;Python Virtual
Environments in Five Minutes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Virtual environments are the best way to install and manage Python packages.
Advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Isolation of projects and their requirements: if one app/package requires
library version X, but another requires version Y, they can live in separate
virtual environments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Independent from system-wide packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lightweight (an empty virtualenv is about 10 MB)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple to re-create in any place (&lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; → &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section id="tools-and-management"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-15" role="doc-backlink"&gt;Tools and management&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are two tools to facilitate creation of virtual environments: the older
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; project, and the newer
&lt;code class="docutils literal"&gt;venv&lt;/code&gt; module. The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is shipped with Python 3.x; some
distributions may put it in a separate package or remove it altogether. Use
whichever works for you.  Virtualenv is compatible with more Python versions
and cannot be broken by incompetent OS package maintainers (&lt;code class="docutils literal"&gt;venv&lt;/code&gt; requires
an extra package on Debian).&lt;/p&gt;
&lt;p&gt;There are multiple schools of thought regarding virtualenv placement and
content. Myself, I use &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to manage virtualenvs
and put them in &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;. Other people put virtualenvs inside their
git repositories (but they &lt;em&gt;must&lt;/em&gt; be in &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;) Virtualenvs should only contain packages
installed with &lt;code class="docutils literal"&gt;pip&lt;/code&gt; so they can be recreated quickly.&lt;/p&gt;
&lt;p&gt;I also use the &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; plugin for Oh My Zsh, which also
activates virtualenvs with the same name as a git repo, or the environment
named by a &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; file.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="installation-and-usage"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-16" role="doc-backlink"&gt;Installation and usage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install virtualenv user-wide, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;. You can
then use it with &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; virtualenv DIRECTORY&lt;/code&gt;. You may pass extra
options, eg. interpreter to use (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; python3&lt;/code&gt;). Sometimes you need to install
virtualenv for every Python version; usually, one copy is enough.&lt;/p&gt;
&lt;p&gt;How to use them? This is a subject of heated debate in the Python community.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Some people believe that activating (&lt;code class="docutils literal"&gt;source bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;Scripts\activate&lt;/code&gt; on Windows) is the right thing to do and simplifies work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others think that you should use &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; (or other scripts in that
directory) directly, as activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper
variables — those variables are not mandatory for operation, running
the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others still think &lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;virtualenvs should be used in subshells&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, if activating virtualenvs works in your environment, you should
do it — it’s the most convenient option. There are, however, cases when
activation fails, or is otherwise impossible — calling &lt;code class="docutils literal"&gt;bin/python&lt;/code&gt; directly
is your best bet in that case. If you are working inside shell scripts, do not
activate virtualenvs.  I’m not a fan of the subshell option, because it
complicates stuff if you work on multiple projects, and requires tracking usage
manually.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="upgrading-and-moving"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-17" role="doc-backlink"&gt;Upgrading and moving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Upgrading the system Python may make your virtualenvs unusable.
For patch version upgrades, you can just update symlinks (see &lt;a class="reference external" href="https://github.com/Kwpolska/scripts/blob/master/fix-venvs.sh"&gt;fix-venvs.sh&lt;/a&gt;).
However, if the minor version changes, it’s best to re-create the virtualenv
(you need to create &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; ahead of time).&lt;/p&gt;
&lt;p&gt;You cannot move a virtualenv between directories/machines or rename
virtualenvs. You need to use &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;, create a new
virtualenv, and run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; (you can then delete
the old environment with a simple &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="packages-with-c-extensions-binary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-18" role="doc-backlink"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The situation improved drastically in the past year or so. Nowadays, almost
all packages have a pre-compiled package available in PyPI. Those packages work
for Windows, macOS, and Linux. There are packages for some of the most
common &lt;em&gt;offenders&lt;/em&gt;, including Pillow, lxml, PyQt5, numpy… However, there might
still be packages without wheels on PyPI.&lt;/p&gt;
&lt;p&gt;If there is no wheel for a package and you are on Windows, check out &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph
Gohlke’s unofficial binaries&lt;/a&gt;.
If you can’t find any wheels online, you would have to resort to compiling it
manually — this requires installing Visual Studio (Visual C++) in a version
that matches your Python, and it’s kind of a pain to do.&lt;/p&gt;
&lt;p&gt;If you are not on Windows, you must install a C compiler and toolchain.
If you get a warning about missing &lt;code class="docutils literal"&gt;Python.h&lt;/code&gt;, install the appropriate development
package — for example, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-dev&lt;/span&gt;&lt;/code&gt;) on Debian/Ubuntu,
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-devel&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python3-devel&lt;/span&gt;&lt;/code&gt; on RHEL/Fedora. The package you’re trying
to install might have other dependencies that you need to install (the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-dev(el)&lt;/span&gt;&lt;/code&gt; part is important, too)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-19" role="doc-backlink"&gt;Other stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re working on a project, use &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-e&lt;/span&gt; .&lt;/code&gt; inside the project
directory to install the package in your environment in development (editable)
mode. This loads code directly from your repository — you don’t need to
re-install on every change; you might need to re-install when your version
number changes.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="editors-and-ides"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-20" role="doc-backlink"&gt;Editors and IDEs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another important thing a developer should take care of is the choice of an
editor. This is an important decision, and is the reason for many holy wars in
the programmer community.&lt;/p&gt;
&lt;p&gt;A good editor should have syntax highlighting for all languages you need to
work with. It should also have features like visual block/multiple selections,
sophisticated find-and-replace, file finding, code completion, and many more minor
but helpful features.&lt;/p&gt;
&lt;p&gt;Then there’s the difference between IDEs and text editors. Text editors are
simpler, whereas IDEs try to include many extra things not necessarily related
to writing code. IDEs often use more resources, but you won’t notice it with a
modern computer (especially with a SSD).&lt;/p&gt;
&lt;p&gt;The best IDE out there is &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from
JetBrains. It has both a free Community and paid Professional edition. The
JetBrains folks are experts at IDEs — they have fully-fledged tools for many
languages. Their Python solution offers a plethora of options that aid
programmers in their work.  Also, if you work with Java, or otherwise more than
one IDEA-supported language, then install IntelliJ IDEA and the Python plugin
(which has the same features as PyCharm).  Students can get &lt;a class="reference external" href="https://www.jetbrains.com/student/"&gt;free
Professional/Ultimate licenses for JetBrains products&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I also spend a lot of time in &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; (&lt;a class="reference external" href="https://neovim.io/"&gt;neovim&lt;/a&gt;/&lt;a class="reference external" href="http://vimr.org/"&gt;VimR&lt;/a&gt; to be precise). Vim is the
most powerful text editor out there, and with the right set of plugins it can
beat IDEs at speed and productivity. Vim has a steep learning curve, but it’s
worth it — you can do large changes with just a few keystrokes. Vim is
considered so good that many IDEs (Visual Studio, IntelliJ IDEA/PyCharm) have
Vim emulation plugins.&lt;/p&gt;
&lt;p&gt;Another option is &lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; — it’s
a text editor, but can offer many IDE-like features with the right set of
plugins. It’s Electron-based architecture, or effectively being based on top of
Google’s Chromium, is unfortunate and can lead to terrible performance on
lower-end machines, and on higher-end ones in some cases. (In my experience,
it’s better than Atom.) You can also try &lt;a class="reference external" href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; ($80).&lt;/p&gt;
&lt;p&gt;But really, almost any editor will do. But please &lt;strong&gt;avoid&lt;/strong&gt; IDLE, the editor
included with Python. It lacks some of the most basic things — it doesn’t even
have an option to show line numbers. Not to mention its ugliness. Also, don’t
use Notepad and TextEdit. Those are too simple, and Notepad has encoding
issues.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="update-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#toc-entry-21" role="doc-backlink"&gt;Update history&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;2018-09-21&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Link to python-virtual-environments post.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-19&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Better description of problems caused by using sudo pip.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-10&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Added notes about not removing built-in Pythons.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;2017-07-07&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Spelling fixes and updates to the virtualenv usage section.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><guid>https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/</guid><pubDate>Mon, 03 Jul 2017 10:40:00 GMT</pubDate></item><item><title>Python Apps the Right Way: entry points and scripts</title><link>https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;There are multiple ways to write an app in Python.  However, not all of them
provide your users with the best experience.&lt;/p&gt;
&lt;p&gt;One of the problems some people encounter is &lt;em&gt;writing launch scripts&lt;/em&gt;.  The
best way to handle this is the &lt;em&gt;Entry Points&lt;/em&gt; mechanism of Setuptools, and a
&lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file.  It’s quite easy to implement.  If you’re interested,
read on to learn more!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="requirements-and-desired-results"&gt;
&lt;h2&gt;Requirements and Desired Results&lt;/h2&gt;
&lt;p&gt;You will need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a Python project&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a setup.py file using &lt;a class="reference external" href="https://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the following directory structure:&lt;/p&gt;
&lt;ul class="list-nobullets"&gt;
    &lt;li&gt;
    &lt;a href="https://chriswarrick.com/listings/entry_points_project/"&gt;&lt;i class="fa fa-folder-open"&gt;&lt;/i&gt;
    entry_points_project/&lt;/a&gt;
    &lt;/li&gt;&lt;li&gt;
        &lt;ul class="list-nobullets"&gt;
        &lt;li&gt;
        &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/"&gt;&lt;i class="fa fa-folder-open"&gt;&lt;/i&gt; my_project/&lt;/a&gt;
            &lt;/li&gt;&lt;li&gt;
            &lt;ul class="list-nobullets"&gt;
                &lt;li&gt;
                &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/__init__.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt;
                __init__.py&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                &lt;a href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt;
                __main__.py&lt;/a&gt;
                &lt;/li&gt;
            &lt;/ul&gt;
            &lt;/li&gt;
        &lt;li&gt;
        &lt;a href="https://chriswarrick.com/listings/entry_points_project/setup.py.html"&gt;&lt;i class="fa fa-file"&gt;&lt;/i&gt; setup.py&lt;/a&gt;
        &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/li&gt;
    &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(&lt;code class="docutils literal"&gt;entry_points_project&lt;/code&gt; is also where the README and other auxiliary files
go, while &lt;code class="docutils literal"&gt;my_project&lt;/code&gt; contains all the Python code.)&lt;/p&gt;
&lt;p&gt;When you’re done, you will have a project that can be executed by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; my_project&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;my_project&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Provided that you have your Python directory and its &lt;code class="docutils literal"&gt;Scripts\&lt;/code&gt; subdirectory on
the %PATH%, this will &lt;strong&gt;also work in Windows&lt;/strong&gt;.&lt;/p&gt;
 &lt;div class="panel panel-info"&gt;
   &lt;div class="panel-heading"&gt;
     &lt;h4 class="panel-title"&gt;Looking for a project template?&lt;/h4&gt;
   &lt;/div&gt;
   &lt;div class="panel-body"&gt;
    If you want to create a well-structured project with release automation and
some other goodies, check out my &lt;a href="https://github.com/Kwpolska/python-project-template" style="font-weight: bold;"&gt;Python Project Template&lt;/a&gt;.
   &lt;/div&gt;
 &lt;/div&gt;&lt;/section&gt;
&lt;section id="step-1-create-a-main-py-file"&gt;
&lt;h2&gt;Step 1: create a &lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file&lt;/h2&gt;
&lt;p&gt;In order to implement the first desired result, you need to create a
&lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file in your package.  This file needs to contain a &lt;code class="docutils literal"&gt;main()&lt;/code&gt;
function that takes no arguments, and also a special passage to determine code
to run:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py.html"&gt;entry_points_project/my_project/__main__.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/my_project/__main__.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-1" name="rest_code_72be268828d74dccb3f04566c6f0750e-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-2" name="rest_code_72be268828d74dccb3f04566c6f0750e-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-3" name="rest_code_72be268828d74dccb3f04566c6f0750e-3"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-4" name="rest_code_72be268828d74dccb3f04566c6f0750e-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-5" name="rest_code_72be268828d74dccb3f04566c6f0750e-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""The main routine."""&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-6" name="rest_code_72be268828d74dccb3f04566c6f0750e-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-7" name="rest_code_72be268828d74dccb3f04566c6f0750e-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-8" name="rest_code_72be268828d74dccb3f04566c6f0750e-8"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-9" name="rest_code_72be268828d74dccb3f04566c6f0750e-9"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"This is the main routine."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-10" name="rest_code_72be268828d74dccb3f04566c6f0750e-10"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"It should do something interesting."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-11" name="rest_code_72be268828d74dccb3f04566c6f0750e-11"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-12" name="rest_code_72be268828d74dccb3f04566c6f0750e-12"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Do argument parsing here (eg. with argparse) and anything else&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-13" name="rest_code_72be268828d74dccb3f04566c6f0750e-13"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# you want your project to do. Return values are exit codes.&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-14" name="rest_code_72be268828d74dccb3f04566c6f0750e-14"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-15"&gt;&lt;code data-line-number="15"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-15" name="rest_code_72be268828d74dccb3f04566c6f0750e-15"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-16"&gt;&lt;code data-line-number="16"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-16" name="rest_code_72be268828d74dccb3f04566c6f0750e-16"&gt;&lt;/a&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_72be268828d74dccb3f04566c6f0750e-17"&gt;&lt;code data-line-number="17"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_72be268828d74dccb3f04566c6f0750e-17" name="rest_code_72be268828d74dccb3f04566c6f0750e-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;if __name__ == "__main__":&lt;/code&gt; idiom, as &lt;a class="reference external" href="https://docs.python.org/3/library/__main__.html"&gt;documented here&lt;/a&gt;, is used to check whether
this is executed as the top-level file, or if it has been imported by someone
else (in this case, executing the &lt;code class="docutils literal"&gt;main()&lt;/code&gt; function is not always intended).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;main()&lt;/code&gt; function must not take any arguments, because that’s how
&lt;code class="docutils literal"&gt;entry_points&lt;/code&gt; executes things.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="step-2-adjust-setup-py-accordingly"&gt;
&lt;h2&gt;Step 2: adjust &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; accordingly&lt;/h2&gt;
&lt;p&gt;This is the real deal: create the entry points in your &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/setup.py.html"&gt;entry_points_project/setup.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/setup.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-1" name="rest_code_b03beee827e44f78bf0713865c8a8d37-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-2" name="rest_code_b03beee827e44f78bf0713865c8a8d37-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-3" name="rest_code_b03beee827e44f78bf0713865c8a8d37-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-4" name="rest_code_b03beee827e44f78bf0713865c8a8d37-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"my_project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-5" name="rest_code_b03beee827e44f78bf0713865c8a8d37-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"0.1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-6" name="rest_code_b03beee827e44f78bf0713865c8a8d37-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"my_project"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-7" name="rest_code_b03beee827e44f78bf0713865c8a8d37-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-8" name="rest_code_b03beee827e44f78bf0713865c8a8d37-8"&gt;&lt;/a&gt;        &lt;span class="s2"&gt;"console_scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-9" name="rest_code_b03beee827e44f78bf0713865c8a8d37-9"&gt;&lt;/a&gt;            &lt;span class="s2"&gt;"my_project = my_project.__main__:main"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-10" name="rest_code_b03beee827e44f78bf0713865c8a8d37-10"&gt;&lt;/a&gt;        &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-11" name="rest_code_b03beee827e44f78bf0713865c8a8d37-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_b03beee827e44f78bf0713865c8a8d37-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_b03beee827e44f78bf0713865c8a8d37-12" name="rest_code_b03beee827e44f78bf0713865c8a8d37-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;You must use setuptools, otherwise this won’t work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The most important piece of code is the &lt;code class="docutils literal"&gt;entry_points&lt;/code&gt; declaration
(unsurprisingly).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The declaration reads&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_d4d1044700a747ada87f82e705c3bcf6-1" name="rest_code_d4d1044700a747ada87f82e705c3bcf6-1" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/#rest_code_d4d1044700a747ada87f82e705c3bcf6-1"&gt;&lt;/a&gt;"name_of_executable = module.with:function_to_execute"
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;&lt;p&gt;If you are developing a GUI application (in Tkinter, PyQt/PySide,
wxPython, PyGTK, PyGame…), you should change the declaration to
&lt;code class="docutils literal"&gt;gui_scripts&lt;/code&gt;.  On *nix, this makes no difference, but on Windows, it
means that running your script by opening the created &lt;code class="docutils literal"&gt;.exe&lt;/code&gt; files does
not show a console window. Note that stdout/stderr do not work in that mode
under Windows, which can lead to spurious application crashes.  (GUI-only
processes cannot use stdout/stderr because they don’t have a console
attached)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can create &lt;strong&gt;multiple scripts&lt;/strong&gt; this way.  You can also have multiple
&lt;code class="docutils literal"&gt;console_scripts&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code class="docutils literal"&gt;gui_scripts&lt;/code&gt; in one setup file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p class="text-muted"&gt;All &lt;a class="reference external" href="https://chriswarrick.com/listings/entry_points_project/"&gt;code samples&lt;/a&gt; are freely reusable, but if you mention where you got them from, it’d be really nice.&lt;/p&gt;
&lt;/section&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><guid>https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/</guid><pubDate>Mon, 15 Sep 2014 16:00:00 GMT</pubDate></item></channel></rss>