<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about projects)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/projects.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 01 Jan 2023 18:31:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Apple broke the display menu, so I wrote my own</title><link>https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;A short time ago, the macOS display menu stopped working for me. It no longer had options to change mirroring settings, only supporting AirPlay. So I wrote my own, also solving some other issues.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The first thing to consider is: what features do I really want? I’m using a MacBook Pro with an external display. I sometimes need to switch to only one display &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; — mirroring is useful here. Although I can afford to put the dock at the bottom in dual-screen mode, it works better on the right if I’m tight on space. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; Also when working on the MacBook screen, I can switch to a higher resolution. So, I need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;mirroring&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;screen resolution&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dock position and icon size&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I don’t want to pick all those three independently — a preset, like &lt;em&gt;dual screen&lt;/em&gt; or &lt;em&gt;MacBook only, 1440×900&lt;/em&gt; works better.&lt;/p&gt;
&lt;p&gt;So, I wrote &lt;strong&gt;Display Menu&lt;/strong&gt;. It’s a simple menu bar extra — I haven’t yet built any friendly configuration GUI for it, so all you get for now is a JSON file. It’s roughly 600 lines of Swift. The app doesn’t do much, other than displaying an icon in the menu bar, and setting display preferences when asked to. But hey, it works for me.&lt;/p&gt;
&lt;p&gt;Also, I must admit that Swift is a pretty nifty thing. Although the function to read JSON files needs to do a ton of type casting, and some of the low-level stuff looks as ugly as in C, but other than that, Swift is a modern, friendly language.&lt;/p&gt;
&lt;p&gt;Display Menu is open-source, licensed under the 3-clause BSD license. &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu"&gt;Fork it on GitHub&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/Kwpolska/DisplayMenu/releases"&gt;download binary releases&lt;/a&gt;.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Inkscape/Xorg don’t work well with multiple displays. I can also mirror and turn off the external screen or use it with some other device.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;also, in dual-screen mode, I can have the dock on one screen only, and the dock must live on the edge of the “extended” display — so either on the left side of the MacBook screen, or on the right side of the external display.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;</description><category>app</category><category>Apple</category><category>display</category><category>programming</category><category>projects</category><category>Swift</category><guid>https://chriswarrick.com/blog/2017/06/24/apple-broke-the-display-menu-so-i-wrote-my-own/</guid><pubDate>Sat, 24 Jun 2017 19:02:47 GMT</pubDate></item><item><title>Structuring and automating a Python project with the Python Project Template</title><link>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;To create a project that other people can use and contribute to, you need to
follow a specific directory structure. Moreover, releasing a new version should
be as simple and painless as possible. For my projects, I use a template that
has the structure already in place, and comes with automation for almost every
part of a release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project Template&lt;/a&gt; is my approach to this. It comes with a good (IMO) structure and automation.&lt;/p&gt;
&lt;p&gt;What does it include? A whole lot of things. Documentation, Sphinx
configuration, a simple test suite, a &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file, some AUR stuff, and
perhaps the most important part — the &lt;code class="docutils literal"&gt;release&lt;/code&gt; script. It can automate a lot
of tasks that are part of a release.&lt;/p&gt;
&lt;p&gt;You see, releasing a package is error-prone. There are a lot of things that can go wrong:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Version numbers. They may appear in code comments, Sphinx configuration,
README files and documentation, and setup.py. Some people claim to have
“solutions” for this. Most of those solutions don’t work right — either they
import a file from the project (which may break if &lt;code class="docutils literal"&gt;__init__.py&lt;/code&gt; is too
magical), read a file from that place (which might not get included
properly), or use some setuptools extension to get the version from VCS or
whatever (which needs to be installed before the package). Using &lt;code class="docutils literal"&gt;sed&lt;/code&gt; to
fix the version numbers is much simpler.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forgetting about changelogs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not updating translations or other important files.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve had quite a few botched releases in the &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; project. I wrote a
&lt;a class="reference external" href="http://getnikola.github.io/releng/checklist.html"&gt;checklist&lt;/a&gt; to prevent things like those. You may notice that the most
prominent step is to run a &lt;code class="docutils literal"&gt;release&lt;/code&gt; script. This step replaced 21 others —
now the checklist only talks about writing announcements, sending e-mails,
updating the website, and doing some GitHub stuff that is not yet automated.&lt;/p&gt;
&lt;p&gt;The template promotes a &lt;em&gt;release early, release often&lt;/em&gt; workflow: since making a
new release requires almost no human intervention, you might as well do it
every time you make a bunch of changes. In my projects, &lt;em&gt;everything&lt;/em&gt; gets
automated, and it might as well be possible in yours.&lt;/p&gt;
&lt;section id="the-complete-feature-list-as-of-v2-1-5"&gt;
&lt;h2&gt;The complete feature list (as of v2.1.5)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;pre-configured Sphinx with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;CONTRIBUTING.rst&lt;/code&gt; guide (used by GitHub when sending a pull request or an issue)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;LICENSE.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;an empty &lt;code class="docutils literal"&gt;CHANGELOG.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;README.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a bare-bones &lt;code class="docutils literal"&gt;index.rst&lt;/code&gt; page&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The exact same files in &lt;code class="docutils literal"&gt;/&lt;/code&gt;, which are fragile and &lt;strong&gt;MAY NOT&lt;/strong&gt; be modified
as they are replaced with copies in &lt;code class="docutils literal"&gt;/docs&lt;/code&gt; by the &lt;code class="docutils literal"&gt;release&lt;/code&gt; script&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;__init__.py&lt;/code&gt;, &lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; and &lt;code class="docutils literal"&gt;template.py&lt;/code&gt; files in the Python package directory&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; file that could be good enough for people, and that supports
&lt;code class="docutils literal"&gt;entry_points&lt;/code&gt; (see &lt;a class="reference external" href="https://go.chriswarrick.com/entry_points"&gt;https://go.chriswarrick.com/entry_points&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;tests/&lt;/code&gt; containing some &lt;em&gt;Is My Python Sane?&lt;/em&gt;-style tests (using &lt;code class="docutils literal"&gt;pytest&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An automated global update script (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;.pypt/PYPT-UPDATE&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Entry points configuration ready to be uncommented (and a matching
&lt;code class="docutils literal"&gt;__main__.py&lt;/code&gt; file)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add-ons for Qt users (in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/Qt&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A sample hook for AUR updates (in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/AUR&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PKGBUILDs for the Arch Linux User Repository (AUR)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A state-of-the-art &lt;code class="docutils literal"&gt;release&lt;/code&gt; script, the operations of which are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;querying the user for version number, commit message and changes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;updating &lt;code class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bumping the version number in all the files, changing dates where necessary&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;copying over &lt;code class="docutils literal"&gt;/docs/README.rst&lt;/code&gt;,  &lt;code class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/code&gt; and &lt;code class="docutils literal"&gt;/docs/CONTRIBUTING.rst&lt;/code&gt; to &lt;code class="docutils literal"&gt;/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locale generation (via the &lt;code class="docutils literal"&gt;.pypt/localegen&lt;/code&gt; script)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running &lt;code class="docutils literal"&gt;import $PROJECTLC&lt;/code&gt; and the test suite&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;uploading a source distribution and a wheel to PyPI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Making a Git commit and tagging the release&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;creating a GitHub Releases entry&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;updating the AUR packages (by using hooks)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;
&lt;a href="https://github.com/Kwpolska/python-project-template" class="btn btn-lg btn-primary"&gt;&lt;i class="fab fa-github"&gt;&lt;/i&gt; Check it out on GitHub&lt;/a&gt;
&lt;/div&gt;&lt;/section&gt;</description><category>guide</category><category>Nikola</category><category>projects</category><category>PyPT</category><category>Python</category><guid>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</guid><pubDate>Sun, 09 Apr 2017 09:00:00 GMT</pubDate></item><item><title>New project: upass — console UI for pass</title><link>https://chriswarrick.com/blog/2015/07/06/upass/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="http://www.passwordstore.org/"&gt;pass&lt;/a&gt; is the standard Unix password manager.
And I just wrote a slightly friendlier, clickier interface with urwid and
Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/upass/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Project page
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/galleries/upass/" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Screenshots
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;upass&lt;/code&gt; is using urwid, which means it has a friendly full-screen console
interface.  It shows your directory structure (with flattened subdirectories)
and calls &lt;code class="docutils literal"&gt;pass&lt;/code&gt; when requested.  (It does not use &lt;code class="docutils literal"&gt;pass &lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/code&gt; due to
subprocessing issues, instead opting for a manual copy — note that the
clipboard &lt;strong&gt;will not be cleared&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;If you want to see how it looks, check out &lt;a class="reference external" href="https://chriswarrick.com/galleries/upass/"&gt;the screenshots gallery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;upass&lt;/code&gt; is under development (and was initially written in one evening).  If you have
ideas, bugs, or want to help, hop over to the &lt;a class="reference external" href="https://github.com/Kwpolska/upass"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install &lt;code class="docutils literal"&gt;upass&lt;/code&gt; from &lt;a class="reference external" href="https://pypi.python.org/pypi/upass"&gt;PyPI&lt;/a&gt; (with &lt;code class="docutils literal"&gt;pip install upass&lt;/code&gt;). Arch Linux
users can install the &lt;code class="docutils literal"&gt;upass&lt;/code&gt; package from the AUR.&lt;/p&gt;</description><category>app</category><category>CLI</category><category>Linux</category><category>password</category><category>projects</category><category>Python</category><category>upass</category><guid>https://chriswarrick.com/blog/2015/07/06/upass/</guid><pubDate>Mon, 06 Jul 2015 12:30:00 GMT</pubDate></item><item><title>New project: think (Terminal Think Music)</title><link>https://chriswarrick.com/blog/2015/05/30/think/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;Are you executing a process that takes a long time?  Do you want to know that it’s
still working while you are in another terminal/making coffee?  Do you have a
favorite game show tune to play while doing something?&lt;/p&gt;
&lt;p&gt;If yes: &lt;code class="docutils literal"&gt;think&lt;/code&gt; is just for you.  For more details, read on or &lt;a class="reference external" href="https://github.com/Kwpolska/think"&gt;hop onto the GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/think/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Project page
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think/releases" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads (GitHub)
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;section id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can install &lt;code class="docutils literal"&gt;think&lt;/code&gt; from &lt;a class="reference external" href="https://pypi.python.org/pypi/think"&gt;PyPI&lt;/a&gt; (with &lt;code class="docutils literal"&gt;pip install think&lt;/code&gt;). Arch Linux
users can install the &lt;code class="docutils literal"&gt;think&lt;/code&gt; package from the AUR.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Create a file named &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/think.conf&lt;/span&gt;&lt;/code&gt; (or wherever your &lt;code class="docutils literal"&gt;XDG_CONFIG_HOME&lt;/code&gt; is) with the following four lines:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ini"&gt;&lt;a id="rest_code_c4530c81823c45a086972882e4b16197-1" name="rest_code_c4530c81823c45a086972882e4b16197-1" href="https://chriswarrick.com/blog/2015/05/30/think/#rest_code_c4530c81823c45a086972882e4b16197-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[Think]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c4530c81823c45a086972882e4b16197-2" name="rest_code_c4530c81823c45a086972882e4b16197-2" href="https://chriswarrick.com/blog/2015/05/30/think/#rest_code_c4530c81823c45a086972882e4b16197-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;play&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c4530c81823c45a086972882e4b16197-3" name="rest_code_c4530c81823c45a086972882e4b16197-3" href="https://chriswarrick.com/blog/2015/05/30/think/#rest_code_c4530c81823c45a086972882e4b16197-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;/home/kwpolska/Dropbox/Media/Wielka Gra.mp3&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_c4530c81823c45a086972882e4b16197-4" name="rest_code_c4530c81823c45a086972882e4b16197-4" href="https://chriswarrick.com/blog/2015/05/30/think/#rest_code_c4530c81823c45a086972882e4b16197-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;behavior&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;wait&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;command&lt;/code&gt; is the command of the player that will be executed.  You can use
&lt;code class="docutils literal"&gt;play&lt;/code&gt; (from &lt;code class="docutils literal"&gt;sox&lt;/code&gt;) or any other fast CLI music player.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;file&lt;/code&gt; is the filename that will be given as the sole argument to the play command. No escaping is necessary. I’m using the &lt;a class="reference external" href="https://www.youtube.com/watch?v=Nnu7I3b7ZbY"&gt;Wielka Gra&lt;/a&gt; theme (BTW: I just published the MP3 file on the 1st anniversary of the upload!), Americans might want &lt;a class="reference external" href="https://www.youtube.com/watch?v=vXGhvoekY44"&gt;Jeopardy! Think Music&lt;/a&gt; (also the namesake for this command), Brits might want the &lt;a class="reference external" href="https://www.youtube.com/watch?v=M2dhD9zR6hk"&gt;Countdown theme&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;behavior&lt;/code&gt; can be one of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;return&lt;/code&gt; — return control to the terminal as soon as the program finishes, without stopping the music&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;wait&lt;/code&gt; — wait until music stops before returning control&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;stop&lt;/code&gt; — stop the music and return control immediately&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Prepend &lt;code class="docutils literal"&gt;think&lt;/code&gt; before the command that takes too long to execute:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code console"&gt;&lt;a id="rest_code_9814488eeb2142d3aa70eff51c61c653-1" name="rest_code_9814488eeb2142d3aa70eff51c61c653-1" href="https://chriswarrick.com/blog/2015/05/30/think/#rest_code_9814488eeb2142d3aa70eff51c61c653-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;think sleep 120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/section&gt;</description><category>app</category><category>CLI</category><category>game show</category><category>Jeopardy!</category><category>Linux</category><category>projects</category><category>Python</category><category>think</category><guid>https://chriswarrick.com/blog/2015/05/30/think/</guid><pubDate>Sat, 06 Jun 2015 12:15:00 GMT</pubDate></item><item><title>Speeker — my little Android app</title><link>https://chriswarrick.com/blog/2014/08/26/speeker/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;a class="android-adventure-logo-robot reference external image-reference" href="https://chriswarrick.com/pl/blog/2014/08/01/series-android-adventure/"&gt;&lt;img alt="/blog-content/android-adventure/robot.png" src="https://chriswarrick.com/blog-content/android-adventure/robot.png"&gt;&lt;/a&gt;
&lt;p&gt;Now that I have an usable phone, I can dwelve into Android app development.
And so I did.  I started with an app to test and play with the text-to-speech
services of Android.  I named it Speeker.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;img src="https://chriswarrick.com/blog-content/android-adventure/speeker.png" alt="Speeker logo"&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/galleries/speeker/" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Screenshots
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/speeker/releases" class="btn btn-secondary" style="width: 144px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;Speeker is a very small and easy frontend to the system TTS service.  In its
current iteration, it’s quite limited. The complete feature set is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;speak text provided by the user&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;speak text in the system default TTS language (as set in Android settings,
and there is currently no button to even get you there)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;clear the text box&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;display About screen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;display open source licenses&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;open my website&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s SIX features!  And you can’t even download it from Google Play, because
I’m too cheap to pay the $25 fee!&lt;/p&gt;
&lt;p&gt;I might or might not continue development and add some features.  Either way,
my experience with Android development wasn’t  quite nice: there is not enough
good documentation, and I had to do a lot of guessing when it comes to things,
including imports.  Documentation could be vastly improved.&lt;/p&gt;
&lt;p&gt;Another problem is the choice of IDE.  While you certainly can do Android work
in any environment you like, including just Vim and the terminal, the official
and recommended environment is Eclipse.  Which just so happens to be the worst
IDE ever created.  It’s unfriendly and bulky — the usual characteristics of
huge Java applications.  Once Eclipse managed to open a file in about ten
seconds.  This is very impressive, until you notice anything else will take
much less time.  No, I am not making this up.  This is the problem with big
IDEs: trying to do too much at once.&lt;/p&gt;
&lt;p&gt;Developing for Android has not been the best experience ever — but it can be
done, and you don’t need that much experience with the platform to do it.
Android clearly has potential, but needs to be improved to be friendly for
developers.&lt;/p&gt;</description><category>android</category><category>app</category><category>devel</category><category>programming</category><category>projects</category><guid>https://chriswarrick.com/blog/2014/08/26/speeker/</guid><pubDate>Tue, 26 Aug 2014 13:00:00 GMT</pubDate></item><item><title>I love Python!</title><link>https://chriswarrick.com/blog/2011/08/03/i-love-python/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;figure&gt;
&lt;a href="http://python.org" title="Python"&gt;&lt;img src="http://kwpolska.tk/blog-content/logos/python.png" alt="Python logo"&gt;&lt;/a&gt;
&lt;figcaption&gt;Python logo&lt;/figcaption&gt;
&lt;/figure&gt;&lt;p&gt;I recently started writing &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; code. And I love it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;If you’d ask me a week ago about Python, I’d say “meh.”  Python3K?  I
wouldn’t be happy about it.  Sunday evening?  I love both.&lt;/p&gt;
&lt;section id="one-project-rewritten"&gt;
&lt;h2&gt;One project, rewritten&lt;/h2&gt;
&lt;p&gt;I wrote a new project.  Or rather re-wrote a Perl “project”.&lt;/p&gt;
&lt;p&gt;The project, once a little help for building AUR packages, now is almost
a fully-featured AUR helper (it has no update function, but I will
write one soon).  It’s the &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Perl version (search in the repo, linked above) had 56 lines.  In
short, it did something like this (rewritten to bash):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-1" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-1" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-2" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-2" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-2"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-3" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-3" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-3"&gt;&lt;/a&gt;    wget http://aur.archlinux.org/&lt;span class="nv"&gt;$pk&lt;/span&gt;/&lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-4" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-4" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-4"&gt;&lt;/a&gt;    tar -xzvf &lt;span class="nv"&gt;$package&lt;/span&gt;.tar.gz
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-5" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-5" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-5"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$package&lt;/span&gt;
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-6" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-6" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-6"&gt;&lt;/a&gt;    makepkg -si
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-7" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-7" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-7"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-8" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-8" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-8"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-9" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-9" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_eb8e5106c6bb48b3a4329b47467b4284-10" name="rest_code_eb8e5106c6bb48b3a4329b47467b4284-10" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_eb8e5106c6bb48b3a4329b47467b4284-10"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; package &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;, &lt;span class="k"&gt;do&lt;/span&gt; generate&lt;span class="o"&gt;(&lt;/span&gt;package&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code is really, REALLY bad.  But it worked for me, because the “normal”
AUR helpers were slow.  I wanted to do something about it.  I put an entry on
my TODO list about it.  A few months later I decided to do it.  The TODO list
entry said “write build.py”.  I wanted to use Python because I wanted to learn
it.  In fact, I began &lt;em&gt;loving&lt;/em&gt; Python.&lt;/p&gt;
&lt;p&gt;The Perl version had 56 lines.  A shortened version of it in Bash took only 10
(I skipped a few features, the full version would be around 20 lines or so.)
Take a guess: how long is the Python version? 30 lines?  100?  No.  300 lines.
How could this happen?  No, &lt;em&gt;not&lt;/em&gt; because Python is a pain in the ass to write.
It was because I could implement new, great features EASILY.  The original
version could only download a package and build it.  What if the package didn’t
exist?  The library responsible for untarring it would throw an error.  And
even if makepkg had a problem with building the package, the script would
happily inform the user that it was successfully bulit…  What are the new
features, you may ask?  Install validation, i.e.  checking if the package is
installed or not.  Package searching, sanity checks, dependency solving…  This
is great.  If I’d like to write it in Perl, it will take me ages and I’m not
sure if there is any libalpm wrapper.&lt;/p&gt;
&lt;p&gt;If you think that you can rewrite it in Perl, sure, go for it, if you will:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;find a working libalpm wrapper or write one yourself&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;port python3-aur (it heps with the XML-RPC of the AUR) to perl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;implement EVERY feature of the Py3K version&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;give me the code and tell me how long did you write it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Done?  Great then, &lt;a class="reference external" href="https://chriswarrick.com/contact/"&gt;contact me&lt;/a&gt;!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Python has the friendliest web documentation ever.  PHP’s looks a bit
harsh.  Perl’s is not easy to search.&lt;/p&gt;
&lt;p&gt;Time for a real world example:  I want to learn how to write a specific
function in Perl, PHP and Python.  This function would print the argument.
For example, in C:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code cpp"&gt;&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-1" name="rest_code_ffd0756ca155471ab048ac2d407b6413-1" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-2" name="rest_code_ffd0756ca155471ab048ac2d407b6413-2" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-3" name="rest_code_ffd0756ca155471ab048ac2d407b6413-3" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-4" name="rest_code_ffd0756ca155471ab048ac2d407b6413-4" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-5" name="rest_code_ffd0756ca155471ab048ac2d407b6413-5" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-6" name="rest_code_ffd0756ca155471ab048ac2d407b6413-6" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-7" name="rest_code_ffd0756ca155471ab048ac2d407b6413-7" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-8" name="rest_code_ffd0756ca155471ab048ac2d407b6413-8" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_ffd0756ca155471ab048ac2d407b6413-9" name="rest_code_ffd0756ca155471ab048ac2d407b6413-9" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_ffd0756ca155471ab048ac2d407b6413-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice: by “searching” in docs I mean reading the page and looking for
a thing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perl:&lt;/strong&gt; Let’s begin at &amp;lt;&lt;a class="reference external" href="http://perl.org"&gt;http://perl.org&lt;/a&gt;&amp;gt;. Documentation tab, Tutorials.
I need to define a function.  Nothing seems to help me.  I look at the
sidebar and find &lt;em&gt;Reference/Functions&lt;/em&gt;.  Great, that’s what I need, so i
click it…  I can’t see anything about functions.  Langauge reference?
Nothing.  I ask Google and I learn that Perl names them &lt;em&gt;subroutines&lt;/em&gt;.  I
check the Language reference:  it’s the sub function, now I can define my
function and call it.  printf?  Let’s look it up in the Functions list.
We’re done.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code perl"&gt;&lt;a id="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-1" name="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-1" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_9966dc4e5be049ba90cfc955c4d5da3a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-2" name="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-2" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_9966dc4e5be049ba90cfc955c4d5da3a-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-3" name="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-3" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_9966dc4e5be049ba90cfc955c4d5da3a-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Input: %s\n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-4" name="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-4" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_9966dc4e5be049ba90cfc955c4d5da3a-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-5" name="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-5" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_9966dc4e5be049ba90cfc955c4d5da3a-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-6" name="rest_code_9966dc4e5be049ba90cfc955c4d5da3a-6" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_9966dc4e5be049ba90cfc955c4d5da3a-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perl’s documentation is anywhere near user-friendliness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PHP:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://php.net"&gt;http://php.net&lt;/a&gt;&amp;gt;.  Why is the &lt;em&gt;documentation&lt;/em&gt; link so small?
Anyways, I need functions.  Language Refernce/Functions.  Here we go, one
more click and I know how to make a function.  And I guess that I’ll have
to search the Function Reference.  I find text processing, go for Strings
and I can happily see printf.  Take a look and we can write this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code php"&gt;&lt;a id="rest_code_41615db61c0146218ddcacb48bd7ec9d-1" name="rest_code_41615db61c0146218ddcacb48bd7ec9d-1" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_41615db61c0146218ddcacb48bd7ec9d-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;a id="rest_code_41615db61c0146218ddcacb48bd7ec9d-2" name="rest_code_41615db61c0146218ddcacb48bd7ec9d-2" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_41615db61c0146218ddcacb48bd7ec9d-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_41615db61c0146218ddcacb48bd7ec9d-3" name="rest_code_41615db61c0146218ddcacb48bd7ec9d-3" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_41615db61c0146218ddcacb48bd7ec9d-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Input: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_41615db61c0146218ddcacb48bd7ec9d-4" name="rest_code_41615db61c0146218ddcacb48bd7ec9d-4" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_41615db61c0146218ddcacb48bd7ec9d-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_41615db61c0146218ddcacb48bd7ec9d-5" name="rest_code_41615db61c0146218ddcacb48bd7ec9d-5" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_41615db61c0146218ddcacb48bd7ec9d-5"&gt;&lt;/a&gt;&lt;span class="nx"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_41615db61c0146218ddcacb48bd7ec9d-6" name="rest_code_41615db61c0146218ddcacb48bd7ec9d-6" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_41615db61c0146218ddcacb48bd7ec9d-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt; &amp;lt;&lt;a class="reference external" href="http://python.org/"&gt;http://python.org/&lt;/a&gt;&amp;gt;.  Documentation element exists in the
menu.  I click it.  They offer me a nice tutorial, so I’ll check it out.
I scan through the Table of Contents and I see a chapter called Defining
Functions.  Great, it will work.  Now I go back to the ToC and, because
this is a tutorial rather than a reference, and I can see chapter &lt;em&gt;7.1:
Fancier output formatting&lt;/em&gt;.  I want to have %s as in other languages, so
I skip this one and see &lt;em&gt;Old string formatting&lt;/em&gt;, which uses the %s.  Now,
assuming they indented the code on purpose because there are no braces,
I can write:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_3b3f7c78371044139c2608cc92e06969-1" name="rest_code_3b3f7c78371044139c2608cc92e06969-1" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_3b3f7c78371044139c2608cc92e06969-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a id="rest_code_3b3f7c78371044139c2608cc92e06969-2" name="rest_code_3b3f7c78371044139c2608cc92e06969-2" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_3b3f7c78371044139c2608cc92e06969-2"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Input: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;a id="rest_code_3b3f7c78371044139c2608cc92e06969-3" name="rest_code_3b3f7c78371044139c2608cc92e06969-3" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_3b3f7c78371044139c2608cc92e06969-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_3b3f7c78371044139c2608cc92e06969-4" name="rest_code_3b3f7c78371044139c2608cc92e06969-4" href="https://chriswarrick.com/blog/2011/08/03/i-love-python/#rest_code_3b3f7c78371044139c2608cc92e06969-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;writeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"some stuff to print"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of them work and output &lt;code class="docutils literal"&gt;Input: some stuff to print&lt;/code&gt; followed by a
newline.  The original C example had 8 lines.  Perl made it in 5, PHP
in 6 (or 4 if you won’t count the PHP tags), Python used only 3.&lt;/p&gt;
&lt;p&gt;Which documentation is the most HUMAN-friendly?  Python’s.  Which is the
worst? Perl’s.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nothing-is-flawless"&gt;
&lt;h2&gt;Nothing is flawless&lt;/h2&gt;
&lt;p&gt;Everything has some flaws.  What is it in Python, then?
&lt;a class="reference external" href="http://wiki.python.org/moin/Python2orPython3"&gt;Existence of two concurrent versions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most distros and projects use Py2K, while some of them offer Py3K (or both.)
The &lt;a class="reference external" href="https://github.com/Kwpolska/pkgbuilder"&gt;PKGBUILDer&lt;/a&gt; is in Py3K, because it requires &lt;code class="docutils literal"&gt;pyalpm&lt;/code&gt; and the &lt;code class="docutils literal"&gt;AUR&lt;/code&gt;
module (I could rewrite the AUR module in Py2K, but pyalpm is much harder to
modify.  UPDATE 2012-08-04: it was re-implemented by me several releases ago,
in version 2.1.0, released over a month after this post)  My other projects
(like KWDv2, another rewrite, this time with minimal changes and 30% less code
or my first ever Python project, trash.py, a partial XDG trash standard
implementation) use the old Py2K (usually v2.6, because I need compatibility
with my shell server.)&lt;/p&gt;
&lt;p&gt;I would rewrite this blog into &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; if I’d &lt;em&gt;own&lt;/em&gt; a VPS or a dedicated
server. (update 2011-10-20: this blog is now based on hyde, jekyll’s evil twin
in Python.  Update 2013-02-08: Now using Nikola, even better engine, yet still
in Python.)&lt;/p&gt;
&lt;/section&gt;</description><category>programming</category><category>projects</category><category>Python</category><guid>https://chriswarrick.com/blog/2011/08/03/i-love-python/</guid><pubDate>Tue, 02 Aug 2011 22:00:00 GMT</pubDate></item></channel></rss>