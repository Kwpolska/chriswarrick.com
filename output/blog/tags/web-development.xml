<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about web development)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/web-development.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 19 Sep 2022 20:35:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Writing a Console App in C# for Fun and Profit</title><link>https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;I recently wrote a simple console app in C#. This post tells you more about the language, the .NET ecosystem, and why you should write your next app in it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="what-is-the-app"&gt;
&lt;h2&gt;What is the app?&lt;/h2&gt;
&lt;p&gt;The app is called Gitco.NET. It’s basically a rewrite of a previous Ruby script. It shows a console menu with Git branches, allowing things like filtering and toggling the display of remote branches. Simple, but quite convenient for working with Git in a terminal. I rewrote it in C# for better Windows compatibility — but the new version works on Linux and macOS equally well, can be distributed as a single executable, and is also unit-tested.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-is-c"&gt;
&lt;h2&gt;What is C#?&lt;/h2&gt;
&lt;p&gt;C# is a modern, high-level language designed by Microsoft in 2000, heavily inspired by (and competing with) Java.&lt;/p&gt;
&lt;section id="the-obligatory-hello-world-program"&gt;
&lt;h3&gt;The obligatory hello world program&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_471c102f854e4635a0befbe2ec34add6-1" name="rest_code_471c102f854e4635a0befbe2ec34add6-1" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_471c102f854e4635a0befbe2ec34add6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just one line is enough. This program requires C# 10 and .NET 6, the latest versions of the language and the framework (and the implicit usings feature enabled).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-slightly-less-cool-version-of-the-hello-world-program"&gt;
&lt;h3&gt;The slightly less cool version of the hello world program&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-1" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-1" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-2" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-2" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-3" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-3" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Program&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-4" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-4" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-5" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-5" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-6" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-6" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-7" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-7" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, world!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-8" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-8" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5baf82289af94e1a91bdd2614f0a7960-9" name="rest_code_5baf82289af94e1a91bdd2614f0a7960-9" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_5baf82289af94e1a91bdd2614f0a7960-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve got four lines of code (plus four lines of braces &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; ). We can see the &lt;code class="docutils literal"&gt;using&lt;/code&gt; directive to import everything from the &lt;code class="docutils literal"&gt;System&lt;/code&gt; namespace, the definition of a &lt;code class="docutils literal"&gt;class&lt;/code&gt;, a &lt;code class="docutils literal"&gt;Main&lt;/code&gt; method, and a call to &lt;code class="docutils literal"&gt;Console.WriteLine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We’ll talk more about C# later, highlighting some of the cooler things seen in Gitco.NET.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-is-net"&gt;
&lt;h2&gt;What is .NET?&lt;/h2&gt;
&lt;p&gt;The term “.NET” had quite a lot of meanings over the past two decades. Microsoft accounts were once called .NET Passport, and Windows Server 2003 was almost called “Windows Server .NET 2003”. Another thing called .NET was the .NET Framework. .NET Framework is a heavily integrated component of Windows, and it’s basically what was used to run C# (and F#, and VB.NET) — it includes the virtual machine (CLR, Core Language Runtime), a lot of libraries (Framework Class Library), and a lot of Windows-specific things (such as COM, Windows Forms, WPF).&lt;/p&gt;
&lt;p&gt;Microsoft’s .NET Framework is proprietary and tied to Windows. An open-source, independent re-implementation of .NET is Mono. At one point, some GNOME apps were written in Mono and Gtk#. Mono was also used in Xamarin, which can be used to write Android and iOS apps in C#.&lt;/p&gt;
&lt;p&gt;But then came out .NET Core, which is Microsoft’s open-source .NET with a new runtime (CoreCLR), new set of libraries (CoreFX), and multi-platform compatibility (Linux and macOS). After a few years, .NET Core got renamed to .NET (around the time it had pretty good feature parity with the classic .NET Framework). With the new .NET, you can build console apps, web apps (using ASP.NET Core, which is a pretty cool framework), mobile apps (soon using MAUI), and desktop apps (there are a few options).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gitco-net-code-tour"&gt;
&lt;h2&gt;Gitco.NET code tour&lt;/h2&gt;
&lt;p&gt;Let’s go on a little tour of the more interesting parts of the code.&lt;/p&gt;
&lt;section id="snippet-1"&gt;
&lt;h3&gt;Snippet 1&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_94e2a256774348d4907e42583a497039-1" name="rest_code_94e2a256774348d4907e42583a497039-1" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ExtractBranchListFromGitOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-2" name="rest_code_94e2a256774348d4907e42583a497039-2" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gitOutput&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-3" name="rest_code_94e2a256774348d4907e42583a497039-3" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrimEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-4" name="rest_code_94e2a256774348d4907e42583a497039-4" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceLineEndings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\n"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-5" name="rest_code_94e2a256774348d4907e42583a497039-5" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'\n'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-6" name="rest_code_94e2a256774348d4907e42583a497039-6" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-7" name="rest_code_94e2a256774348d4907e42583a497039-7" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-8" name="rest_code_94e2a256774348d4907e42583a497039-8" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-9" name="rest_code_94e2a256774348d4907e42583a497039-9" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchLine&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2.&lt;/span&gt;&lt;span class="p"&gt;.];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-10" name="rest_code_94e2a256774348d4907e42583a497039-10" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-11" name="rest_code_94e2a256774348d4907e42583a497039-11" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-12" name="rest_code_94e2a256774348d4907e42583a497039-12" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remotePrefix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-13" name="rest_code_94e2a256774348d4907e42583a497039-13" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-14" name="rest_code_94e2a256774348d4907e42583a497039-14" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-15" name="rest_code_94e2a256774348d4907e42583a497039-15" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-16" name="rest_code_94e2a256774348d4907e42583a497039-16" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="sc"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-17" name="rest_code_94e2a256774348d4907e42583a497039-17" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Skip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-18" name="rest_code_94e2a256774348d4907e42583a497039-18" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-19" name="rest_code_94e2a256774348d4907e42583a497039-19" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-20" name="rest_code_94e2a256774348d4907e42583a497039-20" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isRemote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;isCurrent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-21" name="rest_code_94e2a256774348d4907e42583a497039-21" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-22" name="rest_code_94e2a256774348d4907e42583a497039-22" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OrderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-23" name="rest_code_94e2a256774348d4907e42583a497039-23" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ThenBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-24" name="rest_code_94e2a256774348d4907e42583a497039-24" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DistinctBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_94e2a256774348d4907e42583a497039-25" name="rest_code_94e2a256774348d4907e42583a497039-25" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_94e2a256774348d4907e42583a497039-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This snippet defines a fairly standard pipeline that goes from &lt;code class="docutils literal"&gt;git&lt;/code&gt; output (a single string) to a list of parsed objects. This pipeline is a function (or a static method, to be more precise). This function uses expression-bodied members: since we can fit the entire pipeline in a single expression, we can skip the braces and the &lt;code class="docutils literal"&gt;return&lt;/code&gt; keyword, and instead use a more compact syntax with an arrow (&lt;code class="docutils literal"&gt;=&amp;gt;&lt;/code&gt;). After some cleanups and sanitization of the string, we split the string by the &lt;code class="docutils literal"&gt;\n&lt;/code&gt; character, and the type of our pipeline changes from &lt;code class="docutils literal"&gt;string&lt;/code&gt; to &lt;code class="docutils literal"&gt;string[]&lt;/code&gt; (an array of strings). We then use five operations from the &lt;code class="docutils literal"&gt;System.Linq&lt;/code&gt; namespace. Those operations are extension methods for enumerables (&lt;code class="docutils literal"&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;) — adding &lt;code class="docutils literal"&gt;using System.Linq;&lt;/code&gt; at the top of your program adds those methods to any enumerables (including arrays, lists, dictionaries, sets…).&lt;/p&gt;
&lt;p&gt;The first operation is a &lt;code class="docutils literal"&gt;Select&lt;/code&gt;. LINQ methods are inspired by SQL; the more typical name for this one would be &lt;code class="docutils literal"&gt;map&lt;/code&gt;. (Similarly, &lt;code class="docutils literal"&gt;Where&lt;/code&gt; is LINQ’s name for &lt;code class="docutils literal"&gt;filter&lt;/code&gt;.) The logic inside &lt;code class="docutils literal"&gt;Select&lt;/code&gt; is written in a multi-line anonymous function (lambda), with braces (so there’s a &lt;code class="docutils literal"&gt;return&lt;/code&gt;) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. Inside that anonymous function, there are a few niceties, such as &lt;code class="docutils literal"&gt;var&lt;/code&gt; (type inference for variables), slicing (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;[2..]&lt;/span&gt;&lt;/code&gt;), as well as some more LINQ in string manipulations (&lt;code class="docutils literal"&gt;.First()&lt;/code&gt; and &lt;code class="docutils literal"&gt;.Skip(2)&lt;/code&gt;, which do what they say on the tin).&lt;/p&gt;
&lt;p&gt;The next three operations are fairly straightforward sorting, and extracting unique values. Those use single-expression lambdas, which don’t use &lt;code class="docutils literal"&gt;return&lt;/code&gt;. The pipeline ends with converting &lt;code class="docutils literal"&gt;IEnumerable&amp;lt;Branch&amp;gt;&lt;/code&gt; (which appeared at the &lt;code class="docutils literal"&gt;.Select()&lt;/code&gt; stage) into a &lt;code class="docutils literal"&gt;List&amp;lt;Branch&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="snippet-2"&gt;
&lt;h3&gt;Snippet 2&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-1" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-1" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IEnumerable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FilterAndNumberBranches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-2" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-2" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-3" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-3" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-4" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-4" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchWidth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-5" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-5" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CultureInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InvariantCulture&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-6" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-6" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;numberFormatString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;$"{{0,{branchWidth}}}. "&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-7" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-7" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-8" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-8" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-9" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-9" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-10" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-10" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-11" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-11" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numberFormatString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-12" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-12" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-13" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-13" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-14" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-14" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-15" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-15" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-16" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-16" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branchDisplay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-17" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-17" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;branchDisplay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_90d9d9619ef24ca3ae92d382359b076f-18" name="rest_code_90d9d9619ef24ca3ae92d382359b076f-18" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_90d9d9619ef24ca3ae92d382359b076f-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function adds numbers to the branch list, and then filters branches based on the user’s query. The first thing to notice is the second argument: &lt;code class="docutils literal"&gt;string? filter&lt;/code&gt;. C# has support for nullable types, which means the compiler warns you if you use a possibly null value somewhere it isn’t expected &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. &lt;code class="docutils literal"&gt;numberFormatString&lt;/code&gt; uses an interpolated string, in which &lt;code class="docutils literal"&gt;{branchWidth}&lt;/code&gt; will be replaced with the variable defined before. In the LINQ expression, you can see two interesting things: one is a two-argument lambda for &lt;code class="docutils literal"&gt;Select&lt;/code&gt;, and argument names, which can be optionally passed to functions and constructors for readability or to set parameters out of order.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="snippet-3"&gt;
&lt;h3&gt;Snippet 3&lt;/h3&gt;
&lt;p&gt;How much boilerplate do you need to define an immutable data class with a constructor, value equality, and a string representation?&lt;/p&gt;
&lt;p&gt;Exactly zero:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-1" name="rest_code_3e87a6f3685d479f88381313244d784e-1" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-2" name="rest_code_3e87a6f3685d479f88381313244d784e-2" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-3" name="rest_code_3e87a6f3685d479f88381313244d784e-3" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-4" name="rest_code_3e87a6f3685d479f88381313244d784e-4" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-4"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-5" name="rest_code_3e87a6f3685d479f88381313244d784e-5" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-6" name="rest_code_3e87a6f3685d479f88381313244d784e-6" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;BranchDisplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-7" name="rest_code_3e87a6f3685d479f88381313244d784e-7" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-7"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-8" name="rest_code_3e87a6f3685d479f88381313244d784e-8" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-8"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BranchName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-9" name="rest_code_3e87a6f3685d479f88381313244d784e-9" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-9"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsRemote&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_3e87a6f3685d479f88381313244d784e-10" name="rest_code_3e87a6f3685d479f88381313244d784e-10" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_3e87a6f3685d479f88381313244d784e-10"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;IsCurrent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(If you want things to be mutable, you do need to write some more code. Still, all you need for encapsulated properties is &lt;code class="docutils literal"&gt;int Foo { get; set; }&lt;/code&gt;, which is miles better than having to write out getters and setters by hand, as you would do in Java.)&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="dependency-management"&gt;
&lt;h2&gt;Dependency management&lt;/h2&gt;
&lt;p&gt;Gitco.NET is a fairly simple thing, and it doesn’t need any third-party libraries, it can do its job with just the standard library.&lt;/p&gt;
&lt;p&gt;However, Gitco.NET has a test suite. .NET doesn’t ship with a unit testing framework. There are three popular options, I picked xUnit (which is the most popular). I created the test project with a template, and then added a reference to the main code (under test). I ended up with the following project file (&lt;code class="docutils literal"&gt;gitco.NET.Tests.csproj&lt;/code&gt;):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code xml"&gt;&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-1" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-1" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt; &lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-2" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-2" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-3" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-3" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-3"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-4" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-4" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-4"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net6.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-5" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-5" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-5"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;ImplicitUsings&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/ImplicitUsings&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-6" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-6" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-6"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;LangVersion&amp;gt;&lt;/span&gt;10.0&lt;span class="nt"&gt;&amp;lt;/LangVersion&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-7" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-7" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-7"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-8" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-8" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-8"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;IsPackable&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/IsPackable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-9" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-9" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-9"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-10" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-10" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-11" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-11" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-11"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-12" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-12" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-12"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Test.Sdk"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"17.1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-13" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-13" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-13"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"xunit"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"2.4.1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-14" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-14" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-14"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"xunit.runner.visualstudio"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"2.4.3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-15" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-15" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-15"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-16" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-16" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-16"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-17" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-17" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-17"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-18" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-18" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-18"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"coverlet.collector"&lt;/span&gt; &lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"3.1.2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-19" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-19" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-19"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;IncludeAssets&amp;gt;&lt;/span&gt;runtime; build; native; contentfiles; analyzers; buildtransitive&lt;span class="nt"&gt;&amp;lt;/IncludeAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-20" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-20" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-20"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;PrivateAssets&amp;gt;&lt;/span&gt;all&lt;span class="nt"&gt;&amp;lt;/PrivateAssets&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-21" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-21" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-21"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;/PackageReference&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-22" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-22" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-22"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-23" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-23" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-24" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-24" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-24"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-25" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-25" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-25"&gt;&lt;/a&gt;    &lt;span class="nt"&gt;&amp;lt;ProjectReference&lt;/span&gt; &lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"..\gitco.NET\gitco.NET.csproj"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-26" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-26" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-26"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-27" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-27" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-28" name="rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-28" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#rest_code_fe23adab3d8d4c5b84e52b7aa3f54791-28"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yeah, it’s an XML file. But it’s pretty straightforward: there’s a &lt;code class="docutils literal"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; with some project configuration, and two &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&amp;gt;&lt;/code&gt; tags. One of them has &lt;code class="docutils literal"&gt;&amp;lt;PackageReference&amp;gt;&lt;/code&gt; tags, which specify third-party dependencies to use. The other has a &lt;code class="docutils literal"&gt;&amp;lt;ProjectReference&amp;gt;&lt;/code&gt; to the main code, pointing at its &lt;code class="docutils literal"&gt;.csproj&lt;/code&gt; file. (Note that this split is arbitrary, you can have as many &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; tags as you want, you could have just one with both package and project references.)&lt;/p&gt;
&lt;p&gt;How does this work? Quite simply, and transparently to the developer. Building the project will lead to packages being &lt;em&gt;restored&lt;/em&gt; (fetched from NuGet, or copied from the local NuGet cache). There are no “virtual environments” to manage, there aren’t 10 competing package managers. Visual Studio will also expect both projects to be part of one solution, which is something you’d likely do anyway for convenient access to both at the same time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tooling"&gt;
&lt;h2&gt;Tooling&lt;/h2&gt;
&lt;section id="dotnet-cli"&gt;
&lt;h3&gt;dotnet CLI&lt;/h3&gt;
&lt;p&gt;.NET has a CLI for performing typical build and project configuration tasks. You can &lt;code class="docutils literal"&gt;dotnet build&lt;/code&gt; a project, you can &lt;code class="docutils literal"&gt;dotnet run&lt;/code&gt; it, you can &lt;code class="docutils literal"&gt;dotnet test&lt;/code&gt; things, and you can &lt;code class="docutils literal"&gt;dotnet publish&lt;/code&gt;. The CLI figures out what to do, it restores the dependencies if needed, it handles the compilation of your code. If you type &lt;code class="docutils literal"&gt;dotnet test&lt;/code&gt; in a directory with your solution file (&lt;code class="docutils literal"&gt;.sln&lt;/code&gt;), it will restore dependencies, build the code, and then find tests and run them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ide"&gt;
&lt;h3&gt;IDE&lt;/h3&gt;
&lt;p&gt;What IDE should you use? There are a few options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio Code.&lt;/strong&gt; The quite advanced text editor supports pretty much any language. C# support works okay, with all the IDE features available, but in my experience, it can sometimes get confused (requiring a restart of the IDE). You will probably need to spend some more time with the &lt;code class="docutils literal"&gt;dotnet&lt;/code&gt; CLI than you would with the other options.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Windows.&lt;/strong&gt; The IDE with the purple icon is an option, although VS can feel arcane to people used to other IDEs/editors, and the Vim bindings are quite bad (especially if you select things with a mouse sometimes). It’s free for personal and very-small-business use, but for anything even slightly serious, you’ll need paid licenses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Mac.&lt;/strong&gt; A completely separate product, works reasonably well, same pricing as with the Windows version.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual Studio for Windows + ReSharper Ultimate.&lt;/strong&gt; Adding this (paid) extension makes VS much smarter, although it can also affect performance negatively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JetBrains Rider.&lt;/strong&gt; This is an IDE based on the IntelliJ platform, with all the magic seen in ReSharper (as well as other JetBrains IDEs), but none of the performance issues and Visual Studio being Visual Studio (although if you do prefer VS behaviors and keyboard shortcuts, you can configure those as well). This is probably your best bet if you’re willing to invest some money (or your employer is).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="why-should-i-pick-it-over-x"&gt;
&lt;h2&gt;Why should I pick it over X?&lt;/h2&gt;
&lt;p&gt;Well, it depends. If this post has piqued your interest, perhaps install the SDK and write some small things to get a feel for the language and to see if it’s for you. (And note this post didn’t cover the Web stuff.)&lt;/p&gt;
&lt;p&gt;But here are a few things of note:&lt;/p&gt;
&lt;section id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# is statically typed. Modern Python’s static typing (via things like mypy) is quite cool, but not all libraries and ecosystems have adopted it. Statically typed languages are safer, and allow IDEs to be smarter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has a better approach to functional programming. Python has ugly and single-expression lambdas (with a pointless &lt;code class="docutils literal"&gt;lambda&lt;/code&gt; keyword), C# has inline functions that can contain multiple statements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has much better package management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# is trivial to compile to a single-file executable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# is much faster than Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;~Nobody does machine learning and data science in C#, which is a plus in my book.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="java"&gt;
&lt;h3&gt;Java&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# has a lot more developer-quality-of-life features and less boilerplate. For example, Lists and Dictionaries can be accessed using brackets, and properties are accessible via dot notation instead of having to explicitly call getter and setter methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C#’s generic are more flexible, as they aren’t erased on compilation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has null safety. It also has the safe navigation &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;?.&lt;/span&gt;&lt;/code&gt; operator, and the null coalescing &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;??&lt;/span&gt;&lt;/code&gt; operator, both of which make working with nullable values easier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has easy concurrency via &lt;code class="docutils literal"&gt;async&lt;/code&gt; and &lt;code class="docutils literal"&gt;await&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web stuff: Spring is painful, Spring Boot doesn’t make it much better. ASP.NET Core is much nicer.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Additional reading:&lt;/em&gt; Wikipedia has a very nice and detailed &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java"&gt;Comparison of C# and Java&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="also"&gt;
&lt;h3&gt;Also…&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# is a high-level language with automated memory management, which is very convenient in many use-cases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# has exceptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are quite a lot of jobs for C# developers, although not necessarily in Silicon Valley.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="but-on-the-other-hand"&gt;
&lt;h3&gt;But on the other hand…&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;C# can still sometimes feel a bit Windows-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C# jobs tend to be enterprisey.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Python is a great language to learn as a beginner. It’s also great for one-off things, interactive work, and scripting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The non-Windows desktop GUI story isn’t too great, although it is getting better with MAUI (which supports macOS).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re targeting mobile, I would probably focus on the native APIs and languages for the best user experience (Swift and Cocoa Touch for iOS; Kotlin and the Android Platform APIs for Android). That said, MAUI might be worth a go as well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re doing very low-level stuff, C# probably won’t cut it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you want real functional programming, go with F#. You might also prefer Scala or Haskell or such.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And if you’re making web front-end stuff, TypeScript (or plain JavaScript) is still your best bet. C# has Blazor, but I’d prefer for web apps not to embed all of .NET via WebAssembly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But for console apps, Windows desktop, and web back-end services? &lt;strong&gt;Do give C# a try,&lt;/strong&gt; it might just win you over. It is a pretty good language, but one that was held back by the Windows association for a long time. But now it’s part of a modern, multi-platform, developer-friendly ecosystem.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The code samples in this post are using the usual Microsoft code style with braces on separate lines, the usual Microsoft naming convention (PascalCase for ~everything, camelCase for local variable names), and 2-space indentation, which isn’t the usual Microsoft style.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;This could be moved to a separate static method. If that method was &lt;code class="docutils literal"&gt;private static Branch ParseLineAsBranch(string branchLine)&lt;/code&gt;, then the expression could be &lt;code class="docutils literal"&gt;.Select(ParseLineAsBranch)&lt;/code&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;There’s some inconsistency and mixing when working with nullables: nullable objects (such as &lt;code class="docutils literal"&gt;string?&lt;/code&gt;) are accessible directly, whereas nullable value types (such as &lt;code class="docutils literal"&gt;int?&lt;/code&gt;) need to be accessed with &lt;code class="docutils literal"&gt;.Value&lt;/code&gt;, due to historical reasons and implementation details.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>.NET</category><category>CSharp</category><category>programming</category><category>web development</category><guid>https://chriswarrick.com/blog/2022/09/19/writing-a-console-app-in-c-sharp-for-fun-and-profit/</guid><pubDate>Mon, 19 Sep 2022 20:35:00 GMT</pubDate></item><item><title>When HTML is not enough: a tale of the &lt;datalist&gt; element</title><link>https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;HTML 5.0 was finalized in 2014 (and its drafts were published even earlier), and with it came the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; element.  It’s
2020, and even though it might look like a good replacement for custom
autocomplete widgets, browser issues made me get rid of it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I’ve built a web app to help me track my expenses. The app is written in Django,
and &lt;a class="reference external" href="https://github.com/Kwpolska/django-expenses"&gt;it’s open source&lt;/a&gt;. One of
the goals was to have a simple codebase with limited external JS dependencies,
as well as basic usability with JS disabled. This is partially to facilitate
learning of standard DOM manipulation routines and TypeScript.&lt;/p&gt;
&lt;p&gt;The JS/TS bits are called the &lt;em&gt;Scripting Enhancements&lt;/em&gt; to reflect their nature.
The biggest items are an interactive bill editor (a table with add/edit/remove
operations, that submits its data as a regular HTML POST &lt;code class="docutils literal"&gt;&amp;lt;form&amp;gt;&lt;/code&gt;) and an
autocomplete framework (used by the bill editor in an advanced way, and by
other screens in the app with a more basic featureset). The autocomplete
framework is exactly what you’d expect: point it at an input field and a URL,
and keypresses lead to the URL being queried for previous values for this
field, which are displayed as possible values to the user to save typing.&lt;/p&gt;
&lt;div class="section" id="autocomplete-with-html-5-the-datalist-tag"&gt;
&lt;h2&gt;Autocomplete with HTML 5: the &amp;lt;datalist&amp;gt; tag&lt;/h2&gt;
&lt;p&gt;But how to display the options to the user? Most people would display a
&lt;code class="docutils literal"&gt;position: absolute&lt;/code&gt; box with links/buttons, throw in some more logic around
the focus and blur events, and call it a day. There are tons of ready-made
solutions that do all that for you, although most of them are terrible. But!
HTML 5 introduced a &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag. And it looks like everything you could
need. You link a &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag to an &lt;code class="docutils literal"&gt;&amp;lt;input&amp;gt;&lt;/code&gt; and it shows matching
options in an autocomplete-style box.  In fact, here’s a simple demo, in case
your browser supports it:&lt;/p&gt;
&lt;div class="card mb-3 text-center"&gt;
    &lt;div class="card-body"&gt;
        &lt;label for="dldemo" class="ml-1 mr-1"&gt;Favorite programming language:&lt;/label&gt;
        &lt;input class="form-control d-inline-block ml-1 mr-1" style="width: auto" placeholder="Start typing…" list="dldemolist" id="dldemo"&gt;
        &lt;datalist id="dldemolist"&gt;
            &lt;option value="Swift"&gt;
            &lt;/option&gt;&lt;option value="Rust"&gt;
            &lt;/option&gt;&lt;option value="Ruby"&gt;
            &lt;/option&gt;&lt;option value="Python"&gt;
            &lt;/option&gt;&lt;option value="PHP"&gt;
            &lt;/option&gt;&lt;option value="Kotlin"&gt;
            &lt;/option&gt;&lt;option value="JavaScript"&gt;
            &lt;/option&gt;&lt;option value="Java"&gt;
            &lt;/option&gt;&lt;option value="Go"&gt;
            &lt;/option&gt;&lt;option value="C++"&gt;
            &lt;/option&gt;&lt;option value="C#"&gt;C Sharp&lt;/option&gt;
            &lt;option value="C"&gt;
        &lt;/option&gt;&lt;/datalist&gt;
    &lt;/div&gt;
    &lt;div class="card-footer"&gt;&lt;a href="https://chriswarrick.com/listings/datalist/datalist-demo.html.html"&gt;View demo source&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, here are a few takeaways from that demo:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Options are displayed in the same order as in the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; tag in the
source, this list was sorted reverse-alphabetically in the source, and
that’s how it appears in the source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The list is filtered case-insensitively based on user-input substrings. In
Chrome, Firefox and Safari, the substring can appear at any point in the
string.  But in Edge (old Microsoft engine), it looks only at the beginning
of the string.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some browsers show an arrow on the field to show the entries, sometimes
double-clicking opens the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The entry for C# is as follows: &lt;code class="docutils literal"&gt;&amp;lt;option &lt;span class="pre"&gt;value="C#"&amp;gt;C&lt;/span&gt; &lt;span class="pre"&gt;Sharp&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;/code&gt;.
Chrome displays it on as &lt;span class="raw-html"&gt;“&lt;strong&gt;C#&lt;/strong&gt; &lt;small&gt;C
Sharp&lt;/small&gt;”&lt;/span&gt; (on two lines), Safari shows only “C#”, Firefox and Edge
show “C Sharp”. Selecting the option always inputs C#.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mobile Safari does not expand the list by default, but displays some of the
options above the keyboard (as typing predictions). You can click on the
arrow to display all the options in a &lt;a class="reference external" href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers/"&gt;scrolling picker&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chrome on Android displays it the same way as on desktop (drop-down list).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This demo uses static, hardcoded data. Doing that for the Expenses app would
be terrible for performance — that would waste bandwidth, force the browser to
parse a fairly long list, and it could easily overload the browser when it
tries to expand the list. But wiring it up to a &lt;code class="docutils literal"&gt;fetch()&lt;/code&gt; call to a REST API
should not be hard, and browsers work correctly when the datalist changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-emoji-hack"&gt;
&lt;h2&gt;An emoji hack&lt;/h2&gt;
&lt;p&gt;One of the features I needed was to make the auto-complete fill out more than
one field at once. Well, &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; has no specific support for that. It only
supports showing a list and putting the value in the input box it’s connected
to. But choosing something from the list fires the usual &lt;code class="docutils literal"&gt;input&lt;/code&gt; event. I
opted to do this: show every entry with a sparkles emoji (✨) in front, with the
two other fields also inside this string, delimited by other emoji, and then
catch the &lt;code class="docutils literal"&gt;input&lt;/code&gt; event.  If the field beigns with ✨, then use a regex to go
from one emoji-delimited string to three, and place the correct strings in
three input boxes (while also removing the sparkles from the first field).&lt;/p&gt;
&lt;p&gt;Yes, it’s a hack. But it’s pretty okay appearance-wise, and it does work. It
wouldn’t have worked so well in Edge, but I didn’t even know about this
behavior before writing this blog post, and the initial sparkles emoji could be
dropped and I could still make it work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="works-on-mobile-yes-except"&gt;
&lt;h2&gt;Works on mobile? Yes, except…&lt;/h2&gt;
&lt;p&gt;I went on and deployed the &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;-based autocomplete to my site. It
looked good, worked fine. To use the thing on mobile, I’ve got a special
launcher app. Its main reason for existence? I want a home screen icon, but
Chrome only allows progressive web apps to do that (and that’s busywork I don’t
feel like doing), and back then, Firefox (which has no such restrictions) did
not support &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt; on Android.  The app is fairly simple, with a
standard WebView widget and a slide-out navigation drawer, and a few other nice
things, and it’s 120 SLOC of Kotlin.&lt;/p&gt;
&lt;p&gt;But then, I bought a new phone, and with it, upgraded from Android 7 to 9. And
I hit a bug in Chrome, which is still not fixed. The bug?
&lt;a class="reference external" href="https://bugs.chromium.org/p/chromium/issues/detail?id=949555"&gt;HTML datalist doesn’t work on Android 8 or higher in WebView&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh. We’ve got a bit of a problem. Firefox still didn’t seem to support
&lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. But there’s one more way to make an app show a webpage: Custom
Tabs. This is a feature you’ve probably seen around Android, and it’s somewhere
in between. The app gets minimum control over the appearance of the toolbar,
but the “real” web browser is responsible for rendering the page. Chrome in a
Custom Tab supports &lt;code class="docutils literal"&gt;&amp;lt;datalist&amp;gt;&lt;/code&gt;. So I built a small app to do what I wanted.&lt;/p&gt;
&lt;p&gt;There was just one minor thing to fix. My default browser on mobile is &lt;a class="reference external" href="https://support.mozilla.org/en-US/kb/focus"&gt;Firefox
Focus&lt;/a&gt;. The main features of
Focus are tracking protection, content blocking, and storing zero
history and cookies (permanent incognito mode with one-click clearing). This is
perfect for clicking random links, especially since I hate Chrome’s insistence
on showing webpages you visited 5 years ago once when autocompleting URLs.
(Chrome is my secondary browser on mobile; on desktop, I almost always have an
incognito window open.)&lt;/p&gt;
&lt;p&gt;Why is Focus relevant to this story? One, it (still) does not support the tag.
Two, the default browser is also the provider of the Custom Tabs. Which is
great for my web-browsing habits, but won’t solve the problem.  Fortunately,
it’s just a one-line change to send the intent directly to Chrome. The entire
thing is less than 30 lines long. You can see the full &lt;a class="reference external" href="https://chriswarrick.com/listings/android-chrome-custom-tabs/CustomTabsActivity.java.html"&gt;CustomTabsActivity.java&lt;/a&gt; file, but the relevant bits are below.&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Optionally, configure appearance and buttons on toolbar.&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;CustomTabsIntent&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Force browser to Chrome instead of system default.&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setPackage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.android.chrome"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/#rest_code_e10f2a9ab1104cf18336bff4547dab3d-6"&gt;&lt;code data-line-number="6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_e10f2a9ab1104cf18336bff4547dab3d-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;launchUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://chriswarrick.com/"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;It seems to work well, the list is displayed, and it can be used to input
stuff, the emoji hack works too.&lt;/p&gt;
&lt;p&gt;There was one more bug with Chrome on Android. Typing a character sometimes led to
it appearing twice: I typed &lt;em&gt;A&lt;/em&gt;, the hints appeared, then the text box started
showing &lt;em&gt;AA&lt;/em&gt;, and my hints disappeared. I can’t reproduce it right now, but
that also made the entire flow just annoying.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aftermath"&gt;
&lt;h2&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;With all the browser bugs, support issues, and various glitches, I decided to
build an autocomplete widget of my own. I took the CSS from Bootstrap 4, and
used Popper.js to do the positioning. It looks and works better, has keyboard
support, and is definitely less hacky (the emoji is still there, because they
look good, but my entries know the original object they were made from and can
just tell the handler to use that instead of using regex). And it beats many of
the autocomplete widgets out there, because they often fail when you hold the
mouse a bit longer; also, it can reposition itself to the top if there’s more
space. All that in just 198 SLOC of TypeScript. (I also discovered a bug in my
code that made it work a bit worse, fixing it for the old implementation would
still not fix the other issues.)&lt;/p&gt;
&lt;p&gt;What’s the moral of the story? Even though HTML 5 has been a standard for many
years, browser support for the new tags still seems to be an issue. And
sometimes, it’s better to just put in the extra work and build a good UI on
your own, instead of trusting the browser to do it right.&lt;/p&gt;
&lt;p&gt;The same applies to other “new” HTML 5 form elements.  &lt;code class="docutils literal"&gt;&amp;lt;input &lt;span class="pre"&gt;type="date"&amp;gt;&lt;/span&gt;&lt;/code&gt;
is not supported in desktop Safari, and is fairly ugly in desktop Firefox and
Chrome.  It displays the standard OS picker on mobile, which gets you a
calendar on Android, but a &lt;a class="reference external" href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/pickers/"&gt;scrolling picker&lt;/a&gt; on iOS.
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;datetime-local&lt;/span&gt;&lt;/code&gt; is currently Chrome-only.  &lt;code class="docutils literal"&gt;month&lt;/code&gt; lets you click on a day
and end up with an entire month selected in Chrome.  A custom component with
JavaScript would be far more consistent and often easier to use.&lt;/p&gt;
&lt;/div&gt;</description><category>HTML</category><category>HTML5</category><category>JavaScript</category><category>TypeScript</category><category>web development</category><guid>https://chriswarrick.com/blog/2020/02/09/when-html-is-not-enough-a-tale-of-the-datalist-element/</guid><pubDate>Sun, 09 Feb 2020 15:30:00 GMT</pubDate></item><item><title>Modern Web Development: where you need 500 packages to build Bootstrap</title><link>https://chriswarrick.com/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;This humble blog is written by an old-school developer who sometimes does web stuff. An attempt to customize the Bootstrap CSS theme requires 50 MB of node_modules, over 500 packages, and comes with a bit of frustration at stupid tools and terrible documentation.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;You might notice that this website is based on Bootstrap. You might also notice it’s been heavily customized, especially if you’re browsing in the (currently default) Dark Mode. Back in Bootstrap v3 days, the task was accomplished by &lt;a class="reference external" href="https://getbootstrap.com/docs/3.4/customize/"&gt;a simple online tool&lt;/a&gt; that required no local installs. Bootstrap 4 changed the landscape: now you need to manually compile Sass. Moreover, Autoprefixer is required to make the CSS usable by web browsers.&lt;/p&gt;
&lt;p&gt;Now, when it comes to web development, I believe the old ways were better. Back when nobody thought to make a client-side-JS-based blog or pastebin, and only apps that needed interactivity were JS-first. Gmail is a good example of that, although they &lt;em&gt;still&lt;/em&gt; offer a &lt;a class="reference external" href="https://support.google.com/mail/answer/15049?hl=en"&gt;basic HTML view&lt;/a&gt; and it works good — in fact, I suppose it might be less buggy than the JS-ladden version. (A lot of single-page apps like to randomly glitch out in my experience.)&lt;/p&gt;
&lt;p&gt;I still remember the days when all that one had to do is &lt;code class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; yuicompressor.jar style.css &amp;gt; style.min.css&lt;/code&gt;. Then Less and Sass became more popular — and that’s good. The ability to use variables and functions makes it possible to produce well-organized stylesheets. The idea of Autoprefixer is also fine, humans should not waste their time with browser-specific prefixes for experimental features, that can be neatly automated.&lt;/p&gt;
&lt;p&gt;But to use all these fancy tools, glue code is necessary. Autoprefixer is (mainly server-side) JS-only, Sass is currently Node or Dart, minifier tools are available in many languages.&lt;/p&gt;
&lt;div class="section" id="attempt-0-no-js-stuff-no-node-modules"&gt;
&lt;h2&gt;Attempt 0: no JS stuff, no node_modules&lt;/h2&gt;
&lt;p&gt;I installed a Sass compiler. There are web services like cssminifier.com that can be easily used with curl in a Bash script. Autoprefixer has a webpage that lets you use the service without installing it as well. The catch is, the code runs locally in your web browser. Automating a web browser requires some effort. I decided to leave this part un-automated. Here is the Bash script I hacked together (with some messages removed):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &amp;gt; bootstrap.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &amp;gt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Go to https://autoprefixer.github.io/."&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-6"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"(light) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-8"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-9"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-11"&gt;&lt;/a&gt;sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-13"&gt;&lt;/a&gt;pbcopy &amp;lt; bootstrap-dark.noprefix.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-14"&gt;&lt;/a&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;"( dark) Paste the clipboard contents and copy the output, then press Enter."&lt;/span&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-15"&gt;&lt;/a&gt;&lt;span class="nb"&gt;read&lt;/span&gt; temp
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-16"&gt;&lt;/a&gt;pbpaste &amp;gt; assets/css/bootstrap-dark.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-18"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap.min.css
&lt;a name="rest_code_b156fb3597e24355a0121f82f76e5086-19"&gt;&lt;/a&gt;curl -X POST -s --data-urlencode &lt;span class="s1"&gt;'input@assets/css/bootstrap-dark.css'&lt;/span&gt; https://cssminifier.com/raw &amp;gt; assets/css/bootstrap-dark.min.css
&lt;/pre&gt;&lt;p&gt;The “manual copy” solution was inconvenient, but it worked.&lt;/p&gt;
&lt;p&gt;Well, most of the time Some lags/glitches with the clipboard meant that sometimes, files had the incorrect content. So, I wanted to fix it, and build it in a more modern, JS-y way. The way Bootstrap does it is a lot of shell commands (that run various Node tools). I don’t feel like building this pipeline with Bash, it would feel fragile. Let’s do it the JS way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-1-webpack"&gt;
&lt;h2&gt;Attempt 1: webpack&lt;/h2&gt;
&lt;p&gt;I’ve used webpack for &lt;a class="reference external" href="https://github.com/Kwpolska/django-expenses/blob/master/ts/webpack.config.js"&gt;another project of mine&lt;/a&gt;. It was okay, and it did the job (namely, compiling TypeScript into browser-usable JS).&lt;/p&gt;
&lt;p&gt;I wanted to give it a try for this one. I googled “webpack sass”. The first result was &lt;a class="reference external" href="https://github.com/webpack-contrib/sass-loader"&gt;sass-loader&lt;/a&gt;. The pipeline for it was:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_89bf8d84a24a411c948d75ebbd6a9bd7-1"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"style-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// creates style nodes from JS strings&lt;/span&gt;
&lt;a name="rest_code_89bf8d84a24a411c948d75ebbd6a9bd7-2"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"css-loader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// translates CSS into CommonJS&lt;/span&gt;
&lt;a name="rest_code_89bf8d84a24a411c948d75ebbd6a9bd7-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"sass-loader"&lt;/span&gt; &lt;span class="c1"&gt;// compiles Sass to CSS, using Node Sass by default&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s recap. Someone thought that the right way to do CSS is to use JS imports.&lt;/p&gt;
&lt;p&gt;Yes. &lt;code class="docutils literal"&gt;import &lt;span class="pre"&gt;"./style.css";&lt;/span&gt;&lt;/code&gt; in a JS file. So that your fancy build tool knows about CSS.&lt;/p&gt;
&lt;p&gt;Webpack wasn’t the right tool for my project, but even if I had JS code there, &lt;strong&gt;WHY WOULD I MENTION STYLESHEETS IN MY JS CODE?!&lt;/strong&gt; Webpack’s website also lists .jpg and .png assets, are they meant to be imported in JS as well? This is absurd.&lt;/p&gt;
&lt;p&gt;Going back to googling “webpack sass”… The next two results were Medium posts. The stupidity of Medium as a blog platform notwithstanding, one of the posts was from 2017, referring to webpack 2. The next post was a year older, a completely unreadable mess, and it was for webpack 4. That’s not helpful in any way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-gulp"&gt;
&lt;h2&gt;Attempt 2: Gulp&lt;/h2&gt;
&lt;p&gt;Let’s try something else from the JS world: Gulp. Now, the tool is not terrible, but it still requires a lot of dependencies.&lt;/p&gt;
&lt;p&gt;The pipeline that was required for this task sounds very simple:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;bootstrap-kw{,-dark}.sass → Sass compiler → Autoprefixer → bootstrap{,-dark}.css → minify → bootstrap{,-dark}.min.css&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Gulp version is fairly simple: (I based it on examples on Gulp’s website, and pages of all my dependencies).&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dest&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;minifyCSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-csso'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-3"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'gulp-postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"gulp-rename"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-7"&gt;&lt;/a&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compiler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'node-sass'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-11"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*.scss'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-13"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;()]))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-14"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-kw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-17"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;minifyCSS&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-19"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-20"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;basename&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;".min"&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-21"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-22"&gt;&lt;/a&gt;        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'assets/css'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_56f7d6dc483c4abc95f7bf2e70b008a2-25"&gt;&lt;/a&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="a-node-modules-extravaganza"&gt;
&lt;h2&gt;A node_modules extravaganza&lt;/h2&gt;
&lt;p&gt;Can you see all the &lt;code class="docutils literal"&gt;require&lt;/code&gt; lines at the top? Every one of them is a dependency of my build script. With the exception of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;gulp-rename&lt;/span&gt;&lt;/code&gt;, which IMO should be a built-in part of Gulp (it’s 45 lines of code and no external dependencies), the list is sensible.&lt;/p&gt;
&lt;p&gt;Well, I already mentioned the size of &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;: 51 MiB according to &lt;code class="docutils literal"&gt;du&lt;/code&gt; (size-on-disk measurement). How many packages are there?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="545"&gt;
&lt;li&gt;&lt;p&gt;Five hundred and forty-five packages.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whoa, when did that happen? Most of it comes from gulp/gulp-cli (384 packages), with node-sass taking the second place (177 packages). Some of those are shared between libraries, and a few more belong to the other requirements. And many of these dependencies are a disgrace to programming.&lt;/p&gt;
&lt;p&gt;After a full install of my &lt;code class="docutils literal"&gt;package.json&lt;/code&gt;, npm says &lt;code class="docutils literal"&gt;added 545 packages from 331 contributors and audited 10500 packages in 22.458s&lt;/code&gt;.  I’ve implicitly agreed to licenses imposed by 331 random people. All to build some simple CSS files out of SASS.&lt;/p&gt;
&lt;p&gt;Let’s go on a tour of &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; and see what we ended up with.&lt;/p&gt;
&lt;div class="section" id="polyfills-reimplementations-oh-my"&gt;
&lt;h3&gt;Polyfills, reimplementations, oh my!&lt;/h3&gt;
&lt;p&gt;Everything I’ve installed is meant to be used on top of Node.js. Node runs on top of the V8 engine, coming from Chrome. They’ve had almost-full ES2015 (ES6) support since April 2016. And yet, my node_modules is full of small polyfills.&lt;/p&gt;
&lt;p&gt;Let’s pick a random one and work back from it: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// Copyright © Sindre Sorhus, MIT license&lt;/span&gt;
&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-2"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_ddcff9bde20d468e81115b738a07ae1a-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s a one-liner that re-implements &lt;code class="docutils literal"&gt;Number.isNaN&lt;/code&gt; if it’s not available, which is, according to MDN, &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"&gt;a more robust version of the original, global
isNaN()&lt;/a&gt;. The original function coerced everything to Number before testing, which apparently wasn’t enough. That’s what you get for using a language designed in a week. The function was added to all sane browsers and Node around 2013, the polyfill was created in 2015.&lt;/p&gt;
&lt;p&gt;It was pulled in by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-fullwidth-code-point&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-finite&lt;/span&gt;&lt;/code&gt;, both by the same author. The latter one is especially interesting: it’s at version 1.0.2. Version 1.0.1improved the codebase from &lt;code class="docutils literal"&gt;if (x) { return false; } return true&lt;/code&gt; (via pull request), and version 1.0.2 replaced a manual &lt;code class="docutils literal"&gt;val !== val&lt;/code&gt; comparison with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt; has 7.5 million weekly downloads, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-finite&lt;/span&gt;&lt;/code&gt; has 6.7M. The build of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;number-is-nan&lt;/span&gt;&lt;/code&gt; &lt;a class="reference external" href="https://travis-ci.org/sindresorhus/number-is-nan/builds/363709421"&gt;is currently failing.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fifty-shades-of-terminal"&gt;
&lt;h3&gt;Fifty shades of terminal&lt;/h3&gt;
&lt;p&gt;Every Node-based CLI tool wants to be cool. And for that, they need colors.&lt;/p&gt;
&lt;p&gt;How does this work in Bash? You could use &lt;code class="docutils literal"&gt;tput setaf XX&lt;/code&gt;, but many people would just manually &lt;code class="docutils literal"&gt;echo '\033[XXm'&lt;/code&gt;, the codes are available &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit"&gt;in Wikipedia&lt;/a&gt; or elsewhere.&lt;/p&gt;
&lt;p&gt;How does this work in Python? There are a few libraries for this (and you can always do it manually), but the most popular one is &lt;a class="reference external" href="https://pypi.org/project/colorama/"&gt;colorama&lt;/a&gt;. That library can even handle Windows.&lt;/p&gt;
&lt;p&gt;What is available in Node?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;color-support&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;supports-color&lt;/span&gt;&lt;/code&gt; are both part of my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There seems to be a fairly advanced &lt;code class="docutils literal"&gt;chalk&lt;/code&gt; library, by the aforementioned Sindre Sorhus.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-colors&lt;/span&gt;&lt;/code&gt; seems to be another, smaller option for it, it claims to be 10-20x faster than &lt;code class="docutils literal"&gt;chalk&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s a package called &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;has-ansi&lt;/span&gt;&lt;/code&gt; which checks if a string has ANSI escapes in it. It depends on &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;strip-ansi&lt;/span&gt;&lt;/code&gt; also uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-regex&lt;/span&gt;&lt;/code&gt;. All three packages are basically one liners. One exports a regex, the other two do replacement/search with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wrap-ansi&lt;/span&gt;&lt;/code&gt; intelligently wraps a string with ANSI escapes in it.  &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt; takes three strings and  returns &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;'\u001b['+&lt;/span&gt; a + 'm' + msg + '\u001b[' + b + 'm'&lt;/code&gt; (Copyright © Jon Schlinkert, MIT license)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There’s also &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/code&gt;, which calls &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-wrap&lt;/span&gt;&lt;/code&gt; with a = 90, b = 39, and a user-specified message. (Copyright © Jon Schlinkert, MIT license)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-red&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-cyan&lt;/span&gt;&lt;/code&gt; are very similar libraries to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-gray&lt;/span&gt;&lt;/code&gt;. Is this a joke?!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are definitely other &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansi-$color&lt;/span&gt;&lt;/code&gt; libraries, although they are not in my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;. And probably other libraries for color support, but either they are not installed, or I haven’t managed to spot them in my &lt;code class="docutils literal"&gt;npm list&lt;/code&gt; output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="copyrighted-one-liners"&gt;
&lt;h3&gt;Copyrighted one-liners&lt;/h3&gt;
&lt;p&gt;Another famous library by Jon Schlinkert is called &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt;. Here is the complete code, verbatim:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-even &amp;lt;https://github.com/jonschlinkert/is-even&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015, 2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-10"&gt;&lt;/a&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-odd'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-13"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_d5893286c0d74114bd239ae671df8b55-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; is slightly longer:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/*!&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * is-odd &amp;lt;https://github.com/jonschlinkert/is-odd&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-3"&gt;&lt;/a&gt;&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-4"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Copyright (c) 2015-2017, Jon Schlinkert.&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-5"&gt;&lt;/a&gt;&lt;span class="cm"&gt; * Released under the MIT License.&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-6"&gt;&lt;/a&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-8"&gt;&lt;/a&gt;&lt;span class="s1"&gt;'use strict'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-10"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'is-number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-12"&gt;&lt;/a&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-13"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-14"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected a number'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-16"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-17"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'expected an integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-20"&gt;&lt;/a&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;isSafeInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'value exceeds maximum safe integer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-22"&gt;&lt;/a&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-23"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_cef8b9ecb48947d381d01a863674f24e-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-number&lt;/span&gt;&lt;/code&gt; is another fun library; it says &lt;code class="docutils literal"&gt;true&lt;/code&gt; for strings of numbers, and &lt;code class="docutils literal"&gt;false&lt;/code&gt; for NaN (&lt;code class="docutils literal"&gt;typeof NaN === 'number'&lt;/code&gt;). &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; is used by, for example, &lt;code class="docutils literal"&gt;even&lt;/code&gt;, which calls &lt;code class="docutils literal"&gt;Array.filter&lt;/code&gt; with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; as the argument. There’s also &lt;code class="docutils literal"&gt;odd&lt;/code&gt;, and for some reason, the two packages are separate.&lt;/p&gt;
&lt;p&gt;The checks found in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; make some more sense if you’re working with a dynamically-typed language where every number is a float (like JS). But you could release &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;check-odd&lt;/span&gt;&lt;/code&gt;, which is 100x faster than &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; (it assumes its input is correct), and exports &lt;code class="docutils literal"&gt;function checkOdd(value) { return (value % 2) !== 0; }&lt;/code&gt; &lt;s&gt;(Copyright © 2019, Chris Warrick. Licensed under the 4-clause BSD license.)&lt;/s&gt; &lt;i&gt;(No, not really.)&lt;/i&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-product-includes-software-developed-by"&gt;
&lt;h3&gt;This product includes software developed by…&lt;/h3&gt;
&lt;p&gt;Hold on a second, 4-clause BSD? That license contains the following clause:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-1"&gt;&lt;/a&gt;Redistribution and use in source and binary forms, with or without
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-2"&gt;&lt;/a&gt;modification, are permitted provided that the following conditions are met:
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-3"&gt;&lt;/a&gt;3. All advertising materials mentioning features or use of this software
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-4"&gt;&lt;/a&gt;   must display the following acknowledgement:
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-5"&gt;&lt;/a&gt;     This product includes software developed by the University of
&lt;a name="rest_code_f3226ebc2e864eef8a9b98b4cb9385fd-6"&gt;&lt;/a&gt;     California, Berkeley and its contributors.
&lt;/pre&gt;&lt;p&gt;This clause was removed by UC Berkeley in 1999, but there is still old code that has clauses (with other names), and someone could create something with the old license. I actually found one such clause in my &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; (from &lt;code class="docutils literal"&gt;bcrypt_pbkdf&lt;/code&gt;). &lt;a class="reference external" href="https://www.gnu.org/licenses/bsd.html"&gt;NetBSD had 75 different clauses&lt;/a&gt; in 1997. It would be fun to see figures for the Node ecosystem… or more packages with equally problematic clauses.&lt;/p&gt;
&lt;p&gt;Most people aren’t aware of the licenses of their node dependencies. Going back to Colorama, I can quickly verify that Colorama has no dependencies, and itself uses the 3-clause BSD license. (That version of the license lacks the advertising clause and is considered GPL-compatible.) There is a helpful &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;license-checker&lt;/span&gt;&lt;/code&gt; package that can tell you what licenses you have (based on the details provided in &lt;code class="docutils literal"&gt;package.json&lt;/code&gt;)&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-1"&gt;&lt;/a&gt;├─ MIT: 380
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-2"&gt;&lt;/a&gt;├─ ISC: 64
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-3"&gt;&lt;/a&gt;├─ Apache-2.0: 10
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-4"&gt;&lt;/a&gt;├─ BSD-3-Clause: 10
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-5"&gt;&lt;/a&gt;├─ BSD-2-Clause: 3
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-6"&gt;&lt;/a&gt;├─ CC-BY-3.0: 2
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-7"&gt;&lt;/a&gt;├─ BSD-3-Clause OR MIT: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-8"&gt;&lt;/a&gt;├─ MIT*: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-9"&gt;&lt;/a&gt;├─ (MIT OR Apache-2.0): 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-10"&gt;&lt;/a&gt;├─ CC-BY-4.0: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-11"&gt;&lt;/a&gt;├─ AFLv2.1,BSD: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-12"&gt;&lt;/a&gt;├─ MPL-2.0: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-13"&gt;&lt;/a&gt;├─ (BSD-2-Clause OR MIT OR Apache-2.0): 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-14"&gt;&lt;/a&gt;├─ CC0-1.0: 1
&lt;a name="rest_code_5787c90098a746eeb1ed7ac266a7ecaa-15"&gt;&lt;/a&gt;└─ Unlicense: 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-2-back-to-bash"&gt;
&lt;h2&gt;Attempt 2: back to Bash&lt;/h2&gt;
&lt;p&gt;I decided to get rid of Gulp, it’s not necessary for this pipeline. I replaced
it with Bash and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;postcss-cli&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node-sass&lt;/span&gt;&lt;/code&gt; was replaced by &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;dart-sass&lt;/span&gt;&lt;/code&gt;
(a two-file binary distribution), and &lt;code class="docutils literal"&gt;csso&lt;/code&gt; was replaced by &lt;code class="docutils literal"&gt;cssnano&lt;/code&gt; (it
works with postcss). Here is the resulting Bash file:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-1"&gt;&lt;/a&gt;sass bootstrap-kw.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap.css
&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-2"&gt;&lt;/a&gt;sass bootstrap-kw-dark.scss &lt;span class="p"&gt;|&lt;/span&gt; npx postcss --no-map --use autoprefixer -o assets/css/bootstrap-dark.css
&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-3"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap.min.css assets/css/bootstrap.css
&lt;a name="rest_code_d8ec13eae27b4f9294b82fe457599f09-4"&gt;&lt;/a&gt;npx postcss --no-map --use cssnano -o assets/css/bootstrap-dark.min.css assets/css/bootstrap-dark.css
&lt;/pre&gt;&lt;p&gt;The simplified dependency list cost me 37 MiB of disk space, and I’ve got 438
packages from 232 contributors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attempt-3-node-clis-are-unnecessary"&gt;
&lt;h2&gt;Attempt 3: node CLIs are unnecessary&lt;/h2&gt;
&lt;p&gt;Let’s try something else: replace &lt;code class="docutils literal"&gt;npx postcss&lt;/code&gt; with a custom tool.&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'fs'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-2"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'get-stdin'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-4"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postcss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'postcss'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;autoprefixer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'autoprefixer'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-6"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cssnano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cssnano'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-8"&gt;&lt;/a&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-10"&gt;&lt;/a&gt;&lt;span class="nx"&gt;getStdin&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-11"&gt;&lt;/a&gt;    &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;autoprefixer&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-12"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-14"&gt;&lt;/a&gt;        &lt;span class="nx"&gt;postcss&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;cssnano&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result2&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-15"&gt;&lt;/a&gt;            &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`assets/css/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;.min.css`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-16"&gt;&lt;/a&gt;        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-17"&gt;&lt;/a&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;a name="rest_code_765705086eec43a8963a15c886db0f72-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The bash script now pipes &lt;code class="docutils literal"&gt;sass&lt;/code&gt; output to &lt;code class="docutils literal"&gt;node run_postcss.js &lt;span class="pre"&gt;bootstrap(-dark)&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Doing this… cost me a new dependency. Its name is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/code&gt;. We’ve already met its author, Sindre Sorhus. While the library has its deficiencies &lt;a class="reference external" href="https://github.com/sindresorhus/get-stdin/issues/21"&gt;(namely, it doesn’t support reading from TTY)&lt;/a&gt;, it’s good enough. I could do it manually or use some other tricks, but since &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;get-stdin&lt;/span&gt;&lt;/code&gt; does not pull in any other dependencies, I’m going to accept it. After cleaning up &lt;code class="docutils literal"&gt;packages.json&lt;/code&gt;, we end up with:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-1"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; npm install
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-2"&gt;&lt;/a&gt;&lt;span class="go"&gt;added 144 packages from 119 contributors and audited 637 packages in 8.127s&lt;/span&gt;
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-3"&gt;&lt;/a&gt;&lt;span class="go"&gt;found 0 vulnerabilities&lt;/span&gt;
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-4"&gt;&lt;/a&gt;&lt;span class="gp"&gt;$&lt;/span&gt; du -hs node_modules
&lt;a name="rest_code_f100f639eea94a398f0b31d0572da6f3-5"&gt;&lt;/a&gt;&lt;span class="go"&gt; 21M    node_modules&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The task at hand was very simple. So was the JS code (Gulp and custom) I had to write to implement it. But underneath, there was a mess of unknown, unaudited code, duplicated libraries, and libraries created effectively to bump people’s npm download stats. There were already incidents, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;left-pad&lt;/span&gt;&lt;/code&gt; (the removal of which broke Babel), or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;event-stream&lt;/span&gt;&lt;/code&gt; (which was taken over and modified to steal cryptocurrencies). The modern web development ecosystem is a huge mess of dependencies and one-line packages. Some of them are necessary due to the lackluster JS standard library — but some are just useless. And some of these micro-packages would be better off as larger libraries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sure, the package count went down from the original 545 to 144. But the original point still stands: too much useless stuff.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS. Five of the packages (in the “large” set) had a &lt;code class="docutils literal"&gt;.DS_Store&lt;/code&gt; file left over. I’m wondering if there are any other files that shouldn’t be shipped with packages, lurking in &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; directories all over the world…&lt;/p&gt;
&lt;p&gt;PPS. I’ve replaced Disqus with Isso, because it had too many advertisements. If you experience any issues with the comment system (after force-refreshing), e-mail me.&lt;/p&gt;
&lt;/div&gt;</description><category>JavaScript</category><category>rant</category><category>web development</category><category>webmastering</category><guid>https://chriswarrick.com/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/</guid><pubDate>Fri, 15 Feb 2019 18:00:00 GMT</pubDate></item></channel></rss>