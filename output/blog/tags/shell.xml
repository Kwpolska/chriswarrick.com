<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Kw’s Blog (shell)</title><link>http://kwpolska.tk</link><description>A blog about everything and nothing.</description><lastBuildDate>Sat, 10 Aug 2013 10:53:08 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Zsh — A Shell For The Power Users.</title><link>http://kwpolska.tk/blog/2011/03/05/zsh-a-shell-for-the-power-users/</link><description>&lt;p&gt;What’s the most important non-kernel piece of software in UNIX-like OSes? The shell. A good shell.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I’m working with UNIX-like OSes a long time. I wasn’t using a shell all the time, but the black window with a monospace font was seen more often on my screen with time. A black window with &lt;cite&gt;bash&lt;/cite&gt; in it. Are you wondering why? They set it as the default shell. And some users might not bother with changing their settings or testing other shells.&lt;/p&gt;
&lt;div class="section" id="user-localhost-zsh"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;user@localhost:~$&lt;/span&gt; zsh&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Are you still using bash? Switch over to zsh and learn why it’s better. Let’s begin with a reason list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-1-intelligent-completion"&gt;
&lt;h2&gt;Reason #1. Intelligent Completion&lt;/h2&gt;
&lt;p&gt;The zsh’s bulit-in completion is the best one ever made. For example, here is how regular bash responds to &lt;tt class="docutils literal"&gt;pacman &lt;span class="pre"&gt;&amp;lt;Tab&amp;gt;&amp;lt;Tab&amp;gt;&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
[kwpolska@kwpolska-lin ~]$ pacman
Display all XXX possibilities? (y or n)
&lt;/pre&gt;
&lt;p&gt;(The &lt;em&gt;possibilities&lt;/em&gt; are all the files and directories in the current working directory.)&lt;/p&gt;
&lt;p&gt;And here’s another bash response, this time with bash-completion:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
[kwpolska@kwpolska-lin ~]$ pacman -
-D          -h          -Q          -R          -S          -U          -V
--database  --help      --query     --remove    --sync      --upgrade   --version
&lt;/pre&gt;
&lt;p&gt;That’s much more helpful, but a new user still wouldn’t know what to do.&lt;/p&gt;
&lt;p&gt;Are you wondering what zsh did after adding a &lt;tt class="docutils literal"&gt;-&lt;/tt&gt; before the first &lt;tt class="docutils literal"&gt;&amp;lt;Tab&amp;gt;&lt;/tt&gt;?&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
[kwpolska@kwpolska-lin ~]$ pacman -Q
-Q  -- Query the package database
-R  -- Remove a package from the system
-S  -- Synchronize packages
-U  -- Upgrade a package
-V  -- Display version and exit
-h  -- Display usage
&lt;/pre&gt;
&lt;p&gt;(If you will press tab once, it will just show the possibilities. If you will press it once again, it will change to -R.)&lt;/p&gt;
&lt;p&gt;Do you want to start the GNOME’s Preferred Applications dialog box &lt;strong&gt;from the shell, without using the Tab key&lt;/strong&gt;? Good luck! The name is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gnome-default-applications-properties&lt;/span&gt;&lt;/tt&gt;. That’s &lt;strong&gt;38&lt;/strong&gt; characters. &lt;strong&gt;THIRTY EIGHT&lt;/strong&gt; characters. If you will make a typo in bash, you’ll see “command not found”, swear a few times and find the typo yourself. With zsh, instead of searching for typo, you can press &lt;tt class="docutils literal"&gt;&amp;lt;Tab&amp;gt;&lt;/tt&gt;. In many cases, you’ll see the proper command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-2-no-cd-required"&gt;
&lt;h2&gt;Reason #2. No &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; required&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;If you will add one line to your zshrc, you’ll be able to skip cd if you want to go to a directory (doesn’t work if there’s something in the &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; with the same name)::&lt;/dt&gt;
&lt;dd&gt;setopt autocd&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-3-bulit-in-commands"&gt;
&lt;h2&gt;Reason #3. Bulit-in commands&lt;/h2&gt;
&lt;p&gt;Do you want to use the basic &lt;tt class="docutils literal"&gt;more&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;less&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;$PAGER&lt;/tt&gt; to read a file? Just say &lt;tt class="docutils literal"&gt;&amp;lt;filename&lt;/tt&gt; and you’re done. Do you need to use FTP? You can use &lt;tt class="docutils literal"&gt;zftp&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-4-bindkeys"&gt;
&lt;h2&gt;Reason #4. &lt;tt class="docutils literal"&gt;bindkeys&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;Wish to use some keys for special text operations? You can use bindkeys. I’m binding these keystrokes:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
bindkey &lt;span class="s2"&gt;"\e[1~"&lt;/span&gt; beginning-of-line       &lt;span class="c"&gt;# Home
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"\e[4~"&lt;/span&gt; end-of-line             &lt;span class="c"&gt;# End
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"\e[5~"&lt;/span&gt; beginning-of-history    &lt;span class="c"&gt;# PageUp
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"\e[6~"&lt;/span&gt; end-of-history          &lt;span class="c"&gt;# PageDown
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"\e[2~"&lt;/span&gt; quoted-insert           &lt;span class="c"&gt;# Ins
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"\e[3~"&lt;/span&gt; delete-char             &lt;span class="c"&gt;# Del
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[OH"&lt;/span&gt;  beginning-of-line       &lt;span class="c"&gt;# Home
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[OF"&lt;/span&gt;  end-of-line             &lt;span class="c"&gt;# End
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[[5~"&lt;/span&gt; beginning-of-history    &lt;span class="c"&gt;# PageUp
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[[6~"&lt;/span&gt; end-of-history          &lt;span class="c"&gt;# PageDown
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[[2~"&lt;/span&gt; quoted-insert           &lt;span class="c"&gt;# Ins
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[[3~"&lt;/span&gt; delete-char             &lt;span class="c"&gt;# Del
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[[1;5D"&lt;/span&gt; backward-word         &lt;span class="c"&gt;# ^Left
&lt;/span&gt;bindkey &lt;span class="s2"&gt;"^[[1;5C"&lt;/span&gt; forward-word          &lt;span class="c"&gt;# ^Right&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-help"&gt;
&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;p&gt;Do you need help? Choose one of the sources.&lt;/p&gt;
&lt;div class="section" id="zsh-freenode"&gt;
&lt;h3&gt;#zsh @ freenode&lt;/h3&gt;
&lt;p&gt;Do you love IRC, like me? Visit #zsh at freenode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zshwiki"&gt;
&lt;h3&gt;ZSHWiki&lt;/h3&gt;
&lt;p&gt;The Z Shell has its very own wiki at &amp;lt;&lt;a class="reference external" href="http://zshwiki.org"&gt;http://zshwiki.org&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mailing-lists"&gt;
&lt;h3&gt;Mailing Lists&lt;/h3&gt;
&lt;p&gt;Subscribe to a mailing list: &amp;lt;&lt;a class="reference external" href="http://zsh.sourceforge.net/Arc/mlist.html"&gt;http://zsh.sourceforge.net/Arc/mlist.html&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="website-web-documentation"&gt;
&lt;h3&gt;Website/Web Documentation&lt;/h3&gt;
&lt;p&gt;You can find some information at &amp;lt;&lt;a class="reference external" href="http://zsh.sourceforge.net/"&gt;http://zsh.sourceforge.net/&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-man-page-aka-because-zsh-contains-many-features-the-zsh-manual-has-been-split-into-a-number-of-sections"&gt;
&lt;h3&gt;The Man Page aka &lt;em&gt;Because zsh contains many features, the zsh manual has been split into a number of sections&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;cite&gt;zsh&lt;/cite&gt; man page just tells you the most important things and informs you about other sections. If you aren’t sure where to search, try &lt;tt class="docutils literal"&gt;man zshall&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
zsh          Zsh overview
zshroadmap   Informal introduction to the manual
zshmisc      Anything not fitting into the other sections
zshexpn      Zsh command and parameter expansion
zshparam     Zsh parameters
zshoptions   Zsh options
zshbuiltins  Zsh built-in functions
zshzle       Zsh command line editing
zshcompwid   Zsh completion widgets
zshcompsys   Zsh completion system
zshcompctl   Zsh completion control
zshmodules   Zsh loadable modules
zshcalsys    Zsh built-in calendar functions
zshtcpsys    Zsh built-in TCP functions
zshzftpsys   Zsh built-in FTP client
zshcontrib   Additional zsh functions and utilities
zshall       Meta-man page containing all of the above
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>linux</category><category>shell</category><category>zsh</category><guid>http://kwpolska.tk/blog/2011/03/05/zsh-a-shell-for-the-power-users/</guid><pubDate>Sat, 05 Mar 2011 00:00:00 GMT</pubDate></item></channel></rss>