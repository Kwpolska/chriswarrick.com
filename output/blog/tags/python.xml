<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about Python)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 21 Apr 2018 07:49:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;div class="contents alert alert-info topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/li&gt;
&lt;li&gt;the program is not in the &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; your process gets&lt;/li&gt;
&lt;li&gt;the hard-coded path is not correct on the end user’s system&lt;/li&gt;
&lt;li&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/li&gt;
&lt;li&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/li&gt;
&lt;li&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id5" id="id1"&gt;[1]&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;tt class="docutils literal"&gt;grep&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;awk&lt;/tt&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;tt class="docutils literal"&gt;os&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;shutil&lt;/tt&gt;. Your language of
choice can also handle things like networking (don’t call &lt;tt class="docutils literal"&gt;curl&lt;/tt&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;tt class="docutils literal"&gt;fork()&lt;/tt&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;tt class="docutils literal"&gt;execve()&lt;/tt&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id6" id="id2"&gt;[2]&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id7" id="id3"&gt;[3]&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id8" id="id4"&gt;[4]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;directly, by calling &lt;tt class="docutils literal"&gt;fork()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;posix_spawn()&lt;/tt&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;through the shell (&lt;tt class="docutils literal"&gt;sh&lt;/tt&gt;), usually by calling &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt;. As Linux’s
manpage for &lt;tt class="docutils literal"&gt;system(3)&lt;/tt&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt; library function uses &lt;tt class="docutils literal"&gt;fork(2)&lt;/tt&gt; to create a child process that executes the shell command specified in command using &lt;tt class="docutils literal"&gt;execl(3)&lt;/tt&gt; as follows:&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_43d95a484b4f4eb18d8b1c7fbbf23cab-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/tt&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bcd85f1706504393890c8fafa953b6f1-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_bcd85f1706504393890c8fafa953b6f1-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_bcd85f1706504393890c8fafa953b6f1-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a name="rest_code_1f9bbe87f13840b195fecc6651d30dc6-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;quotes and escapes&lt;/li&gt;
&lt;li&gt;expanding expressions in braces&lt;/li&gt;
&lt;li&gt;expanding variables&lt;/li&gt;
&lt;li&gt;wildcards (glob, &lt;tt class="docutils literal"&gt;*&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;redirections and pipes (&lt;tt class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;command substitution (backticks or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;running multiple commands on the same line (&lt;tt class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="dl-horizontal docutils"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;Perform fork-exec by yourself, or use &lt;tt class="docutils literal"&gt;posix_spawn()&lt;/tt&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;Use the subprocess module. Always pass &lt;tt class="docutils literal"&gt;shell=False&lt;/tt&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;tt class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/tt&gt; (and not &lt;tt class="docutils literal"&gt;_shell&lt;/tt&gt;), but note it takes &lt;tt class="docutils literal"&gt;*args&lt;/tt&gt; and not a list. Never use &lt;tt class="docutils literal"&gt;os.system&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;os.popen&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;Pass arrays to &lt;tt class="docutils literal"&gt;IO.popen&lt;/tt&gt;. Pass multiple arguments to &lt;tt class="docutils literal"&gt;system()&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/tt&gt;). Never use &lt;tt class="docutils literal"&gt;%x{command}&lt;/tt&gt; or backticks.&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;Pass arrays to &lt;tt class="docutils literal"&gt;Runtime.exec&lt;/tt&gt;. Pass multiple arguments or list to &lt;tt class="docutils literal"&gt;ProcessBuilder&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;All the standard methods go through the shell. Try &lt;tt class="docutils literal"&gt;escapeshellcmd()&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;escapeshellarg()&lt;/tt&gt; — or better, switch to Python. Or anything, really.&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;os/exec&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;os.StartProcess&lt;/tt&gt; are safe.&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;Use &lt;tt class="docutils literal"&gt;child_process.execFile&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;child_process.spawn&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;shell&lt;/tt&gt; set to false.&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;tt class="docutils literal"&gt;fork()&lt;/tt&gt; on Windows. Instead, &lt;tt class="docutils literal"&gt;CreateProcess()&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;ShellExecute()&lt;/tt&gt;, or lower-level &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/tt&gt; functions are used. &lt;tt class="docutils literal"&gt;cmd.exe
/c&lt;/tt&gt; is called in shell calls.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The function that does the real work is &lt;tt class="docutils literal"&gt;execve()&lt;/tt&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;tt class="docutils literal"&gt;execl()&lt;/tt&gt; does the last two.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Quoted from &lt;tt class="docutils literal"&gt;execve(2)&lt;/tt&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;An alternative is &lt;tt class="docutils literal"&gt;posix_spawn()&lt;/tt&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>best practices</category><category>C</category><category>devel</category><category>guide</category><category>Linux</category><category>Python</category><category>security</category><category>subprocess</category><category>Unix</category><guid>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Gynvael’s Mission 11 (en): Python bytecode reverse-engineering</title><link>https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Gynvael Coldwind is a security researcher at Google, who hosts weekly livestreams about security and programming in &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelColdwind/live"&gt;Polish&lt;/a&gt; and &lt;a class="reference external" href="https://gaming.youtube.com/user/GynvaelEN/live"&gt;English&lt;/a&gt;). As part of the streams, he gives out missions — basically, CTF-style reverse engineering tasks. Yesterday’s mission was about Elvish — I mean Paint — I mean Python programming and bytecode.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-1"&gt;&lt;/a&gt;MISSION 011               goo.gl/13Bia9             DIFFICULTY: ██████░░░░ [6╱10]
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-2"&gt;&lt;/a&gt;┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-4"&gt;&lt;/a&gt;Finally some real work!
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-6"&gt;&lt;/a&gt;One of our field agents managed to infiltrate suspects hideout and steal a
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-7"&gt;&lt;/a&gt;pendrive possibly containing important information. However, the pendrive
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-8"&gt;&lt;/a&gt;actually requires one to authenticate themselves before accessing the stored
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-9"&gt;&lt;/a&gt;files.
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-11"&gt;&lt;/a&gt;We gave the pendrive to our laboratory and they managed to dump the firmware. We
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-12"&gt;&lt;/a&gt;looked at the deadlisting they sent and for our best knowledge it's some form of
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-13"&gt;&lt;/a&gt;Elvish. We can't read it.
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-15"&gt;&lt;/a&gt;Here is the firmware: goo.gl/axsAHt
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-17"&gt;&lt;/a&gt;And off you go. Bring us back the password.
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-19"&gt;&lt;/a&gt;Good luck!
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-21"&gt;&lt;/a&gt;---------------------------------------------------------------------------------
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-23"&gt;&lt;/a&gt;If you decode the answer, put it in the comments under this video! If you write
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-24"&gt;&lt;/a&gt;a blogpost / post your solution online, please add a link in the comments too!
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-26"&gt;&lt;/a&gt;P.S. I'll show/explain the solution on the stream in ~two weeks.
&lt;a name="rest_code_889593b4a6364011a554c1e2a52b2a40-27"&gt;&lt;/a&gt;P.S.2. Bonus points for recreating the original high-level code.
&lt;/pre&gt;&lt;p&gt;Here’s the firmware:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-1"&gt;&lt;/a&gt;co_argcount 1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-2"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-3"&gt;&lt;/a&gt;co_flags 67
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-4"&gt;&lt;/a&gt;co_name check_password
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-5"&gt;&lt;/a&gt;co_names ('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-6"&gt;&lt;/a&gt;co_nlocals 4
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-7"&gt;&lt;/a&gt;co_stacksize 6
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-8"&gt;&lt;/a&gt;co_varnames ('s', 'good', 'cs', 'cg')
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-9"&gt;&lt;/a&gt;              0 LOAD_CONST               1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-10"&gt;&lt;/a&gt;              3 LOAD_ATTR                0
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-11"&gt;&lt;/a&gt;              6 LOAD_CONST               2
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-12"&gt;&lt;/a&gt;              9 CALL_FUNCTION            1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-13"&gt;&lt;/a&gt;             12 STORE_FAST               1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-14"&gt;&lt;/a&gt;             15 LOAD_GLOBAL              1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-15"&gt;&lt;/a&gt;             18 LOAD_FAST                0
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-16"&gt;&lt;/a&gt;             21 CALL_FUNCTION            1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-17"&gt;&lt;/a&gt;             24 LOAD_GLOBAL              1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-18"&gt;&lt;/a&gt;             27 LOAD_FAST                1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-19"&gt;&lt;/a&gt;             30 CALL_FUNCTION            1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-20"&gt;&lt;/a&gt;             33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-21"&gt;&lt;/a&gt;             36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-22"&gt;&lt;/a&gt;             39 LOAD_GLOBAL              2
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-23"&gt;&lt;/a&gt;             42 RETURN_VALUE
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-24"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   43 LOAD_GLOBAL              3
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-25"&gt;&lt;/a&gt;             46 BUILD_LIST               0
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-26"&gt;&lt;/a&gt;             49 LOAD_GLOBAL              4
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-27"&gt;&lt;/a&gt;             52 LOAD_FAST                0
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-28"&gt;&lt;/a&gt;             55 LOAD_FAST                1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-29"&gt;&lt;/a&gt;             58 CALL_FUNCTION            2
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-30"&gt;&lt;/a&gt;             61 GET_ITER
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-31"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-32"&gt;&lt;/a&gt;             65 UNPACK_SEQUENCE          2
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-33"&gt;&lt;/a&gt;             68 STORE_FAST               2
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-34"&gt;&lt;/a&gt;             71 STORE_FAST               3
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-35"&gt;&lt;/a&gt;             74 LOAD_GLOBAL              5
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-36"&gt;&lt;/a&gt;             77 LOAD_FAST                2
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-37"&gt;&lt;/a&gt;             80 CALL_FUNCTION            1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-38"&gt;&lt;/a&gt;             83 LOAD_CONST               3
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-39"&gt;&lt;/a&gt;             86 BINARY_SUBTRACT
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-40"&gt;&lt;/a&gt;             87 LOAD_CONST               4
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-41"&gt;&lt;/a&gt;             90 BINARY_AND
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-42"&gt;&lt;/a&gt;             91 LOAD_CONST               5
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-43"&gt;&lt;/a&gt;             94 BINARY_XOR
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-44"&gt;&lt;/a&gt;             95 LOAD_CONST               6
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-45"&gt;&lt;/a&gt;             98 BINARY_XOR
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-46"&gt;&lt;/a&gt;             99 LOAD_GLOBAL              5
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-47"&gt;&lt;/a&gt;            102 LOAD_FAST                3
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-48"&gt;&lt;/a&gt;            105 CALL_FUNCTION            1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-49"&gt;&lt;/a&gt;            108 COMPARE_OP               2 (==)
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-50"&gt;&lt;/a&gt;            111 LIST_APPEND              2
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-51"&gt;&lt;/a&gt;            114 JUMP_ABSOLUTE           62
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-52"&gt;&lt;/a&gt;        &amp;gt;&amp;gt;  117 CALL_FUNCTION            1
&lt;a name="rest_code_999d4adb135c49a3bfea761230bb8e5b-53"&gt;&lt;/a&gt;            120 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;To the uninitiated, this might look like &lt;em&gt;Elvish&lt;/em&gt;. In reality, this is Python bytecode — the instruction set understood by Python’s (CPython 2.7) virtual machine. Python, like many other languages, uses a compiler to translate human-readable source code into something more appropriate for computers. Python code compiles to bytecode, which is then executed by CPython’s virtual machine. CPython bytecode can be ported between different hardware, while machine code cannot. However, machine code can often be faster than languages based on virtual machines and bytecode. (Java and C# work the same way as Python, C compiles directly to machine code)&lt;/p&gt;
&lt;p&gt;This is the internal representation of a Python function. The first few lines are the member variables of the &lt;tt class="docutils literal"&gt;f.__code__&lt;/tt&gt; object of our function. We know that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it takes 1 argument&lt;/li&gt;
&lt;li&gt;it has 7 constants: None, a long string of hex digits, the string &lt;tt class="docutils literal"&gt;'hex'&lt;/tt&gt;, and numbers: 89, 255, 115, 50.&lt;/li&gt;
&lt;li&gt;its &lt;a class="reference external" href="https://docs.python.org/2.7/library/inspect.html#code-objects-bit-flags"&gt;flags&lt;/a&gt; are set to 67 (CO_NOFREE, CO_NEWLOCALS, CO_OPTIMIZED). This is the “standard” value that most uncomplicated functions take.&lt;/li&gt;
&lt;li&gt;its name is &lt;tt class="docutils literal"&gt;check_password&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;it uses the following globals or attribute names: &lt;tt class="docutils literal"&gt;decode&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;len&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;all&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;it has 4 local variables&lt;/li&gt;
&lt;li&gt;it uses a stack of size 6&lt;/li&gt;
&lt;li&gt;its variables are named &lt;tt class="docutils literal"&gt;s&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;good&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cs&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cg&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two ways to solve this task: you can re-assemble the &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; output with the help of the &lt;tt class="docutils literal"&gt;opcode&lt;/tt&gt; module, or try to re-create the function by hand, using the bytecode. I chose the latter method.&lt;/p&gt;
&lt;div class="section" id="reverse-engineering-python-bytecode-re-creating-the-function-by-hand"&gt;
&lt;h2&gt;Reverse-engineering Python bytecode: re-creating the function by hand&lt;/h2&gt;
&lt;p&gt;I started by recreating the original firmware file. I created an empty function and wrote some code to print out &lt;tt class="docutils literal"&gt;__code__&lt;/tt&gt; contents and &lt;tt class="docutils literal"&gt;dis.dis&lt;/tt&gt; output. I also added color-coding to help me read it:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Write code here&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Reverse engineering the code&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;cnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'co_argcount'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_consts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_flags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_names'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_nlocals'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_stacksize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'co_varnames'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-11"&gt;&lt;/a&gt;&lt;span class="n"&gt;cvalues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'check_password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'decode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'len'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'False'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'all'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ord'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'good'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cg'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-13"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cnames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cvalues&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__code__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-15"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ov&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;32m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[1;31m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-19"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-24"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s1"&gt;[0m'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-25"&gt;&lt;/a&gt;    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_0205dae15f02403c9172a3a1c345494d-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we run this solver, we get the following output (text in brackets added by me):&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-1"&gt;&lt;/a&gt;co_argcount 1            [OK]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-2"&gt;&lt;/a&gt;co_consts (None,)        [1/7 match]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-3"&gt;&lt;/a&gt;co_flags 67              [OK]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-4"&gt;&lt;/a&gt;co_name check_password   [OK]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-5"&gt;&lt;/a&gt;co_names ()              [0/6 match]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-6"&gt;&lt;/a&gt;co_nlocals 1             [should be 4]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-7"&gt;&lt;/a&gt;co_stacksize 1           [should be 6]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-8"&gt;&lt;/a&gt;co_varnames ('s',)       [1/4 match]
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-9"&gt;&lt;/a&gt;  7           0 LOAD_CONST               0 (None)
&lt;a name="rest_code_4e7de36c04d34c3aa5e2d9983486974d-10"&gt;&lt;/a&gt;              3 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;We can see (with the help of colors, not reproduced here), that we’ve got &lt;tt class="docutils literal"&gt;co_argcount&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;co_flags&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;co_name&lt;/tt&gt; correctly. We also have one constant (&lt;tt class="docutils literal"&gt;None&lt;/tt&gt;, in every function) and one variable name (&lt;tt class="docutils literal"&gt;s&lt;/tt&gt;, the argument name). We can also see &lt;tt class="docutils literal"&gt;dis.dis()&lt;/tt&gt; output. While it looks similar to the assignment, there are a few noticeable differences: there is no &lt;tt class="docutils literal"&gt;7&lt;/tt&gt; (line number) at the start, and &lt;tt class="docutils literal"&gt;LOAD_CONST&lt;/tt&gt; instructions in the original code did not have anything in parentheses (only comparisions and loops did).  This makes reading bytecode harder, but still possible. (I originally thought about using &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; for help, but it’s not hard to do it by hand. I did use &lt;tt class="docutils literal"&gt;diff&lt;/tt&gt; for the final checking after a manual “conversion”)&lt;/p&gt;
&lt;p&gt;Let’s stop to look at the constants and names for a second. The long string is followed by &lt;tt class="docutils literal"&gt;hex&lt;/tt&gt;, and one of the constants is &lt;tt class="docutils literal"&gt;decode&lt;/tt&gt;. This means that we need to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;str.decode('hex')&lt;/span&gt;&lt;/tt&gt; to create a (byte)string of some information. Puzzle answers tend to be human-readable, and this string isn’t — so we need to do some more work.&lt;/p&gt;
&lt;p&gt;So, let’s try reproducing the start of the original mission code using what we’ve just discussed. Python’s VM is based on a stack. In the bytecode above, you can see that instructions take 0 or 1 arguments. Some of them put things on the stack, others do actions and remove them. Most instruction names are self-explanatory, but the full list can be found in the &lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dis module documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instructions like &lt;tt class="docutils literal"&gt;LOAD&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;STORE&lt;/tt&gt; refer to indices in the constants/names/varnames tuples. To make it easier, here’s a “table” of them:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-1"&gt;&lt;/a&gt;constants
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-2"&gt;&lt;/a&gt; 0     1                                                       2      3   4    5    6
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-3"&gt;&lt;/a&gt;(None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', 89, 255, 115, 50)
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-5"&gt;&lt;/a&gt;names (globals, attributes)
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-6"&gt;&lt;/a&gt; 0         1      2        3      4      5
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-7"&gt;&lt;/a&gt;('decode', 'len', 'False', 'all', 'zip', 'ord')
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-9"&gt;&lt;/a&gt;varnames (locals, _fast)
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-10"&gt;&lt;/a&gt; 0    1       2     3
&lt;a name="rest_code_53823f18fde240b09ac801dfa28e2212-11"&gt;&lt;/a&gt;('s', 'good', 'cs', 'cg')
&lt;/pre&gt;&lt;p&gt;In order to improve readability, I will use “new” &lt;tt class="docutils literal"&gt;dis&lt;/tt&gt; output with names in parentheses below:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_f64109b8fe9f43d083b7f40426078b01-1"&gt;&lt;/a&gt; 0 LOAD_CONST               1 ('4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89')
&lt;a name="rest_code_f64109b8fe9f43d083b7f40426078b01-2"&gt;&lt;/a&gt; 3 LOAD_ATTR                0 (decode)
&lt;a name="rest_code_f64109b8fe9f43d083b7f40426078b01-3"&gt;&lt;/a&gt; 6 LOAD_CONST               2 ('hex')
&lt;a name="rest_code_f64109b8fe9f43d083b7f40426078b01-4"&gt;&lt;/a&gt; 9 CALL_FUNCTION            1 # function takes 1 argument from stack
&lt;a name="rest_code_f64109b8fe9f43d083b7f40426078b01-5"&gt;&lt;/a&gt;12 STORE_FAST               1 (good)
&lt;/pre&gt;&lt;p&gt;As I guessed before, the first line of our function is as follows:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c3d0bacd57ce442a86442b2d15570337-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_c3d0bacd57ce442a86442b2d15570337-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If we run the solver again, we’ll see that the first 12 bytes of our bytecode match the mission text. We can also see that &lt;tt class="docutils literal"&gt;varnames&lt;/tt&gt; is filled in half, we’ve added two constants, and one name.  The next few lines are as follows:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-1"&gt;&lt;/a&gt;15 LOAD_GLOBAL              1
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-2"&gt;&lt;/a&gt;18 LOAD_FAST                0
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-3"&gt;&lt;/a&gt;21 CALL_FUNCTION            1
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-4"&gt;&lt;/a&gt;24 LOAD_GLOBAL              1
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-5"&gt;&lt;/a&gt;27 LOAD_FAST                1
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-6"&gt;&lt;/a&gt;30 CALL_FUNCTION            1
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-7"&gt;&lt;/a&gt;33 COMPARE_OP               3 (!=)
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-8"&gt;&lt;/a&gt;36 POP_JUMP_IF_FALSE       43
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-9"&gt;&lt;/a&gt;39 LOAD_GLOBAL              2
&lt;a name="rest_code_38d5757167f949d385cf2fc25f3e73b5-10"&gt;&lt;/a&gt;42 RETURN_VALUE
&lt;/pre&gt;&lt;p&gt;We can see that we’re putting a global object on stack and calling it with one argument. In both cases, the global has the index 1, that’s &lt;tt class="docutils literal"&gt;len&lt;/tt&gt;. The two arguments are &lt;tt class="docutils literal"&gt;s&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;good&lt;/tt&gt;. We put both lengths on stack, then compare them. If the comparison fails (they’re equal), we jump to the instruction starting at byte 43, otherwise we continue execution to load the second global (False) and return it.  This wall of text translates to the following simple code:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_a8d1d78ff9634b1194cae584245dd11a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_a8d1d78ff9634b1194cae584245dd11a-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a8d1d78ff9634b1194cae584245dd11a-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;a name="rest_code_a8d1d78ff9634b1194cae584245dd11a-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;         &lt;span class="c1"&gt;# new&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s take another look at our names. We can see we’re missing &lt;tt class="docutils literal"&gt;all&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;. You can already see a common pattern here: we will iterate over both strings at once (using &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;), do some math based on the character’s codes (&lt;tt class="docutils literal"&gt;ord&lt;/tt&gt;), and then check if &lt;tt class="docutils literal"&gt;all&lt;/tt&gt; results (of a comparison, usually) are truthy.&lt;/p&gt;
&lt;p&gt;Here’s the bytecode with value annotations and comments, which explain what happens where:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-1"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   43 LOAD_GLOBAL              3 (all)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-2"&gt;&lt;/a&gt;     46 BUILD_LIST               0
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-3"&gt;&lt;/a&gt;     49 LOAD_GLOBAL              4 (zip)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-4"&gt;&lt;/a&gt;     52 LOAD_FAST                0 (s)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-5"&gt;&lt;/a&gt;     55 LOAD_FAST                1 (good)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-6"&gt;&lt;/a&gt;     58 CALL_FUNCTION            2           # zip(s, good)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-7"&gt;&lt;/a&gt;     61 GET_ITER                             # Start iterating: iter()
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-8"&gt;&lt;/a&gt;&amp;gt;&amp;gt;   62 FOR_ITER                52 (to 117)  # for loop iteration start (if iterator exhausted, jump +52 bytes to position 117)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-9"&gt;&lt;/a&gt;     65 UNPACK_SEQUENCE          2           # unpack a sequence (a, b = sequence)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-10"&gt;&lt;/a&gt;     68 STORE_FAST               2 (cs)      # cs = item from s
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-11"&gt;&lt;/a&gt;     71 STORE_FAST               3 (cg)      # cg = item from good
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-12"&gt;&lt;/a&gt;     74 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-13"&gt;&lt;/a&gt;     77 LOAD_FAST                2 (cs)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-14"&gt;&lt;/a&gt;     80 CALL_FUNCTION            1           # put ord(cs) on stack
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-15"&gt;&lt;/a&gt;     83 LOAD_CONST               3 (89)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-16"&gt;&lt;/a&gt;     86 BINARY_SUBTRACT                      # - 89   [subtract 89 from topmost value]
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-17"&gt;&lt;/a&gt;     87 LOAD_CONST               4 (255)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-18"&gt;&lt;/a&gt;     90 BINARY_AND                           # &amp;amp; 255  [bitwise AND with topmost value]
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-19"&gt;&lt;/a&gt;     91 LOAD_CONST               5 (115)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-20"&gt;&lt;/a&gt;     94 BINARY_XOR                           # ^ 115  [bitwise XOR with topmost value]
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-21"&gt;&lt;/a&gt;     95 LOAD_CONST               6 (50)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-22"&gt;&lt;/a&gt;     98 BINARY_XOR                           # ^ 50   [bitwise XOR with topmost value]
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-23"&gt;&lt;/a&gt;     99 LOAD_GLOBAL              5 (ord)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-24"&gt;&lt;/a&gt;    102 LOAD_FAST                3 (cg)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-25"&gt;&lt;/a&gt;    105 CALL_FUNCTION            1           # put ord(cs) on stack
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-26"&gt;&lt;/a&gt;    108 COMPARE_OP               2 (==)      # compare the two values on stack
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-27"&gt;&lt;/a&gt;    111 LIST_APPEND              2           # append topmost value to the list in topmost-1; pop topmost (append to list created in comprehension)
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-28"&gt;&lt;/a&gt;    114 JUMP_ABSOLUTE           62           # jump back to start of loop
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-29"&gt;&lt;/a&gt;&amp;gt;&amp;gt;  117 CALL_FUNCTION            1           # after loop: call all([list comprehension result])
&lt;a name="rest_code_73df1afa82f648daaf498485e832a184-30"&gt;&lt;/a&gt;    120 RETURN_VALUE                         # return value returned by all()
&lt;/pre&gt;&lt;p&gt;We can now write the full answer.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_969932367507483ba9784e54883c8081-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_969932367507483ba9784e54883c8081-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_969932367507483ba9784e54883c8081-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_969932367507483ba9784e54883c8081-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_969932367507483ba9784e54883c8081-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_969932367507483ba9784e54883c8081-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;In the end, our &lt;tt class="docutils literal"&gt;dis.dis()&lt;/tt&gt; output matches the mission text (except the removed values, but their IDs do match), our &lt;tt class="docutils literal"&gt;co_*&lt;/tt&gt; variables are all green, and we can get to work on solving the puzzle itself!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; this task uses a list comprehension. You might want to optimize it, remove the brackets, and end up with a generator expression. This would make the task harder, since would require working with the internal generator code object as well:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_353ce9548c79417f892da31f8054dc8f-1"&gt;&lt;/a&gt;co_consts (None, '4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89', 'hex', &amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;a name="rest_code_353ce9548c79417f892da31f8054dc8f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_353ce9548c79417f892da31f8054dc8f-3"&gt;&lt;/a&gt;46 LOAD_CONST               3 (&amp;lt;code object &amp;lt;genexpr&amp;gt; at 0x104a86c30, file "mission11-genexpr.py", line 11&amp;gt;)
&lt;/pre&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;BINARY_*&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ord&lt;/tt&gt; disappeared from the new listing. You can see the &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;modified code&lt;/a&gt; (which differs by two bytes) and &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;solver output&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solving-the-real-puzzle"&gt;
&lt;h2&gt;Solving the real puzzle&lt;/h2&gt;
&lt;p&gt;I solved the extra credit part of the puzzle. The &lt;em&gt;real&lt;/em&gt; aim of the puzzle was to recover the password — the text for which &lt;tt class="docutils literal"&gt;check_password()&lt;/tt&gt; will return True.&lt;/p&gt;
&lt;p&gt;This part is pretty boring. I built a dictionary, where I mapped every byte (0…255) to the result of the calculation done in the &lt;tt class="docutils literal"&gt;check_password()&lt;/tt&gt; function’s loop. Then I used that to recover the original text.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-4"&gt;&lt;/a&gt;    &lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pass_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-11"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ac183ed982564f41acbc95e5dd4fd664-12"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;The password is:&lt;/strong&gt; &lt;tt class="docutils literal"&gt;huh, that actually worked!&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-was-that-paint-thing-about"&gt;
&lt;h2&gt;What was that Paint thing about?&lt;/h2&gt;
&lt;blockquote&gt;Yesterday’s mission was about Elvish — &lt;strong&gt;I mean Paint&lt;/strong&gt; — I mean Python programming.&lt;footer&gt;yours truly in this post’s teaser&lt;/footer&gt;&lt;/blockquote&gt;&lt;p&gt;Most of my readers were probably puzzled by the mention of Paint. Long-time viewers of Gynvael’s streams in Polish remember the Python 101 video he posted on April Fools last year. See &lt;a class="reference external" href="https://www.youtube.com/watch?v=7VJaprmuHcw"&gt;original video&lt;/a&gt;, &lt;a class="reference external" href="http://gynvael.coldwind.pl/?id=599"&gt;explanation&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/gynvael/stream/tree/master/007-python-101"&gt;code&lt;/a&gt; (video and explanation are both Polish; you can get the gist of the video without hearing the audio commentary though.) &lt;strong&gt;Spoilers ahead.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In that prank, Gynvael taught Python basics. The first part concerned itself with writing bytecode by hand. The second part (starts around 12:00) was about drawing custom Python modules. In Paint. Yes, Paint, the simple graphics program included with Microsoft Windows. He drew a custom Python module in Paint, and saved it using the BMP format. It looked like this (zoomed PNG below; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;download gynmod.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/gynmod-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/gynmod-zoom.png"&gt;
&lt;p&gt;How was this done? There are three things that come into play:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python can import modules from a ZIP file (if it’s appended to sys.path). Some tools that produce &lt;tt class="docutils literal"&gt;.exe&lt;/tt&gt; files of Python code use this technique; the old &lt;tt class="docutils literal"&gt;.egg&lt;/tt&gt; file format also used ZIPs this way.&lt;/li&gt;
&lt;li&gt;BMP files have their header at the start of a file.&lt;/li&gt;
&lt;li&gt;ZIP files have their header at the end of a file.&lt;/li&gt;
&lt;li&gt;Thus, one file can be a valid BMP and ZIP at the same time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I took the code of &lt;tt class="docutils literal"&gt;check_password&lt;/tt&gt; and put it in &lt;tt class="docutils literal"&gt;mission11.py&lt;/tt&gt; (which I already cited above). Then I compiled to &lt;tt class="docutils literal"&gt;.pyc&lt;/tt&gt; and created a &lt;tt class="docutils literal"&gt;.zip&lt;/tt&gt; out of it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;listings/gynvaels-mission-11-en/mission11.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3f48555cd18645f69b5043cf97a7355f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3f48555cd18645f69b5043cf97a7355f-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'4e5d4e92865a4e495a86494b5a5d49525261865f5758534d4a89'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hex'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_3f48555cd18645f69b5043cf97a7355f-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_3f48555cd18645f69b5043cf97a7355f-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;a name="rest_code_3f48555cd18645f69b5043cf97a7355f-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f48555cd18645f69b5043cf97a7355f-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;89&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;115&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Since I’m not an expert in any of the formats, I booted my Windows virtual machine and blindly copied the &lt;a class="reference external" href="http://gynvael.coldwind.pl/img/secapr16_3.png"&gt;parameters used by Gynvael&lt;/a&gt; to open the ZIP file (renamed &lt;tt class="docutils literal"&gt;.raw&lt;/tt&gt;) in IrfanView and saved as &lt;tt class="docutils literal"&gt;.bmp&lt;/tt&gt;. I changed the size to 83×2, because my ZIP file was 498 bytes long (3 BPP * 83 px * 2 px = 498 bytes) — by doing that, and through sheer luck with the size, I could avoid adding comments and editing the ZIP archive. I ended up with this (PNG again; &lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;download mission11.bmp&lt;/a&gt;):&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/mission11-zoom.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/mission11-zoom.png"&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;.bmp&lt;/tt&gt; file is runnable! We can use this code:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;listings/gynvaels-mission-11-en/ziprunner.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_15ac78235e614c8b96234ff1ed910a63-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python2&lt;/span&gt;
&lt;a name="rest_code_15ac78235e614c8b96234ff1ed910a63-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_15ac78235e614c8b96234ff1ed910a63-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_15ac78235e614c8b96234ff1ed910a63-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mission11.bmp"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_15ac78235e614c8b96234ff1ed910a63-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_15ac78235e614c8b96234ff1ed910a63-6"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mission11&lt;/span&gt;
&lt;a name="rest_code_15ac78235e614c8b96234ff1ed910a63-7"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;"Result:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mission11&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'huh, that actually worked!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And we get this:&lt;/p&gt;
&lt;img alt="/images/gynvaels-mission-11-en/running-bmp.png" class="align-center" src="https://chriswarrick.com/images/gynvaels-mission-11-en/running-bmp.png"&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-solver.py.html"&gt;mission11-solver.py (full solver code)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.py.html"&gt;mission11-genexpr.py&lt;/a&gt;, &lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11-genexpr.txt.html"&gt;mission11-genexpr.txt&lt;/a&gt; (used for side note regarding generator expressions vs. list comprehensions)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/mission11.py.html"&gt;mission11.py code, used in BMP file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/gynvaels-mission-11-en/ziprunner.py.html"&gt;ziprunner.py, file that runs the BMP/ZIP module&lt;/a&gt; (adapted from Gynvael’s)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/gynmod.bmp"&gt;gynmod.bmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chriswarrick.com/pub/gynvaels-mission-11-en/mission11.bmp"&gt;mission11.bmp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/2/library/dis.html#python-bytecode-instructions"&gt;dis module documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for the mission (and BMP idea), Gynvael!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>BMP</category><category>Gynvael Coldwind</category><category>hacking</category><category>Paint</category><category>Python</category><category>reverse engineering</category><category>writeup</category><guid>https://chriswarrick.com/blog/2017/08/03/gynvaels-mission-11-en-python-bytecode-reverse-engineering/</guid><pubDate>Thu, 03 Aug 2017 10:45:40 GMT</pubDate></item><item><title>Setting up a Python development environment</title><link>https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Setting up Python is usually simple, but there are some places where newcomers
(and experienced users) need to be careful. What versions are there? What’s the
difference between Python, CPython, Anaconda, PyPy? Those and many other
questions may stump new developers, or people wanting to use Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Note: this guide is opinionated.&lt;/p&gt;
&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#glossary-and-questions" id="id2"&gt;Glossary and questions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#python-versions-2-vs-3" id="id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-run-multiple-pythons-on-the-same-machine" id="id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#implementations" id="id5"&gt;Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#distributions" id="id6"&gt;Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#can-i-make-exe-files-from-python-programs" id="id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#where-to-learn-python-where-to-get-help" id="id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installing-python" id="id9"&gt;Installing Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#windows" id="id10"&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#macos" id="id11"&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#linux-and-other-unix-like-oses" id="id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installing-packages" id="id13"&gt;Installing packages&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#user-installs" id="id14"&gt;User installs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#virtual-environments" id="id15"&gt;Virtual environments&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#tools-and-management" id="id16"&gt;Tools and management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#installation-and-usage" id="id17"&gt;Installation and usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#upgrading-and-moving" id="id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#packages-with-c-extensions-binary" id="id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#other-stuff" id="id20"&gt;Other stuff&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#editors-and-ides" id="id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#update-history" id="id22"&gt;Update history&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="glossary-and-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id2"&gt;Glossary and questions&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="python-versions-2-vs-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id3"&gt;Python versions: 2 vs 3&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Python community has undergone sort of a &lt;em&gt;schism&lt;/em&gt; in recent years. Python
3, released in 2008, broke backwards compatibility: deprecated some bad
constructs and libraries (eg. &lt;tt class="docutils literal"&gt;raw_input()&lt;/tt&gt; became &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; and the
original Python 2 function that ran code input by users is gone; &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt;
became a function; many things that returned lists now are iterators — &lt;tt class="docutils literal"&gt;zip&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;range&lt;/tt&gt;), and completely remodelled strings (which are now Unicode by
default, and the interpreter behavior is stricter when the wrong type is used)&lt;/p&gt;
&lt;p&gt;For new code, you should use Python 3. &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Most popular packages support Python 3&lt;/a&gt;, and many of them support both Pythons at
the same time. The early bugs were ironed out in the first few point releases,
some features that made porting easier were added (back).&lt;/p&gt;
&lt;p&gt;But what if you end up needing Python 2 later? No problem: you can learn the
differences in a short time, and with the help of a few libraries (eg. &lt;tt class="docutils literal"&gt;six&lt;/tt&gt;)
you can easily write code that is compatible with Python 2 and 3 at the same
time, using the same codebase (most libraries out there do that).&lt;/p&gt;
&lt;p&gt;Python 2 will go EOL and lose official support and updates in 2020.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/Python2orPython3"&gt;Python 2 or Python 3 on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-run-multiple-pythons-on-the-same-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id4"&gt;Can I run multiple Pythons on the same machine?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes. Note that multiple Python interpreters are completely separate: they have
their own pip and packages, and you can’t run Python 2 code in a Python 3
interpreter. You need to specify which interpreter to use when installing
packages and running some scripts (eg. &lt;tt class="docutils literal"&gt;pip2&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;python3 &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;It’s best to limit yourself to the latest Python 2 and 3 versions. Python is
backwards-compatible within the major release, so Python 2.7 runs code
written with older 2.x versions in mind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id5"&gt;Implementations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A programming language is an abstract construct. To run code written in that
language, an interpreter or compiler needs to be written. In Python’s case,
there’s a plethora of implementations. Some of them are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;CPython&lt;/strong&gt; is the reference implementation. This is the implementation
distributed on &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt; and as part of many operating systems.
Most Python features are first implemented in CPython, and then they are
ported to other implementations.  If you don’t know what to choose, use
CPython.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyPy&lt;/strong&gt; is a fast implementation, written in a subset of Python. It’s compatible with
Python 2.7 and 3.5 (beta support). It can run all pure Python code, and many
extension libraries that use CFFI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IronPython&lt;/strong&gt; is a .NET CLR implementation. It can integrate with .NET code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jython&lt;/strong&gt; is a Java JVM implementation. It can integrate with Java code, as
well as other JVM languages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonImplementations"&gt;Python Implementations on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="distributions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id6"&gt;Distributions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are also Python (CPython) distributions. They ship the CPython
interpreter and add some extra packages/features.  They are maintained by other
communities or corporate entities.&lt;/p&gt;
&lt;p&gt;The most popular third-party distribution is &lt;a class="reference external" href="https://www.continuum.io/downloads"&gt;Anaconda&lt;/a&gt; from Continuum Analytics. It’s popular
for data scientists, and includes over 100 packages, with extra pre-built
binaries available from the &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; package manager.&lt;/p&gt;
&lt;p&gt;I personally recommend to avoid Anaconda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Most packages have binary wheels for Windows, macOS and Linux (yes, Linux!)
making the installation as simple as &lt;tt class="docutils literal"&gt;pip install numpy&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You waste disk space for packages Anaconda installs that you won’t ever need.&lt;/li&gt;
&lt;li&gt;It’s provided by some random for-profit company.&lt;/li&gt;
&lt;li&gt;I’ve seen bugs that were not reproducible outside of Anaconda.&lt;/li&gt;
&lt;li&gt;You can still do data science using the official distribution. There’s
nothing special about Anaconda.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="https://wiki.python.org/moin/PythonDistributions"&gt;Python distributions on Python Wiki&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-make-exe-files-from-python-programs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id7"&gt;Can I make .exe files from Python programs?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, you can. There are tools for this — &lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is the best one. Note that you usually need to
run it on the destination operating system. And remember that “compiling” to
exe files like that &lt;strong&gt;is not&lt;/strong&gt; a security measure — your source code is still
easily recoverable. (It’s not a security measure in other languages either,
even if getting source code back might be more expensive/tricky in those.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-learn-python-where-to-get-help"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id8"&gt;Where to learn Python? Where to get help?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The choice of learning material is important. If you get a bad book, it might
discourage you from learning (because it’s boring), or may teach you
bad/outdated practices.&lt;/p&gt;
&lt;p&gt;If you can already program in another language, I recommend the &lt;a class="reference external" href="https://docs.python.org/3/tutorial/"&gt;official
Python tutorial&lt;/a&gt;. For newcomers to
programming, I recommend &lt;a class="reference external" href="http://greenteapress.com/wp/think-python-2e/"&gt;Think Python&lt;/a&gt; or &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff
with Python&lt;/a&gt;.  They teach Python 3, and
(mostly) best practices.&lt;/p&gt;
&lt;p&gt;If you need help, try &lt;tt class="docutils literal"&gt;#python&lt;/tt&gt; on freenode IRC, the &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/tutor"&gt;Tutor&lt;/a&gt; or &lt;a class="reference external" href="https://mail.python.org/mailman/listinfo/python-list"&gt;Python-list&lt;/a&gt; mailing lists, or a bunch of other communities. (I’m a regular on &lt;tt class="docutils literal"&gt;#python&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-python"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id9"&gt;Installing Python&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This guide will focus on installing CPython 2.7 and 3.x (latest), using the standard
distribution. This choice is satisfactory for most people. Third-party
distributions, while handy in some cases, are not needed for most. (See
&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#distributions"&gt;Distributions&lt;/a&gt; for arguments)&lt;/p&gt;
&lt;p&gt;Throughout this guide, I’ll refer to the Python interpreter executable as
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt;. The exact name depends on your system and desired version. On most
OSes, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is Python 2 and &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; is 3; &lt;tt class="docutils literal"&gt;python2&lt;/tt&gt; should also
exist.  On Arch Linux, &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is Python 3. On Windows, use the &lt;tt class="docutils literal"&gt;py&lt;/tt&gt;
launcher.&lt;/p&gt;
&lt;div class="section" id="windows"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id10"&gt;Windows&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Download the installer(s): &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Those installers come with &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, and modern Python 3.x versions come with
the &lt;tt class="docutils literal"&gt;py&lt;/tt&gt; launcher.  You can use that launcher to pick a specific Python
version, eg.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-3&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &amp;lt;package&amp;gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-2&lt;/span&gt; somefile.py&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-2.7&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py&lt;/tt&gt; (default system version)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s recommended for most use, and mandatory for upgrading pip.&lt;/p&gt;
&lt;p&gt;The 32-bit versions are more versatile. Most packages support both (the only
exception I’m aware of is Tensorflow, which only allows 64-bit Python 3.5 as of
now).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="macos"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id11"&gt;macOS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS ships with Python 2.7.10 (as of macOS Sierra). It’s not the latest
version; it’s good enough for most people, but I still recommend installing
your own (the system Python doesn’t include &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, for example). You can
install the latest 2.7 version, as well as Python 3, using a package manager. I
recommend Homebrew — it’s the most popular solution, and lets you install many
other packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT&lt;/strong&gt; use the python.org installers: they do not have uninstallers, so you
will have outdated versions lying around after some time. There is no
auto-update as well.  &lt;strong&gt;DO NOT&lt;/strong&gt; attempt to remove the system-installed Python,
this will only damage your system and you’ll need to reinstall.&lt;/p&gt;
&lt;p&gt;If you already have a package manager installed (MacPorts, Fink), don’t install
a new one and just use the existing one.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;brew install python python3&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;You should now have &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To update Homebrew and Python, run &lt;tt class="docutils literal"&gt;brew update&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-and-other-unix-like-oses"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id12"&gt;Linux (and other Unix-like OSes)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On Linux, there usually are good enough packages in your OS repositories. You
should be able to install the appropriate package for Python (2 and/or 3).
Most (if not all) distributions require Python — &lt;strong&gt;do not&lt;/strong&gt; remove the
pre-installed packages, and be careful not to overwrite them with something
newer.&lt;/p&gt;
&lt;p&gt;If the version that ships with your distribution is too old, there are some
options. There might be some repositories with better versions, eg. the
&lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/ubuntu/deadsnakes"&gt;deadsnakes PPA&lt;/a&gt;
for Ubuntu. Then there’s the other option of compiling Python manually. The
instructions depend on your exact requirements, but here’s a summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Download the &lt;a class="reference external" href="https://www.python.org/downloads/source/"&gt;source distribution from Python.org&lt;/a&gt; and unpack it. Go into the unpacked source directory.&lt;/li&gt;
&lt;li&gt;Ensure you’ve got a functional C compiler and Python’s dependencies. You can
usually use your system’s package manager to install the build dependencies
of your system Python. Some dependencies are optional (eg. &lt;tt class="docutils literal"&gt;sqlite3&lt;/tt&gt;
requires SQLite headers).&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=/opt/python3.6&lt;/span&gt;&lt;/tt&gt; and then &lt;tt class="docutils literal"&gt;make&lt;/tt&gt;. (You may add other options to both. It will
take a while.)&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;make altinstall&lt;/tt&gt; as root. Avoid &lt;tt class="docutils literal"&gt;make install&lt;/tt&gt;, as it can override
&lt;tt class="docutils literal"&gt;python&lt;/tt&gt; executables.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, you can try &lt;tt class="docutils literal"&gt;pyenv&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;pythonz&lt;/tt&gt; — tools that can be used to install and manage different Python versions. Remember: compiling Python should be considered a &lt;strong&gt;last resort&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id13"&gt;Installing packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To install third-party packages, you should use pip, the Python package
manager. If you’re using Windows or macOS (from Homebrew), pip is included with
your copy of Python.  If you’re on Linux and installed Python from a system
repository, install the correct system package (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-pip&lt;/span&gt;&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/tt&gt;). If you compiled your own Python, pip is also included.&lt;/p&gt;
&lt;p&gt;To run pip, use &lt;tt class="docutils literal"&gt;py &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt; (Windows), &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/tt&gt; (other platforms),
or the short &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;pip3&lt;/tt&gt; commands.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NEVER use sudo pip.&lt;/strong&gt; This can cause numerous problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conflicts between packages installed by pip and your system package
manager&lt;/li&gt;
&lt;li&gt;pip modifying system packages, leading to issues when updating them, or
breaking dependencies&lt;/li&gt;
&lt;li&gt;no isolation between package versions, which is sometimes needed to satisfy
dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that a package install is specific to the Python interpreter used to run
&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;. Packages installed to a virtualenv are separate from system packages;
packages installed for “global” Python 2.7 are separate from 3.6 packages.
Virtual environments generally don’t use the system packages, unless
specifically enabled during creation.&lt;/p&gt;
&lt;p&gt;Some distros have popular packages in their repositories. Sometimes they’re
good; in other cases they’re terribly outdated or they lack important
components, making package managers angry and sick of supporting a 2-year-old
version. (Especially since most bugs are closed with “we’ve fixed that long
ago”)&lt;/p&gt;
&lt;div class="section" id="user-installs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id14"&gt;User installs&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At a small scale, you can install packages with pip for a single user.  Use
&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; PACKAGE&lt;/tt&gt; to do this. If your package installs &lt;a class="reference external" href="https://chriswarrick.com/blog/2014/09/15/python-apps-the-right-way-entry_points-and-scripts/"&gt;scripts&lt;/a&gt;,
they will be installed to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/tt&gt; on Linux, and
&lt;tt class="docutils literal"&gt;~/Library/Python/X.Y/bin&lt;/tt&gt; on macOS (X.Y is Python version), or you can use
&lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt;&lt;/tt&gt; if the package supports it.&lt;/p&gt;
&lt;p&gt;For most people and projects, virtual environments are better. There are,
however, use cases for putting some packages user-wide — if you don’t work on
projects, but instead are doing one-off research projects, those are better
suited by user-wide installs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id15"&gt;Virtual environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Virtual environments are the best way to install and manage Python packages.
Advantages include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Isolation of projects and their requirements: if one app/package requires
library version X, but another requires version Y, they can live in separate
virtual environments&lt;/li&gt;
&lt;li&gt;Independent from system-wide packages&lt;/li&gt;
&lt;li&gt;Lightweight (an empty virtualenv is about 10 MB)&lt;/li&gt;
&lt;li&gt;Simple to re-create in any place (&lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt; → &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tools-and-management"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id16"&gt;Tools and management&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are two tools to facilitate creation of virtual environments: the older
&lt;a class="reference external" href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; project, and the newer
&lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module. The &lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; module is shipped with Python 3.x; some
distributions may put it in a separate package or remove it altogether. I
recommend using &lt;strong&gt;virtualenv&lt;/strong&gt; — it’s compatible with more Python versions
(it’s better to use the same tool for both Pythons) and cannot be broken by
incompetent OS package maintainers (&lt;tt class="docutils literal"&gt;venv&lt;/tt&gt; fails on Debian due to no
&lt;tt class="docutils literal"&gt;ensurepip&lt;/tt&gt;; there is a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/tt&gt; package that fixes it but that’s
hard to discover)&lt;/p&gt;
&lt;p&gt;There are multiple schools of thought regarding virtualenv placement and
content. Myself, I use &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;virtualenvwrapper&lt;/a&gt; to manage virtualenvs
and put them in &lt;tt class="docutils literal"&gt;~/virtualenvs&lt;/tt&gt;. Other people put virtualenvs inside their
git repositories (but they &lt;em&gt;must&lt;/em&gt; be in &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt;) Virtualenvs should only contain packages
installed with &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; so they can be recreated quickly.&lt;/p&gt;
&lt;p&gt;I also use the &lt;tt class="docutils literal"&gt;virtualenvwrapper&lt;/tt&gt; plugin for Oh My Zsh, which also
activates virtualenvs with the same name as a git repo, or the environment
named by a &lt;tt class="docutils literal"&gt;.venv&lt;/tt&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-and-usage"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id17"&gt;Installation and usage&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To install virtualenv user-wide, use &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/tt&gt;. You can
then use it with &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; virtualenv DIRECTORY&lt;/tt&gt;. You may pass extra
options, eg. interpreter to use (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt; python3&lt;/tt&gt;). Sometimes you need to install
virtualenv for every Python version; usually, one copy is enough.&lt;/p&gt;
&lt;p&gt;How to use them? This is a subject of heated debate in the Python community.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some people believe that activating (&lt;tt class="docutils literal"&gt;source bin/activate&lt;/tt&gt; on *nix;
&lt;tt class="docutils literal"&gt;Scripts\activate&lt;/tt&gt; on Windows) is the right thing to do and simplifies work.&lt;/li&gt;
&lt;li&gt;Others think that you should use &lt;tt class="docutils literal"&gt;bin/python&lt;/tt&gt; (or other scripts in that
directory) directly, as activation only changes &lt;tt class="docutils literal"&gt;$PATH&lt;/tt&gt; and some helper
variables — those variables are not mandatory for operation, running
the correct &lt;tt class="docutils literal"&gt;python&lt;/tt&gt; is.&lt;/li&gt;
&lt;li&gt;Others still think &lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;virtualenvs should be used in subshells&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my opinion, if activating virtualenvs works in your environment, you should
do it — it’s the most convenient option. There are, however, cases when
activation fails, or is otherwise impossible — calling &lt;tt class="docutils literal"&gt;bin/python&lt;/tt&gt; directly
is your best bet in that case. If you are working inside shell scripts, do not
activate virtualenvs.  I’m not a fan of the subshell option, because it
complicates stuff if you work on multiple projects, and requires tracking usage
manually.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrading-and-moving"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id18"&gt;Upgrading and moving&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Upgrading the system Python may make your virtualenvs unusable.
For patch version upgrades, you can just update symlinks (see &lt;a class="reference external" href="https://github.com/Kwpolska/scripts/blob/master/fix-venvs.sh"&gt;fix-venvs.sh&lt;/a&gt;).
However, if the minor version changes, it’s best to re-create the virtualenv
(you need to create &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; ahead of time).&lt;/p&gt;
&lt;p&gt;You cannot move a virtualenv between directories/machines or rename
virtualenvs. You need to use &lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt;, create a new
virtualenv, and run &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/tt&gt; (you can then delete
the old environment with a simple &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt;&lt;/tt&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="packages-with-c-extensions-binary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id19"&gt;Packages with C extensions (binary)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The situation improved drastically in the past year or so. Nowadays, almost
all packages have a pre-compiled package available in PyPI. Those packages work
for Windows, macOS, and Linux. There are packages for some of the most
common &lt;em&gt;offenders&lt;/em&gt;, including Pillow, lxml, PyQt5, numpy… However, there might
still be packages without wheels on PyPI.&lt;/p&gt;
&lt;p&gt;If there is no wheel for a package and you are on Windows, check out &lt;a class="reference external" href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph
Gohlke’s unofficial binaries&lt;/a&gt;.
If you can’t find any wheels online, you would have to resort to compiling it
manually — this requires installing Visual Studio (Visual C++) in a version
that matches your Python, and it’s kind of a pain to do.&lt;/p&gt;
&lt;p&gt;If you are not on Windows, you must install a C compiler and toolchain.
If you get a warning about missing &lt;tt class="docutils literal"&gt;Python.h&lt;/tt&gt;, install the appropriate development
package — for example, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-dev&lt;/span&gt;&lt;/tt&gt;) on Debian/Ubuntu,
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-devel&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-devel&lt;/span&gt;&lt;/tt&gt; on RHEL/Fedora. The package you’re trying
to install might have other dependencies that you need to install (the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-dev(el)&lt;/span&gt;&lt;/tt&gt; part is important, too)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-stuff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id20"&gt;Other stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you’re working on a project, use &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-e&lt;/span&gt; .&lt;/tt&gt; inside the project
directory to install the package in your environment in development (editable)
mode. This loads code directly from your repository — you don’t need to
re-install on every change; you might need to re-install when your version
number changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="editors-and-ides"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id21"&gt;Editors and IDEs&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another important thing a developer should take care of is the choice of an
editor. This is an important decision, and is the reason for many holy wars in
the programmer community.&lt;/p&gt;
&lt;p&gt;A good editor should have syntax highlighting for all languages you need to
work with. It should also have features like visual block/multiple selections,
sophisticated find-and-replace, file finding, code completion, and many more minor
but helpful features.&lt;/p&gt;
&lt;p&gt;Then there’s the difference between IDEs and text editors. Text editors are
simpler, whereas IDEs try to include many extra things not necessarily related
to writing code. IDEs often use more resources, but you won’t notice it with a
modern computer (especially with a SSD).&lt;/p&gt;
&lt;p&gt;I spend the most of my time in &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; (&lt;a class="reference external" href="https://neovim.io/"&gt;neovim&lt;/a&gt;/&lt;a class="reference external" href="http://vimr.org/"&gt;VimR&lt;/a&gt; to be
precise). Vim is the most powerful text editor out there, and with the right
set of plugins it can beat IDEs at speed and productivity. Vim has a steep
learning curve, but it’s worth it — you can do large changes with just a few
keystrokes. Vim is considered so good that many IDEs (Visual Studio, IntelliJ
IDEA/PyCharm) have (mediocre) Vim emulation plugins.&lt;/p&gt;
&lt;p&gt;However, if you would prefer an IDE, your best bet would be &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; from JetBrains. It has both a free
Community and paid Professional edition. The JetBrains folks are experts at
IDEs — they have fully-fledged tools for many languages. Their Python solution
offers a plethora of options that aid programmers in their work. If you’re on
Windows, you might try Python Tools for Visual Studio (although I haven’t
worked with that and can’t vouch for it)&lt;/p&gt;
&lt;p&gt;Another, lighter option is &lt;a class="reference external" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; — it’s a text editor, but can offer many
IDE-like features with the right set of plugins. It’s Electron-based
architecture, or effectively being based on top of Google’s Chromium, is
unfortunate and can lead to bad performance on lower-end machines. (In my
experience, it’s better than Atom.) You can also try &lt;a class="reference external" href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; ($70).&lt;/p&gt;
&lt;p&gt;But really, almost any editor will do. But please &lt;strong&gt;avoid&lt;/strong&gt; IDLE, the editor
included with Python. It lacks some of the most basic things — it doesn’t even
have an option to show line numbers. Not to mention its ugliness. Also, don’t
use Notepad and TextEdit. Those are too simple, and Notepad has encoding
issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/#id22"&gt;Update history&lt;/a&gt;&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;2017-07-19&lt;/dt&gt;
&lt;dd&gt;Better description of problems caused by using sudo pip.&lt;/dd&gt;
&lt;dt&gt;2017-07-10&lt;/dt&gt;
&lt;dd&gt;Added notes about not removing built-in Pythons.&lt;/dd&gt;
&lt;dt&gt;2017-07-07&lt;/dt&gt;
&lt;dd&gt;Spelling fixes and updates to the virtualenv usage section.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><guid>https://chriswarrick.com/blog/2017/07/03/setting-up-a-python-development-environment/</guid><pubDate>Mon, 03 Jul 2017 10:40:00 GMT</pubDate></item><item><title>Unix locales vs Unicode (‘ascii’ codec can’t encode character…)</title><link>https://chriswarrick.com/blog/2017/06/18/unix-locales-vs-unicode/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You might get unusual errors about Unicode and inability to convert
to ASCII. Programs might just crash at random. Those are often simple to fix —
all you need is correct locale configuration.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p class="lead"&gt;Has this ever happened to you?&lt;/p&gt;
&lt;pre class="code pytb"&gt;&lt;a name="rest_code_d64e10a0180441f6847630bb5298c55c-1"&gt;&lt;/a&gt;&lt;span class="gt"&gt;Traceback (most recent call last):&lt;/span&gt;
&lt;a name="rest_code_d64e10a0180441f6847630bb5298c55c-2"&gt;&lt;/a&gt;  File &lt;span class="nb"&gt;"aogonek.py"&lt;/span&gt;, line &lt;span class="m"&gt;1&lt;/span&gt;, in &lt;span class="n"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d64e10a0180441f6847630bb5298c55c-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\u0105&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_d64e10a0180441f6847630bb5298c55c-4"&gt;&lt;/a&gt;&lt;span class="gr"&gt;UnicodeEncodeError&lt;/span&gt;: &lt;span class="n"&gt;'ascii' codec can't encode character '\u0105' in position 0: ordinal not in range(128)&lt;/span&gt;
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_86a4ce4bb24547f5884c0c4aaaefc38b-1"&gt;&lt;/a&gt;Nikola: Could not guess locale for language en, using locale C
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_72f3fae1c6704fa398da1732f8aff901-1"&gt;&lt;/a&gt;Input: ą
&lt;a name="rest_code_72f3fae1c6704fa398da1732f8aff901-2"&gt;&lt;/a&gt;Desired ascii(): '\u0105'
&lt;a name="rest_code_72f3fae1c6704fa398da1732f8aff901-3"&gt;&lt;/a&gt;Real ascii(): '\udcc4\udc85'
&lt;/pre&gt;&lt;pre class="code text"&gt;&lt;a name="rest_code_527cf1df1e754a0a8a960cf010452e81-1"&gt;&lt;/a&gt;perl: warning: Setting locale failed.
&lt;a name="rest_code_527cf1df1e754a0a8a960cf010452e81-2"&gt;&lt;/a&gt;perl: warning: Please check that your locale settings:
&lt;a name="rest_code_527cf1df1e754a0a8a960cf010452e81-3"&gt;&lt;/a&gt;    [...]
&lt;a name="rest_code_527cf1df1e754a0a8a960cf010452e81-4"&gt;&lt;/a&gt;    are supported and installed on your system.
&lt;a name="rest_code_527cf1df1e754a0a8a960cf010452e81-5"&gt;&lt;/a&gt;perl: warning: Falling back to the standard locale ("C").
&lt;/pre&gt;&lt;p class="lead"&gt;All those errors have the same root cause: incorrect locale configuration.
To fix them all, you need to generate the missing locales and set them.&lt;/p&gt;
&lt;div class="section" id="check-currently-used-locale"&gt;
&lt;h2&gt;Check currently used locale&lt;/h2&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;locale&lt;/tt&gt; command (without arguments) should tell you which locales you’re
currently using.  (The list might be shorter on your end)&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-1"&gt;&lt;/a&gt;$ locale
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-2"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_CTYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NUMERIC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-5"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TIME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_COLLATE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-7"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MONETARY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-8"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MESSAGES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-9"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_PAPER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-10"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ADDRESS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-12"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_TELEPHONE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_MEASUREMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_IDENTIFICATION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"en_US.UTF-8"&lt;/span&gt;
&lt;a name="rest_code_c729b905fd1b4f1195c19033ae210201-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;If any of those is set to &lt;tt class="docutils literal"&gt;C&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;POSIX&lt;/tt&gt;, has a different encoding than
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;UTF-8&lt;/span&gt;&lt;/tt&gt; (sometimes spelled &lt;tt class="docutils literal"&gt;utf8&lt;/tt&gt;) is empty (with the exception of
&lt;tt class="docutils literal"&gt;LC_ALL&lt;/tt&gt;), or if you see any errors, you need to reconfigure your locale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="check-locale-availability-and-install-missing-locales"&gt;
&lt;h2&gt;Check locale availability and install missing locales&lt;/h2&gt;
&lt;p&gt;The first thing you need to do is check locale availability. To do this, run
&lt;tt class="docutils literal"&gt;locale &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt;. This will produce a list of all installed locales.  You can use
&lt;tt class="docutils literal"&gt;grep&lt;/tt&gt; to get a more reasonable list.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_9fa587e247d8420b9a39f5a2eb409e0e-1"&gt;&lt;/a&gt;$ locale -a | grep -i utf
&lt;a name="rest_code_9fa587e247d8420b9a39f5a2eb409e0e-2"&gt;&lt;/a&gt;&amp;lt;lists all UTF-8 locales&amp;gt;
&lt;a name="rest_code_9fa587e247d8420b9a39f5a2eb409e0e-3"&gt;&lt;/a&gt;$ locale -a | grep -i utf | grep -i en_US
&lt;a name="rest_code_9fa587e247d8420b9a39f5a2eb409e0e-4"&gt;&lt;/a&gt;en_US.UTF-8
&lt;/pre&gt;&lt;p&gt;The best locale to use is the one for your language, with the UTF-8 encoding.
The locale will be used by some console apps for output. I’m going to use
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;en_US.UTF-8&lt;/span&gt;&lt;/tt&gt; in this guide.&lt;/p&gt;
&lt;p&gt;If you can’t see any UTF-8 locales, or no appropriate locale setting for your
language of choice, you might need to generate those. The required actions
depend on your distro/OS.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Debian, Ubuntu, and derivatives: install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;language-pack-en-base&lt;/span&gt;&lt;/tt&gt;, run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;dpkg-reconfigure&lt;/span&gt; locales&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;RHEL, CentOS, Fedora: install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;glibc-langpack-en&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: uncomment relevant entries in &lt;tt class="docutils literal"&gt;/etc/locale.gen&lt;/tt&gt; and run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;locale-gen&lt;/span&gt;&lt;/tt&gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Locale"&gt;(wiki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For other OSes, refer to the documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need a UTF-8 locale to ensure compatibility with software. Avoid the &lt;tt class="docutils literal"&gt;C&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;POSIX&lt;/tt&gt; locales (it’s ASCII) and locales with other encodings (those
aren’t used by ~anyone these days)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-system-wide"&gt;
&lt;h2&gt;Configure system-wide&lt;/h2&gt;
&lt;p&gt;On some systems, you may be able to configure locale system-wide.  Check your
system documentation for details. If your system has systemd, run&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_993f4810d984467e8e179ef429c3a832-1"&gt;&lt;/a&gt;sudo localectl set-locale LANG=en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configure-for-a-single-user"&gt;
&lt;h2&gt;Configure for a single user&lt;/h2&gt;
&lt;p&gt;If your environment does not allow system-wide locale configuration (macOS,
shared server with generated but unconfigured locales), or if you want to
ensure it’s always configured independently of system settings.&lt;/p&gt;
&lt;p&gt;To do this, you need to edit the configuration file for your shell. If you’re
using bash, it’s &lt;tt class="docutils literal"&gt;.bashrc&lt;/tt&gt; (or &lt;tt class="docutils literal"&gt;.bash_profile&lt;/tt&gt; on macOS). For zsh users,
&lt;tt class="docutils literal"&gt;.zshrc&lt;/tt&gt;.  Add this line (or equivalent in your shell):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_836f47221b9c4363ba093ead5f3a2ab0-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 &lt;span class="nv"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/pre&gt;&lt;p&gt;That should be enough. Note that those settings don’t apply to programs
not launched through a shell.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;&lt;strong&gt;Python/Windows corner:&lt;/strong&gt; Python 3.7 will fix this on Unix by assuming UTF-8
if it encounters the C locale.  On Windows, Python 3.6 is using UTF-8
interactively, but not when using shell redirections to files or pipes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post was brought to you by ą — U+0105 LATIN SMALL LETTER A WITH OGONEK.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>guide</category><category>locale</category><category>Python</category><category>Unicode</category><category>Unix</category><guid>https://chriswarrick.com/blog/2017/06/18/unix-locales-vs-unicode/</guid><pubDate>Sun, 18 Jun 2017 18:40:00 GMT</pubDate></item><item><title>Structuring and automating a Python project with the Python Project Template</title><link>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;To create a project that other people can use and contribute to, you need to
follow a specific directory structure. Moreover, releasing a new version should
be as simple and painless as possible. For my projects, I use a template that
has the structure already in place, and comes with automation for almost every
part of a release.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/Kwpolska/python-project-template"&gt;Python Project Template&lt;/a&gt; is my approach to this. It comes with a good (IMO) structure and automation.&lt;/p&gt;
&lt;p&gt;What does it include? A whole lot of things. Documentation, Sphinx
configuration, a simple test suite, a &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file, some AUR stuff, and
perhaps the most important part — the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. It can automate a lot
of tasks that are part of a release.&lt;/p&gt;
&lt;p&gt;You see, releasing a package is error-prone. There are a lot of things that can go wrong:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Version numbers. They may appear in code comments, Sphinx configuration,
README files and documentation, and setup.py. Some people claim to have
“solutions” for this. Most of those solutions don’t work right — either they
import a file from the project (which may break if &lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt; is too
magical), read a file from that place (which might not get included
properly), or use some setuptools extension to get the version from VCS or
whatever (which needs to be installed before the package). Using &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; to
fix the version numbers is much simpler.&lt;/li&gt;
&lt;li&gt;Forgetting about changelogs.&lt;/li&gt;
&lt;li&gt;Not updating translations or other important files.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve had quite a few botched releases in the &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; project. I wrote a
&lt;a class="reference external" href="http://getnikola.github.io/releng/checklist.html"&gt;checklist&lt;/a&gt; to prevent things like those. You may notice that the most
prominent step is to run a &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script. This step replaced 21 others —
now the checklist only talks about writing announcements, sending e-mails,
updating the website, and doing some GitHub stuff that is not yet automated.&lt;/p&gt;
&lt;p&gt;The template promotes a &lt;em&gt;release early, release often&lt;/em&gt; workflow: since making a
new release requires almost no human intervention, you might as well do it
every time you make a bunch of changes. In my projects, &lt;em&gt;everything&lt;/em&gt; gets
automated, and it might as well be possible in yours.&lt;/p&gt;
&lt;div class="section" id="the-complete-feature-list-as-of-v2-1-5"&gt;
&lt;h2&gt;The complete feature list (as of v2.1.5)&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pre-configured Sphinx with:&lt;ul&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;CONTRIBUTING.rst&lt;/tt&gt; guide (used by GitHub when sending a pull request or an issue)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;LICENSE.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;an empty &lt;tt class="docutils literal"&gt;CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;a bare-bones &lt;tt class="docutils literal"&gt;index.rst&lt;/tt&gt; page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The exact same files in &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;, which are fragile and &lt;strong&gt;MAY NOT&lt;/strong&gt; be modified
as they are replaced with copies in &lt;tt class="docutils literal"&gt;/docs&lt;/tt&gt; by the &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;__init__.py&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;template.py&lt;/tt&gt; files in the Python package directory&lt;/li&gt;
&lt;li&gt;A &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file that could be good enough for people, and that supports
&lt;tt class="docutils literal"&gt;entry_points&lt;/tt&gt; (see &lt;a class="reference external" href="https://go.chriswarrick.com/entry_points"&gt;https://go.chriswarrick.com/entry_points&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;tests/&lt;/tt&gt; containing some &lt;em&gt;Is My Python Sane?&lt;/em&gt;-style tests (using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;An automated global update script (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;.pypt/PYPT-UPDATE&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Entry points configuration ready to be uncommented (and a matching
&lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt; file)&lt;/li&gt;
&lt;li&gt;Add-ons for Qt users (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/Qt&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;A sample hook for AUR updates (in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pypt-extras/AUR&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;PKGBUILDs for the Arch Linux User Repository (AUR)&lt;/li&gt;
&lt;li&gt;A state-of-the-art &lt;tt class="docutils literal"&gt;release&lt;/tt&gt; script, the operations of which are:&lt;ul&gt;
&lt;li&gt;querying the user for version number, commit message and changes&lt;/li&gt;
&lt;li&gt;updating &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;bumping the version number in all the files, changing dates where necessary&lt;/li&gt;
&lt;li&gt;copying over &lt;tt class="docutils literal"&gt;/docs/README.rst&lt;/tt&gt;,  &lt;tt class="docutils literal"&gt;/docs/CHANGELOG.rst&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/docs/CONTRIBUTING.rst&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;/&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;locale generation (via the &lt;tt class="docutils literal"&gt;.pypt/localegen&lt;/tt&gt; script)&lt;/li&gt;
&lt;li&gt;running &lt;tt class="docutils literal"&gt;import $PROJECTLC&lt;/tt&gt; and the test suite&lt;/li&gt;
&lt;li&gt;uploading a source distribution and a wheel to PyPI&lt;/li&gt;
&lt;li&gt;Making a Git commit and tagging the release&lt;/li&gt;
&lt;li&gt;creating a GitHub Releases entry&lt;/li&gt;
&lt;li&gt;updating the AUR packages (by using hooks)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div style="text-align: center;"&gt;
&lt;a href="https://github.com/Kwpolska/python-project-template" class="btn btn-lg btn-primary"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Check it out on GitHub&lt;/a&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>guide</category><category>Nikola</category><category>projects</category><category>PyPT</category><category>Python</category><guid>https://chriswarrick.com/blog/2017/04/09/python-project-template-structure-and-automation/</guid><pubDate>Sun, 09 Apr 2017 09:00:00 GMT</pubDate></item><item><title>Code writing code: Python and Vim as development aids</title><link>https://chriswarrick.com/blog/2016/05/27/code-writing-code-python-and-vim/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I was working on some C# and Java code. And along the way, I used
Python and Vim to (re)write my code. A small Python script and a 6-keystroke
Vim macro did it faster and better than a human would.&lt;/p&gt;
&lt;p&gt;Every programmer should learn a good scripting language and use a programmable
editor like Vim. Why? Here are two examples, after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="episode-i-inotifypropertychanged-or-python-writing-c"&gt;
&lt;h2&gt;Episode I: &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt;, or Python writing C#&lt;/h2&gt;
&lt;p&gt;I was building a private C# weekend project (that turned into a weeklong
project) — and by the way, WPF and C# are quite pleasant (Windows Forms is a
trainwreck, though). One of the things I used in that project was a DataGrid
bound to a list of custom objects (a DataGrid is a table, basically). And in
order to use it, you need to use the &lt;tt class="docutils literal"&gt;INotifyPropertyChanged&lt;/tt&gt; interface &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/ms229614(v=vs.100).aspx"&gt;(MSDN)&lt;/a&gt;.
It involves doing something like this:&lt;/p&gt;
&lt;pre class="code csharp"&gt;&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// can also be a field&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;[JsonProperty]&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;name_&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;NotifyPropertyChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-12"&gt;&lt;/a&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_87adbf07b78945bbaf959f1f6cf593be-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s 12 lines of code (excluding &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt; which comes from the
Json.NET library) for that pattern. Oh: and I need to do that for &lt;strong&gt;every&lt;/strong&gt;
field/property of my class, because otherwise any changes to them would not be
reflected in the tables (and maybe one or two fields were &lt;em&gt;not&lt;/em&gt; in the table).&lt;/p&gt;
&lt;p&gt;Doing that by hand is really not feasible: you need to copy-paste this
large block 14 times and take care of 5 instances of the name (3 with
underscores, 2 without), 2 instances of the type, and the &lt;tt class="docutils literal"&gt;[JsonProperty]&lt;/tt&gt;
attribute (which does not appear on all properties).&lt;/p&gt;
&lt;p&gt;So, I used one of those intelligent computer things to do it for me. I wrote a
really simple &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; script and ran it. And I ended up with all 14 fields built
for me.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py.html"&gt;code-writing-code/write_properties.py&lt;/a&gt;  &lt;a class="reference external" href="https://chriswarrick.com/listings/code-writing-code/write_properties.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-3"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;public &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; {&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-4"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            get {&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-5"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                return &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_;&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-6"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-7"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            set {&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-8"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                if (value != &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_) {&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-9"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ = value;&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-10"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                    NotifyPropertyChanged("&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;");&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-11"&gt;&lt;/a&gt;&lt;span class="s2"&gt;                }&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-12"&gt;&lt;/a&gt;&lt;span class="s2"&gt;            }&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-13"&gt;&lt;/a&gt;&lt;span class="s2"&gt;        }&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-14"&gt;&lt;/a&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-15"&gt;&lt;/a&gt;&lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'[JsonProperty]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;        '&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-17"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONPROPERTY_TEMPLATE&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;jsonproperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-22"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-24"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-25"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'1 string name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-26"&gt;&lt;/a&gt;    &lt;span class="s1"&gt;'0 int another'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-27"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# 12 fields omitted for brevity&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-28"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-29"&gt;&lt;/a&gt;&lt;span class="n"&gt;properties_split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-31"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Private definitions (internal)&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"        private &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;_ { get; set; }"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-35"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-36"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Public definitions (with notifications)&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-37"&gt;&lt;/a&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;has_jsonproperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;properties_split&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_35f97d243fbc4e31b54f40576fa3de39-38"&gt;&lt;/a&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_jsonproperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vtype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That script takes a list of properties and spits out a block of code, ready to
be pasted into the code. Visual Studio has a nice &lt;em&gt;Insert File as Text&lt;/em&gt;
feature, so redirecting the output to a file and using that option is enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="episode-ii-fixing-argument-order-or-vim-re-writing-java"&gt;
&lt;h2&gt;Episode II: Fixing argument order, or Vim (re)writing Java&lt;/h2&gt;
&lt;p&gt;Another project, &lt;a class="reference external" href="https://github.com/Kwpolska/numbernamer"&gt;Number Namer&lt;/a&gt;, written in Java, and it does what it says on
the tin: takes a number and writes it out as words, while being multilingual and
extensible. I used Eclipse for this project, because it looks good, is really
helpful with its code linting, and does not run slowly on my aging system (I’m
looking at you, IntelliJ IDEA aka PyCharm aka Android Studio…)&lt;/p&gt;
&lt;p&gt;And so, I was building a test suite, using &lt;a class="reference external" href="http://junit.org/"&gt;JUnit&lt;/a&gt;. It’s pretty
straightforward, and I remember the syntax from Python’s unittest (even though
I write tests with &lt;a class="reference external" href="http://pytest.org/"&gt;pytest&lt;/a&gt; nowadays). Or so I thought.&lt;/p&gt;
&lt;pre class="code java"&gt;&lt;a name="rest_code_8e106991228943a6a4e93a06821477e2-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (incorrect)&lt;/span&gt;
&lt;a name="rest_code_8e106991228943a6a4e93a06821477e2-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;a name="rest_code_8e106991228943a6a4e93a06821477e2-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;// (fixed)                              ^ cursor&lt;/span&gt;
&lt;a name="rest_code_8e106991228943a6a4e93a06821477e2-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Basic integers (7) failed"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"seven"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7L&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You see, the typical Python spelling is &lt;tt class="docutils literal"&gt;self.assertEquals(actual,
expected)&lt;/tt&gt;. Java adds a &lt;tt class="docutils literal"&gt;String&lt;/tt&gt; message parameter and it also swaps
&lt;tt class="docutils literal"&gt;actual&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;expected&lt;/tt&gt;. Which I didn’t notice at first, and I wrote my
assertions incorrectly. While it doesn’t &lt;em&gt;really&lt;/em&gt; matter (it will still work),
the output looked a bit weird.&lt;/p&gt;
&lt;p&gt;And I noticed only when I finished writing my tests (and I had a typo in my
expected output). I wanted to fix them all — not manually, of course. So, I
closed this file, brought up Vim, searched for the motion I need (it’s
&lt;tt class="docutils literal"&gt;t{char}&lt;/tt&gt; — see &lt;tt class="docutils literal"&gt;:help t&lt;/tt&gt;). And I ended up with this
(cursor placed on the comma after the first argument):&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;kbd style="font-size: 2em;"&gt;dt,&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;t)&lt;/kbd&gt;&lt;kbd style="font-size: 2em;"&gt;p&lt;/kbd&gt;
&lt;/div&gt;&lt;p&gt;What does this do, you may ask? It’s actually pretty self-explanatory:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;b&gt;d&lt;/b&gt;elete &lt;b&gt;t&lt;/b&gt;ill comma, (go) &lt;b&gt;t&lt;/b&gt;ill closing parenthesis, &lt;b&gt;p&lt;/b&gt;aste.
&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This fixes one line. Automatically. Make it a macro (wrap in &lt;tt class="docutils literal"&gt;qq&lt;/tt&gt; … &lt;tt class="docutils literal"&gt;q&lt;/tt&gt;,
use with &lt;tt class="docutils literal"&gt;@q&lt;/tt&gt;) and now you can run it on all lines, either by moving manually or by
searching for &lt;tt class="docutils literal"&gt;,&lt;/tt&gt; and pressing &lt;tt class="docutils literal"&gt;n@q&lt;/tt&gt; until you run out of lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue"&gt;
&lt;h2&gt;Epilogue&lt;/h2&gt;
&lt;p&gt;Some of you might say “but VS/Eclipse/IDEA has an option for that somewhere” or
“[expensive tool] can do that” — and a Google search shows that there is an
Eclipse plugin to swap arguments and that I could also write a regex to solve
my second issue. Nevertheless, Python is a great tool in a programmer’s toolbox
— especially the interactive interpreter. And Vim is an awesome editor that can
accomplish magic in a few keystrokes — and there are many more things you can
do with it.&lt;/p&gt;
&lt;p class="lead"&gt;Go learn &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="http://www.vim.org/"&gt;Vim&lt;/a&gt; now.&lt;/p&gt;
&lt;p&gt;Also: don’t even bother with VsVim or IdeaVim or any other Vim emulation
plugins, they work in unusual ways and often don’t give you everything — for
example, VsVim has a Vim visual mode (&lt;tt class="docutils literal"&gt;v&lt;/tt&gt; key) and Visual Studio selection
mode (mouse), and only one allows Vim keystrokes (the other will replace
selected text).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>CSharp</category><category>Java</category><category>programming</category><category>Python</category><category>Vim</category><guid>https://chriswarrick.com/blog/2016/05/27/code-writing-code-python-and-vim/</guid><pubDate>Fri, 27 May 2016 08:46:35 GMT</pubDate></item><item><title>Deploying Python Web Applications with nginx and uWSGI Emperor</title><link>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You’ve just written a great Python web application. Now, you want to share it with the world. In order to do that, you need a server, and some software to do that for you.&lt;/p&gt;
&lt;p&gt;The following is a comprehensive guide on how to accomplish that, on multiple Linux-based operating systems, using nginx and uWSGI Emperor. It doesn’t force you to use any specific web framework — Flask, Django, Pyramid, Bottle will all work. Written for Ubuntu, Debian, Fedora, CentOS and Arch Linux (should be helpful for other systems, too). Now with an Ansible Playbook.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Revision 5a (2018-04-16): Better explain why we disable emperor-tyrant mode&lt;/em&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;For easy linking, I set up some aliases: &lt;a class="reference external" href="https://go.chriswarrick.com/pyweb"&gt;https://go.chriswarrick.com/pyweb&lt;/a&gt; and &lt;a class="reference external" href="https://go.chriswarrick.com/uwsgi-tut"&gt;https://go.chriswarrick.com/uwsgi-tut&lt;/a&gt; (powered by a Django web application, deployed with nginx and uWSGI!).&lt;/p&gt;
&lt;div class="contents alert alert-info pull-right topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#prerequisites" id="id9"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#automate-everything-ansible-playbook" id="id10"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#how-to-use" id="id11"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#the-manual-guide" id="id12"&gt;The manual guide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#getting-started" id="id13"&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#preparing-your-application" id="id14"&gt;Preparing your application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#configuring-uwsgi-and-nginx" id="id15"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#uwsgi-configuration" id="id16"&gt;uWSGI configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#nginx-configuration" id="id17"&gt;nginx configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#service-setup" id="id18"&gt;Service setup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-arch-linux" id="id19"&gt;For Arch Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-fedora-and-centos" id="id20"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-ubuntu-and-debian" id="id21"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result" id="id22"&gt;End result&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#troubleshooting" id="id23"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id9"&gt;Prerequisites&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to deploy your web application, you need a server that gives you root and ssh access — in other words, a VPS (or a dedicated server, or a datacenter lease…). If you’re looking for a great VPS service for a low price, I recommend &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=7983689b2ecc"&gt;DigitalOcean&lt;/a&gt; (reflink &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id6" id="id1"&gt;[1]&lt;/a&gt;), which offers a $5/mo service &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id7" id="id2"&gt;[2]&lt;/a&gt;. If you want to play along at home, without buying a VPS, you can create a virtual machine on your own, or use Vagrant with a Vagrant box for Fedora 25 (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;fedora/25-cloud-base&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Your server should also run a modern Linux-based operating system. This guide was written and tested on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu 16.04 LTS or newer&lt;/li&gt;
&lt;li&gt;Debian 8 (jessie) or newer&lt;/li&gt;
&lt;li&gt;Fedora 24 or newer (with SELinux enabled and disabled)&lt;/li&gt;
&lt;li&gt;CentOS 7 (with SELinux enabled and disabled) — manual guide should also work on RHEL 7&lt;/li&gt;
&lt;li&gt;Arch Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Users of other Linux distributions (and perhaps other Unix flavors) can also follow this tutorial. This guide assumes &lt;tt class="docutils literal"&gt;systemd&lt;/tt&gt; as your init system; if you are not using systemd, you will have to get your own daemon files somewhere else. In places where the instructions are split three-way, try coming up with your own, reading documentation and config files; the Arch Linux instructions are probably the closest to upstream (but not always).  Unfortunately, all Linux distributions have their own ideas when it comes to running and managing nginx and uWSGI.&lt;/p&gt;
&lt;p&gt;nginx and uWSGI are considered best practices by most people. nginx is a fast, modern web server, with uWSGI support built in (without resorting to reverse proxying).  uWSGI is similarly aimed at speed.  The Emperor mode of uWSGI is recommended for init system integration by the uWSGI team, and it’s especially useful for multi-app deployments. (This guide is opinionated.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-everything-ansible-playbook"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id10"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;/h2&gt;
&lt;p class="lead"&gt;A &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; that automates everything in this tutorial is available.&lt;/p&gt;
&lt;div class="section" id="how-to-use"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id11"&gt;How to use&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Install &lt;a class="reference external" href="https://docs.ansible.com/ansible/intro_installation.html"&gt;Ansible&lt;/a&gt; on your control computer (not necessarily the destination server).&lt;/li&gt;
&lt;li&gt;Clone the &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; from GitHub.&lt;/li&gt;
&lt;li&gt;Read &lt;tt class="docutils literal"&gt;README.md&lt;/tt&gt;. You should also understand how Ansible works.&lt;/li&gt;
&lt;li&gt;Configure (change three files: &lt;tt class="docutils literal"&gt;hosts&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;group_vars/all&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;group_vars/os_&amp;lt;destination OS&amp;gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Make sure all the dependencies are installed on your destination server&lt;/li&gt;
&lt;li&gt;Run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ansible-playbook&lt;/span&gt; &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;nginx-uwsgi.yml&lt;/span&gt; &lt;span class="pre"&gt;-i&lt;/span&gt; hosts&lt;/tt&gt; and watch magic happen.&lt;/li&gt;
&lt;li&gt;Skip over to &lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result"&gt;End result&lt;/a&gt; and test your site.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-manual-guide"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id12"&gt;The manual guide&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I personally recommend the Playbook as a much less error-prone way to set up your app, it might not be compatible with everyone’s system, or otherwise be the wrong solution. The original manual configuration guide is still maintained.&lt;/p&gt;
&lt;p&gt;Even if you are using the Playbook, you should still read this to find out what happens under the hood, and to find out about other caveats/required configuration changes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;All the commands in this tutorial are meant to be run &lt;strong&gt;as root&lt;/strong&gt; — run &lt;tt class="docutils literal"&gt;su&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;sudo su&lt;/tt&gt; first to get an administrative shell. This tutorial assumes familiarity with basic Linux administration and command-line usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id13"&gt;Getting started&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start by installing virtualenv, nginx and uWSGI. I recommend using your operating system packages. For uWSGI, we need the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugins. (Arch Linux names the &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugin &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;; the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin may be built-in — check with your system repositories!). I’ll also install Git to clone the tutorial app, but it’s optional if your workflow does not involve git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_7e26f30bcab148e8b0d395b72b4a23b5-1"&gt;&lt;/a&gt;apt install virtualenv python3 uwsgi uwsgi-emperor uwsgi-plugin-python3 nginx-full git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_108bee1b6d2a41a78351cd237ef18c00-1"&gt;&lt;/a&gt;dnf install python3-virtualenv uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;CentOS:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_d59dd52457da40af93eff478bc09fe16-1"&gt;&lt;/a&gt;yum install epel-release
&lt;a name="rest_code_d59dd52457da40af93eff478bc09fe16-2"&gt;&lt;/a&gt;yum install python34 python34-pip uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx git wget
&lt;a name="rest_code_d59dd52457da40af93eff478bc09fe16-3"&gt;&lt;/a&gt;python3 -m pip install --user virtualenv
&lt;/pre&gt;&lt;p&gt;We need to install virtualenv manually, because the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-virtualenv&lt;/span&gt;&lt;/tt&gt; package is not compatible. It will be available to root only (user install).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_7e3e753967e24224b3ca9b46f0ecf129-1"&gt;&lt;/a&gt;pacman -S python-virtualenv uwsgi uwsgi-plugin-python nginx git
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="preparing-your-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id14"&gt;Preparing your application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tutorial will work for any web framework. I will use &lt;a class="reference external" href="https://github.com/Kwpolska/flask-demo-app"&gt;a really basic Flask app&lt;/a&gt; that has just one route (&lt;tt class="docutils literal"&gt;/&lt;/tt&gt;) &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id8" id="id3"&gt;[3]&lt;/a&gt;, a static &lt;tt class="docutils literal"&gt;hello.png&lt;/tt&gt; file and a &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; for demonstration purposes. Note that the app does not use &lt;tt class="docutils literal"&gt;app.run()&lt;/tt&gt;. While you could add it, it would be used for local development and debugging only, and would have to be prepended by &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; (if it wasn’t, that server would run instead of uWSGI, which is bad)&lt;/p&gt;
&lt;p&gt;The app will be installed somewhere under the &lt;tt class="docutils literal"&gt;/srv&lt;/tt&gt; directory, which is a great place to store things like this. I’ll choose &lt;tt class="docutils literal"&gt;/srv/myapp&lt;/tt&gt; for this tutorial, but for real deployments, you should use something more distinguishable — the domain name is a great idea.&lt;/p&gt;
&lt;p&gt;If you don’t use Flask, this tutorial also has instructions for other web frameworks (Django, Pyramid, Bottle) in the configuration files; it should be adjustable to any other WSGI-compliant framework/script nevertheless.&lt;/p&gt;
&lt;p&gt;We’ll start by creating a virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_2747f321ebc14e2faed6e8671cd8e857-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_2747f321ebc14e2faed6e8671cd8e857-2"&gt;&lt;/a&gt;virtualenv -p /usr/bin/python3 myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora, CentOS, Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_b167ca292bfa4bf885154179330a603a-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_b167ca292bfa4bf885154179330a603a-2"&gt;&lt;/a&gt;python3 -m virtualenv myapp
&lt;/pre&gt;&lt;p&gt;(This tutorial assumes Python 3. Make sure you use the correct &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; command/argument. If you want to use Python 2.7, you’ll need to adjust your uWSGI configuration as well.)&lt;/p&gt;
&lt;p&gt;Now, we need to put our app there and install requirements. An example for the tutorial demo app:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_986ff6d3e3644bc28223f1d8740f60fb-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; myapp
&lt;a name="rest_code_986ff6d3e3644bc28223f1d8740f60fb-2"&gt;&lt;/a&gt;git clone https://github.com/Kwpolska/flask-demo-app appdata
&lt;a name="rest_code_986ff6d3e3644bc28223f1d8740f60fb-3"&gt;&lt;/a&gt;bin/pip install -r appdata/requirements.txt
&lt;/pre&gt;&lt;p&gt;I’m storing my application data in the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; subdirectory so that it doesn’t clutter the virtualenv (or vice versa).  You may also install the &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in the virtualenv, but it’s optional.&lt;/p&gt;
&lt;p&gt;What this directory should be depends on your web framework.  For example, for a Django app, you should have an &lt;tt class="docutils literal"&gt;appdata/manage.py&lt;/tt&gt; file (in other words, &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; is where your app structure starts).  I also assumed that the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; folder should have a &lt;tt class="docutils literal"&gt;static&lt;/tt&gt; subdirectory with all static files, including &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; if you have one (we will add support for both in nginx).&lt;/p&gt;
&lt;p&gt;At this point, you should chown this directory to the user and group your server is going to run as.  This is especially important if uwsgi and nginx run as different users (as they do on Fedora). Run one of the following commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_443154631fe741efbc3d3f2afabe7706-1"&gt;&lt;/a&gt;chown -R www-data:www-data /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora, CentOS:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_610cf997db0140cabe0e11762ff87a34-1"&gt;&lt;/a&gt;chown -R uwsgi:nginx /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c09a84814879420bb89a2d54743eff5d-1"&gt;&lt;/a&gt;chown -R http:http /srv/myapp
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configuring-uwsgi-and-nginx"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id15"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Parts of the configuration depend on your operating system. I tried to provide advice for Ubuntu, Debian, Fedora, CentOS and Arch Linux. If you experience any issues, in particular with plugins, please consult the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We need to write a configuration file for uWSGI and nginx.&lt;/p&gt;
&lt;div class="section" id="uwsgi-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id16"&gt;uWSGI configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Start with this, but read the notes below and change the values accordingly:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/uwsgi.sock&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;775&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-5"&gt;&lt;/a&gt;&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-6"&gt;&lt;/a&gt;&lt;span class="na"&gt;binary-path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/bin/uwsgi&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-7"&gt;&lt;/a&gt;&lt;span class="na"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-8"&gt;&lt;/a&gt;&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flaskapp:app&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-9"&gt;&lt;/a&gt;&lt;span class="na"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-10"&gt;&lt;/a&gt;&lt;span class="na"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-11"&gt;&lt;/a&gt;&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-12"&gt;&lt;/a&gt;&lt;span class="na"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-13"&gt;&lt;/a&gt;&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python3,logfile&lt;/span&gt;
&lt;a name="rest_code_7b7b8f6322304ce893344b0caa8f0404-14"&gt;&lt;/a&gt;&lt;span class="na"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file:/srv/myapp/uwsgi.log&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu, Debian: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/uwsgi-emperor/vassals/myapp.ini&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora, CentOS: &lt;tt class="docutils literal"&gt;/etc/uwsgi.d/myapp.ini&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: &lt;tt class="docutils literal"&gt;/etc/uwsgi/vassals/myapp.ini&lt;/tt&gt; (create the directory first and &lt;strong&gt;chown&lt;/strong&gt; it to http: &lt;tt class="docutils literal"&gt;mkdir &lt;span class="pre"&gt;-p&lt;/span&gt; /etc/uwsgi/vassals; chown &lt;span class="pre"&gt;-R&lt;/span&gt; http:http /etc/uwsgi/vassals&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;socket&lt;/tt&gt; — the socket file that will be used by your application. It’s usually a file path (Unix domain socket). You could use a local TCP socket, but it’s not recommended.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;chdir&lt;/tt&gt; — the app directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;binary-path&lt;/span&gt;&lt;/tt&gt; — the uWSGI executable to use. Remove if you didn’t install the (optional) &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in your virtualenv.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; — the virtualenv for your application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;module&lt;/tt&gt; — the name of the module that houses your application, and the object that speaks the WSGI interface, separated by colons. This depends on your web framework (use the &lt;strong&gt;Module name&lt;/strong&gt;):&lt;/p&gt;
&lt;table border="1" class="table table-striped table-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="4%"&gt;
&lt;col width="5%"&gt;
&lt;col width="5%"&gt;
&lt;col width="9%"&gt;
&lt;col width="31%"&gt;
&lt;col width="12%"&gt;
&lt;col width="34%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Framework&lt;/th&gt;
&lt;th class="head"&gt;Package&lt;/th&gt;
&lt;th class="head"&gt;Callable&lt;/th&gt;
&lt;th class="head"&gt;Module name&lt;/th&gt;
&lt;th class="head"&gt;Package is…&lt;/th&gt;
&lt;th class="head"&gt;Callable is…&lt;/th&gt;
&lt;th class="head"&gt;Caveats&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Flask&lt;/td&gt;
&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;filename:app&lt;/td&gt;
&lt;td&gt;module name (for a Python import)&lt;/td&gt;
&lt;td&gt;Flask object&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Django&lt;/td&gt;
&lt;td&gt;project.wsgi&lt;/td&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;project.wsgi:application&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;project&lt;/tt&gt; is name of your project (directory with settings.py); &lt;tt class="docutils literal"&gt;wsgi&lt;/tt&gt; is constant&lt;/td&gt;
&lt;td&gt;constant&lt;/td&gt;
&lt;td&gt;add an environment variable for settings: &lt;tt class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/tt&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Bottle&lt;/td&gt;
&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;filename:app&lt;/td&gt;
&lt;td&gt;module name (for a Python import)&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;app = bottle.default_app()&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;—&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pyramid&lt;/td&gt;
&lt;td&gt;filename&lt;/td&gt;
&lt;td&gt;app&lt;/td&gt;
&lt;td&gt;filename:app&lt;/td&gt;
&lt;td&gt;module name (for a Python import)&lt;/td&gt;
&lt;td&gt;&lt;tt class="docutils literal"&gt;app = config.make_wsgi_app()&lt;/tt&gt;&lt;/td&gt;
&lt;td&gt;make sure it’s &lt;strong&gt;not&lt;/strong&gt; in an &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; block — the demo app does that!)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;uid&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;gid&lt;/tt&gt; — the names of the user account to use for your server.  Use the same values as in the &lt;tt class="docutils literal"&gt;chown&lt;/tt&gt; command above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;processes&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;threads&lt;/tt&gt; — control the resources devoted to this application. Because this is a simple hello app, I used one process with one thread, but for a real app, you will probably need more (you need to see what works the best; there is no algorithm to decide). Also, remember that if you use multiple processes, they don’t share memory (you need a database to share data between them).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; — the list of uWSGI plugins to use. For Arch Linux, use &lt;tt class="docutils literal"&gt;plugins = python&lt;/tt&gt; (the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin is always active).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;logger&lt;/tt&gt; — the path to your app-specific logfile. (Other logging facilities are available, but this one is the easiest, especially for multiple applications on the same server)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;tt class="docutils literal"&gt;env&lt;/tt&gt; — environment variables to pass to your app. Useful for configuration, may be specified multiple times. Example for Django: &lt;tt class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test your configuration by running &lt;tt class="docutils literal"&gt;uwsgi &lt;span class="pre"&gt;--ini&lt;/span&gt; /path/to/myapp.ini&lt;/tt&gt; (disable the logger for stderr output or run &lt;tt class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt; /srv/myapp/uwsgi.log&lt;/tt&gt; in another window).&lt;/p&gt;
&lt;p&gt;If you’re using &lt;strong&gt;Fedora&lt;/strong&gt; or &lt;strong&gt;CentOS&lt;/strong&gt;, there are two configuration changes you need to make globally: in &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt;, disable the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;emperor-tyrant&lt;/span&gt;&lt;/tt&gt; option (which we don’t need, as it sets uid/gid for every process based on the owner of the related &lt;tt class="docutils literal"&gt;.ini&lt;/tt&gt; config file — we use one global setup) and set &lt;tt class="docutils literal"&gt;gid = nginx&lt;/tt&gt;.  We’ll need this so that nginx can talk to your socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id17"&gt;nginx configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We need to configure our web server. Here’s a basic configuration that will get us started:&lt;/p&gt;
&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu, Debian: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled/myapp.conf&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora, CentOS: &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: add &lt;tt class="docutils literal"&gt;include &lt;span class="pre"&gt;/etc/nginx/conf.d/*.conf;&lt;/span&gt;&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;http&lt;/tt&gt; directive in &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; and use &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code nginx"&gt;&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTP server:&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-3"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTPS server:&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# listen 443 ssl;&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-6"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt; &lt;span class="s"&gt;myapp.local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-8"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-9"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-10"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/srv/myapp/uwsgi.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-13"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-14"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-15"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-17"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/favicon.ico&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-18"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static/favicon.ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_6c26485575f04a00bdf70a7a619519ea-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that this file is a very basic and rudimentary configuration. This configuration is fine for local testing, but for a real deployment, you will need to adjust it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;listen&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;443 ssl&lt;/tt&gt; and create a http→https redirect on port 80 (you can get a free SSL certificate from &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;; make sure to &lt;a class="reference external" href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html"&gt;configure SSL properly&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;server_name&lt;/tt&gt; to your real domain name&lt;/li&gt;
&lt;li&gt;you might also want to add custom error pages, log files, or change anything else that relates to your web server — consult other nginx guides for details&lt;/li&gt;
&lt;li&gt;nginx usually has some server already enabled by default — edit &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; or remove their configuration files from your sites directory to disable it&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-setup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id18"&gt;Service setup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After you’ve configured uWSGI and nginx, you need to enable and start the system services.&lt;/p&gt;
&lt;div class="section" id="for-arch-linux"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id19"&gt;For Arch Linux&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;All you need is:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ad2bec2903bb492e8bb87ac42f8c2a4e-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_ad2bec2903bb492e8bb87ac42f8c2a4e-2"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-fedora-and-centos"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id20"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Make sure you followed the extra note about editing &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt; earlier and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_13f0ac4ee82d4044979d273fc0144790-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx uwsgi
&lt;a name="rest_code_13f0ac4ee82d4044979d273fc0144790-2"&gt;&lt;/a&gt;systemctl start nginx uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;If you disabled SELinux, this is enough to get an app working and you can skip over to the next section.&lt;/p&gt;
&lt;p&gt;If you want to use SELinux, you need to do the following to allow nginx to read static files:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_6e94af80ba28424da8422beb76b301e7-1"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_6e94af80ba28424da8422beb76b301e7-2"&gt;&lt;/a&gt;chcon -R system_u:system_r:httpd_t:s0 /srv/myapp/appdata/static
&lt;a name="rest_code_6e94af80ba28424da8422beb76b301e7-3"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We now need to install a &lt;a class="reference external" href="https://chriswarrick.com/pub/nginx-uwsgi.pp"&gt;SELinux policy&lt;/a&gt; (that I created for this project) to allow nginx and uWSGI to communicate.
Download it and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_de8fd3c8363b43b197a69837337b2c51-1"&gt;&lt;/a&gt;semodule -i nginx-uwsgi.pp
&lt;/pre&gt;&lt;p&gt;Hopefully, this is enough (you can delete the file). In case it isn’t, please read SELinux documentation, check audit logs, and look into &lt;tt class="docutils literal"&gt;audit2allow&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-ubuntu-and-debian"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id21"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ubuntu and Debian (still!) use LSB services for uWSGI. Because LSB services are awful, we’re going to set up our own systemd-based (native) service.&lt;/p&gt;
&lt;p&gt;Start by disabling the LSB service that comes with Ubuntu and Debian:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_dd1e735f67254cae9da665388b50a678-1"&gt;&lt;/a&gt;systemctl stop uwsgi-emperor
&lt;a name="rest_code_dd1e735f67254cae9da665388b50a678-2"&gt;&lt;/a&gt;systemctl disable uwsgi-emperor
&lt;/pre&gt;&lt;p&gt;Copy the &lt;tt class="docutils literal"&gt;.service&lt;/tt&gt; file from the &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.org/en/latest/Systemd.html#adding-the-emperor-to-systemd"&gt;uWSGI systemd documentation&lt;/a&gt; to &lt;tt class="docutils literal"&gt;/etc/systemd/system/emperor.uwsgi.service&lt;/tt&gt;.  Change the ExecStart line to:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_43531412dbfa465497f37ea5c222c06e-1"&gt;&lt;/a&gt;&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/uwsgi --ini /etc/uwsgi-emperor/emperor.ini&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can now reload systemd daemons and enable the services:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_8ec31fd3f45b43e9a5e5859cd1883d11-1"&gt;&lt;/a&gt;systemctl daemon-reload
&lt;a name="rest_code_8ec31fd3f45b43e9a5e5859cd1883d11-2"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_8ec31fd3f45b43e9a5e5859cd1883d11-3"&gt;&lt;/a&gt;systemctl reload nginx
&lt;a name="rest_code_8ec31fd3f45b43e9a5e5859cd1883d11-4"&gt;&lt;/a&gt;systemctl start emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;.  (Ignore
the warning about no request plugin)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="end-result"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id22"&gt;End result&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your web service should now be running at &lt;a class="reference external" href="http://localhost/"&gt;http://localhost/&lt;/a&gt; (or wherever you set up server to listen).&lt;/p&gt;
&lt;p&gt;If you used the demo application, you should see something like this (complete with the favicon and image greeting):&lt;/p&gt;
&lt;img alt="/images/nginx-uwsgi-demo.png" class="centered" src="https://chriswarrick.com/images/nginx-uwsgi-demo.png"&gt;
&lt;p&gt;If you want to test with cURL:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_d29e9353f0fd4402b337bcd12dc200bf-1"&gt;&lt;/a&gt;curl -v http://localhost/
&lt;a name="rest_code_d29e9353f0fd4402b337bcd12dc200bf-2"&gt;&lt;/a&gt;curl -I http://localhost/favicon.ico
&lt;a name="rest_code_d29e9353f0fd4402b337bcd12dc200bf-3"&gt;&lt;/a&gt;curl -I http://localhost/static/hello.png
&lt;/pre&gt;&lt;div class="section" id="troubleshooting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id23"&gt;Troubleshooting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hopefully, everything works. If it doesn’t:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check your nginx, system (&lt;tt class="docutils literal"&gt;journalctl&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;systemctl status SERVICE&lt;/tt&gt;) and uwsgi (&lt;tt class="docutils literal"&gt;/srv/myapp/uwsgi.log&lt;/tt&gt;) logs.&lt;/li&gt;
&lt;li&gt;Make sure you followed all instructions.&lt;/li&gt;
&lt;li&gt;If you get a default site, disable that site in nginx config (&lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; or your sites directory).&lt;/li&gt;
&lt;li&gt;If you have a firewall installed, make sure to open the ports your web server runs on (typically 80/443). For &lt;tt class="docutils literal"&gt;firewalld&lt;/tt&gt; (Fedora, CentOS):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_0e75ace5d0e342e1b5425ded9077954c-1"&gt;&lt;/a&gt;firewall-cmd --add-service http
&lt;a name="rest_code_0e75ace5d0e342e1b5425ded9077954c-2"&gt;&lt;/a&gt;firewall-cmd --add-service https
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;If it still does not work, feel free to ask in the comments, mentioning your distribution, installation method, and what doesn’t work.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This reflink gives you $10 in credit, which is enough to run a server for up to two months without paying a thing. I earn $15.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For the cheapest plan. If you’re in the EU (and thus have to pay VAT), or want DO to handle your backups, it will cost you a little more.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This app does not use templates, but you should in any real project. This app is meant to be as simple as possible.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Ansible</category><category>Arch Linux</category><category>Django</category><category>Flask</category><category>guide</category><category>Internet</category><category>Linux</category><category>nginx</category><category>Python</category><category>systemd</category><category>uWSGI</category><guid>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</guid><pubDate>Wed, 10 Feb 2016 14:00:00 GMT</pubDate></item><item><title>Rewriting a Flask app in Django</title><link>https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I spent Saturday on rewriting a Flask app in Django.  The app in question was
&lt;a class="reference external" href="https://users.getnikola.com/"&gt;Nikola Users&lt;/a&gt;, which is a very simple CRUD
app.  And yet, the Flask code was a mess, full of bugs and vulnerabilities.
Eight hours later, I had a fully functional Django app that did more and fixed
all problems.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="original-flask-app"&gt;
&lt;h2&gt;Original Flask app&lt;/h2&gt;
&lt;p&gt;The original Flask app had a ton of problems.  In order to make it anywhere
near useful, I would need to spend hours.  Here’s just a few of
them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;357 lines of spaghetti code (295 SLOC), all in one file&lt;/li&gt;
&lt;li&gt;No form data validation, no CSRF &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/#id2" id="id1"&gt;[1]&lt;/a&gt; protection (it did have XSS protection
though)&lt;/li&gt;
&lt;li&gt;Login using Mozilla Persona, which requries JavaScript, is a bit kludgey, and
feels desolate (and also had me store the admin e-mail list in code)&lt;/li&gt;
&lt;li&gt;Geopolitics issues: using country flags for languages&lt;/li&gt;
&lt;li&gt;A lot of things were implemented by hand&lt;/li&gt;
&lt;li&gt;SQLAlchemy is very verbose&lt;/li&gt;
&lt;li&gt;no DB migrations (makes enhancements harder)&lt;/li&gt;
&lt;li&gt;Languages implemented as a PostgreSQL integer array&lt;/li&gt;
&lt;li&gt;Adding a language required running a command-line script and &lt;strong&gt;restarting the
app&lt;/strong&gt; (languages were cached in Python dicts with no way to reload them from
the database; that would require talking through uWSGI anyway because there
were multiple processes involved)&lt;/li&gt;
&lt;li&gt;The templates were slightly hacky (the page title was set in each individual
template and not in the view code); menus hacked together in HTML with no
highlighting&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-rewrite"&gt;
&lt;h2&gt;The rewrite&lt;/h2&gt;
&lt;p&gt;I started the process by opening &lt;a class="reference external" href="https://docs.djangoproject.com/en/"&gt;Django documentation&lt;/a&gt;, with its wonderful
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/"&gt;tutorial&lt;/a&gt;.  Now, I have written a couple basic Django apps before, but
the majority of them didn’t do much.  In other words, I didn’t have a lot of experience.  Especially with taking user input and relationships.  It took me about 8 hours to get feature parity, and more.&lt;/p&gt;
&lt;p&gt;Getting all the features was really simple.  For example, to get a many-to-many
relationship for languages, I had to write just one line.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_1c7d690ab888430680417640428bb26e-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s it.  I didn’t have to run through complicated SQLAlchemy documentation,
which provides a &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_1_0/orm/basic_relationships.html#many-to-many"&gt;13-line solution&lt;/a&gt; to the same problem.&lt;/p&gt;
&lt;p&gt;Django also simplified New Relic integration, as the browser JS can be implemented
using Django template tags.&lt;/p&gt;
&lt;p&gt;Django is not without its problems, though.  I got a very cryptic traceback
when I did this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_50e08708beaf48b7b52053a8bd052e46-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;publish_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Publish e-mail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_50e08708beaf48b7b52053a8bd052e46-2"&gt;&lt;/a&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"BooleanField() got multiple values for argument 'required'"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The real problem with this code?  I forgot the &lt;tt class="docutils literal"&gt;label=&lt;/tt&gt; keyword.  The
problem is, the model API accepts this syntax — &lt;tt class="docutils literal"&gt;verbose_name&lt;/tt&gt; is the first
argument.  (I am not actually using the labels though, I write my own form
HTML)&lt;/p&gt;
&lt;p&gt;Still, the Django version is much cleaner.  And the best part of all?  There
are no magic global objects (&lt;tt class="docutils literal"&gt;g&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;session&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;request&lt;/tt&gt;) and
decorator-based views (which are a bit of syntax abuse IMO).&lt;/p&gt;
&lt;p&gt;In the end, I have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;382 lines of code (297 SLOC) over 6 files — much cleaner, and with less long lines&lt;/li&gt;
&lt;li&gt;form data validation (via Django), CSRF and XSS protection&lt;/li&gt;
&lt;li&gt;Login using Django built-in authentication, without JavaScript&lt;/li&gt;
&lt;li&gt;Language codes (granted, I could’ve done that really easily back in Flask)&lt;/li&gt;
&lt;li&gt;Tried-and-true implementations of common patterns&lt;/li&gt;
&lt;li&gt;Django models are much more readable and friendly&lt;/li&gt;
&lt;li&gt;Django-provided DB migrations (generated automatically!)&lt;/li&gt;
&lt;li&gt;Languages implemented using Django many-to-many relationships&lt;/li&gt;
&lt;li&gt;Adding a language is possible from the Django built-in admin panel and is
reflected immediately (no caching)&lt;/li&gt;
&lt;li&gt;Titles and menus in code&lt;/li&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;New features: featured sites; show only a specified language — were really easy to add&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I had some &lt;tt class="docutils literal"&gt;CSRF_ENABLED&lt;/tt&gt; variable, but it did not seem to be actually
used by anything.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Django</category><category>Flask</category><category>Internet</category><category>Nikola</category><category>Python</category><guid>https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/</guid><pubDate>Sun, 11 Oct 2015 15:24:43 GMT</pubDate></item><item><title>Static Site Generator Speed Test (Nikola, Pelican, Hexo, Octopress)</title><link>https://chriswarrick.com/blog/2015/07/23/ssg-speed-test/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I tested the speed of four static site generators: Nikola, Pelican, Hexo and Octopress, in a clean environment.  Spoiler alert: Nikola won.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; author is a developer and user of Nikola.  The test environments used were the same for all four generators.&lt;/p&gt;
&lt;div class="section" id="generators-tested"&gt;
&lt;h2&gt;Generators tested&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; v7.6.1, by Roberto Alsina, Chris Warrick and contributors; Python; MIT license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; v3.6.0, by Alexis Metaireau and contributors; Python; GNU AGPL license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hexo.io/"&gt;Hexo&lt;/a&gt; v3.1.1, by Tommy Chen and contributors; Node.js; MIT license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; v2.0, by Brandon Mathis and contributors; Ruby; MIT license (based on Jekyll)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Every site generator was set up in an identical &lt;strong&gt;clean&lt;/strong&gt; environment, using Ubuntu 15.04, x64, as a 512 MB DigitalOcean VM with a 20 GB SSD drive. The machine was updated, an user account with passwordless sudo was created, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;build-essential&lt;/span&gt;&lt;/tt&gt; was installed. Tests were run by an automated installer and timer, written in Bash and C, respectively (custom; source code is available). Pre-compiled wheels for lxml and Pillow were used for Nikola testing, because lxml cannot be compiled with less than 1.5 GB of RAM; they were built with &lt;tt class="docutils literal"&gt;pip wheel lxml pillow&lt;/tt&gt; outside of the testing environment (on a local VM). The machine was reimaged after every test. Lists of installed Python/Ruby/Node packages are available in the GitHub repo (see below).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="input"&gt;
&lt;h2&gt;Input&lt;/h2&gt;
&lt;p&gt;Every site generator was given the same set of 179 log files from #nikola on freenode. The raw logs contain 1209507 bytes (1.1 MiB) of plain text. The logs were processed into post files, which fit the format of each engine (reST or Markdown), containing mandatory metadata, an introductory paragraph and a code block (using &lt;tt class="docutils literal"&gt;::&lt;/tt&gt; for reST, four spaces for Markdown). One file had to be altered, because they contained the &lt;tt class="docutils literal"&gt;{{&lt;/tt&gt;  sequence, which was misinterpreted as internal templating by Hexo and Octopress — it was replaced by a harmless &lt;tt class="docutils literal"&gt;~~&lt;/tt&gt; sequence for all four generators.&lt;/p&gt;
&lt;p&gt;The generators used default config, with one exception: highlighting was disabled for Hexo. The highlighting would cause an unfair advantage (other generators did not automatically highlight the code boxes), and led to very high build times (see table 4 in comparison spreadsheet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build"&gt;
&lt;h2&gt;Build&lt;/h2&gt;
&lt;p&gt;Sites were built a total of 110 times, in 10 cycles of 11 builds each. The first build of a cycle was a fresh build, the remaining 10 were rebuilds. Sites and cache files were removed after each cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;Because Nikola and Hexo use incremental rebuilds, the results were compared in two groups: 11 and 10 runs.&lt;/p&gt;
&lt;div class="section" id="average-build-times-in-seconds"&gt;
&lt;h3&gt;Average build times (in seconds)&lt;/h3&gt;
&lt;table class="table table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Generator&lt;/th&gt;
&lt;th&gt;Average of 11 runs&lt;/th&gt;
&lt;th&gt;Average of 10 runs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;1&lt;/th&gt;
&lt;td&gt;Nikola&lt;/td&gt;
&lt;td&gt;2.38290&lt;/td&gt;
&lt;td&gt;2.06057&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;2&lt;/th&gt;
&lt;td&gt;Pelican&lt;/td&gt;
&lt;td&gt;2.61924&lt;/td&gt;
&lt;td&gt;2.62352&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;3&lt;/th&gt;
&lt;td&gt;Hexo&lt;/td&gt;
&lt;td&gt;6.27361&lt;/td&gt;
&lt;td&gt;6.21267&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;4&lt;/th&gt;
&lt;td&gt;Octopress&lt;/td&gt;
&lt;td&gt;9.57618&lt;/td&gt;
&lt;td&gt;9.47550&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="full-results"&gt;
&lt;h3&gt;Full results&lt;/h3&gt;
&lt;p class="lead"&gt;Full results are available in &lt;a class="reference external" href="https://chriswarrick.com/pub/ssg-test-results.ods"&gt;ods format&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-results-and-configuration"&gt;
&lt;h3&gt;Raw results and configuration&lt;/h3&gt;
&lt;p&gt;Raw results (&lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt; files from the test runner) and configuration is available in the &lt;a class="reference external" href="https://github.com/Kwpolska/ssg-test"&gt;GitHub repo&lt;/a&gt;. Log files and converted posts are not available publicly; however, they can be provided to interested parties (&lt;a class="reference external" href="https://chriswarrick.com/contact/"&gt;contact me&lt;/a&gt; to obtain them).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="questions-and-answers"&gt;
&lt;h2&gt;Questions and answers&lt;/h2&gt;
&lt;div class="section" id="why-not-plain-jekyll"&gt;
&lt;h3&gt;Why not plain Jekyll?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Plain Jekyll was disqualified&lt;/strong&gt; on the basis of missing many features other generators have, leading to an unfair advantage. The aim of this test was to provide similar setups for each of the four generators. Jekyll generates a very basic site that lacks some elements; a Jekyll site does not have paginated indexes, (partial) post text on indexes, any sort of archives, etc. A Jekyll site contains only one CSS file, index.html, feed.xml, and the log posts. On the other hand, sites generated by Pelican, Nikola and Hexo contain more files, which makes the builds longer and the website experience richer (archives, JS, sitemaps, tag listings).&lt;/p&gt;
&lt;p&gt;On the basis of the above, &lt;strong&gt;Octopress&lt;/strong&gt; was chosen to represent the Jekyll universe at large. Octopress sites have more assets, a sitemap, archives and category listings — making it comparable to the other four contenders. However, tests were performed for Jekyll. The average result from 11 builds was 2.22118, while the average result from 10 builds was 2.23903. The result would land Jekyll on the 1st place for 11 builds, and on the 2nd place for 10 builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-not-myfavoritessg"&gt;
&lt;h3&gt;Why not $MYFAVORITESSG?&lt;/h3&gt;
&lt;p&gt;I tested only four popular generators that were easy enough to set up. I could easily extend the set if I had time and friendly enough documentation to do so. I can add a SSG, provided that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it’s easy to configure&lt;/li&gt;
&lt;li&gt;it has a default config that provides a working site with a feature set comparable to other SSGs tested here (see &lt;a class="reference internal" href="https://chriswarrick.com/blog/2015/07/23/ssg-speed-test/#why-not-plain-jekyll"&gt;Why not plain Jekyll?&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>Hexo</category><category>jekyll</category><category>Nikola</category><category>Octopress</category><category>Pelican</category><category>Python</category><category>test</category><category>webmastering</category><guid>https://chriswarrick.com/blog/2015/07/23/ssg-speed-test/</guid><pubDate>Thu, 23 Jul 2015 15:10:00 GMT</pubDate></item><item><title>New project: upass — console UI for pass</title><link>https://chriswarrick.com/blog/2015/07/06/upass/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.passwordstore.org/"&gt;pass&lt;/a&gt; is the standard Unix password manager.
And I just wrote a slightly friendlier, clickier interface with urwid and
Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/upass/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Project page
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/galleries/upass/" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-picture-o"&gt;&lt;/i&gt;
Screenshots
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/upass" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/upass" class="btn btn-default" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; is using urwid, which means it has a friendly full-screen console
interface.  It shows your directory structure (with flattened subdirectories)
and calls &lt;tt class="docutils literal"&gt;pass&lt;/tt&gt; when requested.  (It does not use &lt;tt class="docutils literal"&gt;pass &lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/tt&gt; due to
subprocessing issues, instead opting for a manual copy — note that the
clipboard &lt;strong&gt;will not be cleared&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;If you want to see how it looks, check out &lt;a class="reference external" href="https://chriswarrick.com/galleries/upass/"&gt;the screenshots gallery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; is under development (and was initially written in one evening).  If you have
ideas, bugs, or want to help, hop over to the &lt;a class="reference external" href="https://github.com/Kwpolska/upass"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; from &lt;a class="reference external" href="https://pypi.python.org/pypi/upass"&gt;PyPI&lt;/a&gt; (with &lt;tt class="docutils literal"&gt;pip install upass&lt;/tt&gt;). Arch Linux
users can install the &lt;tt class="docutils literal"&gt;upass&lt;/tt&gt; package from the AUR.&lt;/p&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>Linux</category><category>password</category><category>projects</category><category>Python</category><category>upass</category><guid>https://chriswarrick.com/blog/2015/07/06/upass/</guid><pubDate>Mon, 06 Jul 2015 12:30:00 GMT</pubDate></item></channel></rss>