<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about blog)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/blog.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 09 Feb 2020 14:48:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Static Site Generator Speed Test (Nikola, Pelican, Hexo, Octopress)</title><link>https://chriswarrick.com/blog/2015/07/23/ssg-speed-test/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I tested the speed of four static site generators: Nikola, Pelican, Hexo and Octopress, in a clean environment.  Spoiler alert: Nikola won.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; author is a developer and user of Nikola.  The test environments used were the same for all four generators.&lt;/p&gt;
&lt;div class="section" id="generators-tested"&gt;
&lt;h2&gt;Generators tested&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; v7.6.1, by Roberto Alsina, Chris Warrick and contributors; Python; MIT license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; v3.6.0, by Alexis Metaireau and contributors; Python; GNU AGPL license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hexo.io/"&gt;Hexo&lt;/a&gt; v3.1.1, by Tommy Chen and contributors; Node.js; MIT license&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; v2.0, by Brandon Mathis and contributors; Ruby; MIT license (based on Jekyll)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Every site generator was set up in an identical &lt;strong&gt;clean&lt;/strong&gt; environment, using Ubuntu 15.04, x64, as a 512 MB DigitalOcean VM with a 20 GB SSD drive. The machine was updated, an user account with passwordless sudo was created, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;build-essential&lt;/span&gt;&lt;/tt&gt; was installed. Tests were run by an automated installer and timer, written in Bash and C, respectively (custom; source code is available). Pre-compiled wheels for lxml and Pillow were used for Nikola testing, because lxml cannot be compiled with less than 1.5 GB of RAM; they were built with &lt;tt class="docutils literal"&gt;pip wheel lxml pillow&lt;/tt&gt; outside of the testing environment (on a local VM). The machine was reimaged after every test. Lists of installed Python/Ruby/Node packages are available in the GitHub repo (see below).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="input"&gt;
&lt;h2&gt;Input&lt;/h2&gt;
&lt;p&gt;Every site generator was given the same set of 179 log files from #nikola on freenode. The raw logs contain 1209507 bytes (1.1 MiB) of plain text. The logs were processed into post files, which fit the format of each engine (reST or Markdown), containing mandatory metadata, an introductory paragraph and a code block (using &lt;tt class="docutils literal"&gt;::&lt;/tt&gt; for reST, four spaces for Markdown). One file had to be altered, because they contained the &lt;tt class="docutils literal"&gt;{{&lt;/tt&gt;  sequence, which was misinterpreted as internal templating by Hexo and Octopress — it was replaced by a harmless &lt;tt class="docutils literal"&gt;~~&lt;/tt&gt; sequence for all four generators.&lt;/p&gt;
&lt;p&gt;The generators used default config, with one exception: highlighting was disabled for Hexo. The highlighting would cause an unfair advantage (other generators did not automatically highlight the code boxes), and led to very high build times (see table 4 in comparison spreadsheet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build"&gt;
&lt;h2&gt;Build&lt;/h2&gt;
&lt;p&gt;Sites were built a total of 110 times, in 10 cycles of 11 builds each. The first build of a cycle was a fresh build, the remaining 10 were rebuilds. Sites and cache files were removed after each cycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;Because Nikola and Hexo use incremental rebuilds, the results were compared in two groups: 11 and 10 runs.&lt;/p&gt;
&lt;div class="section" id="average-build-times-in-seconds"&gt;
&lt;h3&gt;Average build times (in seconds)&lt;/h3&gt;
&lt;table class="table table-bordered table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Generator&lt;/th&gt;
&lt;th&gt;Average of 11 runs&lt;/th&gt;
&lt;th&gt;Average of 10 runs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;1&lt;/th&gt;
&lt;td&gt;Nikola&lt;/td&gt;
&lt;td&gt;2.38290&lt;/td&gt;
&lt;td&gt;2.06057&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;2&lt;/th&gt;
&lt;td&gt;Pelican&lt;/td&gt;
&lt;td&gt;2.61924&lt;/td&gt;
&lt;td&gt;2.62352&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;3&lt;/th&gt;
&lt;td&gt;Hexo&lt;/td&gt;
&lt;td&gt;6.27361&lt;/td&gt;
&lt;td&gt;6.21267&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th scope="row"&gt;4&lt;/th&gt;
&lt;td&gt;Octopress&lt;/td&gt;
&lt;td&gt;9.57618&lt;/td&gt;
&lt;td&gt;9.47550&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="full-results"&gt;
&lt;h3&gt;Full results&lt;/h3&gt;
&lt;p class="lead"&gt;Full results are available in &lt;a class="reference external" href="https://chriswarrick.com/pub/ssg-test-results.ods"&gt;ods format&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-results-and-configuration"&gt;
&lt;h3&gt;Raw results and configuration&lt;/h3&gt;
&lt;p&gt;Raw results (&lt;tt class="docutils literal"&gt;.csv&lt;/tt&gt; files from the test runner) and configuration is available in the &lt;a class="reference external" href="https://github.com/Kwpolska/ssg-test"&gt;GitHub repo&lt;/a&gt;. Log files and converted posts are not available publicly; however, they can be provided to interested parties (&lt;a class="reference external" href="https://chriswarrick.com/contact/"&gt;contact me&lt;/a&gt; to obtain them).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="questions-and-answers"&gt;
&lt;h2&gt;Questions and answers&lt;/h2&gt;
&lt;div class="section" id="why-not-plain-jekyll"&gt;
&lt;h3&gt;Why not plain Jekyll?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Plain Jekyll was disqualified&lt;/strong&gt; on the basis of missing many features other generators have, leading to an unfair advantage. The aim of this test was to provide similar setups for each of the four generators. Jekyll generates a very basic site that lacks some elements; a Jekyll site does not have paginated indexes, (partial) post text on indexes, any sort of archives, etc. A Jekyll site contains only one CSS file, index.html, feed.xml, and the log posts. On the other hand, sites generated by Pelican, Nikola and Hexo contain more files, which makes the builds longer and the website experience richer (archives, JS, sitemaps, tag listings).&lt;/p&gt;
&lt;p&gt;On the basis of the above, &lt;strong&gt;Octopress&lt;/strong&gt; was chosen to represent the Jekyll universe at large. Octopress sites have more assets, a sitemap, archives and category listings — making it comparable to the other four contenders. However, tests were performed for Jekyll. The average result from 11 builds was 2.22118, while the average result from 10 builds was 2.23903. The result would land Jekyll on the 1st place for 11 builds, and on the 2nd place for 10 builds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-not-myfavoritessg"&gt;
&lt;h3&gt;Why not $MYFAVORITESSG?&lt;/h3&gt;
&lt;p&gt;I tested only four popular generators that were easy enough to set up. I could easily extend the set if I had time and friendly enough documentation to do so. I can add a SSG, provided that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it’s easy to configure&lt;/li&gt;
&lt;li&gt;it has a default config that provides a working site with a feature set comparable to other SSGs tested here (see &lt;a class="reference internal" href="https://chriswarrick.com/blog/2015/07/23/ssg-speed-test/#why-not-plain-jekyll"&gt;Why not plain Jekyll?&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>Hexo</category><category>jekyll</category><category>Nikola</category><category>Octopress</category><category>Pelican</category><category>Python</category><category>test</category><category>webmastering</category><guid>https://chriswarrick.com/blog/2015/07/23/ssg-speed-test/</guid><pubDate>Thu, 23 Jul 2015 15:10:00 GMT</pubDate></item><item><title>Nikola — The Best Blog Engine Ever!</title><link>https://chriswarrick.com/blog/2013/02/08/nikola-the-best-blog-engine-ever/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently found out about &lt;a class="reference external" href="http://nikola.ralsina.com.ar/"&gt;Nikola&lt;/a&gt; (through &lt;a class="reference external" href="http://planet.python.org/"&gt;Planet Python&lt;/a&gt;).  It is awesome,
even better than Hyde.  Why?  Right after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A lively community and an awesome lead developer, &lt;a class="reference external" href="http://ralsina.com.ar/"&gt;Roberto Alsina&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Actively developed (last commit to Hyde was &lt;strong&gt;11 months ago&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Easily extensible.&lt;/li&gt;
&lt;li&gt;Ships with the Bootstrap style, to which I planned to migrate (and I did)&lt;/li&gt;
&lt;li&gt;reStructuredText, Markdown, Textile, … input.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How?&lt;/h2&gt;
&lt;blockquote&gt;&lt;p&gt;After you have Nikola installed:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Create a site:&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;nikola init mysite&lt;/tt&gt;&lt;/dd&gt;
&lt;dt&gt;Create a post:&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;nikola new_post&lt;/tt&gt;&lt;/dd&gt;
&lt;dt&gt;Edit the post:&lt;/dt&gt;
&lt;dd&gt;The filename should be in the output of the previous command.&lt;/dd&gt;
&lt;dt&gt;Build the site:&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;nikola build&lt;/tt&gt;&lt;/dd&gt;
&lt;dt&gt;Start the test server:&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;nikola serve&lt;/tt&gt;&lt;/dd&gt;
&lt;dt&gt;See the site:&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;That should get you going. If you want to know more, this manual will always be
here for you.&lt;/p&gt;
&lt;small&gt;&lt;cite&gt;&lt;a href="http://nikola.ralsina.com.ar/handbook.html"&gt;The Nikola
Handbook&lt;/a&gt; by Roberto Alsina&lt;/cite&gt;&lt;/small&gt;&lt;/blockquote&gt;&lt;p&gt;That’s how easy it is.   Nikola has many more useful features.&lt;/p&gt;
&lt;p&gt;And sure, I had to manually fix up all the posts because I decided to switch to
RST, but that’s not a problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plans-for-the-future"&gt;
&lt;h2&gt;Plans for the future&lt;/h2&gt;
&lt;p&gt;I did transition the blog, but not everything is done yet.  I need to create a
&lt;strong&gt;Contact form&lt;/strong&gt; and a &lt;strong&gt;Project page&lt;/strong&gt;.  Both should be done by Sunday.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>Nikola</category><category>Python</category><guid>https://chriswarrick.com/blog/2013/02/08/nikola-the-best-blog-engine-ever/</guid><pubDate>Fri, 08 Feb 2013 13:01:51 GMT</pubDate></item><item><title>A New Engine… Again (And A Few Other Changes)</title><link>https://chriswarrick.com/blog/2011/10/20/a-new-engine-again/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Update 2013-02-07: Now running Nikola.  Hyde was a mess.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;&lt;/div&gt;</description><category>blog</category><category>hyde</category><category>jekyll</category><guid>https://chriswarrick.com/blog/2011/10/20/a-new-engine-again/</guid><pubDate>Thu, 20 Oct 2011 19:00:00 GMT</pubDate></item><item><title>Polish Version</title><link>https://chriswarrick.com/blog/2011/02/07/polish-version/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Update: removed.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;It’s not even worth leaving it here.&lt;/p&gt;&lt;/div&gt;</description><category>blog</category><category>jekyll</category><category>polish</category><guid>https://chriswarrick.com/blog/2011/02/07/polish-version/</guid><pubDate>Sun, 06 Feb 2011 23:00:00 GMT</pubDate></item><item><title>HTML5 Transition</title><link>https://chriswarrick.com/blog/2011/01/22/html5-transition/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;span&gt;&lt;figure&gt;&lt;a href="http://www.w3.org/html/logo/"&gt;
&lt;img src="http://www.w3.org/html/logo/badge/html5-badge-h-css3-semantics.png" alt="HTML5 Powered with CSS3 / Styling, and Semantics" title="HTML5 Powered with CSS3 / Styling, and Semantics"&gt;
&lt;/a&gt;&lt;/figure&gt;Recently, the &lt;a href="http://www.w3.org/html/logo"&gt;HTML5 logo&lt;/a&gt; was published. As W3C states, &lt;emph&gt;[i]t stands strong and true, resilient and universal as the markup you write. [...] And it certainly doesn't use tables for layout.&lt;/emph&gt; The logo’s site presents you with many information about HTML5, the new possibilities and the new logo. Due to that, I decided to make use of HTML5. Right now, the blog is using the HTML5 semantics and CSS3.&lt;!-- TEASER_END --&gt;&lt;/span&gt;</description><category>blog</category><category>HTML5</category><category>webmastering</category><guid>https://chriswarrick.com/blog/2011/01/22/html5-transition/</guid><pubDate>Fri, 21 Jan 2011 23:00:00 GMT</pubDate></item><item><title>Jekyll, Welcome Home. + OMG I WROTE SOMETHING</title><link>https://chriswarrick.com/blog/2010/12/12/jekyll-welcome-home/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Two posts for the price of one, right after the break.  What’s funny is, both
are out of date, as this blog has went through &lt;a class="reference external" href="http://kwpolska.tk/blog/2011/10/20/a-new-engine-again/"&gt;Hyde&lt;/a&gt; and is currently powered
by &lt;a class="reference external" href="http://kwpolska.tk/blog/2013/02/08/nikola-the-best-blog-engine-ever/"&gt;Nikola&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="jekyll-welcome-home-december-12th-2010"&gt;
&lt;h2&gt;“Jekyll, Welcome Home.”, December 12th, 2010&lt;/h2&gt;
&lt;p&gt;The Kw’s Blog was redone. The old blog was run by WordPress, Constructor theme and XHTML posts. Now, I’m using Jekyll and Markdown posts. That’s better. All the content was imported and converted to Markdown (except for 3 posts, they are available in HTML forms).  You can see a &lt;a class="reference external" href="http://kwcdn.tk/blog-content/htmlvsmd.html"&gt;comparison of Jekyll and WordPress posts&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;And even better: you can see “this” instead of "this" (currently only in this post, it will not be added into older ones).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="omg-i-wrote-something-december-11th-2010"&gt;
&lt;h2&gt;“OMG I WROTE SOMETHING”, December 11th, 2010&lt;/h2&gt;
&lt;p&gt;This is a jekyll post. &lt;em&gt;I&lt;/em&gt; can use Markdown. &lt;strong&gt;You&lt;/strong&gt; cannot. And for the sake of it, I imported the old blog entries. I had to modify them A LOT. I hope everything will work fine.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>blog</category><category>jekyll</category><guid>https://chriswarrick.com/blog/2010/12/12/jekyll-welcome-home/</guid><pubDate>Sat, 11 Dec 2010 23:00:00 GMT</pubDate></item><item><title>Language change + Kw's Devel Site</title><link>https://chriswarrick.com/blog/2010/10/02/language-change-kws-devel-site/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;A giant update: The Kw’s Devel Site is now dead.&lt;/p&gt;
&lt;p&gt;Well, the blog is gonna end with Polish articles. It will be in English. The
next thing is the Kw’s Devel Site, a place for all my development stuff.
You &lt;strong&gt;cannot&lt;/strong&gt; visit it anymore.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;&lt;/div&gt;</description><category>blog</category><category>wordpress</category><guid>https://chriswarrick.com/blog/2010/10/02/language-change-kws-devel-site/</guid><pubDate>Fri, 01 Oct 2010 22:00:00 GMT</pubDate></item><item><title>Some of The Year 2010 Is Archived.</title><link>https://chriswarrick.com/blog/2010/00/00/archived/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Are you looking for posts from 2010?  Sorry, but some of them (specifically, the ones in Polish) are removed.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;&lt;/div&gt;</description><category>blog</category><category>wordpress</category><guid>https://chriswarrick.com/blog/2010/00/00/archived/</guid><pubDate>Thu, 31 Dec 2009 23:00:00 GMT</pubDate></item></channel></rss>