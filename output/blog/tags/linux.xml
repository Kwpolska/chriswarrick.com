<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about Linux)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 24 Apr 2020 13:07:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Spawning subprocesses smartly and securely</title><link>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;As part of your code, you may be inclined to call a command to do
something. But is it always a good idea? How to do it safely? What happens
behind the scenes?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This article is written from a general perspective, with a Unix/C bias and a
very slight Python bias. The problems mentioned apply to all languages in most
environments, including Windows.&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#use-the-right-tool-for-the-job" id="id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#dont-spawn-subprocesses-if-theres-an-alternative" id="id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#security-considerations-shells-spaces-and-command-injection" id="id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#tl-dr-how-to-do-this-properly-in-your-language-of-choice" id="id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#the-part-where-i-pretend-i-know-something-about-windows" id="id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-the-right-tool-for-the-job"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id9"&gt;Use the right tool for the job&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By calling another process, you introduce a third-party dependency.
That dependency isn’t controlled by your code, and your code becomes more fragile.
The problems include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the program is not installed, or even available, for the user’s OS of choice&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is not in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; your process gets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the hard-coded path is not correct on the end user’s system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program is in a different version (eg. GNU vs. BSD, updates/patches),
which means different option names or other behaviors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the program’s output is not what you expected due to user config (including
locale)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error reporting is based on numeric exit codes, and the meaning of those
differs between programs (&lt;em&gt;if&lt;/em&gt; they have meaning besides 0/1 in the first
place)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the other hand, if your code uses a lot of subprocesses, perhaps you should
stay with Bash. You can do the harder parts with Python, Ruby, or some other
language by calling them from within your Bash script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dont-spawn-subprocesses-if-theres-an-alternative"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id10"&gt;Don’t spawn subprocesses if there’s an alternative&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spawning a subprocess always incurs a (minor) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id5" id="id1"&gt;1&lt;/a&gt; performance hit minor
compared to the alternatives. With that in mind, and the resiliency issues
listed above, you should always try to find an alternative for the
external command.&lt;/p&gt;
&lt;p&gt;The simplest ones are the basic Unix utilities. Replace &lt;code class="docutils literal"&gt;grep&lt;/code&gt;, &lt;code class="docutils literal"&gt;sed&lt;/code&gt; and
&lt;code class="docutils literal"&gt;awk&lt;/code&gt; with string operations and regular expressions. Filesystem utilities
will have equivalents — for Python, in &lt;code class="docutils literal"&gt;os&lt;/code&gt; or &lt;code class="docutils literal"&gt;shutil&lt;/code&gt;. Your language of
choice can also handle things like networking (don’t call &lt;code class="docutils literal"&gt;curl&lt;/code&gt;), file
compression, working with date/time…&lt;/p&gt;
&lt;p&gt;Similarly, you should check if there are packages available that already do
what you want — library bindings or re-implementations. And if there isn’t,
perhaps you could help the world by writing one of those and sharing it?&lt;/p&gt;
&lt;p&gt;One more important thing: if the program uses the same language as your code,
then you should try to import the code and run it from the same process instead
of spawning a process, if this is feasible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-considerations-shells-spaces-and-command-injection"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id11"&gt;Security considerations: shells, spaces, and command injection&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We come to the most important part of this article: how to spawn subprocesses
without compromising your system. When you spawn a subprocess on a typical Unix
system,  &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; is called, and your process is copied. Many modern Unix
systems have a copy-on-write implementation of that syscall, meaning that the
operation does not result in copying all the memory of the host process over.
Forking is (almost) immediately followed by calling &lt;code class="docutils literal"&gt;execve()&lt;/code&gt; (or a helper
function from the exec family) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id6" id="id2"&gt;2&lt;/a&gt; in the child process — that function
&lt;em&gt;transforms the calling process into a new process&lt;/em&gt; &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id7" id="id3"&gt;3&lt;/a&gt;. This technique is
called &lt;em&gt;fork-exec&lt;/em&gt; and is the typical way to spawn a new process on Unix. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id8" id="id4"&gt;4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two ways to access this API, from the C perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;directly, by calling &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;), and providing an array of
arguments passed to the process, or&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;through the shell (&lt;code class="docutils literal"&gt;sh&lt;/code&gt;), usually by calling &lt;code class="docutils literal"&gt;system()&lt;/code&gt;. As Linux’s
manpage for &lt;code class="docutils literal"&gt;system(3)&lt;/code&gt; puts it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;system()&lt;/code&gt; library function uses &lt;code class="docutils literal"&gt;fork(2)&lt;/code&gt; to create a child process that executes the shell command specified in command using &lt;code class="docutils literal"&gt;execl(3)&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre class="code c"&gt;&lt;a name="rest_code_75b49cadacf842d786dc608d617515bb-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;execl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/bin/sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"sh"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you go through the shell, you pass one string argument, whereas &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;exec*()&lt;/span&gt;&lt;/code&gt; demands you to specify arguments separately. Let’s write a sample program to print all the arguments it receives. I’ll do it in Python to get a more readable output.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_8dbedf8f94cc47b2a218cd3cb843b86f-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;
&lt;a name="rest_code_8dbedf8f94cc47b2a218cd3cb843b86f-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;a name="rest_code_8dbedf8f94cc47b2a218cd3cb843b86f-3"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Let’s see what appears:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-1"&gt;&lt;/a&gt;$ ./argv.py foo bar
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-2"&gt;&lt;/a&gt;['./argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-3"&gt;&lt;/a&gt;$ ./argv.py 'foo bar'
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-4"&gt;&lt;/a&gt;['./argv.py', 'foo bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-5"&gt;&lt;/a&gt;$ ./argv.py foo\ bar baz
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-6"&gt;&lt;/a&gt;['./argv.py', 'foo bar', 'baz']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-8"&gt;&lt;/a&gt;$ ./argv.py $(date)
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-9"&gt;&lt;/a&gt;['./argv.py', 'Sat', 'Sep', '2', '16:54:52', 'CEST', '2017']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-10"&gt;&lt;/a&gt;$ ./argv.py "$(date)"
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-11"&gt;&lt;/a&gt;['./argv.py', 'Sat Sep  2 16:54:52 CEST 2017']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-13"&gt;&lt;/a&gt;$ ./argv.py /usr/*
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-14"&gt;&lt;/a&gt;['./argv.py', '/usr/X11', '/usr/X11R6', '/usr/bin', '/usr/include', '/usr/lib', '/usr/libexec', '/usr/local', '/usr/sbin', '/usr/share', '/usr/standalone']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-15"&gt;&lt;/a&gt;$ ./argv.py "/usr/*"
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-16"&gt;&lt;/a&gt;['./argv.py', '/usr/*']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-18"&gt;&lt;/a&gt;$ ./argv.py $EDITOR
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-19"&gt;&lt;/a&gt;['./argv.py', 'nvim']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-21"&gt;&lt;/a&gt;$ $PWD/argv.py foo bar
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-22"&gt;&lt;/a&gt;['/Users/kwpolska/Desktop/blog/subprocess/argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-23"&gt;&lt;/a&gt;$ ./argv.py a{b,c}d
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-24"&gt;&lt;/a&gt;['./argv.py', 'abd', 'acd']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-26"&gt;&lt;/a&gt;$ python argv.py foo bar | cat
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-27"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-28"&gt;&lt;/a&gt;$ python argv.py foo bar &amp;gt; foo.txt
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-29"&gt;&lt;/a&gt;$ cat foo.txt
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-30"&gt;&lt;/a&gt;['argv.py', 'foo', 'bar']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-32"&gt;&lt;/a&gt;$ ./argv.py foo; ls /usr
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-33"&gt;&lt;/a&gt;['./argv.py', 'foo']
&lt;a name="rest_code_cd70c9c23da2414e894b36d3fd7f80ba-34"&gt;&lt;/a&gt;X11@        X11R6@      bin/        include/    lib/        libexec/    local/      sbin/       share/      standalone/
&lt;/pre&gt;&lt;p&gt;As you can see, the following things are handled by the shell (the process is unaware of this occurring):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;quotes and escapes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding expressions in braces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;expanding variables&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wildcards (glob, &lt;code class="docutils literal"&gt;*&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;redirections and pipes (&lt;code class="docutils literal"&gt;&amp;gt; &amp;gt;&amp;gt; |&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command substitution (backticks or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;$(…)&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running multiple commands on the same line (&lt;code class="docutils literal"&gt;; &amp;amp;&amp;amp; || &amp;amp;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list is full of potential vulnerabilities. If end users are in control of
the arguments passed, and you go through the shell, they can
&lt;strong&gt;execute arbitrary commands&lt;/strong&gt; or even &lt;strong&gt;get full shell access&lt;/strong&gt;. Even in other
cases, you’ll have to &lt;em&gt;depend on the shell’s parsing&lt;/em&gt;, which introduces an
unnecessary indirection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-how-to-do-this-properly-in-your-language-of-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id12"&gt;TL;DR: How to do this properly in your language of choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To ensure spawning subprocess is done securely, &lt;strong&gt;do not use the shell in between&lt;/strong&gt;. If you need any of the operations I listed above as part of your command — wildcards, pipes, etc. — you will need to take care of them in your code; most languages have those features built-in.&lt;/p&gt;
&lt;dl class="dl-horizontal simple"&gt;
&lt;dt&gt;In C (Unix)&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Perform fork-exec by yourself, or use &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;. This also lets you communicate with the process if you open a pipe and make it stdout of the child process. Never use &lt;code class="docutils literal"&gt;system()&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Python&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use the subprocess module. Always pass &lt;code class="docutils literal"&gt;shell=False&lt;/code&gt; and give it a &lt;em&gt;list&lt;/em&gt; of arguments. With asyncio, use &lt;code class="docutils literal"&gt;asyncio.create_subprocess_exec&lt;/code&gt; (and not &lt;code class="docutils literal"&gt;_shell&lt;/code&gt;), but note it takes &lt;code class="docutils literal"&gt;*args&lt;/code&gt; and not a list. Never use &lt;code class="docutils literal"&gt;os.system&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.popen&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Ruby&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;IO.popen&lt;/code&gt;. Pass multiple arguments to &lt;code class="docutils literal"&gt;system()&lt;/code&gt; (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system(["ls",&lt;/span&gt; &lt;span class="pre"&gt;"ls"])&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;system("ls",&lt;/span&gt; &lt;span class="pre"&gt;"-l")&lt;/span&gt;&lt;/code&gt;). Never use &lt;code class="docutils literal"&gt;%x{command}&lt;/code&gt; or backticks.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Java&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pass arrays to &lt;code class="docutils literal"&gt;Runtime.exec&lt;/code&gt;. Pass multiple arguments or list to &lt;code class="docutils literal"&gt;ProcessBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In PHP&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;All the standard methods go through the shell. Try &lt;code class="docutils literal"&gt;escapeshellcmd()&lt;/code&gt;, &lt;code class="docutils literal"&gt;escapeshellarg()&lt;/code&gt; — or better, switch to Python. Or anything, really.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Go&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;os/exec&lt;/code&gt; and &lt;code class="docutils literal"&gt;os.StartProcess&lt;/code&gt; are safe.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;In Node.js&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Use &lt;code class="docutils literal"&gt;child_process.execFile&lt;/code&gt; or &lt;code class="docutils literal"&gt;child_process.spawn&lt;/code&gt; with &lt;code class="docutils literal"&gt;shell&lt;/code&gt; set to false.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Elsewhere&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;You should be able to specify multiple strings (using variadic arguments,
arrays, or otherwise standard data structures of your language of choice) as
the command line. Otherwise, you might be running into something
shell-related.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="the-part-where-i-pretend-i-know-something-about-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id13"&gt;The part where I pretend I know something about Windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On Windows, argument lists are always passed to processes as strings (Python
joins them semi-intelligently if it gets a list). Redirections and variables
work in shell mode, but globs (asterisks) are always left for the called
process to handle.&lt;/p&gt;
&lt;p&gt;Some useful functions are implemented as shell built-ins — in that case, you
need to call it via the shell.&lt;/p&gt;
&lt;p&gt;Internals: There is no &lt;code class="docutils literal"&gt;fork()&lt;/code&gt; on Windows. Instead, &lt;code class="docutils literal"&gt;CreateProcess()&lt;/code&gt;,
&lt;code class="docutils literal"&gt;ShellExecute()&lt;/code&gt;, or lower-level &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;spawn*()&lt;/span&gt;&lt;/code&gt; functions are used. &lt;code class="docutils literal"&gt;cmd.exe
/c&lt;/code&gt; is called in shell calls.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id5"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Unless your operating system does not implement copy-on-write forking — in that case, you might even run out of memory if you use too much of it.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id6"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The function that does the real work is &lt;code class="docutils literal"&gt;execve()&lt;/code&gt;, which takes an exact path, an array of arguments, and takes environment variables as input. Other variants can also perform a &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; search, take argv as variadic arguments, and inherit environment from the current process. &lt;code class="docutils literal"&gt;execl()&lt;/code&gt; does the last two.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id7"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id3"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Quoted from &lt;code class="docutils literal"&gt;execve(2)&lt;/code&gt; &lt;a class="reference external" href="https://www.freebsd.org/cgi/man.cgi?query=execve&amp;amp;sektion=2"&gt;man page&lt;/a&gt; from FreeBSD.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id8"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/#id4"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;An alternative is &lt;code class="docutils literal"&gt;posix_spawn()&lt;/code&gt;, but it usually does fork-exec, unless your platform does not support forking.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>best practices</category><category>C</category><category>devel</category><category>guide</category><category>Linux</category><category>Python</category><category>security</category><category>subprocess</category><category>Unix</category><guid>https://chriswarrick.com/blog/2017/09/02/spawning-subprocesses-smartly-and-securely/</guid><pubDate>Sat, 02 Sep 2017 18:40:00 GMT</pubDate></item><item><title>Deploying Python Web Applications with nginx and uWSGI Emperor</title><link>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You’ve just written a great Python web application. Now, you want to share it with the world. In order to do that, you need a server, and some software to do that for you.&lt;/p&gt;
&lt;p&gt;The following is a comprehensive guide on how to accomplish that, on multiple Linux-based operating systems, using nginx and uWSGI Emperor. It doesn’t force you to use any specific web framework — Flask, Django, Pyramid, Bottle will all work. Written for Ubuntu, Debian, Fedora, CentOS 7 and Arch Linux (should be helpful for other systems, too). Now with an Ansible Playbook.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Revision 7b (2020-04-24): works with Ubuntu 20.04; previous Revision 7a (2020-02-03): Move virtual environment to separate venv folder to improve Python upgrades (venvs should be ephemeral); add Docker section&lt;/em&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;CI status for the associated Ansible Playbook: &lt;img alt="ci-status" src="https://github.com/Kwpolska/ansible-nginx-uwsgi/workflows/CI%20in%20Docker%20for%20ansible-nginx-uwsgi%20%28pyweb%29/badge.svg"&gt;&lt;/p&gt;
&lt;p&gt;For easy linking, I set up some aliases: &lt;a class="reference external" href="https://go.chriswarrick.com/pyweb"&gt;https://go.chriswarrick.com/pyweb&lt;/a&gt; and &lt;a class="reference external" href="https://go.chriswarrick.com/uwsgi-tut"&gt;https://go.chriswarrick.com/uwsgi-tut&lt;/a&gt; (powered by a Django web application, deployed with nginx and uWSGI!).&lt;/p&gt;
&lt;div class="contents alert alert-primary float-md-right topic" id="contents"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#prerequisites" id="id3"&gt;Prerequisites&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#automate-everything-ansible-playbook" id="id4"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#how-to-use" id="id5"&gt;How to use&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#the-manual-guide" id="id6"&gt;The manual guide&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#getting-started" id="id7"&gt;Getting started&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#preparing-your-application" id="id8"&gt;Preparing your application&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#configuring-uwsgi-and-nginx" id="id9"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#uwsgi-configuration" id="id10"&gt;uWSGI configuration&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#nginx-configuration" id="id11"&gt;nginx configuration&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#service-setup" id="id12"&gt;Service setup&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-arch-linux" id="id13"&gt;For Arch Linux&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-fedora-and-centos" id="id14"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#for-ubuntu-and-debian" id="id15"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result" id="id16"&gt;End result&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#troubleshooting" id="id17"&gt;Troubleshooting&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#can-i-use-docker" id="id18"&gt;Can I use Docker?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id3"&gt;Prerequisites&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In order to deploy your web application, you need a server that gives you root and ssh access — in other words, a VPS (or a dedicated server, or a datacenter lease…). If you’re looking for a great VPS service for a low price, I recommend &lt;a class="reference external" href="https://www.hetzner.com/cloud"&gt;Hetzner Cloud&lt;/a&gt;, which offers a pretty good entry-level VPS for €2.49 + VAT / month (with higher plans available for equally good prices). If you want to play along at home, without buying a VPS, you can create a virtual machine on your own, or use Vagrant with a Vagrant box for Fedora 31 (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;fedora/31-cloud-base&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Your server should also run a modern Linux-based operating system. This guide was written and tested on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Ubuntu 16.04 LTS, 18.04 LTS, 20.04 LTS or newer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Debian 9 (stretch), 10 (buster) or newer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora 29 or newer (with SELinux enabled and disabled)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CentOS 7 (with SELinux enabled and disabled) — manual guide should also work on RHEL 7. CentOS 8 does not have uWSGI packages in EPEL as of January 2020, but they should become available soon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Debian 8 (jessie), and Fedora 24 through 28 are not officially supported, even though they still probably work.&lt;/p&gt;
&lt;p&gt;What if you’re using &lt;strong&gt;Docker&lt;/strong&gt;? The story is a bit complicated, and this guide does not apply, but do check the &lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#can-i-use-docker"&gt;Can I use Docker?&lt;/a&gt; at the end of this post for some hints on how to approach it.&lt;/p&gt;
&lt;p&gt;Users of other Linux distributions (and perhaps other Unix flavors) can also follow this tutorial. This guide assumes &lt;code class="docutils literal"&gt;systemd&lt;/code&gt; as your init system; if you are not using systemd, you will have to get your own daemon files somewhere else. In places where the instructions are split three-way, try coming up with your own, reading documentation and config files; the Arch Linux instructions are probably the closest to upstream (but not always).  Unfortunately, all Linux distributions have their own ideas when it comes to running and managing nginx and uWSGI.&lt;/p&gt;
&lt;p&gt;nginx and uWSGI are considered best practices by most people. nginx is a fast, modern web server, with uWSGI support built in (without resorting to reverse proxying).  uWSGI is similarly aimed at speed.  The Emperor mode of uWSGI is recommended for init system integration by the uWSGI team, and it’s especially useful for multi-app deployments. (This guide is opinionated.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="automate-everything-ansible-playbook"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id4"&gt;Automate everything: Ansible Playbook&lt;/a&gt;&lt;/h2&gt;
&lt;p class="lead"&gt;A &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; that automates everything in this tutorial is available. &lt;img alt="ci-status" src="https://github.com/Kwpolska/ansible-nginx-uwsgi/workflows/CI%20in%20Docker%20for%20ansible-nginx-uwsgi%20%28pyweb%29/badge.svg"&gt;&lt;/p&gt;
&lt;div class="section" id="how-to-use"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id5"&gt;How to use&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Install &lt;a class="reference external" href="https://docs.ansible.com/ansible/intro_installation.html"&gt;Ansible&lt;/a&gt; on your control computer (not necessarily the destination server).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone the &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi"&gt;Playbook&lt;/a&gt; from GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Read &lt;code class="docutils literal"&gt;README.md&lt;/code&gt;. You should also understand how Ansible works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure (change three files: &lt;code class="docutils literal"&gt;hosts&lt;/code&gt;, &lt;code class="docutils literal"&gt;group_vars/all&lt;/code&gt;, and &lt;code class="docutils literal"&gt;group_vars/os_&amp;lt;destination OS&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure all the dependencies are installed on your destination server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ansible-playbook&lt;/span&gt; &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;nginx-uwsgi.yml&lt;/span&gt; &lt;span class="pre"&gt;-i&lt;/span&gt; hosts&lt;/code&gt; and watch magic happen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Skip over to &lt;a class="reference internal" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#end-result"&gt;End result&lt;/a&gt; and test your site.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-manual-guide"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id6"&gt;The manual guide&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though I personally recommend the Playbook as a much less error-prone way to set up your app, it might not be compatible with everyone’s system, or otherwise be the wrong solution. The original manual configuration guide is still maintained.&lt;/p&gt;
&lt;p&gt;Even if you are using the Playbook, you should still read this to find out what happens under the hood, and to find out about other caveats/required configuration changes.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;All the commands in this tutorial are meant to be run &lt;strong&gt;as root&lt;/strong&gt; — run &lt;code class="docutils literal"&gt;su&lt;/code&gt; or &lt;code class="docutils literal"&gt;sudo su&lt;/code&gt; first to get an administrative shell. This tutorial assumes familiarity with basic Linux administration and command-line usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id7"&gt;Getting started&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start by installing Python 3 (with venv), nginx and uWSGI. I recommend using your operating system packages. For uWSGI, we need the &lt;code class="docutils literal"&gt;logfile&lt;/code&gt; and &lt;code class="docutils literal"&gt;python3&lt;/code&gt; plugins. (Arch Linux names the &lt;code class="docutils literal"&gt;python3&lt;/code&gt; plugin &lt;code class="docutils literal"&gt;python&lt;/code&gt;; the &lt;code class="docutils literal"&gt;logfile&lt;/code&gt; plugin may be built-in — check with your system repositories!). I’ll also install Git to clone the tutorial app, but it’s optional if your workflow does not involve git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_eb2128cf47004a7385c9fe9454947c92-1"&gt;&lt;/a&gt;apt install python3 python3-venv uwsgi uwsgi-emperor uwsgi-plugin-python3 nginx-full git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ae1fbd808be74c5b9fc3b64dc43255e5-1"&gt;&lt;/a&gt;dnf install python3 uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx git
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;CentOS 7:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_f190d928e4bf46c88cd68eb3cb583a55-1"&gt;&lt;/a&gt;yum install epel-release
&lt;a name="rest_code_f190d928e4bf46c88cd68eb3cb583a55-2"&gt;&lt;/a&gt;yum install python36 uwsgi uwsgi-plugin-python36 uwsgi-logger-file nginx git wget
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_9ceeea04afca4ebb878486c0f45b4ab8-1"&gt;&lt;/a&gt;pacman -S python uwsgi uwsgi-plugin-python nginx git
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="preparing-your-application"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id8"&gt;Preparing your application&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This tutorial will work for any web framework. I will use &lt;a class="reference external" href="https://github.com/Kwpolska/flask-demo-app"&gt;a really basic Flask app&lt;/a&gt; that has just one route (&lt;code class="docutils literal"&gt;/&lt;/code&gt;), a static &lt;code class="docutils literal"&gt;hello.png&lt;/code&gt; file and a &lt;code class="docutils literal"&gt;favicon.ico&lt;/code&gt; for demonstration purposes. The app is pretty basic, but all the usual advanced features (templates, user logins, database access, etc.) would work without any other web server-related config. Note that the app does not use &lt;code class="docutils literal"&gt;app.run()&lt;/code&gt;. While you could add it, it would be used for local development and debugging only, and would have to be prepended by &lt;code class="docutils literal"&gt;if __name__ == '__main__':&lt;/code&gt; (if it wasn’t, that server would run instead of uWSGI, which is bad)&lt;/p&gt;
&lt;p&gt;The app will be installed somewhere under the &lt;code class="docutils literal"&gt;/srv&lt;/code&gt; directory, which is a great place to store things like this. I’ll choose &lt;code class="docutils literal"&gt;/srv/myapp&lt;/code&gt; for this tutorial, but for real deployments, you should use something more distinguishable — the domain name is a great idea.&lt;/p&gt;
&lt;p&gt;If you don’t use Flask, this tutorial also has instructions for other web frameworks (Django, Pyramid, Bottle) in the configuration files; it should be adjustable to any other WSGI-compliant framework/script nevertheless.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="sidebar-title"&gt;Paths and locations&lt;/p&gt;
&lt;p&gt;This guide used to recommend creating the venv in &lt;code class="docutils literal"&gt;/srv/myapp&lt;/code&gt;. This was changed to improve in-place Python upgrades. Virtual environments should be ephemeral, so that &lt;code class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; $VIRTUAL_ENV&lt;/code&gt; is recoverable in less than 10 minutes and 2 commands. The old structure made the venv hard to delete without deleting &lt;code class="docutils literal"&gt;appdata&lt;/code&gt;. The current structure has &lt;code class="docutils literal"&gt;/srv/myapp/venv&lt;/code&gt; and &lt;code class="docutils literal"&gt;/srv/myapp/appdata&lt;/code&gt; separate. An alternative structure would put the app in &lt;code class="docutils literal"&gt;/srv/myapp&lt;/code&gt;, but that requires including &lt;code class="docutils literal"&gt;venv&lt;/code&gt;, sockets and other deployment-specific files in &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; (or having dirty working directories).&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We’ll start by creating a virtual environment, which is very easy with Python 3:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_235fa6f0176249eeb001299e6a1e671f-1"&gt;&lt;/a&gt;mkdir /srv/myapp
&lt;a name="rest_code_235fa6f0176249eeb001299e6a1e671f-2"&gt;&lt;/a&gt;python3 -m venv --prompt myapp /srv/myapp/venv
&lt;/pre&gt;&lt;p&gt;(The &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;--prompt&lt;/span&gt;&lt;/code&gt; option is not supported on some old versions of Python, but you can just skip it if that’s the case, it’s just to make the prompt after &lt;code class="docutils literal"&gt;source bin/activate&lt;/code&gt; more informative.)&lt;/p&gt;
&lt;p&gt;Now, we need to put our app there and install requirements. An example for the tutorial demo app:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_862580121bbc4d38a507f1a0756629c9-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv/myapp
&lt;a name="rest_code_862580121bbc4d38a507f1a0756629c9-2"&gt;&lt;/a&gt;git clone https://github.com/Kwpolska/flask-demo-app appdata
&lt;a name="rest_code_862580121bbc4d38a507f1a0756629c9-3"&gt;&lt;/a&gt;venv/bin/pip install -r appdata/requirements.txt
&lt;/pre&gt;&lt;p&gt;I’m storing my application data in the &lt;code class="docutils literal"&gt;appdata&lt;/code&gt; subdirectory so that it doesn’t clutter the virtual environment (or vice versa).  You may also install the &lt;code class="docutils literal"&gt;uwsgi&lt;/code&gt; package in the virtual environment, but it’s optional.&lt;/p&gt;
&lt;p&gt;What this directory should be depends on your web framework.  For example, for a Django app, you should have an &lt;code class="docutils literal"&gt;appdata/manage.py&lt;/code&gt; file (in other words, &lt;code class="docutils literal"&gt;appdata&lt;/code&gt; is where your app structure starts).  I also assumed that the &lt;code class="docutils literal"&gt;appdata&lt;/code&gt; folder should have a &lt;code class="docutils literal"&gt;static&lt;/code&gt; subdirectory with all static files, including &lt;code class="docutils literal"&gt;favicon.ico&lt;/code&gt; if you have one (we will add support for both in nginx).&lt;/p&gt;
&lt;p&gt;At this point, you should chown this directory to the user and group your server is going to run as.  This is especially important if uwsgi and nginx run as different users (as they do on Fedora). Run one of the following commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu, Debian:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_f6f1b33a162b41d78c2bb366ccf05c5d-1"&gt;&lt;/a&gt;chown -R www-data:www-data /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora, CentOS:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_d1588e2621794fb398bfd448b7994c82-1"&gt;&lt;/a&gt;chown -R uwsgi:nginx /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_cda45ae890dd4bb9a9ab5082ea0ad752-1"&gt;&lt;/a&gt;chown -R http:http /srv/myapp
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configuring-uwsgi-and-nginx"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id9"&gt;Configuring uWSGI and nginx&lt;/a&gt;&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Parts of the configuration depend on your operating system. I tried to provide advice for Ubuntu, Debian, Fedora, CentOS and Arch Linux. If you experience any issues, in particular with plugins, please consult the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We need to write a configuration file for uWSGI and nginx.&lt;/p&gt;
&lt;div class="section" id="uwsgi-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id10"&gt;uWSGI configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Start with this, but read the notes below and change the values accordingly:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/uwsgi.sock&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;775&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-5"&gt;&lt;/a&gt;&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-6"&gt;&lt;/a&gt;&lt;span class="na"&gt;binary-path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/venv/bin/uwsgi&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-7"&gt;&lt;/a&gt;&lt;span class="na"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/venv&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-8"&gt;&lt;/a&gt;&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flaskapp:app&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-9"&gt;&lt;/a&gt;&lt;span class="na"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-10"&gt;&lt;/a&gt;&lt;span class="na"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-11"&gt;&lt;/a&gt;&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-12"&gt;&lt;/a&gt;&lt;span class="na"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-13"&gt;&lt;/a&gt;&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python3,logfile&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_cbea12188ae447a48183a8fc0cb40c65-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_cbea12188ae447a48183a8fc0cb40c65-14"&gt;&lt;/a&gt;&lt;span class="na"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file:/srv/myapp/uwsgi.log&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Ubuntu, Debian: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/uwsgi-emperor/vassals/myapp.ini&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora, CentOS: &lt;code class="docutils literal"&gt;/etc/uwsgi.d/myapp.ini&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux: &lt;code class="docutils literal"&gt;/etc/uwsgi/vassals/myapp.ini&lt;/code&gt; (create the directory first and &lt;strong&gt;chown&lt;/strong&gt; it to http: &lt;code class="docutils literal"&gt;mkdir &lt;span class="pre"&gt;-p&lt;/span&gt; /etc/uwsgi/vassals; chown &lt;span class="pre"&gt;-R&lt;/span&gt; http:http /etc/uwsgi/vassals&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;socket&lt;/code&gt; — the socket file that will be used by your application. It’s usually a file path (Unix domain socket). You could use a local TCP socket, but it’s not recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;chdir&lt;/code&gt; — the app directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;binary-path&lt;/span&gt;&lt;/code&gt; — the uWSGI executable to use. Remove if you didn’t install the (optional) &lt;code class="docutils literal"&gt;uwsgi&lt;/code&gt; package in your virtual environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt; — the virtual environment for your application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;module&lt;/code&gt; — the name of the module that houses your application, and the object that speaks the WSGI interface, separated by colons. This depends on your web framework:&lt;/p&gt;
&lt;div class="table-responsive-lg"&gt;
&lt;table class="table table-bordered"&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th style="width: 10%"&gt;Framework&lt;/th&gt;
&lt;th style="width: 30%"&gt;Flask, Bottle&lt;/th&gt;
&lt;th style="width: 30%"&gt;Django&lt;/th&gt;
&lt;th style="width: 30%"&gt;Pyramid&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;td&gt;module where &lt;code&gt;app&lt;/code&gt; is defined&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&lt;em&gt;project&lt;/em&gt;.wsgi&lt;/code&gt;&lt;br&gt;&lt;span style="font-size: 0.9rem"&gt;(&lt;code style="font-size: 0.9rem"&gt;&lt;em&gt;project&lt;/em&gt;&lt;/code&gt; is the package with &lt;code style="font-size: 0.9rem"&gt;settings.py&lt;/code&gt;)&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;module where &lt;code&gt;app&lt;/code&gt; is defined&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Callable&lt;/th&gt;
&lt;td&gt;Flask: &lt;code&gt;app&lt;/code&gt; instance&lt;br&gt;Bottle: &lt;code&gt;app = bottle.default_app()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;application&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;app = config.make_wsgi_app()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="table-active"&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;td&gt;&lt;code style="font-size: 1.2rem"&gt;&lt;em&gt;package&lt;/em&gt;:app&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code style="font-size: 1.2rem"&gt;&lt;em&gt;project&lt;/em&gt;.wsgi:application&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code style="font-size: 1.2rem"&gt;&lt;em&gt;package&lt;/em&gt;:app&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Caveats&lt;/th&gt;
&lt;td&gt;Make sure &lt;code&gt;app&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; in an &lt;code style="font-size: 0.85rem"&gt;if __name__ == '__main__':&lt;/code&gt; block&lt;/td&gt;
&lt;td&gt;Add environment variable for settings:&lt;br&gt;&lt;code style="font-size: 0.7rem"&gt;env = DJANGO_SETTINGS_MODULE=&lt;em&gt;project&lt;/em&gt;.settings&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Make sure &lt;code&gt;app&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; in an &lt;code style="font-size: 0.85rem"&gt;if __name__ == '__main__':&lt;/code&gt; block (the demo quickstart does that!)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;uid&lt;/code&gt; and &lt;code class="docutils literal"&gt;gid&lt;/code&gt; — the names of the user account to use for your server.  Use the same values as in the &lt;code class="docutils literal"&gt;chown&lt;/code&gt; command above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;processes&lt;/code&gt; and &lt;code class="docutils literal"&gt;threads&lt;/code&gt; — control the resources devoted to this application. Because this is a simple hello app, I used one process with one thread, but for a real app, you will probably need more (you need to see what works the best; there is no algorithm to decide). Also, remember that if you use multiple processes, they don’t share memory (you need a database to share data between them).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;plugins&lt;/code&gt; — the list of uWSGI plugins to use. For Arch Linux, use &lt;code class="docutils literal"&gt;plugins = python&lt;/code&gt; (the &lt;code class="docutils literal"&gt;logfile&lt;/code&gt; plugin is always active).  For CentOS, use &lt;code class="docutils literal"&gt;plugins = python36&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;logger&lt;/code&gt; — the path to your app-specific logfile. (Other logging facilities are available, but this one is the easiest, especially for multiple applications on the same server)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;env&lt;/code&gt; — environment variables to pass to your app. Useful for configuration, may be specified multiple times. Example for Django: &lt;code class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test your configuration by running &lt;code class="docutils literal"&gt;uwsgi &lt;span class="pre"&gt;--ini&lt;/span&gt; /path/to/myapp.ini&lt;/code&gt; (disable the logger for stderr output or run &lt;code class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt; /srv/myapp/uwsgi.log&lt;/code&gt; in another window).&lt;/p&gt;
&lt;p&gt;If you’re using &lt;strong&gt;Fedora&lt;/strong&gt; or &lt;strong&gt;CentOS&lt;/strong&gt;, there are two configuration changes you need to make globally: in &lt;code class="docutils literal"&gt;/etc/uwsgi.ini&lt;/code&gt;, disable the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;emperor-tyrant&lt;/span&gt;&lt;/code&gt; option (which we don’t need, as it sets uid/gid for every process based on the owner of the related &lt;code class="docutils literal"&gt;.ini&lt;/code&gt; config file — we use one global setup) and set &lt;code class="docutils literal"&gt;gid = nginx&lt;/code&gt;.  We’ll need this so that nginx can talk to your socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx-configuration"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id11"&gt;nginx configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We need to configure our web server. Here’s a basic configuration that will get us started:&lt;/p&gt;
&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Ubuntu, Debian: &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled/myapp.conf&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fedora, CentOS: &lt;code class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Arch Linux: add &lt;code class="docutils literal"&gt;include &lt;span class="pre"&gt;/etc/nginx/conf.d/*.conf;&lt;/span&gt;&lt;/code&gt; to your &lt;code class="docutils literal"&gt;http&lt;/code&gt; directive in &lt;code class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/code&gt; and use &lt;code class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-1"&gt;&lt;code data-line-number=" 1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-2"&gt;&lt;code data-line-number=" 2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTP server:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-3"&gt;&lt;code data-line-number=" 3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-3"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-4"&gt;&lt;code data-line-number=" 4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# for a public HTTPS server:&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-5"&gt;&lt;code data-line-number=" 5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# listen 443 ssl;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-6"&gt;&lt;code data-line-number=" 6"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-6"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt; &lt;span class="s"&gt;myapp.local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-7"&gt;&lt;code data-line-number=" 7"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-7"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-8"&gt;&lt;code data-line-number=" 8"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-8"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-9"&gt;&lt;code data-line-number=" 9"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-9"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-10"&gt;&lt;code data-line-number="10"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-10"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/srv/myapp/uwsgi.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-11"&gt;&lt;code data-line-number="11"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-12"&gt;&lt;code data-line-number="12"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-12"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-13"&gt;&lt;code data-line-number="13"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-13"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-14"&gt;&lt;code data-line-number="14"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-14"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-15"&gt;&lt;code data-line-number="15"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-15"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-16"&gt;&lt;code data-line-number="16"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-16"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-17"&gt;&lt;code data-line-number="17"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-17"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/favicon.ico&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-18"&gt;&lt;code data-line-number="18"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-18"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static/favicon.ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-19"&gt;&lt;code data-line-number="19"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#rest_code_bddda94764ad41beaab274ae1326f83b-20"&gt;&lt;code data-line-number="20"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a name="rest_code_bddda94764ad41beaab274ae1326f83b-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;Note that this file is a very basic and rudimentary configuration. This configuration is fine for local testing, but for a real deployment, you will need to adjust it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;listen&lt;/code&gt; to &lt;code class="docutils literal"&gt;443 ssl&lt;/code&gt; and create a http→https redirect on port 80 (you can get a free SSL certificate from &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;; make sure to &lt;a class="reference external" href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html"&gt;configure SSL properly&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;set &lt;code class="docutils literal"&gt;server_name&lt;/code&gt; to your real domain name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you might also want to add custom error pages, log files, or change anything else that relates to your web server — consult other nginx guides for details&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nginx usually has some server already enabled by default — edit &lt;code class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/code&gt; or remove their configuration files from your sites directory to disable it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-setup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id12"&gt;Service setup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;After you’ve configured uWSGI and nginx, you need to enable and start the system services.&lt;/p&gt;
&lt;div class="section" id="for-arch-linux"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id13"&gt;For Arch Linux&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;All you need is:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_73d679374f9241cda1127689cc06dc01-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_73d679374f9241cda1127689cc06dc01-2"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;code class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-fedora-and-centos"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id14"&gt;For Fedora and CentOS&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Make sure you followed the extra note about editing &lt;code class="docutils literal"&gt;/etc/uwsgi.ini&lt;/code&gt; earlier and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_35f45f94b3e14a59890c5eb638a42866-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx uwsgi
&lt;a name="rest_code_35f45f94b3e14a59890c5eb638a42866-2"&gt;&lt;/a&gt;systemctl start nginx uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;code class="docutils literal"&gt;systemctl status uwsgi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you disabled SELinux, this is enough to get an app working and you can skip over to the next section.&lt;/p&gt;
&lt;p&gt;If you want to use SELinux, you need to do the following to allow nginx to read static files:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_78a5381b345d4c94b4a9659f588bab93-1"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_78a5381b345d4c94b4a9659f588bab93-2"&gt;&lt;/a&gt;chcon -R system_u:system_r:httpd_t:s0 /srv/myapp/appdata/static
&lt;a name="rest_code_78a5381b345d4c94b4a9659f588bab93-3"&gt;&lt;/a&gt;setenforce &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;We now need to install a &lt;a class="reference external" href="https://chriswarrick.com/pub/nginx-uwsgi.pp"&gt;SELinux policy&lt;/a&gt; (that I created for this project) to allow nginx and uWSGI to communicate.
Download it and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_c5373073fc2b4abca36b55bbc27e95b9-1"&gt;&lt;/a&gt;semodule -i nginx-uwsgi.pp
&lt;/pre&gt;&lt;p&gt;Hopefully, this is enough (you can delete the file). In case it isn’t, please read SELinux documentation, check audit logs, and look into &lt;code class="docutils literal"&gt;audit2allow&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-ubuntu-and-debian"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id15"&gt;For Ubuntu and Debian&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Ubuntu and Debian (still!) use LSB services for uWSGI. Because LSB services are awful, we’re going to set up our own systemd-based (native) service.&lt;/p&gt;
&lt;p&gt;Start by disabling the LSB service that comes with Ubuntu and Debian:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_5833acc8c6c549a197ad337f03316539-1"&gt;&lt;/a&gt;systemctl stop uwsgi-emperor
&lt;a name="rest_code_5833acc8c6c549a197ad337f03316539-2"&gt;&lt;/a&gt;systemctl disable uwsgi-emperor
&lt;/pre&gt;&lt;p&gt;Copy the &lt;code class="docutils literal"&gt;.service&lt;/code&gt; file from the &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.org/en/latest/Systemd.html#adding-the-emperor-to-systemd"&gt;uWSGI systemd documentation&lt;/a&gt; to &lt;code class="docutils literal"&gt;/etc/systemd/system/emperor.uwsgi.service&lt;/code&gt;.  Change the ExecStart line to:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_f9e029d542fd476d94126c1400cc6159-1"&gt;&lt;/a&gt;&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/uwsgi --ini /etc/uwsgi-emperor/emperor.ini&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can now reload systemd daemons and enable the services:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_5f145c7afa47420a902ea6a8425aae27-1"&gt;&lt;/a&gt;systemctl daemon-reload
&lt;a name="rest_code_5f145c7afa47420a902ea6a8425aae27-2"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx emperor.uwsgi
&lt;a name="rest_code_5f145c7afa47420a902ea6a8425aae27-3"&gt;&lt;/a&gt;systemctl reload nginx
&lt;a name="rest_code_5f145c7afa47420a902ea6a8425aae27-4"&gt;&lt;/a&gt;systemctl start emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;code class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/code&gt;.  (Ignore
the warning about no request plugin)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="end-result"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id16"&gt;End result&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Your web service should now be running at &lt;a class="reference external" href="http://localhost/"&gt;http://localhost/&lt;/a&gt; (or wherever you set up server to listen).&lt;/p&gt;
&lt;p&gt;If you used the demo application, you should see something like this (complete with the favicon and image greeting):&lt;/p&gt;
&lt;img alt="/images/nginx-uwsgi-demo.png" class="centered" src="https://chriswarrick.com/images/nginx-uwsgi-demo.png"&gt;
&lt;p&gt;If you want to test with cURL:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_983d408d9f5446018da1df5d9efeda64-1"&gt;&lt;/a&gt;curl -v http://localhost/
&lt;a name="rest_code_983d408d9f5446018da1df5d9efeda64-2"&gt;&lt;/a&gt;curl -I http://localhost/favicon.ico
&lt;a name="rest_code_983d408d9f5446018da1df5d9efeda64-3"&gt;&lt;/a&gt;curl -I http://localhost/static/hello.png
&lt;/pre&gt;&lt;div class="section" id="troubleshooting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id17"&gt;Troubleshooting&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Hopefully, everything works. If it doesn’t:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Check your nginx, system (&lt;code class="docutils literal"&gt;journalctl&lt;/code&gt;, &lt;code class="docutils literal"&gt;systemctl status SERVICE&lt;/code&gt;) and uwsgi (&lt;code class="docutils literal"&gt;/srv/myapp/uwsgi.log&lt;/code&gt;) logs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you followed all instructions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you get a default site, disable that site in nginx config (&lt;code class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/code&gt; or your sites directory).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have a firewall installed, make sure to open the ports your web server runs on (typically 80/443). For &lt;code class="docutils literal"&gt;firewalld&lt;/code&gt; (Fedora, CentOS):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_e4e99e1845e4423eacf6dc6ab6a8ee19-1"&gt;&lt;/a&gt;firewall-cmd --add-service http
&lt;a name="rest_code_e4e99e1845e4423eacf6dc6ab6a8ee19-2"&gt;&lt;/a&gt;firewall-cmd --add-service https
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If it still does not work, feel free to ask in the comments, mentioning your distribution, installation method, and what doesn’t work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-use-docker"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id18"&gt;Can I use Docker?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This blog post is written for systems running standalone. But Docker is a bit special, in that it offers a limited subset of OS features this workflow expects. The main issue is with user accounts, which generally work weird in Docker, and I had issues with &lt;code class="docutils literal"&gt;setuid&lt;/code&gt;/&lt;code class="docutils literal"&gt;setgid&lt;/code&gt; as used by uWSGI. Another issue is the lack of systemd, which means that another part of the tutorial fails to apply.&lt;/p&gt;
&lt;p&gt;This tutorial uses uWSGI Emperor, which can run multiple sites at once, and offers other management features (such as seamless code restarts with &lt;code class="docutils literal"&gt;touch /etc/uwsgi/vassals/myapp.ini&lt;/code&gt;) that may not be useful or easy to use in a Docker environment. You’d probably also run uWSGI and nginx in separate containers in a typical Docker deployment.&lt;/p&gt;
&lt;p&gt;Regardless, many parts of this tutorial can be used with Docker, although with the aforementioned adjustments. I have done some work on this topic. This tutorial has an Ansible Playbook attached, and the tutorial/playbook are compatible with five Linux distros in multiple versions. How do I know that there were no unexpected bugs in an older version? I could grab a Vagrant image or set up a VM. I do that when I need specific testing, but doing it for each of the distros on each update would take at least half an hour, probably even more. Yeah, that needs automating. I decided to use GitHub Actions for the CI, which can run anything, as long as you provide a Dockerfile.&lt;/p&gt;
&lt;p&gt;The Docker images were designed to support running the Playbook and testing it. But the changes, setups and patches could be a good starting point if you wanted to make your own Docker containers that could run in production. You can take a look at &lt;a class="reference external" href="https://github.com/Kwpolska/ansible-nginx-uwsgi/tree/master/ci"&gt;the Docker files for CI&lt;/a&gt; The images support all 5 distros using their base images, but you could probably use Alpine images, or the &lt;code class="docutils literal"&gt;python&lt;/code&gt; docker images; be careful not to mix Python versions in the latter case.&lt;/p&gt;
&lt;p&gt;That said, I still prefer to run without Docker, directly on the system.  Less resources wasted and less indirection.  Which is why this guide does it the traditional way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Ansible</category><category>Arch Linux</category><category>Django</category><category>Flask</category><category>guide</category><category>Internet</category><category>Linux</category><category>nginx</category><category>Python</category><category>systemd</category><category>uWSGI</category><guid>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</guid><pubDate>Wed, 10 Feb 2016 14:00:00 GMT</pubDate></item><item><title>New project: upass — console UI for pass</title><link>https://chriswarrick.com/blog/2015/07/06/upass/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.passwordstore.org/"&gt;pass&lt;/a&gt; is the standard Unix password manager.
And I just wrote a slightly friendlier, clickier interface with urwid and
Python.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/upass/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Project page
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/galleries/upass/" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="far fa-image"&gt;&lt;/i&gt;
Screenshots
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/upass" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;upass&lt;/code&gt; is using urwid, which means it has a friendly full-screen console
interface.  It shows your directory structure (with flattened subdirectories)
and calls &lt;code class="docutils literal"&gt;pass&lt;/code&gt; when requested.  (It does not use &lt;code class="docutils literal"&gt;pass &lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/code&gt; due to
subprocessing issues, instead opting for a manual copy — note that the
clipboard &lt;strong&gt;will not be cleared&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;If you want to see how it looks, check out &lt;a class="reference external" href="https://chriswarrick.com/galleries/upass/"&gt;the screenshots gallery&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;upass&lt;/code&gt; is under development (and was initially written in one evening).  If you have
ideas, bugs, or want to help, hop over to the &lt;a class="reference external" href="https://github.com/Kwpolska/upass"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can install &lt;code class="docutils literal"&gt;upass&lt;/code&gt; from &lt;a class="reference external" href="https://pypi.python.org/pypi/upass"&gt;PyPI&lt;/a&gt; (with &lt;code class="docutils literal"&gt;pip install upass&lt;/code&gt;). Arch Linux
users can install the &lt;code class="docutils literal"&gt;upass&lt;/code&gt; package from the AUR.&lt;/p&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>Linux</category><category>password</category><category>projects</category><category>Python</category><category>upass</category><guid>https://chriswarrick.com/blog/2015/07/06/upass/</guid><pubDate>Mon, 06 Jul 2015 12:30:00 GMT</pubDate></item><item><title>New project: think (Terminal Think Music)</title><link>https://chriswarrick.com/blog/2015/05/30/think/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Are you executing a process that takes a long time?  Do you want to know that it’s
still working while you are in another terminal/making coffee?  Do you have a
favorite game show tune to play while doing something?&lt;/p&gt;
&lt;p&gt;If yes: &lt;code class="docutils literal"&gt;think&lt;/code&gt; is just for you.  For more details, read on or &lt;a class="reference external" href="https://github.com/Kwpolska/think"&gt;hop onto the GitHub page&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://chriswarrick.com/projects/think/" class="btn btn-primary" style="width: 250px;"&gt;
&lt;i class="fa fa-info-circle"&gt;&lt;/i&gt;
Project page
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fab fa-github"&gt;&lt;/i&gt;
GitHub
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://github.com/Kwpolska/think/releases" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads (GitHub)
&lt;/a&gt;
&lt;/p&gt;
&lt;p style="text-align: center; clear: both;"&gt;
&lt;a href="https://pypi.python.org/pypi/think" class="btn btn-secondary" style="width: 250px;"&gt;
&lt;i class="fa fa-download"&gt;&lt;/i&gt;
Downloads (PyPI)
&lt;/a&gt;
&lt;/p&gt;&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;You can install &lt;code class="docutils literal"&gt;think&lt;/code&gt; from &lt;a class="reference external" href="https://pypi.python.org/pypi/think"&gt;PyPI&lt;/a&gt; (with &lt;code class="docutils literal"&gt;pip install think&lt;/code&gt;). Arch Linux
users can install the &lt;code class="docutils literal"&gt;think&lt;/code&gt; package from the AUR.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Create a file named &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/think.conf&lt;/span&gt;&lt;/code&gt; (or wherever your &lt;code class="docutils literal"&gt;XDG_CONFIG_HOME&lt;/code&gt; is) with the following four lines:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_7fe1fea4c7b24168a64536a6fd83c654-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[Think]&lt;/span&gt;
&lt;a name="rest_code_7fe1fea4c7b24168a64536a6fd83c654-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;play&lt;/span&gt;
&lt;a name="rest_code_7fe1fea4c7b24168a64536a6fd83c654-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/kwpolska/Dropbox/Media/Wielka Gra.mp3&lt;/span&gt;
&lt;a name="rest_code_7fe1fea4c7b24168a64536a6fd83c654-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;behavior&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;wait&lt;/span&gt;
&lt;/pre&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;command&lt;/code&gt; is the command of the player that will be executed.  You can use
&lt;code class="docutils literal"&gt;play&lt;/code&gt; (from &lt;code class="docutils literal"&gt;sox&lt;/code&gt;) or any other fast CLI music player.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;file&lt;/code&gt; is the filename that will be given as the sole argument to the play command. No escaping is necessary. I’m using the &lt;a class="reference external" href="https://www.youtube.com/watch?v=Nnu7I3b7ZbY"&gt;Wielka Gra&lt;/a&gt; theme (BTW: I just published the MP3 file on the 1st anniversary of the upload!), Americans might want &lt;a class="reference external" href="https://www.youtube.com/watch?v=vXGhvoekY44"&gt;Jeopardy! Think Music&lt;/a&gt; (also the namesake for this command), Brits might want the &lt;a class="reference external" href="https://www.youtube.com/watch?v=M2dhD9zR6hk"&gt;Countdown theme&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;behavior&lt;/code&gt; can be one of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;return&lt;/code&gt; — return control to the terminal as soon as the program finishes, without stopping the music&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;wait&lt;/code&gt; — wait until music stops before returning control&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;stop&lt;/code&gt; — stop the music and return control immediately&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Prepend &lt;code class="docutils literal"&gt;think&lt;/code&gt; before the command that takes too long to execute:&lt;/p&gt;
&lt;pre class="code console"&gt;&lt;a name="rest_code_2c954872a8154b999cc03fadab4cd13c-1"&gt;&lt;/a&gt;&lt;span class="go"&gt;think sleep 120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><category>app</category><category>CLI</category><category>game show</category><category>Jeopardy!</category><category>Linux</category><category>projects</category><category>Python</category><category>think</category><guid>https://chriswarrick.com/blog/2015/05/30/think/</guid><pubDate>Sat, 06 Jun 2015 12:15:00 GMT</pubDate></item><item><title>systemd is awesome.</title><link>https://chriswarrick.com/blog/2015/01/30/systemd-is-awesome/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently switched distros on my server, from Debian to Fedora, to use
&lt;code class="docutils literal"&gt;systemd&lt;/code&gt; and keep it in line with my home &lt;a class="reference external" href="https://chriswarrick.com/blog/2011/01/06/arch-linux-the-best-distro-ever/"&gt;Arch Linux&lt;/a&gt; system (which was
not reinstalled since 2010, by the way!)  Why is systemd so awesome?  Read
on to find out.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;&lt;em&gt;(I changed the hardware for my home system along the way.  And just copied
everything over with ``dd``.  That’s Linux at its finest.)&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="user-friendly"&gt;
&lt;h2&gt;User friendly&lt;/h2&gt;
&lt;p&gt;The most important thing in systemd is its user friendliness.  systemd offers
the &lt;code class="docutils literal"&gt;systemctl&lt;/code&gt; tool, which can be used to control all the services.  You
can see what exactly is going on: what is running, what failed to start,
and you can also see why if you ask &lt;code class="docutils literal"&gt;systemctl status $SERVICE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h2&gt;Services&lt;/h2&gt;
&lt;div class="section" id="writing-services-is-fun"&gt;
&lt;h3&gt;Writing services is fun&lt;/h3&gt;
&lt;p&gt;If you want your own services, you just need to write some simple INI files.  No
need for bash, distro-specific frameworks and whatnot.  If I have a functioning
service written on Arch, I can just copy the file over to Fedora and blindly
enable it — assuming I have the executables installed, it’s guaranteed to work.&lt;/p&gt;
&lt;p&gt;And the units are tiny:&lt;/p&gt;
&lt;pre class="literal-block"&gt;fedora$ wc -l /usr/lib/systemd/system/nginx.service
15 /usr/lib/systemd/system/nginx.service
debian$ wc -l /etc/init.d/nginx
101 /etc/init.d/nginx&lt;/pre&gt;
&lt;p&gt;And you can write a bare-minimum systemd daemon in less than that – not so easy
with &lt;code class="docutils literal"&gt;sysvinit&lt;/code&gt; (writing everything on one line doesn’t count!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="managing-personal-services"&gt;
&lt;h3&gt;Managing personal services&lt;/h3&gt;
&lt;p&gt;systemd also features user-specific services.  You can run any service as your
user.  I use this to run &lt;a class="reference external" href="https://chriswarrick.com/kwbot/"&gt;KwBot&lt;/a&gt;, which was previously under control of
&lt;code class="docutils literal"&gt;supervisord&lt;/code&gt; — that’s one less dependency to care about!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="runlevels-do-not-exist"&gt;
&lt;h3&gt;Runlevels do not exist&lt;/h3&gt;
&lt;p&gt;systemd does away with the standard convention of runlevels.  They are replaced
by human-friendly &lt;em&gt;targets&lt;/em&gt;.  Each unit defines its target: most use
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;multi-user.target&lt;/span&gt;&lt;/code&gt;.  It is much easier to manage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-symlink-mess"&gt;
&lt;h3&gt;No symlink mess&lt;/h3&gt;
&lt;p&gt;Just like old sysvinit-esque systems, systemd uses symlinks to manage
enabled/disabled services.  There is just one difference: you get just &lt;strong&gt;one&lt;/strong&gt;
symlink in the appropriate &lt;code class="docutils literal"&gt;.wants&lt;/code&gt; directory.  You do not have to look into
all the different runlevels.  &lt;code class="docutils literal"&gt;graphical.target&lt;/code&gt; depends on
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;multi-user.target&lt;/span&gt;&lt;/code&gt;, which in turn depends on &lt;code class="docutils literal"&gt;basic.target&lt;/code&gt;, which depends
on a few more targets required to get the system up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="units-can-depend-on-each-other"&gt;
&lt;h3&gt;Units can depend on each other&lt;/h3&gt;
&lt;p&gt;Do you have some units that require the network to be up?  Set it to be run
after and require &lt;code class="docutils literal"&gt;network.target&lt;/code&gt; and call it a day.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-journal"&gt;
&lt;h2&gt;The Journal&lt;/h2&gt;
&lt;p&gt;If I want to know what is going on in my system, I can just ask &lt;code class="docutils literal"&gt;journalctl&lt;/code&gt;
to show me the most recent messages.  I don’t need to read a thousand different
log files — most things appear in the journal.  Sure, some things aren’t there
(yet), but what I &lt;em&gt;can&lt;/em&gt; see is very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="did-i-really-change-my-distro-for-all-that"&gt;
&lt;h2&gt;Did I really change my distro for all that?&lt;/h2&gt;
&lt;p&gt;Yes.  I got too annoyed with Debian’s idiocy.  Also, DigitalOcean doesn’t
&lt;em&gt;really&lt;/em&gt; support Debian testing, and I cannot survive with outdated software.
I feel much better and, more importantly, &lt;strong&gt;safer&lt;/strong&gt; with Fedora.&lt;/p&gt;
&lt;p&gt;(also, the “Veteran Unix Admins” of Devuan are a bunch of idiots.)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Arch Linux</category><category>Debian</category><category>Fedora</category><category>Linux</category><category>systemd</category><guid>https://chriswarrick.com/blog/2015/01/30/systemd-is-awesome/</guid><pubDate>Fri, 30 Jan 2015 15:00:00 GMT</pubDate></item><item><title>Zsh — A Shell For The Power Users.</title><link>https://chriswarrick.com/blog/2011/03/05/zsh-a-shell-for-the-power-users/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;What’s the most important non-kernel piece of software in UNIX-like OSes? The shell. A good shell.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I’m working with UNIX-like OSes a long time. I wasn’t using a shell all the time, but the black window with a monospace font was seen more often on my screen with time. A black window with &lt;cite&gt;bash&lt;/cite&gt; in it. Are you wondering why? They set it as the default shell. And some users might not bother with changing their settings or testing other shells.&lt;/p&gt;
&lt;div class="section" id="user-localhost-zsh"&gt;
&lt;h2&gt;&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;user@localhost:~$&lt;/span&gt; zsh&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Are you still using bash? Switch over to zsh and learn why it’s better. Let’s begin with a reason list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-1-intelligent-completion"&gt;
&lt;h2&gt;Reason #1. Intelligent Completion&lt;/h2&gt;
&lt;p&gt;The zsh’s bulit-in completion is the best one ever made. For example, here is how regular bash responds to &lt;code class="docutils literal"&gt;pacman &lt;span class="pre"&gt;&amp;lt;Tab&amp;gt;&amp;lt;Tab&amp;gt;&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_2757dbe90aa74a5eb0758b697fc504ad-1"&gt;&lt;/a&gt;[kwpolska@kwpolska-lin ~]$ pacman
&lt;a name="rest_code_2757dbe90aa74a5eb0758b697fc504ad-2"&gt;&lt;/a&gt;Display all XXX possibilities? (y or n)
&lt;/pre&gt;&lt;p&gt;(The &lt;em&gt;possibilities&lt;/em&gt; are all the files and directories in the current working directory.)&lt;/p&gt;
&lt;p&gt;And here’s another bash response, this time with bash-completion:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_5482b649a1c148d8aaa0919e6b368b78-1"&gt;&lt;/a&gt;[kwpolska@kwpolska-lin ~]$ pacman -
&lt;a name="rest_code_5482b649a1c148d8aaa0919e6b368b78-2"&gt;&lt;/a&gt;-D          -h          -Q          -R          -S          -U          -V
&lt;a name="rest_code_5482b649a1c148d8aaa0919e6b368b78-3"&gt;&lt;/a&gt;--database  --help      --query     --remove    --sync      --upgrade   --version
&lt;/pre&gt;&lt;p&gt;That’s much more helpful, but a new user still wouldn’t know what to do.&lt;/p&gt;
&lt;p&gt;Are you wondering what zsh did after adding a &lt;code class="docutils literal"&gt;-&lt;/code&gt; before the first &lt;code class="docutils literal"&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a84a8f055dd74cb8a23d3c51e81958b5-1"&gt;&lt;/a&gt;[kwpolska@kwpolska-lin ~]$ pacman -Q
&lt;a name="rest_code_a84a8f055dd74cb8a23d3c51e81958b5-2"&gt;&lt;/a&gt;-Q  -- Query the package database
&lt;a name="rest_code_a84a8f055dd74cb8a23d3c51e81958b5-3"&gt;&lt;/a&gt;-R  -- Remove a package from the system
&lt;a name="rest_code_a84a8f055dd74cb8a23d3c51e81958b5-4"&gt;&lt;/a&gt;-S  -- Synchronize packages
&lt;a name="rest_code_a84a8f055dd74cb8a23d3c51e81958b5-5"&gt;&lt;/a&gt;-U  -- Upgrade a package
&lt;a name="rest_code_a84a8f055dd74cb8a23d3c51e81958b5-6"&gt;&lt;/a&gt;-V  -- Display version and exit
&lt;a name="rest_code_a84a8f055dd74cb8a23d3c51e81958b5-7"&gt;&lt;/a&gt;-h  -- Display usage
&lt;/pre&gt;&lt;p&gt;(If you will press tab once, it will just show the possibilities. If you will press it once again, it will change to -R.)&lt;/p&gt;
&lt;p&gt;Do you want to start the GNOME’s Preferred Applications dialog box &lt;strong&gt;from the shell, without using the Tab key&lt;/strong&gt;? Good luck! The name is &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;gnome-default-applications-properties&lt;/span&gt;&lt;/code&gt;. That’s &lt;strong&gt;38&lt;/strong&gt; characters. &lt;strong&gt;THIRTY EIGHT&lt;/strong&gt; characters. If you will make a typo in bash, you’ll see “command not found”, swear a few times and find the typo yourself. With zsh, instead of searching for typo, you can press &lt;code class="docutils literal"&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;. In many cases, you’ll see the proper command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-2-no-cd-required"&gt;
&lt;h2&gt;Reason #2. No &lt;code class="docutils literal"&gt;cd&lt;/code&gt; required&lt;/h2&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;If you will add one line to your zshrc, you’ll be able to skip cd if you want to go to a directory (doesn’t work if there’s something in the &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; with the same name)::&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;setopt autocd&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-3-bulit-in-commands"&gt;
&lt;h2&gt;Reason #3. Bulit-in commands&lt;/h2&gt;
&lt;p&gt;Do you want to use the basic &lt;code class="docutils literal"&gt;more&lt;/code&gt;/&lt;code class="docutils literal"&gt;less&lt;/code&gt;/&lt;code class="docutils literal"&gt;$PAGER&lt;/code&gt; to read a file? Just say &lt;code class="docutils literal"&gt;&amp;lt;filename&lt;/code&gt; and you’re done. Do you need to use FTP? You can use &lt;code class="docutils literal"&gt;zftp&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-4-bindkeys"&gt;
&lt;h2&gt;Reason #4. &lt;code class="docutils literal"&gt;bindkeys&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Wish to use some keys for special text operations? You can use bindkeys. I’m binding these keystrokes:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-1"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[1~"&lt;/span&gt; beginning-of-line       &lt;span class="c1"&gt;# Home&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-2"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[4~"&lt;/span&gt; end-of-line             &lt;span class="c1"&gt;# End&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-3"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[5~"&lt;/span&gt; beginning-of-history    &lt;span class="c1"&gt;# PageUp&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-4"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[6~"&lt;/span&gt; end-of-history          &lt;span class="c1"&gt;# PageDown&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-5"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[2~"&lt;/span&gt; quoted-insert           &lt;span class="c1"&gt;# Ins&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-6"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"\e[3~"&lt;/span&gt; delete-char             &lt;span class="c1"&gt;# Del&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-7"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[OH"&lt;/span&gt;  beginning-of-line       &lt;span class="c1"&gt;# Home&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-8"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[OF"&lt;/span&gt;  end-of-line             &lt;span class="c1"&gt;# End&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-9"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[5~"&lt;/span&gt; beginning-of-history    &lt;span class="c1"&gt;# PageUp&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-10"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[6~"&lt;/span&gt; end-of-history          &lt;span class="c1"&gt;# PageDown&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-11"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[2~"&lt;/span&gt; quoted-insert           &lt;span class="c1"&gt;# Ins&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-12"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[3~"&lt;/span&gt; delete-char             &lt;span class="c1"&gt;# Del&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-13"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[1;5D"&lt;/span&gt; backward-word         &lt;span class="c1"&gt;# ^Left&lt;/span&gt;
&lt;a name="rest_code_d33bee41f0f64b03b86e5d9ac5f16849-14"&gt;&lt;/a&gt;bindkey &lt;span class="s2"&gt;"^[[1;5C"&lt;/span&gt; forward-word          &lt;span class="c1"&gt;# ^Right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="getting-help"&gt;
&lt;h2&gt;Getting Help&lt;/h2&gt;
&lt;p&gt;Do you need help? Choose one of the sources.&lt;/p&gt;
&lt;div class="section" id="zsh-freenode"&gt;
&lt;h3&gt;#zsh @ freenode&lt;/h3&gt;
&lt;p&gt;Do you love IRC, like me? Visit #zsh at freenode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zshwiki"&gt;
&lt;h3&gt;ZSHWiki&lt;/h3&gt;
&lt;p&gt;The Z Shell has its very own wiki at &amp;lt;&lt;a class="reference external" href="http://zshwiki.org"&gt;http://zshwiki.org&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mailing-lists"&gt;
&lt;h3&gt;Mailing Lists&lt;/h3&gt;
&lt;p&gt;Subscribe to a mailing list: &amp;lt;&lt;a class="reference external" href="http://zsh.sourceforge.net/Arc/mlist.html"&gt;http://zsh.sourceforge.net/Arc/mlist.html&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="website-web-documentation"&gt;
&lt;h3&gt;Website/Web Documentation&lt;/h3&gt;
&lt;p&gt;You can find some information at &amp;lt;&lt;a class="reference external" href="http://zsh.sourceforge.net/"&gt;http://zsh.sourceforge.net/&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-man-page-aka-because-zsh-contains-many-features-the-zsh-manual-has-been-split-into-a-number-of-sections"&gt;
&lt;h3&gt;The Man Page aka &lt;em&gt;Because zsh contains many features, the zsh manual has been split into a number of sections&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;cite&gt;zsh&lt;/cite&gt; man page just tells you the most important things and informs you about other sections. If you aren’t sure where to search, try &lt;code class="docutils literal"&gt;man zshall&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-1"&gt;&lt;/a&gt;zsh          Zsh overview
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-2"&gt;&lt;/a&gt;zshroadmap   Informal introduction to the manual
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-3"&gt;&lt;/a&gt;zshmisc      Anything not fitting into the other sections
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-4"&gt;&lt;/a&gt;zshexpn      Zsh command and parameter expansion
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-5"&gt;&lt;/a&gt;zshparam     Zsh parameters
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-6"&gt;&lt;/a&gt;zshoptions   Zsh options
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-7"&gt;&lt;/a&gt;zshbuiltins  Zsh built-in functions
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-8"&gt;&lt;/a&gt;zshzle       Zsh command line editing
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-9"&gt;&lt;/a&gt;zshcompwid   Zsh completion widgets
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-10"&gt;&lt;/a&gt;zshcompsys   Zsh completion system
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-11"&gt;&lt;/a&gt;zshcompctl   Zsh completion control
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-12"&gt;&lt;/a&gt;zshmodules   Zsh loadable modules
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-13"&gt;&lt;/a&gt;zshcalsys    Zsh built-in calendar functions
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-14"&gt;&lt;/a&gt;zshtcpsys    Zsh built-in TCP functions
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-15"&gt;&lt;/a&gt;zshzftpsys   Zsh built-in FTP client
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-16"&gt;&lt;/a&gt;zshcontrib   Additional zsh functions and utilities
&lt;a name="rest_code_03b924c717974e6b8c1432544b92424e-17"&gt;&lt;/a&gt;zshall       Meta-man page containing all of the above
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Linux</category><category>shell</category><category>zsh</category><guid>https://chriswarrick.com/blog/2011/03/05/zsh-a-shell-for-the-power-users/</guid><pubDate>Fri, 04 Mar 2011 23:00:00 GMT</pubDate></item><item><title>Arch Linux: The Best Linux Distro Ever.</title><link>https://chriswarrick.com/blog/2011/01/06/arch-linux-the-best-distro-ever/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I’m using Linux since 2007. I’ve been on many distros (in order): &lt;a class="reference external" href="http://www2.mandriva.com/en/"&gt;Mandriva&lt;/a&gt;, &lt;a class="reference external" href="http://ubuntu.com"&gt;Ubuntu&lt;/a&gt;, &lt;a class="reference external" href="http://opensuse.org"&gt;openSuSE&lt;/a&gt;, &lt;a class="reference external" href="http://fedoraproject.org"&gt;Fedora&lt;/a&gt;, and only in &lt;a class="reference external" href="http://virtualbox.org"&gt;VirtualBox&lt;/a&gt;: &lt;a class="reference external" href="http://debian.org"&gt;Debian&lt;/a&gt; and &lt;a class="reference external" href="http://linuxmint.com"&gt;Linux Mint&lt;/a&gt;. But since two months there is another distro in both lists (I tested it out on VirtualBox and then set it up on the actual machine): &lt;a class="reference external" href="http://archlinux.org"&gt;Arch Linux&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Arch Linux is a Linux distribution by Judd Vinet and Aaron Griffin, existing since 2002, intended to be simple, elegant, versatile and expedient (See Reason #3). It uses pacman as the package manager. It’s a rolling-release distro, that means there are only new CD images released, you get updates even if you’ve installed Arch Linux v0.1.&lt;/p&gt;
&lt;div class="section" id="what-makes-it-so-awesome"&gt;
&lt;h2&gt;What makes it so awesome?&lt;/h2&gt;
&lt;p&gt;There are six things that makes it the best distro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-1-archwiki"&gt;
&lt;h2&gt;Reason 1. &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Main_Page"&gt;ArchWiki&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Arch Wiki is an awesome place. You can find many useful things about Arch. In this article you can find 9 links to articles in the wiki (plus two doubled).&lt;/p&gt;
&lt;p&gt;## Reason 2. Pacman and the AUR
The package manager is &lt;code class="docutils literal"&gt;pacman&lt;/code&gt;. It has a specific syntax. The &lt;a class="reference external" href="http://aur.archlinux.org/"&gt;Arch User Repository&lt;/a&gt; is a place, where you can find PKGBUILDs (build instructions, which help you make a package) for more packages than contents of the default repositioriies — &lt;code class="docutils literal"&gt;[core]&lt;/code&gt;, &lt;code class="docutils literal"&gt;[extra]&lt;/code&gt; and &lt;code class="docutils literal"&gt;[community]&lt;/code&gt; (which consists of binary packages that began their life in AUR) Read the &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Main_Page"&gt;ArchWiki&lt;/a&gt; &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Pacman"&gt;Pacman&lt;/a&gt; and &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_User_Repository"&gt;AUR&lt;/a&gt; articles for details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-3-the-arch-way"&gt;
&lt;h2&gt;Reason 3. &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/The_Arch_Way_v2.0"&gt;The Arch Way&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The distro is &lt;em&gt;intended to be simple, elegant, versatile and expedient&lt;/em&gt;, as &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/The_Arch_Way_v2.0"&gt;The Arch Way&lt;/a&gt; v2.0 states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-4-etc-rc-conf"&gt;
&lt;h2&gt;Reason 4. &lt;code class="docutils literal"&gt;/etc/rc.conf&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;/etc/rc.conf&lt;/code&gt; is the main configuration file. &lt;strong&gt;Or at least it was when I
wrote this post.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;systemd&lt;/strong&gt; replaced it.  And boy is it awesome.  It’s much more friendly than
&lt;code class="docutils literal"&gt;/etc/rc.conf&lt;/code&gt; ever was.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-5-the-community-irc-forums-mailing-lists"&gt;
&lt;h2&gt;Reason 5. The community: &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/IRC_Channel"&gt;IRC&lt;/a&gt;, &lt;a class="reference external" href="https://bbs.archlinux.org"&gt;Forums&lt;/a&gt;, &lt;a class="reference external" href="http://mailman.archlinux.org/mailman/listinfo/"&gt;Mailing Lists&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Arch Linux has a strong community: there are many people on the &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/IRC_Channel"&gt;IRC&lt;/a&gt; channel, &lt;a class="reference external" href="https://bbs.archlinux.org"&gt;Forums&lt;/a&gt; and &lt;a class="reference external" href="http://mailman.archlinux.org/mailman/listinfo/"&gt;Mailing Lists&lt;/a&gt;. They are here to help you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reason-6-the-rolling-release-model"&gt;
&lt;h2&gt;Reason 6. The rolling-release model&lt;/h2&gt;
&lt;p&gt;Arch uses an rolling-release model: there are only new CD images released, and you get updates even if you’ve installed Arch Linux v0.1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Arch Linux</category><category>Linux</category><guid>https://chriswarrick.com/blog/2011/01/06/arch-linux-the-best-distro-ever/</guid><pubDate>Wed, 05 Jan 2011 23:00:00 GMT</pubDate></item></channel></rss>