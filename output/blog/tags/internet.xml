<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Internet)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/internet.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 26 Jul 2016 13:21:18 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Deploying Python Web Applications with nginx and uWSGI Emperor</title><link>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;You just wrote a great Python web application. Now, you want to share it with the world. In order to do that, you need a server, and some software to do that for you.&lt;/p&gt;
&lt;p&gt;The following is a comprehensive guide on how to accomplish that, on multiple Linux-based operating systems, using nginx and uWSGI Emperor. It doesn’t force you to use any specific web framework — Flask, Django, Pyramid, Bottle will all work. Written for Ubuntu, Fedora and Arch Linux (should be helpful for other systems, too)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;In order to deploy your web application, you need a server that gives you root and ssh access — in other words, a VPS (or a dedicated server, or a datacenter lease…). If you’re looking for a great VPS service for a low price, I recommend &lt;a class="reference external" href="https://www.digitalocean.com/?refcode=7983689b2ecc"&gt;DigitalOcean&lt;/a&gt; (reflink &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id6" id="id1"&gt;[1]&lt;/a&gt;), which offers a $5/mo service &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id7" id="id2"&gt;[2]&lt;/a&gt;. If you want to play along at home, without buying a VPS, you can create a virtual machine on your own, or use a Vagrant with a &lt;a class="reference external" href="https://getfedora.org/en/cloud/download/"&gt;Vagrant box for Fedora 23&lt;/a&gt; (I recommend disabling SELinux, more on that later).&lt;/p&gt;
&lt;p&gt;Your server should also run a modern Linux-based operating system. I tested and wrote this guide for Ubuntu 15.10 &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id8" id="id3"&gt;[3]&lt;/a&gt;, Fedora 23 and Arch Linux, but other Linux distributions (and perhaps *BSD) will work (in places where the instructions are split three-way, try coming up with your own, reading documentation and config files).  Unfortunately, all Linux distributions have their own ideas when it comes to running and managing nginx and UWSGI.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;All the commands in this tutorial are meant to be run &lt;strong&gt;as root&lt;/strong&gt; — run &lt;tt class="docutils literal"&gt;su&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;sudo su&lt;/tt&gt; first to get an administrative shell.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Start by installing virtualenv, nginx and uWSGI. I recommend using your operating system packages. For uWSGI, we need the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugins. (Arch Linux names the &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt; plugin &lt;tt class="docutils literal"&gt;python&lt;/tt&gt;; the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin may be built-in — check with your system repositories!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_6f648f5ef2fa4927999ee21fb3e56e5c-1"&gt;&lt;/a&gt;aptitude install virtualenv python3 uwsgi uwsgi-emperor uwsgi-plugin-python3 nginx-full
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_adb366d454d74f06bc178a1b4fa4ebd5-1"&gt;&lt;/a&gt;dnf install python3-virtualenv uwsgi uwsgi-plugin-python3 uwsgi-logger-file nginx
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_b6d16bebe3fa467a9d5200988aa82299-1"&gt;&lt;/a&gt;pacman -S python-virtualenv uwsgi uwsgi-plugin-python nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="preparing-your-application"&gt;
&lt;h2&gt;Preparing your application&lt;/h2&gt;
&lt;p&gt;This tutorial will work for any web framework. I will, use &lt;a class="reference external" href="https://github.com/Kwpolska/flask-demo-app"&gt;a really basic Flask app&lt;/a&gt; that has just one route (&lt;tt class="docutils literal"&gt;/&lt;/tt&gt;), a static &lt;tt class="docutils literal"&gt;hello.png&lt;/tt&gt; file and a &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; for demonstration purposes. Note that the app does not use &lt;tt class="docutils literal"&gt;app.run()&lt;/tt&gt;. While you could add it, it would be used for local development and debugging only, and would be prepended by &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; — uWSGI doesn’t work alongside it.&lt;/p&gt;
&lt;p&gt;The app will be installed somewhere under the &lt;tt class="docutils literal"&gt;/srv&lt;/tt&gt; directory, which is a great place to store things like this. I’ll choose &lt;tt class="docutils literal"&gt;/srv/myapp&lt;/tt&gt; for this tutorial, but for real deployments, you should use sometihing more distinguishable — the domain name is a great idea.&lt;/p&gt;
&lt;p&gt;We’ll start by creating a virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_79d452180221453a80e11ba017bdce26-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;srv
&lt;a name="rest_code_79d452180221453a80e11ba017bdce26-2"&gt;&lt;/a&gt;virtualenv -p /usr/bin/python3 myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_71445e41825f496993ad08dfe2e42e09-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_71445e41825f496993ad08dfe2e42e09-2"&gt;&lt;/a&gt;virtualenv-3.4 myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_a0ee40a9ebd441e6bde56c1a6297eef5-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /srv
&lt;a name="rest_code_a0ee40a9ebd441e6bde56c1a6297eef5-2"&gt;&lt;/a&gt;virtualenv3 myapp
&lt;/pre&gt;&lt;p&gt;(Make sure you create a Python 3 environment!)&lt;/p&gt;
&lt;p&gt;Now, we need to get our app there and install requirements. An example for the tutorial demo app (adjust for your clone/download path):&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_1a6806dde5bb455484ef84d1f6c6bb3c-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myapp
&lt;a name="rest_code_1a6806dde5bb455484ef84d1f6c6bb3c-2"&gt;&lt;/a&gt;cp -r ~/git/flask-demo-app appdata
&lt;a name="rest_code_1a6806dde5bb455484ef84d1f6c6bb3c-3"&gt;&lt;/a&gt;bin/pip install -r appdata/requirements.txt
&lt;/pre&gt;&lt;p&gt;I’m storing my application data in the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; subdirectory so that it doesn’t clutter the virtualenv (or vice versa).  You may also install the &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in the virtualenv, but it’s optional.&lt;/p&gt;
&lt;p&gt;What this directory should be depends on your web framework.  For example, for a Django app, you should have an &lt;tt class="docutils literal"&gt;appdata/manage.py&lt;/tt&gt; file (in other words, &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; is where your app structure starts).  I also assumed that the &lt;tt class="docutils literal"&gt;appdata&lt;/tt&gt; folder should have a &lt;tt class="docutils literal"&gt;static&lt;/tt&gt; subdirectory with all static files, including &lt;tt class="docutils literal"&gt;favicon.ico&lt;/tt&gt; if you have one (we will add support for both in nginx).&lt;/p&gt;
&lt;p&gt;At this point, you should chown this directory to the user and group your server is going to run as.  This is especially important if uwsgi and nginx run as different users (as they do on Fedora). Run one of the following commands:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_0769be8b9e21494b81a9df7e2a67613d-1"&gt;&lt;/a&gt;chown -R www-data:www-data /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Fedora:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ba98b5b7307941509c031b97997cfd20-1"&gt;&lt;/a&gt;chown -R uwsgi:nginx /srv/myapp
&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Arch Linux:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_145bcf61304e4e269e8c06ad61e87543-1"&gt;&lt;/a&gt;chown -R http:http /srv/myapp
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="configuring-uwsgi-and-nginx"&gt;
&lt;h2&gt;Configuring uWSGI and nginx&lt;/h2&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Parts of the configuration depend on your operating system. I tried to provide advice for Ubuntu, Fedora and Arch Linux. If you experience any issues, in particular with plugins, please consult the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We need to write a configuration file for uWSGI and nginx.&lt;/p&gt;
&lt;div class="section" id="uwsgi-configuration"&gt;
&lt;h3&gt;uWSGI configuration&lt;/h3&gt;
&lt;p&gt;Start with this, but read the notes below and change the values accordingly:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-2"&gt;&lt;/a&gt;&lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/uwsgi.sock&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-3"&gt;&lt;/a&gt;&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;775&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-4"&gt;&lt;/a&gt;&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-5"&gt;&lt;/a&gt;&lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-6"&gt;&lt;/a&gt;&lt;span class="na"&gt;binary-path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/bin/uwsgi&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-7"&gt;&lt;/a&gt;&lt;span class="na"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-8"&gt;&lt;/a&gt;&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;flaskapp:app&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-9"&gt;&lt;/a&gt;&lt;span class="na"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-10"&gt;&lt;/a&gt;&lt;span class="na"&gt;gid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-11"&gt;&lt;/a&gt;&lt;span class="na"&gt;processes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-12"&gt;&lt;/a&gt;&lt;span class="na"&gt;threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-13"&gt;&lt;/a&gt;&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;python3,logfile&lt;/span&gt;
&lt;a name="rest_code_5c30e76d106b41e8aec55c3b25e0944e-14"&gt;&lt;/a&gt;&lt;span class="na"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;file:/srv/myapp/uwsgi.log&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/uwsgi-emperor/vassals/myapp.ini&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora: &lt;tt class="docutils literal"&gt;/etc/uwsgi.d/myapp.ini&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: &lt;tt class="docutils literal"&gt;/etc/uwsgi/vassals/myapp.ini&lt;/tt&gt; (create the directory first and &lt;strong&gt;chown&lt;/strong&gt; it to http: &lt;tt class="docutils literal"&gt;mkdir &lt;span class="pre"&gt;-p&lt;/span&gt; /etc/uwsgi/vassals; chown &lt;span class="pre"&gt;-R&lt;/span&gt; http:http /etc/uwsgi/vassals&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The options are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;socket&lt;/tt&gt; — the socket file that will be used by your application. It’s usually a file path (Unix domain socket). You could use a local TCP socket, but it’s not recommended.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;chdir&lt;/tt&gt; — the app directory.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;binary-path&lt;/span&gt;&lt;/tt&gt; — the uWSGI executable to use. Remove if you didn’t install the (optional) &lt;tt class="docutils literal"&gt;uwsgi&lt;/tt&gt; package in your virtualenv.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; — the virtualenv for your application.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;module&lt;/tt&gt; — the name of the module that houses your application, and the object that speaks the WSGI interface, separated by colons. This depends on your web framework:&lt;ul&gt;
&lt;li&gt;For Flask: &lt;tt class="docutils literal"&gt;module = filename:app&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;filename&lt;/tt&gt; is the name of your Python file (without the &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; part) and &lt;tt class="docutils literal"&gt;app&lt;/tt&gt; is the &lt;tt class="docutils literal"&gt;Flask&lt;/tt&gt; object&lt;/li&gt;
&lt;li&gt;For Django: &lt;tt class="docutils literal"&gt;module = project.wsgi:application&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;project&lt;/tt&gt; is the name of your project (directory with &lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt;).  You should also add an environment variable: &lt;tt class="docutils literal"&gt;env = DJANGO_SETTINGS_MODULE=project.settings&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;For Bottle: &lt;tt class="docutils literal"&gt;module = filename:app&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;app = bottle.default_app()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;For Pyramid: &lt;tt class="docutils literal"&gt;module = filename:app&lt;/tt&gt;, where &lt;tt class="docutils literal"&gt;app = config.make_wsgi_app()&lt;/tt&gt; (make sure it’s &lt;strong&gt;not&lt;/strong&gt; in a &lt;tt class="docutils literal"&gt;if __name__ == '__main__':&lt;/tt&gt; block — the demo app does that!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;uid&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;gid&lt;/tt&gt; — the names of the user account to use for your server.  Use the same values as in the &lt;tt class="docutils literal"&gt;chown&lt;/tt&gt; command above.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;processes&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;threads&lt;/tt&gt; — control the resources devoted to this application. Because this is a simple hello app, I used one process with one thread, but for a real app, you will probably need more (you need to see what works the best; there is no algorithm to decide). Also, remember that if you use multiple processes, they don’t share data, so you need an out-of-process database if you want that.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;plugins&lt;/tt&gt; — the list of uWSGI plugins to use. For Arch Linux, use &lt;tt class="docutils literal"&gt;plugins = python&lt;/tt&gt; (the &lt;tt class="docutils literal"&gt;logfile&lt;/tt&gt; plugin is always active).&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;logger&lt;/tt&gt; — the path to your app-specific logfile. (Other logging facilities are available, but this one is the easiest, especially for multiple applications on the same server)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test your configuration by running &lt;tt class="docutils literal"&gt;uwsgi &lt;span class="pre"&gt;--ini&lt;/span&gt; /path/to/myapp.ini&lt;/tt&gt; (disable the logger for stderr output or run &lt;tt class="docutils literal"&gt;tail &lt;span class="pre"&gt;-f&lt;/span&gt; /srv/myapp/uwsgi.log&lt;/tt&gt; in another window).&lt;/p&gt;
&lt;p&gt;If you’re using &lt;strong&gt;Fedora&lt;/strong&gt;, there are two configuration changes you need to make globally: in &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt;, disable the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;emperor-tyrant&lt;/span&gt;&lt;/tt&gt; option (which seems to be buggy) and set &lt;tt class="docutils literal"&gt;gid = nginx&lt;/tt&gt;.  We’ll need this so that nginx can talk to your socket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx-configuration"&gt;
&lt;h3&gt;nginx configuration&lt;/h3&gt;
&lt;p&gt;We need to configure our web server. Here’s a basic configuration that will get us started:&lt;/p&gt;
&lt;p&gt;Save this file as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled/myapp.conf&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Fedora: &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Arch Linux: add &lt;tt class="docutils literal"&gt;include &lt;span class="pre"&gt;/etc/nginx/conf.d/*.conf;&lt;/span&gt;&lt;/tt&gt; to your &lt;tt class="docutils literal"&gt;http&lt;/tt&gt; directive in &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; and use &lt;tt class="docutils literal"&gt;/etc/nginx/conf.d/myapp.conf&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code nginx"&gt;&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-2"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-3"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt; &lt;span class="s"&gt;myapp.local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-5"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-6"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-7"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:/srv/myapp/uwsgi.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-8"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-10"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-11"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-12"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-14"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/favicon.ico&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-15"&gt;&lt;/a&gt;        &lt;span class="kn"&gt;alias&lt;/span&gt; &lt;span class="s"&gt;/srv/myapp/appdata/static/favicon.ico&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-16"&gt;&lt;/a&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_dda92488640945f5b9880497db9e56a5-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that this file is a very basic and rudimentary configuration. This configuration is fine for local testing, but for a real deployment, you will need to adjust it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;listen&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;443 ssl&lt;/tt&gt; and create a http→https redirect on port 80 (you can get a free SSL certificate from &lt;a class="reference external" href="https://letsencrypt.org/"&gt;Let’s Encrypt&lt;/a&gt;; &lt;a class="reference external" href="https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html"&gt;make sure to configure SSL properly&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;set &lt;tt class="docutils literal"&gt;server_name&lt;/tt&gt; to your real domain name&lt;/li&gt;
&lt;li&gt;you might also want to add custom error pages, or change anything else that relates to your web server — consult other nginx guides for details&lt;/li&gt;
&lt;li&gt;nginx might have some server already enabled by default — edit &lt;tt class="docutils literal"&gt;/etc/nginx/nginx.conf&lt;/tt&gt; to disable it&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="service-setup"&gt;
&lt;h2&gt;Service setup&lt;/h2&gt;
&lt;p&gt;After you’ve configured uWSGI and nginx, you need to enable and start the system services.&lt;/p&gt;
&lt;p&gt;I’m going to use &lt;tt class="docutils literal"&gt;systemd&lt;/tt&gt; here. If your system does not support &lt;tt class="docutils literal"&gt;systemd&lt;/tt&gt;, please consult your OS documentation for instructions.&lt;/p&gt;
&lt;div class="section" id="for-arch-linux"&gt;
&lt;h3&gt;For Arch Linux&lt;/h3&gt;
&lt;p&gt;All you need is:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_9fdf17c51df44e03ac1bebc44a1eabe6-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx emperor.uwsgi
&lt;a name="rest_code_9fdf17c51df44e03ac1bebc44a1eabe6-2"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="for-fedora"&gt;
&lt;h3&gt;For Fedora&lt;/h3&gt;
&lt;p&gt;Make sure you followed the extra note about editing &lt;tt class="docutils literal"&gt;/etc/uwsgi.ini&lt;/tt&gt; and run:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_ad1d8cea92e047498c39e4a2af19f226-1"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx uwsgi
&lt;a name="rest_code_ad1d8cea92e047498c39e4a2af19f226-2"&gt;&lt;/a&gt;systemctl start nginx uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;This is enough to get an app working, if you disabled SELinux (if you want to do it, edit &lt;tt class="docutils literal"&gt;/etc/selinux/config&lt;/tt&gt; and reboot), but if you want to keep SELinux happy, you need to do the following:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_732b4775f29f425187b5576f629537b3-1"&gt;&lt;/a&gt;setenforce 0
&lt;a name="rest_code_732b4775f29f425187b5576f629537b3-2"&gt;&lt;/a&gt;chcon -R system_u:system_r:httpd_t:s0 /srv/myapp/appdata/static
&lt;a name="rest_code_732b4775f29f425187b5576f629537b3-3"&gt;&lt;/a&gt;setenforce 1
&lt;/pre&gt;&lt;p&gt;We now need to install a &lt;a class="reference external" href="https://chriswarrick.com/pub/nginx-uwsgi.pp"&gt;SELinux policy&lt;/a&gt; (that I created for this project). If it doesn’t work, look into &lt;tt class="docutils literal"&gt;audit2allow&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_8d53b4d227604450a46952de0896b650-1"&gt;&lt;/a&gt;semodule -i nginx-uwsgi.pp
&lt;/pre&gt;&lt;p&gt;Hopefully, this is enough. In case it isn’t, please read SELinux documentation, and check audit logs.&lt;/p&gt;
&lt;p&gt;Also if you’re on Fedora, to make your website accessible from the outside Internet, you need to configure the built-in firewall accordingly — for ports 80/443, use:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_2450adbc926d40ff9494a212cba944dc-1"&gt;&lt;/a&gt;firewall-cmd --add-service http
&lt;a name="rest_code_2450adbc926d40ff9494a212cba944dc-2"&gt;&lt;/a&gt;firewall-cmd --add-service https
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="for-ubuntu"&gt;
&lt;h3&gt;For Ubuntu&lt;/h3&gt;
&lt;p&gt;Ubuntu does not ship the uWSGI Emperor service by default. However, you can easily create it.  Copy the &lt;tt class="docutils literal"&gt;.service&lt;/tt&gt; file from the &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.org/en/latest/Systemd.html#adding-the-emperor-to-systemd"&gt;uWSGI systemd documentation&lt;/a&gt; to &lt;tt class="docutils literal"&gt;/etc/systemd/system/emperor.uwsgi.service&lt;/tt&gt;.  Change the ExecStart line to:&lt;/p&gt;
&lt;pre class="code ini"&gt;&lt;a name="rest_code_4183cac74cc64092b210555e3d49479b-1"&gt;&lt;/a&gt;&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/uwsgi --ini /etc/uwsgi-emperor/emperor.ini&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You can now reload systemd daemons and enable the services:&lt;/p&gt;
&lt;pre class="code sh"&gt;&lt;a name="rest_code_04a9db9d0f0c4e0db37b3703170619b7-1"&gt;&lt;/a&gt;systemctl daemon-reload
&lt;a name="rest_code_04a9db9d0f0c4e0db37b3703170619b7-2"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;nginx emperor.uwsgi
&lt;a name="rest_code_04a9db9d0f0c4e0db37b3703170619b7-3"&gt;&lt;/a&gt;systemctl start nginx emperor.uwsgi
&lt;/pre&gt;&lt;p&gt;Verify the service is running with &lt;tt class="docutils literal"&gt;systemctl status emperor.uwsgi&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-end-result"&gt;
&lt;h2&gt;Testing — end result&lt;/h2&gt;
&lt;p&gt;Your web service should now be running at &lt;a class="reference external" href="http://localhost:8080/"&gt;http://localhost:8080/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you used the demo application, you should see something like this (complete with the favicon and image greeting):&lt;/p&gt;
&lt;img alt="/images/nginx-uwsgi-demo.png" class="centered" src="https://chriswarrick.com/images/nginx-uwsgi-demo.png"&gt;
&lt;p&gt;Hopefully, everything works. If it doesn’t, check nginx and uwsgi logs for details, and make sure you followed all instructions.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;For easy linking, I set up some aliases: &lt;a class="reference external" href="https://go.chriswarrick.com/pyweb"&gt;https://go.chriswarrick.com/pyweb&lt;/a&gt; and &lt;a class="reference external" href="https://go.chriswarrick.com/uwsgi-tut"&gt;https://go.chriswarrick.com/uwsgi-tut&lt;/a&gt; (powered by a Django web application, deployed with nginx and uwsgi!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2016-02-10 17:00 UTC:&lt;/strong&gt; This guide uses nginx and uWSGI, because they
are considered best practices by most people. nginx is a fast, modern web
server, with uWSGI support built in (without resorting to reverse proxying).
uWSGI is similarly aimed at speed. The Emperor mode of uWSGI is recommended for
init system integration by the uWSGI team, and it’s especially useful for
multi-app deployments. (This guide is opinionated.)&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This reflink gives you $10 in credit, which is enough to run a server for up to two months without paying a thing. I earn $15.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If you’re in the EU (and thus have to pay VAT), or want DO to handle your backups, it will cost you a little more.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ubuntu 14.04 LTS does not use systemd — you’re on your own (upstart services exist, figure out how to use them yourself). Note that other software might be outdated as well — proceed with care, or just use something more modern.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Arch Linux</category><category>Django</category><category>Fedora</category><category>Flask</category><category>Internet</category><category>Linux</category><category>nginx</category><category>Python</category><category>systemd</category><category>Ubuntu</category><category>uWSGI</category><guid>https://chriswarrick.com/blog/2016/02/10/deploying-python-web-apps-with-nginx-and-uwsgi-emperor/</guid><pubDate>Wed, 10 Feb 2016 14:00:00 GMT</pubDate></item><item><title>Rewriting a Flask app in Django</title><link>https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I spent Saturday on rewriting a Flask app in Django.  The app in question was
&lt;a class="reference external" href="https://users.getnikola.com/"&gt;Nikola Users&lt;/a&gt;, which is a very simple CRUD
app.  And yet, the Flask code was a mess, full of bugs and vulnerabilities.
Eight hours later, I had a fully functional Django app that did more and fixed
all problems.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;div class="section" id="original-flask-app"&gt;
&lt;h2&gt;Original Flask app&lt;/h2&gt;
&lt;p&gt;The original Flask app had a ton of problems.  In order to make it anywhere
near useful, I would need to spend hours.  Here’s just a few of
them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;357 lines of spaghetti code (295 SLOC), all in one file&lt;/li&gt;
&lt;li&gt;No form data validation, no CSRF &lt;a class="footnote-reference" href="https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/#id2" id="id1"&gt;[1]&lt;/a&gt; protection (it did have XSS protection
though)&lt;/li&gt;
&lt;li&gt;Login using Mozilla Persona, which requries JavaScript, is a bit kludgey, and
feels desolate (and also had me store the admin e-mail list in code)&lt;/li&gt;
&lt;li&gt;Geopolitics issues: using country flags for languages&lt;/li&gt;
&lt;li&gt;A lot of things were implemented by hand&lt;/li&gt;
&lt;li&gt;SQLAlchemy is very verbose&lt;/li&gt;
&lt;li&gt;no DB migrations (makes enhancements harder)&lt;/li&gt;
&lt;li&gt;Languages implemented as a PostgreSQL integer array&lt;/li&gt;
&lt;li&gt;Adding a language required running a command-line script and &lt;strong&gt;restarting the
app&lt;/strong&gt; (languages were cached in Python dicts with no way to reload them from
the database; that would require talking through uWSGI anyway because there
were multiple processes involved)&lt;/li&gt;
&lt;li&gt;The templates were slightly hacky (the page title was set in each individual
template and not in the view code); menus hacked together in HTML with no
highlighting&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-rewrite"&gt;
&lt;h2&gt;The rewrite&lt;/h2&gt;
&lt;p&gt;I started the process by opening &lt;a class="reference external" href="https://docs.djangoproject.com/en/"&gt;Django documentation&lt;/a&gt;, with its wonderful
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/intro/tutorial01/"&gt;tutorial&lt;/a&gt;.  Now, I have written a couple basic Django apps before, but
the majority of them didn’t do much.  In other words, I didn’t have a lot of experience.  Especially with taking user input and relationships.  It took me about 8 hours to get feature parity, and more.&lt;/p&gt;
&lt;p&gt;Getting all the features was really simple.  For example, to get a many-to-many
relationship for languages, I had to write just one line.&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_acbf5f2002cf4061a3c85e48a99b4710-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ManyToManyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That’s it.  I didn’t have to run through complicated SQLAlchemy documentation,
which provides a &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_1_0/orm/basic_relationships.html#many-to-many"&gt;13-line solution&lt;/a&gt; to the same problem.&lt;/p&gt;
&lt;p&gt;Django also simplified New Relic integration, as the browser JS can be implemented
using Django template tags.&lt;/p&gt;
&lt;p&gt;Django is not without its problems, though.  I got a very cryptic traceback
when I did this:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_216e38892ead4484970ef95c0781a8e4-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;publish_email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BooleanField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Publish e-mail"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_216e38892ead4484970ef95c0781a8e4-2"&gt;&lt;/a&gt;&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"BooleanField() got multiple values for argument 'required'"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The real problem with this code?  I forgot the &lt;tt class="docutils literal"&gt;label=&lt;/tt&gt; keyword.  The
problem is, the model API accepts this syntax — &lt;tt class="docutils literal"&gt;verbose_name&lt;/tt&gt; is the first
argument.  (I am not actually using the labels though, I write my own form
HTML)&lt;/p&gt;
&lt;p&gt;Still, the Django version is much cleaner.  And the best part of all?  There
are no magic global objects (&lt;tt class="docutils literal"&gt;g&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;session&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;request&lt;/tt&gt;) and
decorator-based views (which are a bit of syntax abuse IMO).&lt;/p&gt;
&lt;p&gt;In the end, I have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;382 lines of code (297 SLOC) over 6 files — much cleaner, and with less long lines&lt;/li&gt;
&lt;li&gt;form data validation (via Django), CSRF and XSS protection&lt;/li&gt;
&lt;li&gt;Login using Django built-in authentication, without JavaScript&lt;/li&gt;
&lt;li&gt;Language codes (granted, I could’ve done that really easily back in Flask)&lt;/li&gt;
&lt;li&gt;Tried-and-true implementations of common patterns&lt;/li&gt;
&lt;li&gt;Django models are much more readable and friendly&lt;/li&gt;
&lt;li&gt;Django-provided DB migrations (generated automatically!)&lt;/li&gt;
&lt;li&gt;Languages implemented using Django many-to-many relationships&lt;/li&gt;
&lt;li&gt;Adding a language is possible from the Django built-in admin panel and is
reflected immediately (no caching)&lt;/li&gt;
&lt;li&gt;Titles and menus in code&lt;/li&gt;
&lt;li&gt;Python 3&lt;/li&gt;
&lt;li&gt;New features: featured sites; show only a specified language — were really easy to add&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I had some &lt;tt class="docutils literal"&gt;CSRF_ENABLED&lt;/tt&gt; variable, but it did not seem to be actually
used by anything.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Django</category><category>Flask</category><category>Internet</category><category>Nikola</category><category>Python</category><guid>https://chriswarrick.com/blog/2015/10/11/rewriting-a-flask-app-in-django/</guid><pubDate>Sun, 11 Oct 2015 15:24:43 GMT</pubDate></item><item><title>Facebook Knows Too Much.</title><link>https://chriswarrick.com/blog/2014/11/07/facebook-knows-too-much/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is stating the obvious.  Facebook just scared me with some data points
it has about me.  Full story, right after the break.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Today’s &lt;em&gt;abundance of knowledge&lt;/em&gt; as presented by Facebook comes from Facebook’s
&lt;em&gt;stranger familiarization&lt;/em&gt; feature.  Fancy made-up words aside, it’s the
notifications of the form:&lt;/p&gt;
&lt;blockquote&gt;
Jaime Lannister &lt;strong&gt;(friends with Cersei Lannister)&lt;/strong&gt; liked your photo.&lt;/blockquote&gt;
&lt;p&gt;Now, I hadn’t gotten to see these sort of notices too often.  The first time I
encountered those, Facebook chose some &lt;strong&gt;bad&lt;/strong&gt; examples.  A human, given my
friends list — complete with some basic data and descriptions — could have
easily devised a better one.&lt;/p&gt;
&lt;p&gt;But that was long ago.  Facebook’s knowledge of me has improved &lt;em&gt;vastly&lt;/em&gt;.  You
should see my face back when I received another notification lately.  Facebook
chose a mutual friend out of ten possibilities.  And boy, had they nailed it.
Now, with my memory of the previous occurrence, I thought it was a good guess.
A guess, as I I believed it was just good ol’ &lt;tt class="docutils literal"&gt;/dev/urandom&lt;/tt&gt; supplemented by
the 10% probability resulting in this serendipitous output.&lt;/p&gt;
&lt;p&gt;Now, this happened yet again yesterday.  Two distinct people, one identical
suggestion.  A perfect one at that.  This would be too good.  The probability
was kinda lower this time.  And yet, it came up with a perfect choice.&lt;/p&gt;
&lt;p&gt;How this happened is beyond me.  It looks like this is &lt;strong&gt;not random&lt;/strong&gt;.  It’s an
algorithm.  Facebook probably has some sort of lookup table, matching my
friends with some fancy &lt;em&gt;likability&lt;/em&gt; coefficient — probably calculated from
chat history, or likes, or the vast archives Facebook has.&lt;/p&gt;
&lt;p&gt;I’d love to see what Facebook thinks about me.  I might even contribute better
numbers, as they &lt;em&gt;might&lt;/em&gt; be wrong — then again, I have absolutely no idea what
they are.&lt;/p&gt;
&lt;p&gt;If anyone from Facebook is listening: I’d love to see the data you use for this
algorithm — and possibly many others.&lt;/p&gt;
&lt;div class="section" id="bonus-downloading-my-data"&gt;
&lt;h2&gt;Bonus: downloading my data&lt;/h2&gt;
&lt;p&gt;I actually requested my Facebook data archive right now.  One of the
information included was &lt;em&gt;Mobile Network Connection Quality&lt;/em&gt;.  It shows the
average bandwidth and round-trip time of my HSPA+ mobile networks and Wi-Fi
networks (collectively).  Here’s a question: &lt;strong&gt;WHY&lt;/strong&gt; does Facebook care?!  What is
the purpose of collecting this information?  They can’t do anything about it,
unless they were to send complaints to the service providers.  Which they
cannot.&lt;/p&gt;
&lt;p&gt;Digging through the archive even further, Facebook seems to fail with ads (that
I don’t see anyways…)  How can I fix it?  The tags are completely wrong and not
valid for yours truly…  They should at least &lt;strong&gt;try&lt;/strong&gt; to show me valid
advertisements.  Here is a sample of what was chosen:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;#Censorship.&lt;/strong&gt;  Not really.  I don’t have anything to do with censorship at
all.  It actually comes from a page I liked, that doesn’t really do any
anti-censorship activism.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#[my city here].&lt;/strong&gt;  &lt;strong&gt;#[a video game].&lt;/strong&gt;  Both make sense.  I actually
liked pages related to both.  (Though I liked the second game of the series
and the tag is for the first, or — at worst — all games collectively.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#[a movie I HAVE NEVER SEEN]&lt;/strong&gt;.  Facebook failed at getting the reference
yet again.  The title of the movie appears in the name of a page — but they
are not related at all.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;#[a South Hemisphere company I never heard of.]&lt;/strong&gt;  I actually see the
reference after looking at my likes and their Wikipedia page.  It’s &lt;strong&gt;very invalid&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;…and many more incorrect things I do not care about.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You would have thought Facebook has developed algorithms to devise correct
&lt;strong&gt;ads&lt;/strong&gt; — the thing their money comes from…&lt;/p&gt;
&lt;p&gt;I still do not understand all this.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Facebook</category><category>Internet</category><category>rant</category><guid>https://chriswarrick.com/blog/2014/11/07/facebook-knows-too-much/</guid><pubDate>Fri, 07 Nov 2014 19:20:00 GMT</pubDate></item><item><title>Password Changing 101</title><link>https://chriswarrick.com/blog/2013/02/09/password-changing-101/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;Yesterday, I finally created a new password for myself.  Now, changing
passwords all over the world is what I should do.  But it isn’t easy.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;One important thing: the new password is &lt;a class="reference external" href="http://xkcd.com/936/"&gt;XKCD 936&lt;/a&gt; compatible.  It makes no
sense at all and is &lt;strong&gt;32&lt;/strong&gt; characters (29 letters) long.  I kept myself within
ASCII, specifically 0x20 + 0x61…0x7A.  The previous password was &lt;strong&gt;9&lt;/strong&gt;
characters long and a few (4 or 5) years old.&lt;/p&gt;
&lt;div class="section" id="the-great-list-of-password-changes"&gt;
&lt;h2&gt;The Great List of Password Changes&lt;/h2&gt;
&lt;p&gt;After updating the most important passwords (Linux, Google, Twitter, Facebook,
GitHub, Reddit, Remember the Milk, Trello), I took an analog piece of paper and
wrote down all the places where I should change my password.  I wrote down
&lt;strong&gt;26&lt;/strong&gt; different places.  We will go through them (including the above ones,
save for Linux.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="password-update-wall-of-fame"&gt;
&lt;h2&gt;Password Update Wall of Fame&lt;/h2&gt;
&lt;p&gt;In alphabetical order,&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Arch User Repository&lt;/li&gt;
&lt;li&gt;Codecademy&lt;/li&gt;
&lt;li&gt;Dropbox*&lt;/li&gt;
&lt;li&gt;Facebook*&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;Google*&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;IFTTT&lt;/li&gt;
&lt;li&gt;Khan Academy&lt;/li&gt;
&lt;li&gt;MediaWiki (Wikipedia etc.)&lt;/li&gt;
&lt;li&gt;Reddit&lt;/li&gt;
&lt;li&gt;Remember the Milk&lt;/li&gt;
&lt;li&gt;Twitter*&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;All of those make it easy to change your password.  Just go to the profile
page, find the appropriate fields, fill them (sometimes your previous password
is needed, sometimes it isn’t, that’s generally fine) and kaboom, your password
is changed.&lt;/p&gt;
&lt;p&gt;Services marked with an asterisk sent me an e-mail confirmation, which is even
better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="password-update-wall-of-amnesia"&gt;
&lt;h2&gt;Password Update Wall of Amnesia&lt;/h2&gt;
&lt;p&gt;I had to simulate amnesia for those services.  I couldn’t find a Password reset
functionality or it was broken.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;DISQUS&lt;/dt&gt;
&lt;dd&gt;DISQUS has a nice password update link.  One problem, it doesn’t work.
After simulating amnesia, all is well.&lt;/dd&gt;
&lt;dt&gt;TweetDeck&lt;/dt&gt;
&lt;dd&gt;Couldn’t find a valid option for what I needed, so I simulated amnesia and
it worked just fine.&lt;/dd&gt;
&lt;dt&gt;Mailman&lt;/dt&gt;
&lt;dd&gt;Some passwords were my previous password, others were my unsafe passwords,
others weren’t my password at all.  All were changed to the unsafe
passwords, sometimes with a need to simulate amnesia.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="password-update-wall-of-bullshit"&gt;
&lt;h2&gt;Password Update Wall of BULLSHIT&lt;/h2&gt;
&lt;p&gt;Those services are SHIT in terms of password reset!  I have absolutely no idea
why I have an account with them!&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;AOL/AIM&lt;/dt&gt;
&lt;dd&gt;It wanted a CAPTCHA, link click and other magic.  Moreover, passwords are
limited to 16 characters.  Enough to type half of my password, at least,
but this is still bad!  The proper upper limit is NONE.&lt;/dd&gt;
&lt;dt&gt;Gadu-Gadu&lt;/dt&gt;
&lt;dd&gt;A Polish IM.  It required amnesia, a difficult CAPTCHA, and when I typed my
password, it rejected it without any meaningful error messages (an
exclamation mark isn’t considered a valid error message.)&lt;/dd&gt;
&lt;dt&gt;Microsoft&lt;/dt&gt;
&lt;dd&gt;Sixteen characters, no spaces, requires fancy characters.  I did not change
my password, because it won’t let me.  Oh, and aren’t those passwords used
for Windows 8, making it even less secure, considering that &lt;cite&gt;passwords are
saved using a reversible encryption method if you use the fancy new
authentication methods (PIN/Picture Password) &amp;lt;http://arstechnica.com/security/2012/10/experts-windows-8-features-make-account-passwords-easier-to-steal/&amp;gt;&lt;/cite&gt;!&lt;/dd&gt;
&lt;dt&gt;PayPal&lt;/dt&gt;
&lt;dd&gt;I trust them with my money, but they believe that my password is weak (1/3)
and have a 20 character limit.  I took the half and added a &lt;tt class="docutils literal"&gt;!&lt;/tt&gt; so they
would let me use it.&lt;/dd&gt;
&lt;dt&gt;Steam&lt;/dt&gt;
&lt;dd&gt;You need to do it from within the desktop app.  Which crashes for me under
Linux due to a recent update.  And I need to do important work under Linux.
So the password will get updated when I will get (a) to Windows; (b) Steam
for Linux working.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-do-a-proper-password-update-process-for-web-devs"&gt;
&lt;h2&gt;How to do a proper password update process (for web devs)&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;User logged in&lt;/dt&gt;
&lt;dd&gt;Profile/settings page should contain a field for the current password (for
added security) and two fields for the new password and its confirmation.&lt;/dd&gt;
&lt;dt&gt;User forgot their password&lt;/dt&gt;
&lt;dd&gt;Ask for an e-mail or the username.  Then, do an e-mail confirmation and let
the user set his password.  Ask twice for the new password.&lt;/dd&gt;
&lt;dt&gt;Limits, requirements etc.&lt;/dt&gt;
&lt;dd&gt;Lower limit of 8 characters should be good enough for most people, and
upper limit should not exist.  A password meter like &lt;a class="reference external" href="https://tech.dropbox.com/2012/04/zxcvbn-realistic-password-strength-estimation/"&gt;zxcvbn by Dropbox&lt;/a&gt;
would also be a great idea.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Internet</category><category>password</category><category>rant</category><guid>https://chriswarrick.com/blog/2013/02/09/password-changing-101/</guid><pubDate>Sat, 09 Feb 2013 12:26:04 GMT</pubDate></item><item><title>YouTube’s Cosmic Panda Sucks!</title><link>https://chriswarrick.com/blog/2011/08/28/youtubes-cosmic-panda-sucks/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;div&gt;&lt;p&gt;I played with the YouTube’s Cosmic Panda UI for a while.  I am not happy
about it.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;YouTube has a new experiment: Cosmic Panda.  They test new
channel and watch page experiences.  I’m opting out — here’s why.&lt;/p&gt;
&lt;div class="section" id="watch-page"&gt;
&lt;h2&gt;Watch Page&lt;/h2&gt;
&lt;figure class="pull-right" style="width: 110px;"&gt;&lt;a href="https://chriswarrick.com/blog-content/galleries/cosmicpanda/nyancat.png"&gt;&lt;img src="https://chriswarrick.com/blog-content/galleries/cosmicpanda/t/nyancat.png"&gt;&lt;figcaption&gt;Nyan Cat — Cosmic Panda&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;Let’s try watching a video, pretty much anything would work.  The opt-in
page suggests &lt;a class="reference external" href="http://www.youtube.com/watch?v=QH2-TGUlwu4"&gt;Nyan Cat&lt;/a&gt;, so let’s watch it.&lt;/p&gt;
&lt;p&gt;Some things don’t work well, though:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Flash Player hides controls when playing&lt;/li&gt;
&lt;li&gt;Video Size:&lt;ol class="arabic"&gt;
&lt;li&gt;Doesn’t adjust the size of the current video, but adjusts
the next ones you choose&lt;/li&gt;
&lt;li&gt;Makes it impossible to use controls in mode 4 (window size)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Thumbnails on the right don’t open in a new tab when clicked with the
mouse wheel&lt;/li&gt;
&lt;li&gt;Comments:&lt;ol class="arabic"&gt;
&lt;li&gt;Some avatars don’t show up&lt;/li&gt;
&lt;li&gt;The dislike button was hidden when the project started&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s all I can see, but I guess there are more flaws.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="clearfix section" id="playlist-watch-page"&gt;
&lt;h2&gt;Playlist Watch Page&lt;/h2&gt;
&lt;p&gt;YouTube suggests &lt;a class="reference external" href="http://www.youtube.com/watch?v=tBQEcsc8EkU&amp;amp;feature=BFa&amp;amp;list=PL9597876E8DF8EBA1&amp;amp;lf=BFa"&gt;a playlist of Rickrolls&lt;/a&gt;.  Great.  Or not.  The UI has
more flaws!&lt;/p&gt;
&lt;figure class="pull-right" style="width: 110px;"&gt;&lt;a href="https://chriswarrick.com/blog-content/galleries/cosmicpanda/rickroll.png"&gt;&lt;img src="https://chriswarrick.com/blog-content/galleries/cosmicpanda/t/rickroll.png"&gt;&lt;figcaption&gt;Rickroll collection/Rick Roll x100 — Cosmic Panda&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;The flaws?  I’m sure about two: you can’t stop the playlist from advancing
to the next video and the content is not organized nicely.  Take a look at
the image #2.  Blue = playlist content.  Red = video content.  That’s a
total mess!  Did they do any usability tests?  I don’t think so.  The “old”
YouTube, for comparison, has a bottom panel with all playlist videos.
Everything else belongs to the video.  Readable and human-friendly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="clearfix section" id="channels"&gt;
&lt;h2&gt;Channels&lt;/h2&gt;
&lt;figure class="pull-right" style="width: 110px;"&gt;&lt;a href="https://chriswarrick.com/blog-content/galleries/cosmicpanda/kiko.png"&gt;&lt;img src="https://chriswarrick.com/blog-content/galleries/cosmicpanda/t/kiko.png"&gt;&lt;figcaption&gt;Kikoskia’s Channel — Cosmic Panda&lt;/figcaption&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I almost forgot about channel view.  This time I will advertise and jump to
&lt;a class="reference external" href="http://www.youtube.com/user/Kikoskia"&gt;Kikoskia’s Channel&lt;/a&gt; (sorry for covering the background on screens).&lt;/p&gt;
&lt;p&gt;In case you’re wondering, the Videos tab shows playlists and the Community
tab shows new videos, channel comments, etc.  There is one problem: every
video link sends you to a playlist.  In order to get out of the playlist,
you need to modify the URL.  It would be great if I could see the channel
background.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;YouTube, remove these not-so-great fetures NOW.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>Internet</category><category>rant</category><category>YouTube</category><guid>https://chriswarrick.com/blog/2011/08/28/youtubes-cosmic-panda-sucks/</guid><pubDate>Sat, 27 Aug 2011 22:00:00 GMT</pubDate></item></channel></rss>