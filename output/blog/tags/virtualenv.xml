<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about virtualenv)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/virtualenv.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 17 Jan 2023 23:53:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;section id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;The best tool that can be used to create virtual environments is the
&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; module, which is part of
the standard library since Python 3.3.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;venv&lt;/code&gt; is built into Python, and most users don’t need to install anything.
However, Debian/Ubuntu users will need to run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/code&gt; to make it work (due to Debian not installing some components
that &lt;code class="docutils literal"&gt;venv&lt;/code&gt; needs by default). &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The alternative (and original, and previously standard) virtual environment tool is &lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt;. It works with Python 2.7, and has a couple
extra fetures (that you generally won’t need). virtualenv can be installed with your system package manager, or &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Which one to use? Probably &lt;code class="docutils literal"&gt;venv&lt;/code&gt;. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;code class="docutils literal"&gt;env&lt;/code&gt;, you need to run the &lt;code class="docutils literal"&gt;venv&lt;/code&gt;
tool with the Python you want to use in that environment.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-1" name="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_5c73b2685dc14ff4b71d67cc31d6962d-1"&gt;&lt;/a&gt;Linux:   $ python3 -m venv env
&lt;a id="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-2" name="rest_code_5c73b2685dc14ff4b71d67cc31d6962d-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_5c73b2685dc14ff4b71d67cc31d6962d-2"&gt;&lt;/a&gt;Windows: &amp;gt; py -m venv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or, if you’re using &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_04890efca875419885b83c3c44fe19fc-1" name="rest_code_04890efca875419885b83c3c44fe19fc-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_04890efca875419885b83c3c44fe19fc-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;a id="rest_code_04890efca875419885b83c3c44fe19fc-2" name="rest_code_04890efca875419885b83c3c44fe19fc-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_04890efca875419885b83c3c44fe19fc-2"&gt;&lt;/a&gt;&amp;gt; py -m virtualenv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, you will end up with a folder named &lt;code class="docutils literal"&gt;env&lt;/code&gt; that contains folders
named &lt;code class="docutils literal"&gt;bin&lt;/code&gt; (&lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; on Windows — contains executables and scripts
installed by packages, including
&lt;code class="docutils literal"&gt;python&lt;/code&gt;), &lt;code class="docutils literal"&gt;lib&lt;/code&gt; (contains code), and &lt;code class="docutils literal"&gt;include&lt;/code&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;setuptools&lt;/code&gt;, but &lt;code class="docutils literal"&gt;venv&lt;/code&gt; does not ship with
&lt;code class="docutils literal"&gt;wheel&lt;/code&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick: &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_4575b021c614415a875bd94b897298a1-1" name="rest_code_4575b021c614415a875bd94b897298a1-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_4575b021c614415a875bd94b897298a1-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a id="rest_code_4575b021c614415a875bd94b897298a1-2" name="rest_code_4575b021c614415a875bd94b897298a1-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_4575b021c614415a875bd94b897298a1-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;section id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Have one global place for them, like &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store them in each project’s directory, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option can be easier to manage, there are tools that can help manage
those (eg. &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, shell auto-activation scripts, or the
&lt;code class="docutils literal"&gt;workon&lt;/code&gt; functions described below).  The second option is equally easy to
work with, but comes with one caveat — you must add the venv directory to your
&lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; file (or &lt;code class="docutils literal"&gt;.git/info/exclude&lt;/code&gt; if you don’t want to commit
changes to &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;), since you don’t want it in your repository (it’s
binary bloat, and works only on your machine).&lt;/p&gt;
&lt;p&gt;If you pick the global virtual environment store option, you can use the following short
function (put it in &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt; / &lt;code class="docutils literal"&gt;.zshrc&lt;/code&gt; / your shell configuration file)
to get a simple way to activate an environment (by running &lt;code class="docutils literal"&gt;workon foo&lt;/code&gt;).
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; also has a &lt;code class="docutils literal"&gt;workon&lt;/code&gt; feature, although I don’t think
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; is really necessary and too helpful — the &lt;code class="docutils literal"&gt;workon&lt;/code&gt;
feature is handy though, and so here’s a way to do it without
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-1" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-1"&gt;&lt;/a&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/virtualenvs
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-2" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-3" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-3"&gt;&lt;/a&gt; &lt;span class="k"&gt;function&lt;/span&gt; workon &lt;span class="o"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-4" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-4"&gt;&lt;/a&gt;     &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_fda7d16c4831425083b9400bbcf9e8c8-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_fda7d16c4831425083b9400bbcf9e8c8-5" name="rest_code_fda7d16c4831425083b9400bbcf9e8c8-5"&gt;&lt;/a&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for PowerShell fans, here’s a &lt;code class="docutils literal"&gt;workon.ps1&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_7052ffc5748142f9af2644d3bef28fd2-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_7052ffc5748142f9af2644d3bef28fd2-1" name="rest_code_7052ffc5748142f9af2644d3bef28fd2-1"&gt;&lt;/a&gt; &lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$home\virtualenvs"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_7052ffc5748142f9af2644d3bef28fd2-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_7052ffc5748142f9af2644d3bef28fd2-2" name="rest_code_7052ffc5748142f9af2644d3bef28fd2-2"&gt;&lt;/a&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"$WORKON_HOME\&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="s2"&gt;\Scripts\activate.ps1"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for cmd.exe fans… you should switch to PowerShell, it’s a very nice and
friendly shell (though perhaps requiring some effort to learn how to be
productive with it).&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;activation (run &lt;code class="docutils literal"&gt;source env/bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;env\Scripts\activate&lt;/code&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly. (After installing
scripts, &lt;code class="docutils literal"&gt;hash &lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/code&gt; may be necessary on *nix to use them.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;executing &lt;code class="docutils literal"&gt;env/bin/python&lt;/code&gt; (&lt;code class="docutils literal"&gt;env\Scripts\python&lt;/code&gt;) and other scripts directly, as
activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is, and that
method is failsafe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-1" name="rest_code_a4573a228eed478fb587036b3bba59c7-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-2" name="rest_code_a4573a228eed478fb587036b3bba59c7-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-3" name="rest_code_a4573a228eed478fb587036b3bba59c7-3" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-4" name="rest_code_a4573a228eed478fb587036b3bba59c7-4" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-5" name="rest_code_a4573a228eed478fb587036b3bba59c7-5" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-6" name="rest_code_a4573a228eed478fb587036b3bba59c7-6" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-7" name="rest_code_a4573a228eed478fb587036b3bba59c7-7" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-8" name="rest_code_a4573a228eed478fb587036b3bba59c7-8" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-9" name="rest_code_a4573a228eed478fb587036b3bba59c7-9" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-10" name="rest_code_a4573a228eed478fb587036b3bba59c7-10" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-11" name="rest_code_a4573a228eed478fb587036b3bba59c7-11" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-12" name="rest_code_a4573a228eed478fb587036b3bba59c7-12" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-13" name="rest_code_a4573a228eed478fb587036b3bba59c7-13" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-14" name="rest_code_a4573a228eed478fb587036b3bba59c7-14" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-15" name="rest_code_a4573a228eed478fb587036b3bba59c7-15" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-16" name="rest_code_a4573a228eed478fb587036b3bba59c7-16" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-17" name="rest_code_a4573a228eed478fb587036b3bba59c7-17" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-17"&gt;&lt;/a&gt;## Windows, updating pip/setuptools/wheel ##
&lt;a id="rest_code_a4573a228eed478fb587036b3bba59c7-18" name="rest_code_a4573a228eed478fb587036b3bba59c7-18" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_a4573a228eed478fb587036b3bba59c7-18"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\python -m pip install -U pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt;, calling it as
&lt;code class="docutils literal"&gt;./manage.py&lt;/code&gt; requires activation, or you can run
&lt;code class="docutils literal"&gt;venv/bin/python manage.py&lt;/code&gt;.)&lt;/p&gt;
&lt;section id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option of &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt; does not work and is deprecated.) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-1" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-2" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-3" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-3" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a id="rest_code_3cd20475e92b438a8ca44750c35f9dcc-4" name="rest_code_3cd20475e92b438a8ca44750c35f9dcc-4" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_3cd20475e92b438a8ca44750c35f9dcc-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;p&gt;To manage those &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files in a more orgnized yet still simple
way, you might be interested in &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;section id="im-using-virtualenv-do-i-need-to-install-it-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;I’m using virtualenv. Do I need to install it for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;code class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/code&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful. (The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is tied to the Python version it’s
installed in.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;code class="docutils literal"&gt;sudo pip&lt;/code&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider using &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; instead.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The thing you’re actually installing is &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; if you want to upgrade the package manager itself.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes (I’m looking at you Homebrew) after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><category>venv</category><category>virtual environments</category><category>virtualenv</category><guid>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item></channel></rss>