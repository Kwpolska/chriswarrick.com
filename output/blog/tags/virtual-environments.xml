<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Chris Warrick (Posts about virtual environments)</title><link>https://chriswarrick.com/</link><description></description><atom:link href="https://chriswarrick.com/blog/tags/virtual-environments.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 16 Jan 2024 17:19:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Packaging, One Year Later: A Look Back at 2023 in Python Packaging</title><link>https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;A year ago, I wrote about the sad state of Python packaging. The large number of tools in the space, the emphasis on writing vague standards instead of rallying around the One True Tool, and the complicated &lt;code class="docutils literal"&gt;venv&lt;/code&gt;-based ecosystem instead of a solution similar to &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;. What has changed in the past year? Has anything improved, is everything the same, or are things worse than they were before?&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;section id="the-tools"&gt;
&lt;h2&gt;The tools&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/"&gt;The original post&lt;/a&gt; listed a bunch of packaging tools, calling &lt;em&gt;fourteen tools at least twelve too many&lt;/em&gt;. My idea with that was that most people would be happy with one tool that does everything, but the scientific-Python folks might have special requirements that would work best as a second tool.&lt;/p&gt;
&lt;p&gt;Out of the tools named in last year’s post, all of them still seem to be maintained. Except for Flit (zero new commits in the past 30 days) and virtualenv (only automated and semi-automated version bumps), the tools have recent commits, pull requests, and issues.&lt;/p&gt;
&lt;p&gt;All of those tools are still in use. &lt;a class="reference external" href="https://framapiaf.org/@fcodvpt/111540079686191842"&gt;Françoise Conil analysed all PyPI packages&lt;/a&gt; and checked their PEP 517 build backends: setuptools is the most popular (at 50k packages), Poetry is second at 41k, Hatchling is third at 8.1k. Other tools to cross 500 users include Flit (4.4k), PDM (1.3k), Maturin (1.3k, build backend for Rust-based packages).&lt;/p&gt;
&lt;p&gt;There are some new tools, of course. Those that crossed my radar are &lt;a class="reference external" href="https://github.com/njsmith/posy"&gt;Posy&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/mitsuhiko/rye"&gt;Rye&lt;/a&gt;. Posy is a project of Nathaniel J. Smith (of trio fame), Rye is a project of Armin Ronacher (of Flask fame). The vision for both of them is to manage Python interpreters and projects, but not have a custom build backend (instead using something like hatchling). Posy is built on top of PyBI (a format for distributing binaries of Python interpreters, proposed by Smith in draft &lt;a class="reference external" href="https://peps.python.org/pep-0711/"&gt;PEP 711&lt;/a&gt;), Rye uses Gregory Szorc’s pre-built Pythons. Rye seems to be fairly complete and usable, Posy is right now a PoC of the PyBI format, and only offers a REPL with pre-installed packages.&lt;/p&gt;
&lt;p&gt;Both Posy and Rye are written in Rust. On the one hand, it makes sense that the part that manages Python interpreters is not written in Python, because that would require a separate Python, not managed by Posy/Rye, to run those tools. But Rye also has its own pyproject.toml parser in Rust, and many of its commands are implemented mostly or largely using Rust (sometimes also calling one-off Python scripts; although the main tasks of creating venvs, installing packages, and working with lockfiles are handed off to &lt;code class="docutils literal"&gt;venv&lt;/code&gt;, &lt;code class="docutils literal"&gt;pip&lt;/code&gt;, and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/code&gt; respectively).&lt;/p&gt;
&lt;p&gt;Speaking of Rust and Python, there’s been another project in that vein that has grown a lot &lt;a class="reference external" href="https://astral.sh/blog/announcing-astral-the-company-behind-ruff"&gt;(and gathered a lot of funding)&lt;/a&gt; in the past year. That project is &lt;a class="reference external" href="https://github.com/astral-sh/ruff"&gt;Ruff&lt;/a&gt;, which is a linter and code formatter. Ruff formats Python code, and is written in Rust. This means it’s 10–100× faster than existing tools written in Python (according to Ruff’s own benchmarks). Fast is good, I guess, but what does this say about Python? Is the fact that package tools (which aren’t rocket science, maybe except for fast dependency solvers, and which often need access to Python internals to do their job) and code formatters (which require a deep understanding of Python syntax, and parsing Python sources to ASTs, something easy by the &lt;code class="docutils literal"&gt;ast&lt;/code&gt; Python module) are written in another language? Does this trend make Python a toy language (as it is also often considered &lt;em&gt;a glue language&lt;/em&gt; for NumPy and friends)? Also, why should contributing to a tool important to many Python developers require learning Rust?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-standards"&gt;
&lt;h2&gt;The standards&lt;/h2&gt;
&lt;p&gt;Last time we looked at packaging standards, we focused on &lt;a class="reference external" href="https://peps.python.org/pep-0582/"&gt;PEP 582&lt;/a&gt;. It proposed the introduction of &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt;, which would be a place for third-party packages to be installed to locally, on a per-project basis, without involving virtual environments, similarly to what &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; is for node. The PEP was ultimately &lt;a class="reference external" href="https://discuss.python.org/t/pep-582-python-local-packages-directory/963/430"&gt;rejected&lt;/a&gt; in March 2023. The PEP wasn’t perfect, and some of its choices were questionable or insufficient (such as not recursively searching for &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; in parent directories, or focusing on simple use-cases only). No new standards for something in that vein (with a better design) were proposed to this day.&lt;/p&gt;
&lt;p&gt;Another contentious topic is lock files. Lock files for packaging systems are useful for reproducible dependency installations. The lock file records all installed packages (i.e. includes transitive dependencies) and their versions. Lock files often include checksums (like sha512) of the installed packages, and they often support telling apart packages installed via different groups of dependencies (runtime, buildtime, optional, development, etc.).&lt;/p&gt;
&lt;p&gt;The classic way of achieving this goal are &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files. They are specific to pip, and they only contain a list of packages, versions, and possibly checksums. Those files can be generated by &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt;, or the third-party &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; from &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/code&gt;. &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; is very basic, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; can’t handle different groups of dependencies other than making multiple &lt;code class="docutils literal"&gt;requirements.in&lt;/code&gt; files, compiling them, and hoping there are no conflicts.&lt;/p&gt;
&lt;p&gt;Pipenv, Poetry, and PDM have their own lockfile implementations, incompatible with one another. Rye piggybacks on top of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/code&gt;. Hatch doesn’t have anything in core; they’re waiting for a standard implementation (there are some plugins though). &lt;a class="reference external" href="https://peps.python.org/pep-0665/"&gt;PEP 665&lt;/a&gt; was &lt;a class="reference external" href="https://discuss.python.org/t/pep-665-take-2-a-file-format-to-list-python-dependencies-for-reproducibility-of-an-application/11736/140"&gt;rejected&lt;/a&gt; in January 2022. Its author, Brett Cannon, &lt;a class="reference external" href="https://snarky.ca/state-of-standardized-lock-files-for-python-august-2023/"&gt;is working on a PoC&lt;/a&gt; of something that &lt;em&gt;might&lt;/em&gt; become a standard (named &lt;a class="reference external" href="https://github.com/brettcannon/mousebender"&gt;mousebender&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This is the danger of the working model adopted by the Python packaging world. Even for something as simple as lock files, there are at least four incompatible standards. An attempt at a specification was rejected due to “lukewarm reception”, even though there exist at least four implementations which are achieving roughly the same goals, and other ecosystems also went through this before.&lt;/p&gt;
&lt;p&gt;Another thing important to Python are extension modules. Extension modules are written in C, and they are usually used to interact with libraries written in other languages (and also sometimes for performance). Poetry, PDM, and Hatchling don’t really support building extension modules. Setuptools does; &lt;a class="reference external" href="https://numpy.org/doc/stable/reference/distutils_status_migration.html"&gt;SciPy and NumPy migrated from their custom numpy.distutils to Meson&lt;/a&gt;. The team behind the PyO3 Rust bindings for Python develops &lt;a class="reference external" href="https://github.com/PyO3/maturin"&gt;Maturin&lt;/a&gt;, which allows for building Rust-based extension modules — but it’s not useful if you’re working with C.&lt;/p&gt;
&lt;p&gt;There weren’t many packaging-related standards that were accepted in 2023. A standard worth mentioning is &lt;a class="reference external" href="https://peps.python.org/pep-0668/"&gt;PEP 668&lt;/a&gt;, which allows distributors to prevent &lt;cite&gt;pip&lt;/cite&gt; from working (to avoid breaking distro-owned site packages) by adding an &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;EXTERNALLY-MANAGED&lt;/span&gt;&lt;/code&gt; file. It was accepted in June 2022, but pip only implemented support for it in January 2023, and many distros already have enabled this feature in 2023. Preventing broken systems is a good thing.&lt;/p&gt;
&lt;p&gt;But some standards did make it through. Minor and small ones aside, the most prominent 2023 standard would be &lt;a class="reference external" href="https://peps.python.org/pep-0723/"&gt;PEP 723&lt;/a&gt;: inline script metadata. It allows to add a comment block at the top of the file, that specifies the dependencies and the minimum Python version in a way that can be consumed by tools. Is it super useful? I don’t think so; setting up a project with pyproject.toml would easily allow things to grow. If you’re sending something via a GitHub gist, just make a repo. If you’re sending something by e-mail, just tar the folder. That approach promotes messy programming without source control.&lt;/p&gt;
&lt;section id="learning-curves-and-the-deception-of-simple"&gt;
&lt;h3&gt;Learning curves and the deception of “simple”&lt;/h3&gt;
&lt;p&gt;Microsoft Word is simple, and a great beginner’s writing tool. You can make text bold with a single click. You can also make it blue in two clicks. But it’s easy to make an inconsistent mess. To make section headers, many users may just make the text bold and a bit bigger, without any consistency or semantics &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. Making a consistent document with semantic formatting is hard in Word. Adding &lt;a class="reference external" href="https://www.techrepublic.com/article/how-to-create-multilevel-numbered-headings-in-word-2016/"&gt;section numbering&lt;/a&gt; requires you to select a heading and turn it into a list. There’s also supposedly some magic involved, that magic doesn’t work for me, and I have to tell Word to update the heading style. Even if you try doing things nicely, Word will randomly break, mess up the styles, mix up styles and inline ad-hoc formatting, and your document may look differently on different computers.&lt;/p&gt;
&lt;p&gt;LaTeX is very confusing to a beginner, and has a massive learning curve. And you can certainly write &lt;code class="docutils literal"&gt;\textbf{hello}&lt;/code&gt; everywhere. But with some learning, you’ll be producing beautiful documents. You’ll define a &lt;code class="docutils literal"&gt;\code{}&lt;/code&gt; command that makes code monospace and adds a border today, but it might change the background and typeset in Comic Sans tomorrow if you so desire. You’ll use packages that can render code from external files with syntax highlighting. Heading numbering is on by default, but it can easily be disabled for a section. LaTeX can also automatically put new sections on new pages, for example. LaTeX was built for scientific publishing, so it has stellar support for maths and bibliographies, among other things.&lt;/p&gt;
&lt;p&gt;Let’s now talk about programming. Python is simple, and a great beginner’s programming language. You can write &lt;em&gt;hello world&lt;/em&gt; in a single line of code. The syntax is simpler, there are no confusing leftovers from C (like the index-based &lt;code class="docutils literal"&gt;for&lt;/code&gt; loop) or machine-level code (like &lt;code class="docutils literal"&gt;break&lt;/code&gt; in &lt;code class="docutils literal"&gt;switch&lt;/code&gt;), no pointers in sight. You also don’t need to write classes at all; you don’t need to write a class only to put a &lt;code class="docutils literal"&gt;public static void main(String[] args)&lt;/code&gt; method there &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. You don’t need an IDE, you can just write code using any editor (even notepad.exe will do for the first day or so), you can save it as a .py  file and run it using &lt;code class="docutils literal"&gt;python whatever.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your code got more complicated? No worry, you can split it into multiple &lt;code class="docutils literal"&gt;.py&lt;/code&gt; files, use &lt;code class="docutils literal"&gt;import name_of_other_file_without_py&lt;/code&gt; and it will just work. Do you need more structure, grouping into folders perhaps? Well, forget about &lt;code class="docutils literal"&gt;python whatever.py&lt;/code&gt;, you must use &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; whatever&lt;/code&gt;, and you must &lt;code class="docutils literal"&gt;cd&lt;/code&gt; to where your code is, or mess with &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt;, or install your thing with &lt;code class="docutils literal"&gt;pip&lt;/code&gt;. This simple yet common action (grouping things into folders) has massively increased complexity.&lt;/p&gt;
&lt;p&gt;The standard library is not enough &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; and you need a third-party dependency? You find some tutorial that tells you to &lt;code class="docutils literal"&gt;pip install&lt;/code&gt;, but &lt;code class="docutils literal"&gt;pip&lt;/code&gt; will now tell you to use &lt;code class="docutils literal"&gt;apt&lt;/code&gt;. And &lt;code class="docutils literal"&gt;apt&lt;/code&gt; may work, but it may give you an ancient version that does not match the tutorial you’re reading. Or it may not have the package. Or the Internet will tell you not to use Python packages from &lt;code class="docutils literal"&gt;apt&lt;/code&gt;. So now you need to &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/"&gt;learn about venvs&lt;/a&gt; (which add more complexity, more things to remember; most tutorials teach activation, venvs are easy to mess up via basic operations like renaming a folder, and you may end up with a venv in git or your code in a venv). Or you need to pick one of the many one-stop-shop tools to manage things.&lt;/p&gt;
&lt;p&gt;In other ecosystems, an IDE is often a necessity, even for beginners. The IDE will force you into a project system (maybe not the best or most common one by default, but it will still be a coherent project system). Java will force you to make more than one file with the “1 public class = 1 file” rule, and it will be easy to do so, you won’t even need an &lt;code class="docutils literal"&gt;import&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Do you want folders? In Java or C#, you just create a folder in the IDE, and create a class there. The new file may have a different &lt;code class="docutils literal"&gt;package&lt;/code&gt;/&lt;code class="docutils literal"&gt;namespace&lt;/code&gt;, but the IDE will help you to add the correct &lt;code class="docutils literal"&gt;import&lt;/code&gt;/&lt;code class="docutils literal"&gt;using&lt;/code&gt; to the codebase, and there is no risk of you using too many directories (including something like &lt;code class="docutils literal"&gt;src&lt;/code&gt;) or using too few (not making a top-level package for all your code) that will require correcting all imports. The disruption from adding a folder in Java or C# is minimal.&lt;/p&gt;
&lt;p&gt;The project system will also handle third-party packages without you needing to think about where they’re downloaded or what a virtual environment is and how to activate it from different contexts. A few clicks and you’re done. And if you don’t like IDEs? Living in the CLI is certainly possible in many ecosystems, they have reasonable CLI tools for common management tasks, as well as building and running your project.&lt;/p&gt;
&lt;p&gt;PEP 723 solves a very niche problem: dependency management for single-file programs. Improving life for one-off things and messy code was apparently more important to the packaging community than any other improvements for big projects.&lt;/p&gt;
&lt;p&gt;By the way, you could adapt this lesson to static and dynamic typing. Dynamic typing is easier to get started with and requires less typing, but compile-type checking can prevent many bugs — bugs that require higher test coverage to catch with dynamic typing. That’s why the JS world has TypeScript, that’s why mypy/pyright/typing has gained a lot of mindshare in the Python world.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-future"&gt;
&lt;h2&gt;The future…&lt;/h2&gt;
&lt;p&gt;Looking at the &lt;a class="reference external" href="https://discuss.python.org/c/packaging/14"&gt;Python Packaging Discourse&lt;/a&gt;, there were some discussions about ways to improve things.&lt;/p&gt;
&lt;p&gt;For example, this &lt;a class="reference external" href="https://discuss.python.org/t/user-experience-with-porting-off-setup-py/37502"&gt;discussion about porting off setup.py&lt;/a&gt; was started by Gregory Szorc, who had &lt;a class="reference external" href="https://gregoryszorc.com/blog/2023/10/30/my-user-experience-porting-off-setup.py/"&gt;a long list of complaints&lt;/a&gt;, pointing out the issues with the communication from the packaging world, and documentation mess (his post is worth a read, or at least a skim, because it’s long and full of packaging failures). There’s one page which recommends setuptools, another which has four options with Hatchling as a default, and another still promoting Pipenv. We’ve seen this a year ago, nothing changed in that regard. Some people tried finding solutions, some people shared their opinions… and then the Discourse moderator decided to protect his PyPA friends from having to read user feedback and locked the thread.&lt;/p&gt;
&lt;p&gt;Many other threads about visions were had, like the one about &lt;a class="reference external" href="https://discuss.python.org/t/the-10-year-view-on-python-packaging-whats-yours/31834"&gt;10-year views&lt;/a&gt; or about &lt;a class="reference external" href="https://discuss.python.org/t/wanting-a-singular-packaging-tool-vision/21141"&gt;singular packaging tools&lt;/a&gt;. The strategy discussions, based on the user survey, had &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-2/23442"&gt;a second part&lt;/a&gt; (the &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420"&gt;first one&lt;/a&gt; concluded in January 2023), but it saw less posts than the first one, and discussions did not continue (and there were &lt;a class="reference external" href="https://discuss.python.org/t/structure-of-the-packaging-strategy-discussions/23478"&gt;discussions about how to hold the discussions&lt;/a&gt;). There are plans to &lt;a class="reference external" href="https://discuss.python.org/t/draft-update-to-python-packaging-governance/31608"&gt;create a packaging council&lt;/a&gt; — design-by-committee at its finest.&lt;/p&gt;
&lt;p&gt;But all those discussions, even when not locked by an overzealous moderator, haven’t had any meaningful effect. The packaging ecosystem is still severely fragmented and confusing. &lt;a class="reference external" href="https://packaging.python.org/en/latest/tutorials/"&gt;The PyPA docs and tutorials&lt;/a&gt; still contradict each other. The PyPA-affiliated tools still have less features than the unaffiliated competition (even the upstart Rye has some form of lockfiles, unlike Hatch or Flit), and going by the PEP 517 build backend usage statistics, they are more popular than the modern PyPA tools. The authors of similar yet competing tools have not joined forces to produce the One True Packaging Tool.&lt;/p&gt;
&lt;section id="is-looking-pretty-bleak"&gt;
&lt;h3&gt;…is looking pretty bleak&lt;/h3&gt;
&lt;p&gt;On the other hand, if you look at the 2023 contribution graphs for most packaging tools, you might be worried about the state of the packaging ecosystem.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pypa/pip/graphs/contributors?from=2023-01-01&amp;amp;to=2023-12-31&amp;amp;type=c"&gt;Pip&lt;/a&gt; has had a healthy mix of contributors and a lot of commits going into it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pypa/pipenv/graphs/contributors?from=2023-01-01&amp;amp;to=2023-12-31&amp;amp;type=c"&gt;Pipenv&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/pypa/setuptools/graphs/contributors?from=2023-01-01&amp;amp;to=2023-12-31&amp;amp;type=c"&gt;setuptools&lt;/a&gt; have two lead committers, but still a healthy amount of commits.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pypa/hatch/graphs/contributors?from=2023-01-01&amp;amp;to=2023-12-31&amp;amp;type=c"&gt;Hatch&lt;/a&gt;, however, is a &lt;strong&gt;one-man-show&lt;/strong&gt;: Ofek Lev (the project founder) made 184 commits, the second place belongs to Dependabot with 6 commits, and the third-place contributor (who is a human) has five commits.  The bus factor of Hatch and Hatchling is 1.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The non-PyPA tools aren’t doing much better:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/python-poetry/poetry/graphs/contributors?from=2023-01-01&amp;amp;to=2023-12-31&amp;amp;type=c"&gt;Poetry&lt;/a&gt; has two top contributors, but at least there are four human contributors with a double-digit number of commits.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pdm-project/pdm/graphs/contributors?from=2023-01-01&amp;amp;to=2023-12-31&amp;amp;type=c"&gt;PDM&lt;/a&gt; is a one-man-show, like Hatch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/mitsuhiko/rye/graphs/contributors?from=2023-04-23&amp;amp;to=2023-12-31&amp;amp;type=c"&gt;Rye&lt;/a&gt; has one main contributor, and three with a double-digit number of commits; note it’s pretty new (started in late April 2023) and it’s not as popular as the others.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I understand the PyPA is a loose association of volunteers. It is sometimes said the name &lt;em&gt;Python Packaging Authority&lt;/em&gt; was &lt;a class="reference external" href="https://discuss.python.org/t/remove-the-authority-from-packaging/1993"&gt;originally a joke&lt;/a&gt;. However, they are also the group that maintains all the packaging standards, so they &lt;em&gt;are&lt;/em&gt; the authority when it comes to packaging. For example, &lt;a class="reference external" href="https://peps.python.org/pep-0668/"&gt;PEP 668&lt;/a&gt; starts with a warning block saying it’s a historical document, and &lt;a class="reference external" href="https://packaging.python.org/en/latest/specifications/externally-managed-environments/"&gt;the up-to-date version of the specification is on PyPA’s site&lt;/a&gt; (as well as a bunch of other &lt;a class="reference external" href="https://packaging.python.org/en/latest/specifications/"&gt;packaging specs&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The PyPA should shut down or merge some duplicate projects, and work with the community (including maintainers of non-PyPA projects) to build One True Packaging Tool.&lt;/strong&gt; To make things easier. To avoid writing code that does largely the same thing 5 times. To make sure thousands of projects don’t depend on tools with a bus factor of 1 or 2. To turn packaging from a problem and an insurmountable obstacle to something that &lt;em&gt;just works™&lt;/em&gt;, something that an average developer doesn’t need to think about.&lt;/p&gt;
&lt;p&gt;It’s not rocket science. Tons of languages, big and small, have a coherent packaging ecosystem (just read &lt;a class="reference external" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/"&gt;last year’s post&lt;/a&gt; for some examples of how simple it can be). Instead of focusing on specifications and governance, focus on producing one comprehensive, usable, user-friendly tool.&lt;/p&gt;
&lt;p&gt;Discuss below or &lt;a class="reference external" href="https://news.ycombinator.com/item?id=39004600"&gt;on Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Modern Word at least makes this easier, because the heading styles get top billing on the ribbon; they were hidden behind a completely non-obvious combo box that said &lt;em&gt;Normal&lt;/em&gt; in Word 2003 and older.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;C# 10 removed the requirement to make a class with a &lt;code class="docutils literal"&gt;Main&lt;/code&gt; method, it can pick up one file with top-level statements and make it the entrypoint.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The Python standard library gets a lot of praise. It &lt;em&gt;is&lt;/em&gt; large compared to C, but nothing special compared to Java or C#. It is also full of low-quality libraries, like &lt;code class="docutils literal"&gt;http.server&lt;/code&gt; or &lt;code class="docutils literal"&gt;urllib.request&lt;/code&gt;, yet some people insist on only using the standard library. The standard library is also less stable and dependable (with constant deprecations and removals, and with new features requiring upgrading all of Python). All the “serious” use-cases, like web development or ML/AI/data science are impossible with just the standard library.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>packaging</category><category>PDM</category><category>pip</category><category>PyPA</category><category>Python</category><category>virtual environments</category><guid>https://chriswarrick.com/blog/2024/01/15/python-packaging-one-year-later/</guid><pubDate>Mon, 15 Jan 2024 18:50:00 GMT</pubDate></item><item><title>How to improve Python packaging, or why fourteen tools are at least twelve too many</title><link>https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;There is an area of Python that many developers have problems with. This is an area that has seen many different solutions pop up over the years, with many different opinions, wars, and attempts to solve it. Many have complained about the packaging ecosystem and tools making their lives harder. Many beginners are confused about virtual environments. But does it have to be this way? Are the current solutions to packaging problems any good? And is the organization behind most of the packaging tools and standards part of the problem itself?&lt;/p&gt;
&lt;p&gt;Join me on a journey through packaging in Python and elsewhere. We’ll start by describing the classic packaging stack (involving setuptools and friends), the scientific stack (with conda), and some of the modern/alternate tools, such as Pipenv, Poetry, Hatch, or PDM. We’ll also look at some examples of packaging and dependency-related workflows seen elsewhere (Node.js and .NET). We’ll also take a glimpse at a possible future (with a venv-less workflow with PDM), and see if the PyPA agrees with the vision and insights of eight thousand users.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;nav class="contents alert alert-primary" id="contents" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#the-plethora-of-tools" id="toc-entry-1"&gt;The plethora of tools&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#the-classic-stack" id="toc-entry-2"&gt;The classic stack&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#and-a-few-extensions" id="toc-entry-3"&gt;…and a few extensions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#the-scientific-stack-and-conda" id="toc-entry-4"&gt;The scientific stack and conda&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#the-new-tools" id="toc-entry-5"&gt;The new tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#tooling-proliferation-and-the-python-package-authority" id="toc-entry-6"&gt;Tooling proliferation and the Python Package Authority&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#does-python-really-need-virtual-environments" id="toc-entry-7"&gt;Does Python really need virtual environments?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-to-use-python-from-a-virtual-environment" id="toc-entry-8"&gt;How to use Python from a virtual environment?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-are-system-pythons-and-virtual-environments-related" id="toc-entry-9"&gt;How are (system) Pythons and virtual environments related?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-to-manage-virtual-environments" id="toc-entry-10"&gt;How to manage virtual environments?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-everyone-else-is-doing-it" id="toc-entry-11"&gt;How everyone else is doing it&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#javascript-node-js-with-npm" id="toc-entry-12"&gt;JavaScript/Node.js (with npm)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-is-node-better-than-python" id="toc-entry-13"&gt;How is Node better than Python?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#other-packaging-topics" id="toc-entry-14"&gt;Other packaging topics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#c-net-with-dotnet-cli-msbuild" id="toc-entry-15"&gt;C#/.NET (with dotnet CLI/MSBuild)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-is-net-better-than-python" id="toc-entry-16"&gt;How is .NET better than Python?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#other-packaging-topics-1" id="toc-entry-17"&gt;Other packaging topics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#other-languages-and-ecosystems" id="toc-entry-18"&gt;Other languages and ecosystems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#are-those-ecosystems-tools-perfect" id="toc-entry-19"&gt;Are those ecosystems’ tools perfect?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#pep-582-the-future-of-python-packaging" id="toc-entry-20"&gt;PEP 582: the future of Python packaging?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#enabling-the-future-on-your-own-machine" id="toc-entry-21"&gt;Enabling the future on your own machine&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#is-this-the-perfect-thing" id="toc-entry-22"&gt;Is this the perfect thing?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#the-part-where-the-steering-council-kills-it" id="toc-entry-23"&gt;The part where the Steering Council kills it&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#pypa-versus-reality-packaging-survey-results-and-pypa-reaction" id="toc-entry-24"&gt;PyPA versus reality: packaging survey results and PyPA reaction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#summary" id="toc-entry-25"&gt;Summary&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnotes" id="toc-entry-26"&gt;Footnotes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#revision-history" id="toc-entry-27"&gt;Revision History&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="the-plethora-of-tools"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-1" role="doc-backlink"&gt;The plethora of tools&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many packaging-related tools in Python. All of them with different authors, lineages, and often different opinions, although most of them are now unified under the Python Packaging Authority (PyPA) umbrella. Let’s take a look at them.&lt;/p&gt;
&lt;section id="the-classic-stack"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-2" role="doc-backlink"&gt;The classic stack&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The classic Python packaging stack consists of many semi-related tools. Setuptools, probably the oldest tool of the group, and itself based on &lt;code class="docutils literal"&gt;distutils&lt;/code&gt;, which is part of the standard library (although it will be removed in Python 3.12), is responsible for installing a single package. It previously used &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; files to do its job, which required arbitrary code execution. It then added support for non-executable metadata specification formats: &lt;code class="docutils literal"&gt;setup.cfg&lt;/code&gt;, and also &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; (partially still in beta). However, you aren’t supposed to use &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; files directly these days, you’re supposed to be using pip. Pip installs packages, usually from the PyPI, but it can also support other sources (such as git repositories or the local filesystem). But where does pip install things? The default used to be to install globally and system-wide, which meant you could introduce conflicts between packages installed by pip and apt (or whatever the system package manager is). Even with a user-wide install (which pip is likely to attempt these days), you can still end up with conflicts, and you can also have conflicts in which package A requests X version 1.0.0, but package B expects X version 2.0.0—but A and B are not at all related and could live separately with their preferred version of X. Enter &lt;code class="docutils literal"&gt;venv&lt;/code&gt;, a standard library descendant of &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt;, which can create a lightweight virtual environment for packages to live in. This virtual environment gives you the separation from system packages and from different environments, but it is still tied to the system Python in some ways (and if the system Python disappears, the virtual environment stops working).&lt;/p&gt;
&lt;p&gt;A few extra tools would be used in a typical packaging workflow. The &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; package enhances Setuptools with the ability to generate wheels, which are ready-to-install (without running &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;). Wheels can either be pure-Python and be installed anywhere, or they can contain pre-compiled extension modules (things written in C) for a given OS and Python (and there’s even a standard that allows building and distributing one wheel for all typical Linux distros). The &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; package should be an implementation detail, something existing inside Setuptools and/or pip, but users need to be aware of it if they want to make wheels on their system, because virtual environments produced by &lt;code class="docutils literal"&gt;venv&lt;/code&gt; do not have &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; installed. Regular users who do not maintain their own packages may sometimes be told that pip is using something legacy because &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; is not installed, which is not a good user experience. Package authors also need &lt;code class="docutils literal"&gt;twine&lt;/code&gt;, whose sole task is uploading source distributions or wheels, created with other tools, to PyPI (and there’s not much more to say about that tool).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="and-a-few-extensions"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-3" role="doc-backlink"&gt;…and a few extensions&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Over the years, there have been a few tools that are based on things from the classic stack. For example, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/code&gt; can simplify dependency management. While &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt; lets you produce a file with everything installed in your environment, there is no way to specify the dependencies you need, and get a lock file with specific versions and transitive dependencies (without installing and freezing everything), there is no easy way to skip development dependencies (e.g. IPython) when you &lt;code class="docutils literal"&gt;pip freeze&lt;/code&gt;, and there is no workflow to update all your dependencies with just pip. &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/code&gt; adds two tools, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-compile&lt;/span&gt;&lt;/code&gt; which takes in &lt;code class="docutils literal"&gt;requirements.in&lt;/code&gt; files with the packages you care about, and produces a &lt;code class="docutils literal"&gt;requrirements.txt&lt;/code&gt; with pinned versions of them and all transitive dependencies; and also &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;pip-sync&lt;/span&gt;&lt;/code&gt;, which can install &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; and removes things not listed in it.&lt;/p&gt;
&lt;p&gt;Another tool that might come in useful is &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, which can help you manage (create and activate) virtual environments in a central location. It has a few bells and whistles (such as custom hooks to do actions on every virtualenv creation), although for basic usage, you could replace it with a single-line shell function.&lt;/p&gt;
&lt;p&gt;Yet another tool that works alongside the classic toolset is &lt;code class="docutils literal"&gt;pipx&lt;/code&gt;, which creates and manages virtual environments for apps written in Python. You tell it to &lt;code class="docutils literal"&gt;pipx install Nikola&lt;/code&gt;, and it will create a virtual environment somewhere, install Nikola into it, and put a script for launching it in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.local/bin&lt;/span&gt;&lt;/code&gt;. While you could do it all yourself with venv and some symlinks, pipx can take care of this, and you don’t need to remember where the virtual environment is.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-scientific-stack-and-conda"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-4" role="doc-backlink"&gt;The scientific stack and conda&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The scientific Python community have had their own tools for many years. The conda tool can manage environments and packages. It doesn’t use PyPI and wheels, but rather packages from conda channels (which are prebuilt, and expect an Anaconda-distributed Python). Back in the day, when there were no wheels, this was the easiest way to get things installed on Windows; this is not as much of a problem now with binary wheels on PyPI—but the Anaconda stack is still popular in the scientific world. Conda packages can be built with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;conda-build&lt;/span&gt;&lt;/code&gt;, which is separate, but closely related to &lt;code class="docutils literal"&gt;conda&lt;/code&gt; itself. Conda packages are not compatible with &lt;code class="docutils literal"&gt;pip&lt;/code&gt; in any way, they do not follow the packaging standards used by other tools. Is this good? No, because it makes integrating the two worlds harder, but also yes, because many problems that apply to scientific packages (and their C/C++ extension modules, and their high-performance numeric libraries, and other things) do not apply to other uses of Python, so having a separate tool lets people focusing the other uses simplify their workflows.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-new-tools"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-5" role="doc-backlink"&gt;The new tools&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A few years ago, new packaging tools appeared. Now, there were lots of “new fancy tools” introduced in the past, with setuptools extending distutils, then distribute forking setuptools, then distribute being merged back…&lt;/p&gt;
&lt;p&gt;The earliest “new tool” was Pipenv. Pipenv had really terrible and misleading marketing, and it merged pip and venv, in that Pipenv would create a venv and install packages in it (from &lt;code class="docutils literal"&gt;Pipfile&lt;/code&gt; or &lt;code class="docutils literal"&gt;Pipfile.lock&lt;/code&gt;). Pipenv can place the venv in the project folder, or hide it somewhere in the project folder (the latter is the default). However, Pipenv does not handle any packages related to packaging your code, so it’s useful only for developing non-installable applications (Django sites, for example). If you’re a library developer, you need setuptools anyway.&lt;/p&gt;
&lt;p&gt;The second new tool was Poetry. It manages environments and dependencies in a similar way to Pipenv, but it can also build &lt;code class="docutils literal"&gt;.whl&lt;/code&gt; files with your code, and it can upload wheels and source distributions to PyPI. This means it has pretty much all the features the other tools have, except you need just one tool. However, Poetry is opinionated, and its opinions are sometimes incompatible with the rest of the packaging scene. Poetry uses the &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; standard, but it does not follow the standard specifying how metadata should be represented in a &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; file (PEP 621), instead using a custom &lt;code class="docutils literal"&gt;[tool.poetry]&lt;/code&gt; table. This is partly because Poetry came out before PEP 621, but the PEP was accepted over 2 years ago—the biggest compatibility problem is Poetry’s node-inspired &lt;code class="docutils literal"&gt;~&lt;/code&gt; and &lt;code class="docutils literal"&gt;^&lt;/code&gt; dependency version markers, which are not compatible with PEP 508 (the dependency specification standard). Poetry can package C extension modules, although it uses setuptools’ infrastructure for this (and requires a custom &lt;code class="docutils literal"&gt;build.py&lt;/code&gt; script).&lt;/p&gt;
&lt;p&gt;Another similar tool is Hatch. This tool can also manage environments (it allows multiple environments per project, but it does not allow to put them in the project directory), and it can manage packages (but without lockfile support). Hatch can also be used to package a project (with PEP 621-compliant &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; files) and upload it to PyPI. It does not support C extension modules.&lt;/p&gt;
&lt;p&gt;A tool that tries to be a simpler re-imagining of Setuptools is Flit. It can build and install a package using a &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; file. It also supports uploads to PyPI. It lacks support for C extension modules, and it expects you to manage environments on your own.&lt;/p&gt;
&lt;p&gt;There’s one more interesting (albeit not popular or well-known) tool. This tool is PDM. It can manage venvs (but it defaults to the saner &lt;code class="docutils literal"&gt;.venv&lt;/code&gt; location), manage dependencies, and it uses a standards-compliant &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt;. There’s also a curious little feature called PEP 582 support, which we’ll talk about later.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="tooling-proliferation-and-the-python-package-authority"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-6" role="doc-backlink"&gt;Tooling proliferation and the Python Package Authority&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The previous sections mentioned 14 (fourteen!) distinct tools. As we’ll discover soon, that’s at least 12 too many. Let’s try to compare them.&lt;/p&gt;
&lt;p&gt;First, let’s define nine things that we would expect packaging tools to do:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Manage environments&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install packages&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Package/develop apps&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Package libraries&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Package C extension modules&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install in editable mode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lock dependencies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support pyproject.toml files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upload to PyPI&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div style="font-size: 90%"&gt;&lt;table class="table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Tool&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Maintainer&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Use-case&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;# of supported features&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;# of partially supported features&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;# of unsupported features&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;setuptools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Making things installable&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (pyproject.toml partially in beta, installing—only setuptools-based sdists)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Installing packages&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Locking dependencies only manually)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;venv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Creating virtual environments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Creating environments)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;wheel&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Building wheels in setuptools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Building wheels in setuptools)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Twine&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Uploading to PyPI&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Uploading to PyPI)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip-tools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Jazzband&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing requirements files&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (Locking dependencies, installing packages)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;virtualenvwrapper&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Doug Hellmann&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing virtual environments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Managing environments)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pipx&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Installing Python command-line tools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (Installing packages, editable installs)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Managing environments)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;6&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;conda&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Anaconda, Inc.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing environments and dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3 (Managing environments, installing things)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4 (Manual locking, packaging requires conda-build)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (pyproject.toml and PyPI)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Managing dependencies for apps&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3 (Managing environments, installing and locking)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Developing apps)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Poetry&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Sébastien Eustace et al.&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging and managing dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (pyproject.toml, C extensions)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Flit&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging pure-Python projects&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (Installing only flit packages)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Hatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;PyPA&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging and managing dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;7&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;2 (C extensions, locking dependencies)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;PDM&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Frost Ming&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Packaging and managing dependencies&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;8&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;0&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1 (C extensions)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;details style="margin-bottom: 1rem"&gt;
&lt;summary style="background: rgba(0, 170, 221, 10%); padding: .25rem; border-radius: .25rem"&gt;Expand table with more details about support for each feature&lt;/summary&gt;
&lt;div style="font-size: 90%; margin-top: .5rem"&gt;&lt;table class="table table-hover"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;Tool&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F1 (Envs)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F2 (Install)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F3 (Apps)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F4 (Libraries)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F5 (Extensions)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F6 (Editable)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F7 (Lock)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F8 (pyproject.toml)&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;F9 (Upload)&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;setuptools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only if authoring the package, direct use not recommended&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Beta&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No (can build sdist)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Manually&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;venv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only creating environments&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;wheel&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No (can build wheels)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Twine&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pip-tools&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;virtualenvwrapper&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;pipx&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Sort of&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;conda&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes (from conda channels)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Develop (conda-build is a separate tool)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;With conda-build&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;With conda-build&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Manually&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Pipenv&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only develop&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Poetry&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Sort of (custom build.py script)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes, but using custom fields&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Flit&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Only if authoring the package&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;Hatch&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;PDM&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;No&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Yes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;p&gt;You should pay close attention to the Maintainer column in the table. The vast majority of them are maintained by PyPA, the Python Packaging Authority. Even more curiously, the two tools that have the most “Yes” values (Poetry and PDM) are not maintained by the PyPA, but instead other people completely independent of them and not participating in the working group. So, is the working group successful, if it cannot produce one fully-featured tool? Is the group successful if it has multiple projects with overlapping responsibilities? Should the group focus their efforts on standards like &lt;a class="reference external" href="https://peps.python.org/pep-0517/"&gt;PEP 517&lt;/a&gt;, which is a common API for packaging tools, and which also encourages the creation of even more incompatible and competing tools?&lt;/p&gt;
&lt;p&gt;Most importantly: which tool should a beginner use? The PyPA has a few guides and tutorials, one is &lt;a class="reference external" href="https://packaging.python.org/en/latest/tutorials/installing-packages/"&gt;using pip + venv&lt;/a&gt;, another is &lt;a class="reference external" href="https://packaging.python.org/en/latest/tutorials/managing-dependencies/"&gt;using pipenv&lt;/a&gt; (why would you still do that?), and &lt;a class="reference external" href="https://packaging.python.org/en/latest/tutorials/packaging-projects/"&gt;another tutorial&lt;/a&gt; that lets you pick between Hatchling (hatch’s build backend), setuptools, Flit, and PDM, without explaining the differences between them—and without using any environment tools, and without using Hatch’s/PDM’s build and PyPI upload features (instead opting to use &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; build&lt;/code&gt; and &lt;code class="docutils literal"&gt;twine&lt;/code&gt;). The concept of virtual environments can be very confusing for beginners, and managing virtual environments is difficult if everyone has incompatible opinions about it.&lt;/p&gt;
&lt;p&gt;It is also notable that &lt;a class="reference external" href="https://peps.python.org/pep-0020/"&gt;PEP 20&lt;/a&gt;, the Zen of Python, states this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python packaging definitely does not follow it &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;. There are 14 ways, and none of them is obvious or the only good one. All in all, this is an unsalvageable mess. Why can’t Python pick one tool? What does the competition do? We’ll look at this in a minute. But first, let’s talk about the elephant in the room: Python virtual environments.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="does-python-really-need-virtual-environments"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-7" role="doc-backlink"&gt;Does Python really need virtual environments?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python relies on virtual environments for separation between projects. Virtual environments (aka virtualenvs or venvs) are folders with symlinks to a system-installed Python, and their own set of site-packages. There are a few problems with them:&lt;/p&gt;
&lt;section id="how-to-use-python-from-a-virtual-environment"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-8" role="doc-backlink"&gt;How to use Python from a virtual environment?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two ways to do this. The first one is to activate it, by running the activate shell script installed in the environment’s bin directory. Another is to run the python executable (or any other script in the bin directory) directly from the venv. &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Activating venvs directly is more convenient for developers, but it also has some problems. Sometimes, activation fails to work, due to the shell caching the location of things in &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt;. Also, beginners are taught to &lt;code class="docutils literal"&gt;activate&lt;/code&gt; and run &lt;code class="docutils literal"&gt;python&lt;/code&gt;, which means they might be confused and try to use activate in scripts or cronjobs (but in those environments, you should not activate venvs, and instead use the Python executable directly). Virtual environment activation is more state you need to be aware of, and if you forget about it, or if it breaks, you might end up messing up your user-wide (or worse, system-wide) Python packages.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-are-system-pythons-and-virtual-environments-related"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-9" role="doc-backlink"&gt;How are (system) Pythons and virtual environments related?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The virtual environment depends very tightly on the (system/global/pyenv-installed) Python used to create it. This is good for disk-space reasons (clean virtual environments don’t take up very much space), but this also makes the environment more fragile. If the Python used to create the environment is removed, the virtual environment stops working. If you fully manage your own Python, then it’s probably not going to happen, but if you depend on a system Python, upgrading packages on your OS might end up replacing Python 3.10 with Python 3.11. Some distributions (e.g. Ubuntu) would only make a jump like this on a new distribution release (so you can plan ahead), some of them (e.g. Arch) are rolling-release and a regular system upgrade may include a new Python, whereas some (e.g. Homebrew) make it even worse by using paths that include the patch Python version (3.x.y), which cause virtual environments to break much more often.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-to-manage-virtual-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-10" role="doc-backlink"&gt;How to manage virtual environments?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The original virtualenv tool, and its simplified standard library rewrite venv, allow you to put a virtual environment anywhere in the file system, as long as you have write privileges there. This has led to people and tools inventing their own standards. Virtualenvwrapper stores environments in a central location, and does not care about their contents. Pipenv and poetry allow you to choose (either a central location or the .venv directory in the project), and environments are tied to a project (they will use the project-specific environment if you’re in the project directory). Hatch stores environments in a central location, and it allows you to have multiple environments per project (but there is no option to share environments between projects).&lt;/p&gt;
&lt;p&gt;Brett Cannon has recently done &lt;a class="reference external" href="https://snarky.ca/classifying-python-virtual-environment-workflows/"&gt;a survey&lt;/a&gt;, and it has shown the community is split on their workflows: some people use a central location, some put them in the project directory, some people have multiple environments with different Python versions, some people reuse virtualenvs between projects… Everyone has different needs, and different opinions. For example, I use a central directory (~/virtualenvs) and reuse environments when working on Nikola (sharing the same environment between development and 4 Nikola sites). But on the other hand, when deploying web apps, the venv lives in the project folder, because this venv needs to be used by processes running as different users (me, root, or the service account for the web server, which might have interactive login disabled, or whose home directory may be set to something ephemeral).&lt;/p&gt;
&lt;p&gt;So: &lt;strong&gt;does Python need virtual environments?&lt;/strong&gt; Perhaps looking how other languages handle this problem can help us figure this out for Python?&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="how-everyone-else-is-doing-it"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-11" role="doc-backlink"&gt;How everyone else is doing it&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ll look at two ecosystems. We’ll start with &lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#javascript-node-js-with-npm"&gt;JavaScript/Node.js (with npm)&lt;/a&gt;, and then we’ll look at the &lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#c-net-with-dotnet-cli-msbuild"&gt;C#/.NET (with dotnet CLI/MSBuild)&lt;/a&gt; ecosystem for comparison. We’ll demonstrate a sample flow of making a project, installing dependencies in it, and running things. If you’re familiar with those ecosystems and want to skip the examples, continue with &lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-is-node-better-than-python"&gt;How is Node better than Python?&lt;/a&gt; and &lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#are-those-ecosystems-tools-perfect"&gt;Are those ecosystems’ tools perfect?&lt;/a&gt;. Otherwise, read on.&lt;/p&gt;
&lt;section id="javascript-node-js-with-npm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-12" role="doc-backlink"&gt;JavaScript/Node.js (with npm)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are two tools for dealing with packages in the Node world, namely npm and Yarn. The npm CLI tool is shipped with Node, so we’ll focus on it.&lt;/p&gt;
&lt;p&gt;Let’s create a project:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_79014b0a38fe4956a4e8f61687b1345c-1" name="rest_code_79014b0a38fe4956a4e8f61687b1345c-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_79014b0a38fe4956a4e8f61687b1345c-1"&gt;&lt;/a&gt;$ mkdir mynpmproject
&lt;a id="rest_code_79014b0a38fe4956a4e8f61687b1345c-2" name="rest_code_79014b0a38fe4956a4e8f61687b1345c-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_79014b0a38fe4956a4e8f61687b1345c-2"&gt;&lt;/a&gt;$ cd mynpmproject
&lt;a id="rest_code_79014b0a38fe4956a4e8f61687b1345c-3" name="rest_code_79014b0a38fe4956a4e8f61687b1345c-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_79014b0a38fe4956a4e8f61687b1345c-3"&gt;&lt;/a&gt;$ npm init
&lt;a id="rest_code_79014b0a38fe4956a4e8f61687b1345c-4" name="rest_code_79014b0a38fe4956a4e8f61687b1345c-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_79014b0a38fe4956a4e8f61687b1345c-4"&gt;&lt;/a&gt;…answer a few questions…
&lt;a id="rest_code_79014b0a38fe4956a4e8f61687b1345c-5" name="rest_code_79014b0a38fe4956a4e8f61687b1345c-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_79014b0a38fe4956a4e8f61687b1345c-5"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_79014b0a38fe4956a4e8f61687b1345c-6" name="rest_code_79014b0a38fe4956a4e8f61687b1345c-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_79014b0a38fe4956a4e8f61687b1345c-6"&gt;&lt;/a&gt;package.json
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ve got a package.json file, which has some metadata about our project (name, version, description, license). Let’s install a dependency:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_c1f305cd2b514ac99b20d53bab4b749e-1" name="rest_code_c1f305cd2b514ac99b20d53bab4b749e-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c1f305cd2b514ac99b20d53bab4b749e-1"&gt;&lt;/a&gt;$ npm install --save is-even
&lt;a id="rest_code_c1f305cd2b514ac99b20d53bab4b749e-2" name="rest_code_c1f305cd2b514ac99b20d53bab4b749e-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c1f305cd2b514ac99b20d53bab4b749e-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_c1f305cd2b514ac99b20d53bab4b749e-3" name="rest_code_c1f305cd2b514ac99b20d53bab4b749e-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c1f305cd2b514ac99b20d53bab4b749e-3"&gt;&lt;/a&gt;added 5 packages, and audited 6 packages in 2s
&lt;a id="rest_code_c1f305cd2b514ac99b20d53bab4b749e-4" name="rest_code_c1f305cd2b514ac99b20d53bab4b749e-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c1f305cd2b514ac99b20d53bab4b749e-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_c1f305cd2b514ac99b20d53bab4b749e-5" name="rest_code_c1f305cd2b514ac99b20d53bab4b749e-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c1f305cd2b514ac99b20d53bab4b749e-5"&gt;&lt;/a&gt;found 0 vulnerabilities
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The mere existence of an &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; package is questionable; the fact that it includes four dependencies is yet another, and the fact that it depends on &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; is even worse. But this post isn’t about &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-even&lt;/span&gt;&lt;/code&gt; or the Node ecosystem’s tendency to use tiny packages for everything (but I wrote one about this topic &lt;a class="reference external" href="https://chriswarrick.com/blog/2019/02/15/modern-web-development-where-you-need-500-packages-to-build-bootstrap/"&gt;before&lt;/a&gt;). Let’s look at what we have in the filesystem:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-1" name="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-1"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-2" name="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-2"&gt;&lt;/a&gt;node_modules/  package.json  package-lock.json
&lt;a id="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-3" name="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-3"&gt;&lt;/a&gt;$ ls node_modules
&lt;a id="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-4" name="rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_849cbe1f9c6a45bbad0b0eefd576f40f-4"&gt;&lt;/a&gt;is-buffer/  is-even/  is-number/  is-odd/  kind-of/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s also take a peek at the &lt;code class="docutils literal"&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code json"&gt;&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-1" name="rest_code_d79494d814b84a36997bed177cda105f-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-2" name="rest_code_d79494d814b84a36997bed177cda105f-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mynpmproject"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-3" name="rest_code_d79494d814b84a36997bed177cda105f-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-4" name="rest_code_d79494d814b84a36997bed177cda105f-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-5" name="rest_code_d79494d814b84a36997bed177cda105f-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-6" name="rest_code_d79494d814b84a36997bed177cda105f-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-7" name="rest_code_d79494d814b84a36997bed177cda105f-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1"&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-8" name="rest_code_d79494d814b84a36997bed177cda105f-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-9" name="rest_code_d79494d814b84a36997bed177cda105f-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-10" name="rest_code_d79494d814b84a36997bed177cda105f-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-11" name="rest_code_d79494d814b84a36997bed177cda105f-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-12" name="rest_code_d79494d814b84a36997bed177cda105f-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;"is-even"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.0"&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-13" name="rest_code_d79494d814b84a36997bed177cda105f-13" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_d79494d814b84a36997bed177cda105f-14" name="rest_code_d79494d814b84a36997bed177cda105f-14" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_d79494d814b84a36997bed177cda105f-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our &lt;code class="docutils literal"&gt;package.json&lt;/code&gt; file now lists the dependency, and we’ve also got a lock file (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;package-lock.json&lt;/span&gt;&lt;/code&gt;), which records all the dependency versions used for this install. If this file is kept in the repository, any future attempts to &lt;code class="docutils literal"&gt;npm install&lt;/code&gt; will use the dependency versions listed in this file, ensuring everything will work the same as it did originally (unless one of those packages were to get removed from the registry).&lt;/p&gt;
&lt;p&gt;Let’s try writing a trivial program using the module and try running it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_cdb4f755388d4860a1159a558ac844f0-1" name="rest_code_cdb4f755388d4860a1159a558ac844f0-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_cdb4f755388d4860a1159a558ac844f0-1"&gt;&lt;/a&gt;$ cat index.js
&lt;a id="rest_code_cdb4f755388d4860a1159a558ac844f0-2" name="rest_code_cdb4f755388d4860a1159a558ac844f0-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_cdb4f755388d4860a1159a558ac844f0-2"&gt;&lt;/a&gt;var isEven = require('is-even');
&lt;a id="rest_code_cdb4f755388d4860a1159a558ac844f0-3" name="rest_code_cdb4f755388d4860a1159a558ac844f0-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_cdb4f755388d4860a1159a558ac844f0-3"&gt;&lt;/a&gt;console.log(isEven(0));
&lt;a id="rest_code_cdb4f755388d4860a1159a558ac844f0-4" name="rest_code_cdb4f755388d4860a1159a558ac844f0-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_cdb4f755388d4860a1159a558ac844f0-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_cdb4f755388d4860a1159a558ac844f0-5" name="rest_code_cdb4f755388d4860a1159a558ac844f0-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_cdb4f755388d4860a1159a558ac844f0-5"&gt;&lt;/a&gt;$ node index.js
&lt;a id="rest_code_cdb4f755388d4860a1159a558ac844f0-6" name="rest_code_cdb4f755388d4860a1159a558ac844f0-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_cdb4f755388d4860a1159a558ac844f0-6"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s try removing &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;is-odd&lt;/span&gt;&lt;/code&gt; to demonstrate how badly designed this package is:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-1" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-1"&gt;&lt;/a&gt;$ rm -rf node_modules/is-odd
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-2" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-2"&gt;&lt;/a&gt;$ node index.js
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-3" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-3"&gt;&lt;/a&gt;node:internal/modules/cjs/loader:998
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-4" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-4"&gt;&lt;/a&gt;  throw err;
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-5" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-5"&gt;&lt;/a&gt;  ^
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-6" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-7" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-7"&gt;&lt;/a&gt;Error: Cannot find module 'is-odd'
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-8" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-8"&gt;&lt;/a&gt;Require stack:
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-9" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-9"&gt;&lt;/a&gt;- /tmp/mynpmproject/node_modules/is-even/index.js
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-10" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-10"&gt;&lt;/a&gt;- /tmp/mynpmproject/index.js
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-11" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-11"&gt;&lt;/a&gt;    at Module._resolveFilename (node:internal/modules/cjs/loader:995:15)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-12" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-12"&gt;&lt;/a&gt;    at Module._load (node:internal/modules/cjs/loader:841:27)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-13" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-13" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-13"&gt;&lt;/a&gt;    at Module.require (node:internal/modules/cjs/loader:1061:19)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-14" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-14" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-14"&gt;&lt;/a&gt;    at require (node:internal/modules/cjs/helpers:103:18)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-15" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-15" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-15"&gt;&lt;/a&gt;    at Object.&amp;lt;anonymous&amp;gt; (/tmp/mynpmproject/node_modules/is-even/index.js:10:13)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-16" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-16" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-16"&gt;&lt;/a&gt;    at Module._compile (node:internal/modules/cjs/loader:1159:14)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-17" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-17" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-17"&gt;&lt;/a&gt;    at Module._extensions..js (node:internal/modules/cjs/loader:1213:10)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-18" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-18" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-18"&gt;&lt;/a&gt;    at Module.load (node:internal/modules/cjs/loader:1037:32)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-19" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-19" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-19"&gt;&lt;/a&gt;    at Module._load (node:internal/modules/cjs/loader:878:12)
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-20" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-20" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-20"&gt;&lt;/a&gt;    at Module.require (node:internal/modules/cjs/loader:1061:19) {
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-21" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-21" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-21"&gt;&lt;/a&gt;  code: 'MODULE_NOT_FOUND',
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-22" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-22" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-22"&gt;&lt;/a&gt;  requireStack: [
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-23" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-23" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-23"&gt;&lt;/a&gt;    '/tmp/mynpmproject/node_modules/is-even/index.js',
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-24" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-24" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-24"&gt;&lt;/a&gt;    '/tmp/mynpmproject/index.js'
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-25" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-25" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-25"&gt;&lt;/a&gt;  ]
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-26" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-26" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-26"&gt;&lt;/a&gt;}
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-27" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-27" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-28" name="rest_code_5489e1387b9e4fe290bc9fb07890b6d6-28" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5489e1387b9e4fe290bc9fb07890b6d6-28"&gt;&lt;/a&gt;Node.js v18.12.1
&lt;/pre&gt;&lt;/div&gt;
&lt;section id="how-is-node-better-than-python"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-13" role="doc-backlink"&gt;How is Node better than Python?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Badly designed packages aside, we can see an important difference from Python in that there is &lt;strong&gt;no virtual environment&lt;/strong&gt;, and all the packages live in the project directory. If we fix the &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt; directory by running &lt;code class="docutils literal"&gt;npm install&lt;/code&gt;, we can see that I can run the script from somewhere else on the file system:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-1" name="rest_code_173ed066bc614b859a2c087e1a7aa307-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-1"&gt;&lt;/a&gt;$ pwd
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-2" name="rest_code_173ed066bc614b859a2c087e1a7aa307-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-2"&gt;&lt;/a&gt;/tmp/mynpmproject
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-3" name="rest_code_173ed066bc614b859a2c087e1a7aa307-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-3"&gt;&lt;/a&gt;$ npm install
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-4" name="rest_code_173ed066bc614b859a2c087e1a7aa307-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-5" name="rest_code_173ed066bc614b859a2c087e1a7aa307-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-5"&gt;&lt;/a&gt;added 1 package, and audited 6 packages in 436ms
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-6" name="rest_code_173ed066bc614b859a2c087e1a7aa307-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-7" name="rest_code_173ed066bc614b859a2c087e1a7aa307-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-7"&gt;&lt;/a&gt;found 0 vulnerabilities
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-8" name="rest_code_173ed066bc614b859a2c087e1a7aa307-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-8"&gt;&lt;/a&gt;$ node /tmp/mynpmproject/index.js
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-9" name="rest_code_173ed066bc614b859a2c087e1a7aa307-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-9"&gt;&lt;/a&gt;true
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-10" name="rest_code_173ed066bc614b859a2c087e1a7aa307-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-10"&gt;&lt;/a&gt;$ cd ~
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-11" name="rest_code_173ed066bc614b859a2c087e1a7aa307-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-11"&gt;&lt;/a&gt;$ node /tmp/mynpmproject/index.js
&lt;a id="rest_code_173ed066bc614b859a2c087e1a7aa307-12" name="rest_code_173ed066bc614b859a2c087e1a7aa307-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_173ed066bc614b859a2c087e1a7aa307-12"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;If you try to do that with a Python tool…&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If you’re using a manually managed venv, you need to remember to activate it, or to use the appropriate Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re using something fancier, it might be tied to the current working directory, and it may expect you to change into that directory, or to pass an argument pointing at that directory.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can also run my code as &lt;code class="docutils literal"&gt;root&lt;/code&gt;, and as an unprivileged &lt;code class="docutils literal"&gt;nginx&lt;/code&gt; user, without any special preparation (like telling pipenv/poetry to put their venv in the project directory, or running them as the other users):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-1" name="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-1"&gt;&lt;/a&gt;$ su -
&lt;a id="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-2" name="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-2"&gt;&lt;/a&gt;# node /tmp/mynpmproject/index.js
&lt;a id="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-3" name="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-3"&gt;&lt;/a&gt;true
&lt;a id="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-4" name="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-4"&gt;&lt;/a&gt;# sudo -u nginx node /tmp/mynpmproject/index.js
&lt;a id="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-5" name="rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_eb2c432ce6e4434eaa0a1b9ce2293a4c-5"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;If you try to do that with a Python tool…&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If you’re using a manually managed venv, you can use its Python as another user (assuming it has the right permissions).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your tool puts the venv in the project directory, this will work too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your tool puts the venv in some weird place in your home folder, the other users will get their own venvs. The &lt;code class="docutils literal"&gt;uwsgi&lt;/code&gt; user on Fedora uses &lt;code class="docutils literal"&gt;/run/uwsgi&lt;/code&gt; as its home directory, and &lt;code class="docutils literal"&gt;/run&lt;/code&gt; is ephemeral (tmpfs), so a reboot forces you to reinstall things.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can even try to change the name of our project:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_c226101cee2a45bbb187e74899531137-1" name="rest_code_c226101cee2a45bbb187e74899531137-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c226101cee2a45bbb187e74899531137-1"&gt;&lt;/a&gt;$ cd /tmp
&lt;a id="rest_code_c226101cee2a45bbb187e74899531137-2" name="rest_code_c226101cee2a45bbb187e74899531137-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c226101cee2a45bbb187e74899531137-2"&gt;&lt;/a&gt;$ mv mynpmproject mynodeproject
&lt;a id="rest_code_c226101cee2a45bbb187e74899531137-3" name="rest_code_c226101cee2a45bbb187e74899531137-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c226101cee2a45bbb187e74899531137-3"&gt;&lt;/a&gt;$ node /tmp/mynodeproject/index.js
&lt;a id="rest_code_c226101cee2a45bbb187e74899531137-4" name="rest_code_c226101cee2a45bbb187e74899531137-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_c226101cee2a45bbb187e74899531137-4"&gt;&lt;/a&gt;true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;If you try to do that with a Python tool…&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;If you’re using a manually managed venv, and it lives in a central directory, all is well.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you or your tool places the venv in the project directory, the venv is now broken, and you need to recreate it (hope you have a recent &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If your tool puts the venv in some weird place in your home folder, it may decide that this is a different project, which means it will recreate it, and you’ll have an unused virtual environment somewhere on your filesystem.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-packaging-topics"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-14" role="doc-backlink"&gt;Other packaging topics&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Some packages may expose executable scripts (with the &lt;code class="docutils literal"&gt;bin&lt;/code&gt; property). Those can be run in three ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Installed globally using &lt;code class="docutils literal"&gt;npm install &lt;span class="pre"&gt;-g&lt;/span&gt;&lt;/code&gt;, which would put the script in a global location that’s likely in &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; (e.g. &lt;code class="docutils literal"&gt;/usr/local/bin&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Installed locally using &lt;code class="docutils literal"&gt;npm install&lt;/code&gt;, and executed with the &lt;code class="docutils literal"&gt;npx&lt;/code&gt; tool or manually by running the script in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node_packages/.bin&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not installed at all, but executed using the &lt;code class="docutils literal"&gt;npx&lt;/code&gt; tool, which will install it into a cache and run it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also, if we wanted to publish our thing, we can just run &lt;code class="docutils literal"&gt;npm publish&lt;/code&gt; (after logging in with &lt;code class="docutils literal"&gt;npm login&lt;/code&gt;).&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="c-net-with-dotnet-cli-msbuild"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-15" role="doc-backlink"&gt;C#/.NET (with dotnet CLI/MSBuild)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In modern .NET, the One True Tool is the dotnet CLI, which uses MSBuild for most of the heavy lifting. (In the classic .NET Framework, the duties were split between MSBuild and NuGet.exe, but let’s focus on the modern workflow.)&lt;/p&gt;
&lt;p&gt;Let’s create a project:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-1" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-1"&gt;&lt;/a&gt;$ mkdir mydotnetproject
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-2" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-2"&gt;&lt;/a&gt;$ cd mydotnetproject
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-3" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-3"&gt;&lt;/a&gt;$ dotnet new console
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-4" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-4"&gt;&lt;/a&gt;The template "Console App" was created successfully.
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-5" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-6" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-6"&gt;&lt;/a&gt;Processing post-creation actions...
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-7" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-7"&gt;&lt;/a&gt;Running 'dotnet restore' on /tmp/mydotnetproject/mydotnetproject.csproj...
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-8" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-8"&gt;&lt;/a&gt;  Determining projects to restore...
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-9" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-9"&gt;&lt;/a&gt;  Restored /tmp/mydotnetproject/mydotnetproject.csproj (in 92 ms).
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-10" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-10"&gt;&lt;/a&gt;Restore succeeded.
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-11" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-11"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-12" name="rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1f89827bf87143ec9d3c928dcd0ab2b2-12"&gt;&lt;/a&gt;mydotnetproject.csproj  obj/  Program.cs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get three things: a &lt;code class="docutils literal"&gt;mydotnetproject.csproj&lt;/code&gt; file, which defines a few properties of our project; &lt;code class="docutils literal"&gt;Program.cs&lt;/code&gt;, which is a hello world program, and &lt;code class="docutils literal"&gt;obj/&lt;/code&gt;, which contains a few files you don’t need to care about.&lt;/p&gt;
&lt;p&gt;Let’s try adding a dependency. For a pointless example, but slightly more reasonable than the JS one, we’ll use &lt;code class="docutils literal"&gt;AutoFixture&lt;/code&gt;, which brings in a dependency on &lt;code class="docutils literal"&gt;Fare&lt;/code&gt;. If we run &lt;code class="docutils literal"&gt;dotnet add package AutoFixture&lt;/code&gt;, we get some console output, and our &lt;code class="docutils literal"&gt;mydotnetproject.csproj&lt;/code&gt; now looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code xml"&gt;&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-1" name="rest_code_1249da68169b4958be07efff2ec51674-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-1"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;Project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Sdk=&lt;/span&gt;&lt;span class="s"&gt;"Microsoft.NET.Sdk"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-2" name="rest_code_1249da68169b4958be07efff2ec51674-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-3" name="rest_code_1249da68169b4958be07efff2ec51674-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-4" name="rest_code_1249da68169b4958be07efff2ec51674-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;OutputType&amp;gt;&lt;/span&gt;Exe&lt;span class="nt"&gt;&amp;lt;/OutputType&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-5" name="rest_code_1249da68169b4958be07efff2ec51674-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;net6.0&lt;span class="nt"&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-6" name="rest_code_1249da68169b4958be07efff2ec51674-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ImplicitUsings&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/ImplicitUsings&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-7" name="rest_code_1249da68169b4958be07efff2ec51674-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Nullable&amp;gt;&lt;/span&gt;enable&lt;span class="nt"&gt;&amp;lt;/Nullable&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-8" name="rest_code_1249da68169b4958be07efff2ec51674-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-9" name="rest_code_1249da68169b4958be07efff2ec51674-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-10" name="rest_code_1249da68169b4958be07efff2ec51674-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-11" name="rest_code_1249da68169b4958be07efff2ec51674-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;PackageReference&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Include=&lt;/span&gt;&lt;span class="s"&gt;"AutoFixture"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;Version=&lt;/span&gt;&lt;span class="s"&gt;"4.17.0"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-12" name="rest_code_1249da68169b4958be07efff2ec51674-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-13" name="rest_code_1249da68169b4958be07efff2ec51674-13" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_1249da68169b4958be07efff2ec51674-14" name="rest_code_1249da68169b4958be07efff2ec51674-14" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_1249da68169b4958be07efff2ec51674-14"&gt;&lt;/a&gt;&lt;span class="nt"&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first &lt;code class="docutils literal"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; specifies what our project is (Exe = something you can run), specifies the target framework (.NET 6.0 &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;), and enables a few opt-in features of C#. The second &lt;code class="docutils literal"&gt;&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; was inserted when we installed AutoFixture.&lt;/p&gt;
&lt;p&gt;We can now write a pointless program in C#. Here’s our new &lt;code class="docutils literal"&gt;Program.cs&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code csharp"&gt;&lt;a id="rest_code_986e4d2bb01c461e8d0feed91329fb33-1" name="rest_code_986e4d2bb01c461e8d0feed91329fb33-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_986e4d2bb01c461e8d0feed91329fb33-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;AutoFixture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_986e4d2bb01c461e8d0feed91329fb33-2" name="rest_code_986e4d2bb01c461e8d0feed91329fb33-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_986e4d2bb01c461e8d0feed91329fb33-2"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Fixture&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_986e4d2bb01c461e8d0feed91329fb33-3" name="rest_code_986e4d2bb01c461e8d0feed91329fb33-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_986e4d2bb01c461e8d0feed91329fb33-3"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_986e4d2bb01c461e8d0feed91329fb33-4" name="rest_code_986e4d2bb01c461e8d0feed91329fb33-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_986e4d2bb01c461e8d0feed91329fb33-4"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_986e4d2bb01c461e8d0feed91329fb33-5" name="rest_code_986e4d2bb01c461e8d0feed91329fb33-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_986e4d2bb01c461e8d0feed91329fb33-5"&gt;&lt;/a&gt;&lt;span class="kt"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_986e4d2bb01c461e8d0feed91329fb33-6" name="rest_code_986e4d2bb01c461e8d0feed91329fb33-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_986e4d2bb01c461e8d0feed91329fb33-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Math is working"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Math is broken"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(We could just use C#’s/.NET’s built-in random number generator, AutoFixture is complete overkill here—it’s meant for auto-generating test data, with support for arbitrary classes and other data structures, and we’re just getting two random ints here. I’m using AutoFixture for this example, because it’s simple to use and demonstrate, and because it gets us a transitive dependency.)&lt;/p&gt;
&lt;p&gt;And now, we can run it:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_167358c71df94f30a6cbc964b196331b-1" name="rest_code_167358c71df94f30a6cbc964b196331b-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_167358c71df94f30a6cbc964b196331b-1"&gt;&lt;/a&gt;$ dotnet run
&lt;a id="rest_code_167358c71df94f30a6cbc964b196331b-2" name="rest_code_167358c71df94f30a6cbc964b196331b-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_167358c71df94f30a6cbc964b196331b-2"&gt;&lt;/a&gt;Math is working
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want something that can be run outside of the project, and possibly without .NET installed on the system, we can use dotnet publish. The most basic scenario:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_af56f09aac2f4cab8614215bfea45132-1" name="rest_code_af56f09aac2f4cab8614215bfea45132-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_af56f09aac2f4cab8614215bfea45132-1"&gt;&lt;/a&gt;$ dotnet publish
&lt;a id="rest_code_af56f09aac2f4cab8614215bfea45132-2" name="rest_code_af56f09aac2f4cab8614215bfea45132-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_af56f09aac2f4cab8614215bfea45132-2"&gt;&lt;/a&gt;$ ls bin/Debug/net6.0/publish
&lt;a id="rest_code_af56f09aac2f4cab8614215bfea45132-3" name="rest_code_af56f09aac2f4cab8614215bfea45132-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_af56f09aac2f4cab8614215bfea45132-3"&gt;&lt;/a&gt;AutoFixture.dll*  Fare.dll*  mydotnetproject*  mydotnetproject.deps.json  mydotnetproject.dll  mydotnetproject.pdb  mydotnetproject.runtimeconfig.json
&lt;a id="rest_code_af56f09aac2f4cab8614215bfea45132-4" name="rest_code_af56f09aac2f4cab8614215bfea45132-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_af56f09aac2f4cab8614215bfea45132-4"&gt;&lt;/a&gt;$ du -h bin/Debug/net6.0/publish
&lt;a id="rest_code_af56f09aac2f4cab8614215bfea45132-5" name="rest_code_af56f09aac2f4cab8614215bfea45132-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_af56f09aac2f4cab8614215bfea45132-5"&gt;&lt;/a&gt;424K    bin/Debug/net6.0/publish
&lt;a id="rest_code_af56f09aac2f4cab8614215bfea45132-6" name="rest_code_af56f09aac2f4cab8614215bfea45132-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_af56f09aac2f4cab8614215bfea45132-6"&gt;&lt;/a&gt;$ bin/Debug/net6.0/publish/mydotnetproject
&lt;a id="rest_code_af56f09aac2f4cab8614215bfea45132-7" name="rest_code_af56f09aac2f4cab8614215bfea45132-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_af56f09aac2f4cab8614215bfea45132-7"&gt;&lt;/a&gt;Math is working
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that we’ve got a few files related to our project, as well as &lt;code class="docutils literal"&gt;AutoFixture.dll&lt;/code&gt; and &lt;code class="docutils literal"&gt;Fare.dll&lt;/code&gt;, which are our dependencies (&lt;code class="docutils literal"&gt;Fare.dll&lt;/code&gt; is a dependency of &lt;code class="docutils literal"&gt;AutoFixture.dll&lt;/code&gt;). Now, let’s try to remove &lt;code class="docutils literal"&gt;AutoFixture.dll&lt;/code&gt; from the published distribution:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_e34feb80592c47728393291ce3a08d80-1" name="rest_code_e34feb80592c47728393291ce3a08d80-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e34feb80592c47728393291ce3a08d80-1"&gt;&lt;/a&gt;$ rm bin/Debug/net6.0/publish/AutoFixture.dll
&lt;a id="rest_code_e34feb80592c47728393291ce3a08d80-2" name="rest_code_e34feb80592c47728393291ce3a08d80-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e34feb80592c47728393291ce3a08d80-2"&gt;&lt;/a&gt;$ bin/Debug/net6.0/publish/mydotnetproject
&lt;a id="rest_code_e34feb80592c47728393291ce3a08d80-3" name="rest_code_e34feb80592c47728393291ce3a08d80-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e34feb80592c47728393291ce3a08d80-3"&gt;&lt;/a&gt;Unhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'AutoFixture, Version=4.17.0.0, Culture=neutral, PublicKeyToken=b24654c590009d4f'. The system cannot find the file specified.
&lt;a id="rest_code_e34feb80592c47728393291ce3a08d80-4" name="rest_code_e34feb80592c47728393291ce3a08d80-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e34feb80592c47728393291ce3a08d80-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_e34feb80592c47728393291ce3a08d80-5" name="rest_code_e34feb80592c47728393291ce3a08d80-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e34feb80592c47728393291ce3a08d80-5"&gt;&lt;/a&gt;File name: 'AutoFixture, Version=4.17.0.0, Culture=neutral, PublicKeyToken=b24654c590009d4f'
&lt;a id="rest_code_e34feb80592c47728393291ce3a08d80-6" name="rest_code_e34feb80592c47728393291ce3a08d80-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_e34feb80592c47728393291ce3a08d80-6"&gt;&lt;/a&gt;[1]    45060 IOT instruction (core dumped)  bin/Debug/net6.0/publish/mydotnetproject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also try a more advanced scenario:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-1" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-1"&gt;&lt;/a&gt;$ rm -rf bin obj  # clean up, just in case
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-2" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-2"&gt;&lt;/a&gt;$ dotnet publish --sc -r linux-x64 -p:PublishSingleFile=true -o myoutput
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-3" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-3"&gt;&lt;/a&gt;Microsoft (R) Build Engine version 17.0.1+b177f8fa7 for .NET
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-4" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-4"&gt;&lt;/a&gt;Copyright (C) Microsoft Corporation. All rights reserved.
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-5" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-6" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-6"&gt;&lt;/a&gt;  Determining projects to restore...
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-7" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-7"&gt;&lt;/a&gt;  Restored /tmp/mydotnetproject/mydotnetproject.csproj (in 4.09 sec).
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-8" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-8"&gt;&lt;/a&gt;  mydotnetproject -&amp;gt; /tmp/mydotnetproject/bin/Debug/net6.0/linux-x64/mydotnetproject.dll
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-9" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-9"&gt;&lt;/a&gt;  mydotnetproject -&amp;gt; /tmp/mydotnetproject/myoutput/
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-10" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-10"&gt;&lt;/a&gt;$ ls myoutput
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-11" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-11"&gt;&lt;/a&gt;mydotnetproject*  mydotnetproject.pdb
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-12" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-12"&gt;&lt;/a&gt;$ myoutput/mydotnetproject
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-13" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-13" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-13"&gt;&lt;/a&gt;Math is working
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-14" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-14" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-14"&gt;&lt;/a&gt;$ du -h myoutput/*
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-15" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-15" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-15"&gt;&lt;/a&gt;62M     myoutput/mydotnetproject
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-16" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-16" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-16"&gt;&lt;/a&gt;12K     myoutput/mydotnetproject.pdb
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-17" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-17" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-17"&gt;&lt;/a&gt;$ file -k myoutput/mydotnetproject
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-18" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-18" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-18"&gt;&lt;/a&gt;myoutput/mydotnetproject: ELF 64-bit LSB pie executable, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=47637c667797007d777f4322729d89e7fa53a870, for GNU/Linux 2.6.32, stripped, too many notes (256)\012- data
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-19" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-19" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-19"&gt;&lt;/a&gt;$ file -k myoutput/mydotnetproject.pdb
&lt;a id="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-20" name="rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-20" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_f0c99f8debe346c2b6a1c9a2b063aab6-20"&gt;&lt;/a&gt;myoutput/mydotnetproject.pdb: Microsoft Roslyn C# debugging symbols version 1.0\012- data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have a single output file that contains our program, its dependencies, and parts of the .NET runtime. We also get debugging symbols if we want to run our binary with a .NET debugger and see the associated source code. (There are ways to make the binary file smaller, and we can move most arguments of &lt;code class="docutils literal"&gt;dotnet publish&lt;/code&gt; to the .csproj file, but this post is about Python, not .NET, so I’m not going to focus on them too much.)&lt;/p&gt;
&lt;section id="how-is-net-better-than-python"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-16" role="doc-backlink"&gt;How is .NET better than Python?&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I’m not going to bore you with the same demonstrations I’ve already shown when discussing &lt;a class="reference internal" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#how-is-node-better-than-python"&gt;How is Node better than Python?&lt;/a&gt;, but:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;You can run built .NET projects as any user, from anywhere in the filesystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All you need to run your code is the output directory (publishing is optional, but useful to have a cleaner output, to simplify deployment, and to possibly enable compilation to native code).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you do publish in single-executable mode, you can just distribute the single executable, and your users don’t even need to have .NET installed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You do not need to manage environments, you do not need special tools to run your code, you do not need to think about the current working directory when running code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="other-packaging-topics-1"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-17" role="doc-backlink"&gt;Other packaging topics&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Locking dependencies is disabled by default, but if you add &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;RestorePackagesWithLockFile&amp;gt;true&amp;lt;/RestorePackagesWithLockFile&amp;gt;&lt;/span&gt;&lt;/code&gt; to the &lt;code class="docutils literal"&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; in your &lt;code class="docutils literal"&gt;.csproj&lt;/code&gt; file, you can enable it (and get a &lt;code class="docutils literal"&gt;packages.lock.json&lt;/code&gt; file in output).&lt;/p&gt;
&lt;p&gt;Regarding &lt;a class="reference external" href="https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools"&gt;command line tools&lt;/a&gt;, .NET has support for those as well. They can be installed globally or locally, and may be accessed via $PATH or via the &lt;code class="docutils literal"&gt;dotnet&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;As for publishing your package to NuGet.org or to another repository, you might want to look at the &lt;a class="reference external" href="https://learn.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli"&gt;full docs&lt;/a&gt; for more details, but the short version is:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Add some metadata to the &lt;code class="docutils literal"&gt;.csproj&lt;/code&gt; file (e.g. &lt;code class="docutils literal"&gt;PackageId&lt;/code&gt; and &lt;code class="docutils literal"&gt;Version&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;dotnet pack&lt;/code&gt; to get a &lt;code class="docutils literal"&gt;.nupkg&lt;/code&gt; file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code class="docutils literal"&gt;dotnet nuget push&lt;/code&gt; to upload the &lt;code class="docutils literal"&gt;.nupkg&lt;/code&gt; file (passing the file name and an API key)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once again, everything is done with a single &lt;code class="docutils literal"&gt;dotnet&lt;/code&gt; tool. The .NET IDEs (in particular, Visual Studio and Rider) do offer friendly GUI versions of many features. Some of those GUIs might be doings things slightly differently behind the scenes, but this is transparent to the user (and the backend is still MSBuild or a close derivative of it). I can take a CLI-created project, add a dependency from Rider, and publish an executable from VS, and everything will work the same. And perhaps XML files aren’t as cool as TOML, but they’re still easy to work with in this case.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="other-languages-and-ecosystems"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-18" role="doc-backlink"&gt;Other languages and ecosystems&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While we have explored two tools for two languages in depth, there are also other languages that deserve at least a mention. In the &lt;strong&gt;Java&lt;/strong&gt; world, the two most commonly used tools are Maven and Gradle. Both tools can be used to manage dependencies and build artifacts that can be executed or distributed further (things like JAR files). Other tools with support for building Java projects exist, but most people just pick one of the two. The community of &lt;strong&gt;Scala&lt;/strong&gt;, which is another JVM-based language, prefers sbt (which can be used for plain Java as well), but there are also Maven or Gradle users in that community. Finally, two new-ish languages which are quite popular in the recent times, &lt;strong&gt;Go&lt;/strong&gt; and &lt;strong&gt;Rust&lt;/strong&gt;, have first-party tooling integrated with the rest of the toolchain. The &lt;code class="docutils literal"&gt;go&lt;/code&gt; command-line tool can accomplish many build/dependency/packaging tasks. Rust’s &lt;code class="docutils literal"&gt;cargo&lt;/code&gt;, which ships with the standard distribution of Rust, handles dependencies, builds, running code and tests, as well as publishing your stuff to a registry.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="are-those-ecosystems-tools-perfect"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-19" role="doc-backlink"&gt;Are those ecosystems’ tools perfect?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Not always, they have their deficiencies as well. In the Node ecosystem, packages may execute arbitrary code on install, which can be a security risk (there are some known examples, like a npm package &lt;a class="reference external" href="https://arstechnica.com/information-technology/2022/03/sabotage-code-added-to-popular-npm-package-wiped-files-in-russia-and-belarus/"&gt;wiping hard drives in Russia and Belarus&lt;/a&gt;, or another one &lt;a href="https://arstechnica.com/information-technology/2018/11/hacker-backdoors-widely-used-open-source-software-to-steal-bitcoin/"&gt;stealing &lt;s&gt;imaginary Internet money&lt;/s&gt; Bitcoin&lt;/a&gt;). Binary packages are not distributed on the npm registry directly, they’re either built with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node-gyp&lt;/span&gt;&lt;/code&gt;, or have prebuilt packages downloaded via &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;node-pre-gyp&lt;/span&gt;&lt;/code&gt; (which is a third-party tool).&lt;/p&gt;
&lt;p&gt;In the .NET ecosystem, the tools also create an &lt;code class="docutils literal"&gt;obj&lt;/code&gt; directory with temporary files. Those temporary files are tied to the environment they’re running in, and while the tooling will usually re-create them if something changes, it can sometimes fail and leave you with confusing errors (which can generally be solved by removing the &lt;code class="docutils literal"&gt;bin&lt;/code&gt; and &lt;code class="docutils literal"&gt;obj&lt;/code&gt; directories). If a package depends on native code (which is not already available on the target OS as part of a shared library), it must include binary builds in the NuGet package for all the platforms it supports, as there is &lt;a class="reference external" href="https://github.com/NuGet/Home/issues/9631"&gt;no standard way&lt;/a&gt; to allow building something from source.&lt;/p&gt;
&lt;p&gt;You can also find deficiencies in the tools for the other languages mentioned. Some people think Maven is terrible because it uses XML and Gradle is the way to go, and others think Gradle’s use of a Groovy-based DSL makes things much harder than they need to be and prefer Maven instead.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="pep-582-the-future-of-python-packaging"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-20" role="doc-backlink"&gt;PEP 582: the future of Python packaging?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recall that when introducing PDM, I mentioned &lt;a class="reference external" href="https://peps.python.org/pep-0582/"&gt;PEP 582&lt;/a&gt;. This PEP defines a &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory. This directory would be taken into consideration by Python when looking for imports. It would behave similarly to &lt;code class="docutils literal"&gt;node_modules&lt;/code&gt;. Since there will be no symlinks to the system Python, it will resolve the issues with moving the virtual environment. Because the packages live in the project, there is no problem with sharing a project directory between multiple system users. It might even be possible for different computers (but with the same Python version and OS) to share the &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory (in some specific cases). The proposed &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory structure has &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;lib/python3.10/site-packages/&lt;/span&gt;&lt;/code&gt; subfolders, which still makes the “reinstall on Python upgrade” step mandatory, but it doesn’t apply to minor version upgrades, and if you’re dealing with a pure-Python dependency tree, &lt;code class="docutils literal"&gt;mv __pypackages__/lib/python3.10 __pypackages__/lib/python3.11&lt;/code&gt; might just work. This structure does make sense for binary dependencies, or for dependencies necessary only on older Python versions, as it allows you to use multiple Python versions with the same project directory. The PEP does not say anything about sharing &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; between projects, but you could probably solve that problem with symlinks (assuming the tooling doesn’t care if the directory is a symlink, and it shouldn’t care IMO).&lt;/p&gt;
&lt;p&gt;While PEP 582 is a great vision, and it would simplify many package-related workflows, it hasn’t seen much care from the powers-that-be. The PEP was proposed in May 2018, and there’s even &lt;a class="reference external" href="https://github.com/kushaldas/pep582/blob/main/pep582.py"&gt;a usable implementation&lt;/a&gt; that’s less than 50 lines of code, there &lt;a class="reference external" href="https://discuss.python.org/t/pep-582-python-local-packages-directory/963/"&gt;hasn’t been much progress&lt;/a&gt; on having it accepted and implemented in Python proper. However, PDM does not care, and it allows you to enable the future on your own machine.&lt;/p&gt;
&lt;section id="enabling-the-future-on-your-own-machine"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-21" role="doc-backlink"&gt;Enabling the future on your own machine&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s enable the future on my own machine. That will require one simple command:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_da44905c6bbb4bc392874db2c3b7adb0-1" name="rest_code_da44905c6bbb4bc392874db2c3b7adb0-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_da44905c6bbb4bc392874db2c3b7adb0-1"&gt;&lt;/a&gt;$ eval "$(pdm --pep582)"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, we can initialize our project and install requests into it. Let’s try:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-1" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-1"&gt;&lt;/a&gt;$ mkdir mypdmproject
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-2" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-2"&gt;&lt;/a&gt;$ cd mypdmproject
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-3" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-3"&gt;&lt;/a&gt;$ pdm init
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-4" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-4"&gt;&lt;/a&gt;Creating a pyproject.toml for PDM...
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-5" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-5"&gt;&lt;/a&gt;Please enter the Python interpreter to use
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-6" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-6"&gt;&lt;/a&gt;0. /usr/bin/python (3.11)
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-7" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-7"&gt;&lt;/a&gt;1. /usr/bin/python3.11 (3.11)
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-8" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-8"&gt;&lt;/a&gt;2. /usr/bin/python2.7 (2.7)
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-9" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-9"&gt;&lt;/a&gt;Please select (0): 1
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-10" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-10"&gt;&lt;/a&gt;Using Python interpreter: /usr/bin/python3.11 (3.11)
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-11" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-11"&gt;&lt;/a&gt;Would you like to create a virtualenv with /usr/bin/python3.11? [y/n] (y): n
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-12" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-12"&gt;&lt;/a&gt;You are using the PEP 582 mode, no virtualenv is created.
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-13" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-13" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-13"&gt;&lt;/a&gt;For more info, please visit https://peps.python.org/pep-0582/
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-14" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-14" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-14"&gt;&lt;/a&gt;Is the project a library that will be uploaded to PyPI [y/n] (n): n
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-15" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-15" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-15"&gt;&lt;/a&gt;License(SPDX name) (MIT):
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-16" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-16" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-16"&gt;&lt;/a&gt;Author name (Chris Warrick):
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-17" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-17" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-17"&gt;&lt;/a&gt;Author email (…):
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-18" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-18" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-18"&gt;&lt;/a&gt;Python requires('*' to allow any) (&amp;gt;=3.11):
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-19" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-19" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-19"&gt;&lt;/a&gt;Changes are written to pyproject.toml.
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-20" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-20" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-20"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-21" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-21" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-21"&gt;&lt;/a&gt;pyproject.toml
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-22" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-22" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-22"&gt;&lt;/a&gt;$ pdm add requests
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-23" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-23" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-23"&gt;&lt;/a&gt;Adding packages to default dependencies: requests
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-24" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-24" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-24"&gt;&lt;/a&gt;🔒 Lock successful
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-25" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-25" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-25"&gt;&lt;/a&gt;Changes are written to pdm.lock.
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-26" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-26" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-26"&gt;&lt;/a&gt;Changes are written to pyproject.toml.
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-27" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-27" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-27"&gt;&lt;/a&gt;Synchronizing working set with lock file: 5 to add, 0 to update, 0 to remove
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-28" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-28" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-28"&gt;&lt;/a&gt;
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-29" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-29" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-29"&gt;&lt;/a&gt;  ✔ Install charset-normalizer 2.1.1 successful
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-30" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-30" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-30"&gt;&lt;/a&gt;  ✔ Install certifi 2022.12.7 successful
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-31" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-31" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-31"&gt;&lt;/a&gt;  ✔ Install idna 3.4 successful
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-32" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-32" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-32"&gt;&lt;/a&gt;  ✔ Install requests 2.28.1 successful
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-33" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-33" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-33"&gt;&lt;/a&gt;  ✔ Install urllib3 1.26.13 successful
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-34" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-34" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-34"&gt;&lt;/a&gt;
&lt;a id="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-35" name="rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-35" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_2cb3b5a652c7465aa4b6361c21d3d7db-35"&gt;&lt;/a&gt;🎉 All complete!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far, so good (I’m not a fan of emoji in terminals, but that’s my only real complaint here.) Our &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code toml"&gt;&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-1" name="rest_code_39dc17501851464f8c478477e9d05081-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;[tool.pdm]&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-2" name="rest_code_39dc17501851464f8c478477e9d05081-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-3" name="rest_code_39dc17501851464f8c478477e9d05081-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;[project]&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-4" name="rest_code_39dc17501851464f8c478477e9d05081-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-5" name="rest_code_39dc17501851464f8c478477e9d05081-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-6" name="rest_code_39dc17501851464f8c478477e9d05081-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-7" name="rest_code_39dc17501851464f8c478477e9d05081-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-8" name="rest_code_39dc17501851464f8c478477e9d05081-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Chris Warrick"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"…"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-9" name="rest_code_39dc17501851464f8c478477e9d05081-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-10" name="rest_code_39dc17501851464f8c478477e9d05081-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-10"&gt;&lt;/a&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-11" name="rest_code_39dc17501851464f8c478477e9d05081-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"requests&amp;gt;=2.28.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-12" name="rest_code_39dc17501851464f8c478477e9d05081-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-13" name="rest_code_39dc17501851464f8c478477e9d05081-13" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-13"&gt;&lt;/a&gt;&lt;span class="n"&gt;requires-python&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;=3.11"&lt;/span&gt;
&lt;a id="rest_code_39dc17501851464f8c478477e9d05081-14" name="rest_code_39dc17501851464f8c478477e9d05081-14" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_39dc17501851464f8c478477e9d05081-14"&gt;&lt;/a&gt;&lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"MIT"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we try to look into our file structure, we have this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-1" name="rest_code_158410f4f60f430fb4f7b36c52290f42-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-1"&gt;&lt;/a&gt;$ ls
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-2" name="rest_code_158410f4f60f430fb4f7b36c52290f42-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-2"&gt;&lt;/a&gt;pdm.lock  __pypackages__/  pyproject.toml
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-3" name="rest_code_158410f4f60f430fb4f7b36c52290f42-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-3"&gt;&lt;/a&gt;$ ls __pypackages__
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-4" name="rest_code_158410f4f60f430fb4f7b36c52290f42-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-4"&gt;&lt;/a&gt;3.11/
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-5" name="rest_code_158410f4f60f430fb4f7b36c52290f42-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-5"&gt;&lt;/a&gt;$ ls __pypackages__/3.11
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-6" name="rest_code_158410f4f60f430fb4f7b36c52290f42-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-6"&gt;&lt;/a&gt;bin/  include/  lib/
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-7" name="rest_code_158410f4f60f430fb4f7b36c52290f42-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-7"&gt;&lt;/a&gt;$ ls __pypackages__/3.11/lib
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-8" name="rest_code_158410f4f60f430fb4f7b36c52290f42-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-8"&gt;&lt;/a&gt;certifi/             certifi-2022.12.7.dist-info/
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-9" name="rest_code_158410f4f60f430fb4f7b36c52290f42-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-9"&gt;&lt;/a&gt;idna/                idna-3.4.dist-info/
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-10" name="rest_code_158410f4f60f430fb4f7b36c52290f42-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-10"&gt;&lt;/a&gt;charset_normalizer/  charset_normalizer-2.1.1.dist-info/
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-11" name="rest_code_158410f4f60f430fb4f7b36c52290f42-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-11"&gt;&lt;/a&gt;requests/            requests-2.28.1.dist-info/
&lt;a id="rest_code_158410f4f60f430fb4f7b36c52290f42-12" name="rest_code_158410f4f60f430fb4f7b36c52290f42-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_158410f4f60f430fb4f7b36c52290f42-12"&gt;&lt;/a&gt;urllib3/             urllib3-1.26.13.dist-info/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll write a simple Python program (let’s call it &lt;code class="docutils literal"&gt;mypdmproject.py&lt;/code&gt;) that makes a HTTP request using &lt;code class="docutils literal"&gt;requests&lt;/code&gt;. It will also print &lt;code class="docutils literal"&gt;requests.__file__&lt;/code&gt; so we’re sure it isn’t using some random system copy: &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-1" name="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_04e6321635ff41f0a6d9efb0e125c6e4-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;a id="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-2" name="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_04e6321635ff41f0a6d9efb0e125c6e4-2"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-3" name="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_04e6321635ff41f0a6d9efb0e125c6e4-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://chriswarrick.com/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-4" name="rest_code_04e6321635ff41f0a6d9efb0e125c6e4-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_04e6321635ff41f0a6d9efb0e125c6e4-4"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_5f6f67527e36461e8bcc013441659d7d-1" name="rest_code_5f6f67527e36461e8bcc013441659d7d-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5f6f67527e36461e8bcc013441659d7d-1"&gt;&lt;/a&gt;$ python mypdmproject.py
&lt;a id="rest_code_5f6f67527e36461e8bcc013441659d7d-2" name="rest_code_5f6f67527e36461e8bcc013441659d7d-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5f6f67527e36461e8bcc013441659d7d-2"&gt;&lt;/a&gt;/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py
&lt;a id="rest_code_5f6f67527e36461e8bcc013441659d7d-3" name="rest_code_5f6f67527e36461e8bcc013441659d7d-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_5f6f67527e36461e8bcc013441659d7d-3"&gt;&lt;/a&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let’s finally try the tests we’ve done in the other languages. Requests is useless without urllib3, so let’s remove it &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-5" id="footnote-reference-5" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;5&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; and see how well it works.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-1" name="rest_code_909414ca5699417f9d92d66b75aa70db-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-1"&gt;&lt;/a&gt;$ rm -rf __pypackages__/3.11/lib/urllib3*
&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-2" name="rest_code_909414ca5699417f9d92d66b75aa70db-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-2"&gt;&lt;/a&gt;$ python mypdmproject.py
&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-3" name="rest_code_909414ca5699417f9d92d66b75aa70db-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-3"&gt;&lt;/a&gt;Traceback (most recent call last):
&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-4" name="rest_code_909414ca5699417f9d92d66b75aa70db-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-4"&gt;&lt;/a&gt;  File "/tmp/mypdmproject/mypdmproject.py", line 1, in &amp;lt;module&amp;gt;
&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-5" name="rest_code_909414ca5699417f9d92d66b75aa70db-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-5"&gt;&lt;/a&gt;    import requests
&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-6" name="rest_code_909414ca5699417f9d92d66b75aa70db-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-6"&gt;&lt;/a&gt;  File "/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py", line 43, in &amp;lt;module&amp;gt;
&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-7" name="rest_code_909414ca5699417f9d92d66b75aa70db-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-7"&gt;&lt;/a&gt;    import urllib3
&lt;a id="rest_code_909414ca5699417f9d92d66b75aa70db-8" name="rest_code_909414ca5699417f9d92d66b75aa70db-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_909414ca5699417f9d92d66b75aa70db-8"&gt;&lt;/a&gt;ModuleNotFoundError: No module named 'urllib3'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, can we try with a different directory? How about a different user?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_96baecf2e218422faec50974419fd113-1" name="rest_code_96baecf2e218422faec50974419fd113-1" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-1"&gt;&lt;/a&gt;$ pdm install
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-2" name="rest_code_96baecf2e218422faec50974419fd113-2" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-2"&gt;&lt;/a&gt;Synchronizing working set with lock file: 1 to add, 0 to update, 0 to remove
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-3" name="rest_code_96baecf2e218422faec50974419fd113-3" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-4" name="rest_code_96baecf2e218422faec50974419fd113-4" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-4"&gt;&lt;/a&gt;  ✔ Install urllib3 1.26.13 successful
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-5" name="rest_code_96baecf2e218422faec50974419fd113-5" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-6" name="rest_code_96baecf2e218422faec50974419fd113-6" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-6"&gt;&lt;/a&gt;🎉 All complete!
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-7" name="rest_code_96baecf2e218422faec50974419fd113-7" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-7"&gt;&lt;/a&gt;$ pwd
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-8" name="rest_code_96baecf2e218422faec50974419fd113-8" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-8"&gt;&lt;/a&gt;/tmp/mypdmproject
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-9" name="rest_code_96baecf2e218422faec50974419fd113-9" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-9"&gt;&lt;/a&gt;$ cd ~
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-10" name="rest_code_96baecf2e218422faec50974419fd113-10" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-10"&gt;&lt;/a&gt;$ python /tmp/mypdmproject/mypdmproject.py
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-11" name="rest_code_96baecf2e218422faec50974419fd113-11" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-11"&gt;&lt;/a&gt;/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-12" name="rest_code_96baecf2e218422faec50974419fd113-12" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-12"&gt;&lt;/a&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-13" name="rest_code_96baecf2e218422faec50974419fd113-13" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-13"&gt;&lt;/a&gt;# su -s /bin/bash -c 'eval "$(/tmp/pdmvenv/bin/pdm --pep582 bash)"; python /tmp/mypdmproject/mypdmproject.py' - nobody
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-14" name="rest_code_96baecf2e218422faec50974419fd113-14" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-14"&gt;&lt;/a&gt;su: warning: cannot change directory to /nonexistent: No such file or directory
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-15" name="rest_code_96baecf2e218422faec50974419fd113-15" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-15"&gt;&lt;/a&gt;/tmp/mypdmproject/__pypackages__/3.11/lib/requests/__init__.py
&lt;a id="rest_code_96baecf2e218422faec50974419fd113-16" name="rest_code_96baecf2e218422faec50974419fd113-16" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#rest_code_96baecf2e218422faec50974419fd113-16"&gt;&lt;/a&gt;&amp;lt;!DOCTYPE html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is looking pretty good. An independent project manages to do what the big Authority failed to do over so many years.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="is-this-the-perfect-thing"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-22" role="doc-backlink"&gt;Is this the perfect thing?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Well, almost. There are two things that I have complaints about. The first one is the &lt;code class="docutils literal"&gt;pdm &lt;span class="pre"&gt;--pep582&lt;/span&gt;&lt;/code&gt; hack, but hopefully, the PyPA gets its act together and gets it into Python core soon. However, another important problem is the lack of separation from system site-packages. Avid readers of footnotes &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-6" id="footnote-reference-6" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;6&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; might have noticed I had to use a Docker container in my PDM experiments, because requests is very commonly found in system &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;site-packages&lt;/span&gt;&lt;/code&gt; (especially when using system Pythons, which have requests because of some random package, or because it was unbundled from pip). &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-7" id="footnote-reference-7" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;7&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; This can break things in ways you don’t expect, because you might end up importing and depending on system-wide things, or mixing system-wide and local packages (if you don’t install an extra requirement, but those packages are present system-wide, then you might end up using an extra you haven’t asked for). This is an important problem—a good solution would be to disable system site-packages if a &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory is in use.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-part-where-the-steering-council-kills-it"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-23" role="doc-backlink"&gt;The part where the Steering Council kills it&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In late March 2023, the Python Steering Council has announced &lt;a class="reference external" href="https://discuss.python.org/t/pep-582-python-local-packages-directory/963/430"&gt;the rejection of PEP 582&lt;/a&gt;. The reasons cited in the SC decision cited the limitations of the PEP (the &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; directory not always being enough, and the lack of specification on how it would behave in edge cases). Another argument is that it is possible to get &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; via “one of the many existing customization mechanisms for &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt;, like &lt;code class="docutils literal"&gt;.pth&lt;/code&gt; files or a &lt;code class="docutils literal"&gt;sitecustomize&lt;/code&gt; module” — things commonly considered hacks, not real solutions. While users certainly can do anything they want to the &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; (often with tragic consequences), the point of having a common standard is to encourage tools to add support for it — if you use the aforementioned hacks, your IDE might end up not noticing the packages or considering them part of your code (trying to index them and search for things in them). Another reason cited for the rejection is the disagreement among the packaging community, which should not be surprising, especially in light of the next section.&lt;/p&gt;
&lt;p&gt;The PEP 582/&lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt; mechanism may become official one day, and finally make Python packaging approachable. That would probably require someone to step up and write a new PEP that would make more people happy. Or Python might be stuck with all these incompatible tools, and invent 10 more in the next few years. (PDM is still there, and it still supports &lt;code class="docutils literal"&gt;__pypackages__&lt;/code&gt;, even though its implementation isn’t exactly the same as suggested by the now-rejected PEP.) Python’s current trajectory, as demonstrated by this decision, and by many people still being forced to struggle with the needlessly complicated virtual environments, sounds an awful lot like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/%27No_Way_to_Prevent_This,%27_Says_Only_Nation_Where_This_Regularly_Happens"&gt;the classic Onion headline&lt;/a&gt;: ‘No Way to Prevent This,’ Says Only Programming Community Where This Regularly Happens.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="pypa-versus-reality-packaging-survey-results-and-pypa-reaction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-24" role="doc-backlink"&gt;PyPA versus reality: packaging survey results and PyPA reaction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some time ago, the PSF ran a survey on packaging. Over 8000 people responded. &lt;a class="reference external" href="https://drive.google.com/file/d/1U5d5SiXLVkzDpS0i1dJIA4Hu5Qg704T9/view"&gt;The users have spoken:&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Most people think packaging is too complex.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An overwhelming majority prefers using just a single tool.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most people also think the existence of multiple tools is not beneficial for the Python packaging ecosystem.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Virtually everyone would prefer a clearly defined official workflow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Over 50% of responses think tools for other ecosystems are better at managing dependencies and installing packages.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next step after this survey was for the packaging community to &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420"&gt;discuss its results&lt;/a&gt; and try to come up with a new packaging strategy. The first post from Shamika Mohanan (the Packaging Project Manager at PSF) that triggered the discussion also focused heavily on the users’ vision to unify packaging tools and to have One True Tool. This discussion was open to people involved with the packaging world; many participants of the discussion are involved with PyPA, and I don’t think I’ve seen a single comment from the people behind Poetry or PDM.&lt;/p&gt;
&lt;p&gt;Most of the thread ended up being discussion of binary extensions, including discussions of how to help tool proliferation by making it possible for tools that aren’t setuptools to build binary extensions. There was also a lot of focus on the scientific community’s issues with &lt;a class="reference external" href="https://pypackaging-native.github.io/"&gt;libraries with native code&lt;/a&gt;, heavily rooted in C/C++, and with attempts to replace Conda with new PyPA-approved tools. The “unified tool” for everyone else was mentioned in some posts, but they were certainly the minority.&lt;/p&gt;
&lt;p&gt;Some PyPA members talked about a UX analysis, and that they expect the unified tool to be re-exporting functionality from existing tools—which immediately raises the question: which tools should it export functionality from and why? Is &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;unified-packaging-tool&lt;/span&gt;&lt;/code&gt; going to bring in all fourteen? Is the fact that users are unhappy with what they have, and many of them would be happy with something lke npm/dotnet/cargo, not enough to determine the UX direction of the unified tool?&lt;/p&gt;
&lt;p&gt;Some of them are also against breaking existing workflows. Is a unified packaging tool going to work for every single user? Definitely not. But are there that many distinct basic workflows? If we ignore things that border on bikeshedding, such as src vs no-src, or venv locations, are there that many workflows to consider? Someone making a library and someone making an application do have different needs (e.g. with regard to publishing the package or acceptable dependency versions). Someone working with C extensions (or extensions using something like Cython) may have different needs, but their needs would usually be a superset of the needs of someone working on a pure-Python project. The scientific community might have more specialized needs, related to complex non-Python parts, but I am positive many of their points could be solved by the unified tool as well, even if it’s not by the time this tool reaches v1.0. It is also possible that the scientific community might prefer to stay with Conda, or with some evolution of it that brings it closer in line with the Unified Packaging Tool but also solves the scientists’ needs better than a tool also solving the non-scientists’ needs can.&lt;/p&gt;
&lt;p&gt;Then there’s a discussion about the existing tools and which one is the tool for the future. The maintainer of Hatch (Ofek Lev) says that &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/4"&gt;Hatch can provide the “unified UX”&lt;/a&gt;. But do the maintainers of Poetry or PDM agree? Poetry seems to be far more active than Hatch, going by GitHub issues, and it’s also worth noting that Hatch’s bus factor is 1 (with Ofek Lev responsible for 542 out of 576 commits to the master branch). &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/46"&gt;Russell Keith-Magee from BeeWare&lt;/a&gt; has highlighted the fact that tooling aside, the PyPA does a bad job at communicating things. Russell mentioned that one of PyPA tutorials now uses Hatch, but there is no way to know if the PyPA considers Hatch to be the future, are people supposed to migrate onto Hatch, and is Flit, another recent PyPA tool, now useless? Russell also makes good points about focusing efforts: should people focus on helping Hatch support extension modules (which, according to the Hatch maintainer, is the last scenario requiring setuptools; other participants note that you can already build native code without setuptools), or should people focus on improving setuptools compatibility with PEP 517?&lt;/p&gt;
&lt;p&gt;There were also some people stating their opinions on unifying things in various ways—and many of them are &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/136"&gt;against&lt;/a&gt; &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/137"&gt;unifying&lt;/a&gt; things. There were some voices of reason, like that of Russell Keith-Magee, or of &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/140"&gt;Simon Notley&lt;/a&gt;, who correctly noticed the thread fails to resolve problems of developers, who are confused about packaging, and don’t understand the different choices available and how they interoperate. Simon does agree that native dependencies are important and happen often in Python projects (and so do I), but the users who responded to the survey had something else in mind — as exemplified by the discussion opening post, mentioning the user expecting the simplicity of Rust’s cargo, and by the survey results. 70% of the survey respondents also use &lt;code class="docutils literal"&gt;npm&lt;/code&gt;, so many Python users have already seen the simpler workflows. The survey respondents were also asked to rank a few focus areas based on importance. “Making Python packaging better serve common use cases and workflows” was ranked first out of the provided options &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-8" id="footnote-reference-8" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;8&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; by 3248 participants. “Supporting a wider range of use cases (e.g. edge cases, etc.)” was ranked first by 379 people, and it was the least important in the minds of 2989 people.&lt;/p&gt;
&lt;p&gt;One more point that highlights the detachment of packaging folk from reality was mentioned by Anderson Bravalheri. To Anderson, a new unified tool would be &lt;a class="reference external" href="https://discuss.python.org/t/python-packaging-strategy-discussion-part-1/22420/133"&gt;disrespectful of the work&lt;/a&gt; the maintainers of the existing tools put into maintaining them, and disrespectful of users who had to adapt to the packaging mess. This point is completely absurd. Was the replacement of MS-DOS/Windows 9x and Classic Mac OS with Windows NT and &lt;s&gt;Mac OS X&lt;/s&gt; &lt;s&gt;OS X&lt;/s&gt; macOS disrespectful to their respective designers, and the users who had to adapt to manually configuring minutiae, figuring out how to get all your software and hardware to run with weird limitations that were necessary in the 1980s, and the system crashing every once in a while? Was the replacement of horses with cars disrespectful to horses, and the people who were removing horse manure from the streets? Was the replacement of the Ford Model T with faster, safer, more efficient, and easier to use cars disrespectful to Henry Ford? Technology comes and goes, and sometimes, getting an improvement means we need to get rid of the old stuff. This applies outside of technology, too—you could come up with many examples of change in the world, which might have put some people out of power, but has greatly improved the lives of millions of people (the fall of communism in Europe, for example). Also, going back to the technology world of today, this sentiment suggests Anderson is far too attached to the software they write—is this a healthy approach?&lt;/p&gt;
&lt;p&gt;Nobody raised PEP 582 or the complexity of virtual environments. It might not be visible from the ivory towers of packaging tool maintainers, who have years of experience dealing with them, but it certainly does exist for regular people, for people who think the Python provided by their Linux distro is good enough, and especially for people for whom Python is their introduction to programming.&lt;/p&gt;
&lt;p&gt;I would like to once again highlight: that’s not just the opinion of one random rambling Chris. The opinion that Python packaging needs to be simplified and unified is held by about half of the 8774 people who took the survey.&lt;/p&gt;
&lt;p&gt;But here’s one more interesting thing: Discourse, the platform that the discussion was held on, shows the number of times a link was clicked. Granted, this count might not be always accurate, but if we assume it is, the link to the results summary was clicked only 14 times (as of 2023-01-14 21:20 UTC). The discussion has 28 participants and 2.2k views. If we believe the link click counter, &lt;strong&gt;half of the discussion participants did not even bother reading what the people think&lt;/strong&gt;.&lt;/p&gt;
&lt;img alt="/images/python-packaging/discourse-link-clicks.png" class="align-center" src="https://chriswarrick.com/images/python-packaging/discourse-link-clicks.png"&gt;
&lt;/section&gt;
&lt;section id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-25" role="doc-backlink"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python packaging is a mess, and it always has been. There are tons of tools, mostly incompatible with each other, and no tool can solve &lt;em&gt;all&lt;/em&gt; problems (especially no tool from the PyPA). PDM is really close to the ideal, since it can do away with the overhead of managing virtual environments—which is hopefully the future of Python packaging, or the 2010s of Node.js packaging (although it is not going to be the 2023 of Python packaging, considering the Steering Council rejection). Perhaps in a few years, Python developers (and more importantly, Python learners!) will be able to just &lt;code class="docutils literal"&gt;pip install&lt;/code&gt; (or &lt;code class="docutils literal"&gt;pdm install&lt;/code&gt;?) what they need, without worrying about some “virtual environment” thing, that is separate but not quite from a system Python, and that is not a virtual machine. Python needs less tools, not more.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Carthago_delenda_est"&gt;Furthermore, I consider that the PyPA must be destroyed.&lt;/a&gt; The strategy discussion highlights the fact that they are unable to make Python packaging work the way the users expect. The PyPA should focus on producing one good tool, and on getting PEP 582 into Python. A good way to achieve this would be to put its resources behind PDM. The issues with native code and binary wheels are important, but plain-Python workflows, or workflows with straightforward binary dependencies, are much more common, and need to be improved. This improvement needs to happen now.&lt;/p&gt;
&lt;p&gt;Discuss in the comments below, on &lt;a class="reference external" href="https://news.ycombinator.com/item?id=34390585"&gt;Hacker News&lt;/a&gt;, or on &lt;a class="reference external" href="https://www.reddit.com/r/Python/comments/10cnx5i/how_to_improve_python_packaging_or_why_fourteen/"&gt;Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-26" role="doc-backlink"&gt;Footnotes&lt;/a&gt;&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Funnily enough, the aphorism itself fails at “one obvious way to do it”. It is with dashes set in two different ways (with spaces after but not before, and with spaces before but not after), and none of them is the correct one (most English style guides prefer no spaces, but some allow spaces on both sides).&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Apologies for the slight Linux focus of this post; all the points I make apply on Windows as well, but perhaps with some slightly different names and commands.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;There’s a new major version of .NET every year, with the even-numbered versions being LTS. Those are far less revolutionary than the Python 2 → 3 transition, and after you jump on the modern .NET train, upgrading a project to the new major version is fairly simple (possibly even just bumping the version number).&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;And to be extra sure, I used a clean &lt;code class="docutils literal"&gt;python:latest&lt;/code&gt; Docker container, since requests is so commonly found in system site packages.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-5" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-5"&gt;5&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;A little caveat here, I also had to remove the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;dist-info&lt;/span&gt;&lt;/code&gt; folder, so that PDM would know it needs to be reinstalled.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-6" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-6"&gt;6&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Yes, that’s you!&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-7" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-7"&gt;7&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Also, why is there no good HTTP client library in Python’s standard library? Is the “standard library is where packages go to die” argument still relevant, if requests had four releases in 2022, and urllib3 had six, and most of the changes were minor?&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-8" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#footnote-reference-8"&gt;8&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;I have removed the “Other” option, and shifted all options ranked below it by one place, since we don’t know what the other thing was and how it related to the options presented (the free-form responses were removed from the public results spreadsheet to preserve the users’ anonymity). In the event a respondent left some of the options without a number, the blank options were not considered neither first nor last.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;section id="revision-history"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/#toc-entry-27" role="doc-backlink"&gt;Revision History&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post got amended in April 2023 with an update about the SC rejection of PEP 582 (in a new subsection and in the Summary section).&lt;/p&gt;
&lt;/section&gt;</description><category>.NET</category><category>CSharp</category><category>JavaScript</category><category>Node.js</category><category>npm</category><category>packaging</category><category>PDM</category><category>pip</category><category>PyPA</category><category>Python</category><category>virtual environments</category><guid>https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/</guid><pubDate>Sun, 15 Jan 2023 13:45:00 GMT</pubDate></item><item><title>Python Virtual Environments in Five Minutes</title><link>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</link><dc:creator>Chris Warrick</dc:creator><description>&lt;p&gt;In Python, virtual environments are used to isolate projects from each other
(if they require different versions of the same library, for example). They let
you install and manage packages without administrative privileges, and without
conflicting with the system package manager.  They also allow to quickly create
an environment somewhere else with the same dependencies.&lt;/p&gt;
&lt;p&gt;Virtual environments are a crucial tool for any Python developer. And at that,
a very simple tool to work with.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;section id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;The best tool that can be used to create virtual environments is the
&lt;a class="reference external" href="https://docs.python.org/3/library/venv.html"&gt;venv&lt;/a&gt; module, which is part of
the standard library since Python 3.3.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;venv&lt;/code&gt; is built into Python, and most users don’t need to install anything.
However, Debian/Ubuntu users will need to run &lt;code class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install &lt;span class="pre"&gt;python3-venv&lt;/span&gt;&lt;/code&gt; to make it work (due to Debian not installing some components
that &lt;code class="docutils literal"&gt;venv&lt;/code&gt; needs by default). &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The alternative (and original, and previously standard) virtual environment tool is &lt;a class="reference external" href="https://virtualenv.pypa.io/"&gt;virtualenv&lt;/a&gt;. It works with Python 2.7, and has a couple
extra fetures (that you generally won’t need). virtualenv can be installed with your system package manager, or &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--user&lt;/span&gt; virtualenv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Which one to use? Probably &lt;code class="docutils literal"&gt;venv&lt;/code&gt;. Both tools achieve the same goal in similar
ways. And if one of them does not work, you can try the other and it might just
work better.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Terminology note: most of the time, the names of both tools are used
interchargeably, “venv” was often used as an abbreviation for “virtualenv”
before the stdlib tool was created)&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="create"&gt;
&lt;h2&gt;Create&lt;/h2&gt;
&lt;p&gt;To create a virtual environment named &lt;code class="docutils literal"&gt;env&lt;/code&gt;, you need to run the &lt;code class="docutils literal"&gt;venv&lt;/code&gt;
tool with the Python you want to use in that environment.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_f25dd8562c51429195c234fcd4a62e9d-1" name="rest_code_f25dd8562c51429195c234fcd4a62e9d-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f25dd8562c51429195c234fcd4a62e9d-1"&gt;&lt;/a&gt;Linux:   $ python3 -m venv env
&lt;a id="rest_code_f25dd8562c51429195c234fcd4a62e9d-2" name="rest_code_f25dd8562c51429195c234fcd4a62e9d-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f25dd8562c51429195c234fcd4a62e9d-2"&gt;&lt;/a&gt;Windows: &amp;gt; py -m venv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or, if you’re using &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_d3a317cfb6a54f499697341e69c1349f-1" name="rest_code_d3a317cfb6a54f499697341e69c1349f-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_d3a317cfb6a54f499697341e69c1349f-1"&gt;&lt;/a&gt;$ python3 -m virtualenv env
&lt;a id="rest_code_d3a317cfb6a54f499697341e69c1349f-2" name="rest_code_d3a317cfb6a54f499697341e69c1349f-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_d3a317cfb6a54f499697341e69c1349f-2"&gt;&lt;/a&gt;&amp;gt; py -m virtualenv env
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, you will end up with a folder named &lt;code class="docutils literal"&gt;env&lt;/code&gt; that contains folders
named &lt;code class="docutils literal"&gt;bin&lt;/code&gt; (&lt;code class="docutils literal"&gt;Scripts&lt;/code&gt; on Windows — contains executables and scripts
installed by packages, including
&lt;code class="docutils literal"&gt;python&lt;/code&gt;), &lt;code class="docutils literal"&gt;lib&lt;/code&gt; (contains code), and &lt;code class="docutils literal"&gt;include&lt;/code&gt; (contains C headers).&lt;/p&gt;
&lt;p&gt;Both tools install &lt;code class="docutils literal"&gt;pip&lt;/code&gt; and &lt;code class="docutils literal"&gt;setuptools&lt;/code&gt;, but &lt;code class="docutils literal"&gt;venv&lt;/code&gt; does not ship with
&lt;code class="docutils literal"&gt;wheel&lt;/code&gt;. In addition, the default versions tend to be more-or-less outdated.
Let’s upgrade them real quick: &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_20601fb6fe72443096e1bb8018795590-1" name="rest_code_20601fb6fe72443096e1bb8018795590-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_20601fb6fe72443096e1bb8018795590-1"&gt;&lt;/a&gt;$ env/bin/python -m pip install --upgrade pip setuptools wheel
&lt;a id="rest_code_20601fb6fe72443096e1bb8018795590-2" name="rest_code_20601fb6fe72443096e1bb8018795590-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_20601fb6fe72443096e1bb8018795590-2"&gt;&lt;/a&gt;&amp;gt; env\Scripts\python -m pip install --upgrade pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;section id="where-to-store-virtual-environments"&gt;
&lt;h3&gt;Where to store virtual environments?&lt;/h3&gt;
&lt;p&gt;While the tools allow you to put your virtual environments anywhere in the
system, it is not a desirable thing to do. There are two options:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Have one global place for them, like &lt;code class="docutils literal"&gt;~/virtualenvs&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Store them in each project’s directory, like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/git/foobar/.venv&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first option can be easier to manage, there are tools that can help manage
those (eg. &lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;, shell auto-activation scripts, or the
&lt;code class="docutils literal"&gt;workon&lt;/code&gt; functions described below).  The second option is equally easy to
work with, but comes with one caveat — you must add the venv directory to your
&lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt; file (or &lt;code class="docutils literal"&gt;.git/info/exclude&lt;/code&gt; if you don’t want to commit
changes to &lt;code class="docutils literal"&gt;.gitignore&lt;/code&gt;), since you don’t want it in your repository (it’s
binary bloat, and works only on your machine).&lt;/p&gt;
&lt;p&gt;If you pick the global virtual environment store option, you can use the following short
function (put it in &lt;code class="docutils literal"&gt;.bashrc&lt;/code&gt; / &lt;code class="docutils literal"&gt;.zshrc&lt;/code&gt; / your shell configuration file)
to get a simple way to activate an environment (by running &lt;code class="docutils literal"&gt;workon foo&lt;/code&gt;).
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; also has a &lt;code class="docutils literal"&gt;workon&lt;/code&gt; feature, although I don’t think
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt; is really necessary and too helpful — the &lt;code class="docutils literal"&gt;workon&lt;/code&gt;
feature is handy though, and so here’s a way to do it without
&lt;code class="docutils literal"&gt;virtualenvwrapper&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-1" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-1"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/virtualenvs
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-2" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-2"&gt;&lt;/a&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-3"&gt;&lt;code data-line-number="3"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-3" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;workon&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-4"&gt;&lt;code data-line-number="4"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-4" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/bin/activate"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-5"&gt;&lt;code data-line-number="5"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-5" name="rest_code_f9da06ee64fd4b65869adfa5e6fad1fd-5"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for PowerShell fans, here’s a &lt;code class="docutils literal"&gt;workon.ps1&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="code"&gt;&lt;table class="codetable"&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_6e65c61277d042928f2fe626a13c5b1e-1"&gt;&lt;code data-line-number="1"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_6e65c61277d042928f2fe626a13c5b1e-1" name="rest_code_6e65c61277d042928f2fe626a13c5b1e-1"&gt;&lt;/a&gt; &lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"$home\virtualenvs"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="linenos linenodiv"&gt;&lt;a href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_6e65c61277d042928f2fe626a13c5b1e-2"&gt;&lt;code data-line-number="2"&gt;&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;code&gt;&lt;a id="rest_code_6e65c61277d042928f2fe626a13c5b1e-2" name="rest_code_6e65c61277d042928f2fe626a13c5b1e-2"&gt;&lt;/a&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"$WORKON_HOME\&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="s2"&gt;\Scripts\activate.ps1"&lt;/span&gt;
&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;And for cmd.exe fans… you should switch to PowerShell, it’s a very nice and
friendly shell (though perhaps requiring some effort to learn how to be
productive with it).&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="use"&gt;
&lt;h2&gt;Use&lt;/h2&gt;
&lt;p&gt;There are three ways of working with virtual environments interactively (in a
shell):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;activation (run &lt;code class="docutils literal"&gt;source env/bin/activate&lt;/code&gt; on *nix;
&lt;code class="docutils literal"&gt;env\Scripts\activate&lt;/code&gt; on Windows) — it simplifies work and requires less
typing, although it can sometimes fail to work properly. (After installing
scripts, &lt;code class="docutils literal"&gt;hash &lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/code&gt; may be necessary on *nix to use them.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;executing &lt;code class="docutils literal"&gt;env/bin/python&lt;/code&gt; (&lt;code class="docutils literal"&gt;env\Scripts\python&lt;/code&gt;) and other scripts directly, as
activation only changes &lt;code class="docutils literal"&gt;$PATH&lt;/code&gt; and some helper variables — those variables
are not mandatory for operation, running the correct &lt;code class="docutils literal"&gt;python&lt;/code&gt; is, and that
method is failsafe.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/datagrok/2199506"&gt;in subshells&lt;/a&gt; (IMO, it’s bad UX)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever method you use, you must remember that without doing any of these
things, you will still be working with the system Python.&lt;/p&gt;
&lt;p&gt;For non-interactive work (eg. crontab entries, system services, etc.),
activation and subshells are not viable solutions. In these cases, you must
always use the full path to Python.&lt;/p&gt;
&lt;p&gt;Here are some usage examples (paths can be relative, of course):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-1" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-1"&gt;&lt;/a&gt;## *nix, activation ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-2" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-2"&gt;&lt;/a&gt;$ source /path/to/env/bin/activate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-3" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-3" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-3"&gt;&lt;/a&gt;(env)$ pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-4" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-4" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-4"&gt;&lt;/a&gt;(env)$ deactivate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-5" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-5" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-6" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-6" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-6"&gt;&lt;/a&gt;## *nix, manual execution ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-7" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-7" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-7"&gt;&lt;/a&gt;$ /path/to/env/bin/pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-8" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-8" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-9" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-9" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-9"&gt;&lt;/a&gt;## Windows, activation ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-10" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-10" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-10"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\activate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-11" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-11" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-11"&gt;&lt;/a&gt;(venv)&amp;gt; pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-12" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-12" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-12"&gt;&lt;/a&gt;(venv)&amp;gt; deactivate
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-13" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-13" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-14" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-14" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-14"&gt;&lt;/a&gt;## Windows, manual execution ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-15" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-15" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-15"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\pip install Django
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-16" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-16" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-17" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-17" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-17"&gt;&lt;/a&gt;## Windows, updating pip/setuptools/wheel ##
&lt;a id="rest_code_22533b7b36cc4401b9973ab1844ee2a3-18" name="rest_code_22533b7b36cc4401b9973ab1844ee2a3-18" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_22533b7b36cc4401b9973ab1844ee2a3-18"&gt;&lt;/a&gt;&amp;gt; C:\path\to\env\Scripts\python -m pip install -U pip setuptools wheel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The same principle applies to running Python itself, or any other script
installed by a package. (With Django’s &lt;code class="docutils literal"&gt;manage.py&lt;/code&gt;, calling it as
&lt;code class="docutils literal"&gt;./manage.py&lt;/code&gt; requires activation, or you can run
&lt;code class="docutils literal"&gt;venv/bin/python manage.py&lt;/code&gt;.)&lt;/p&gt;
&lt;section id="moving-renaming-copying-environments"&gt;
&lt;h3&gt;Moving/renaming/copying environments?&lt;/h3&gt;
&lt;p&gt;If you try to copy or rename a virtual environment, you will discover that the
copied environment does not work. This is because a virtual environment is
closely tied to both the Python it was created with, and the location it was
created in. (The “relocatable” option of &lt;code class="docutils literal"&gt;virtualenv&lt;/code&gt; does not work and is deprecated.) &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-3" id="footnote-reference-3" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;3&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, this is very easy to fix. Instead of moving/copying, just create a new
environment in the new location. Then, run &lt;code class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt; in
the old environment to create a list of packages installed in it. With that,
you can just run &lt;code class="docutils literal"&gt;pip install &lt;span class="pre"&gt;-r&lt;/span&gt; requirements.txt&lt;/code&gt; in the new environment to
install packages from the saved list. (Of course, you can copy &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;
between machines. In many cases, it will just work; sometimes, you might need a few
modifications to &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; to remove OS-specific stuff.)&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-1" name="rest_code_e48cf39ea2744547973177ceb020ef94-1" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-1"&gt;&lt;/a&gt;$ oldenv/bin/pip freeze &amp;gt; requirements.txt
&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-2" name="rest_code_e48cf39ea2744547973177ceb020ef94-2" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-2"&gt;&lt;/a&gt;$ python3 -m venv newenv
&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-3" name="rest_code_e48cf39ea2744547973177ceb020ef94-3" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-3"&gt;&lt;/a&gt;$ newenv/bin/pip install -r requirements.txt
&lt;a id="rest_code_e48cf39ea2744547973177ceb020ef94-4" name="rest_code_e48cf39ea2744547973177ceb020ef94-4" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#rest_code_e48cf39ea2744547973177ceb020ef94-4"&gt;&lt;/a&gt;(You may rm -rf oldenv now if you desire)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that it might also be necessary to re-create your virtual environment
after a Python upgrade, &lt;a class="footnote-reference brackets" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-4" id="footnote-reference-4" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;4&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; so it might be handy to keep an up-to-date
&lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; for your virtual environments (for many projects, it makes
sense to put that in the repository).&lt;/p&gt;
&lt;p&gt;To manage those &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt; files in a more orgnized yet still simple
way, you might be interested in &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="frequently-asked-questions"&gt;
&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt;
&lt;section id="im-using-virtualenv-do-i-need-to-install-it-for-each-python-i-want-to-use-it-with"&gt;
&lt;h3&gt;I’m using virtualenv. Do I need to install it for each Python I want to use it with?&lt;/h3&gt;
&lt;p&gt;In most cases, you can use &lt;code class="docutils literal"&gt;virtualenv &lt;span class="pre"&gt;-p&lt;/span&gt; pythonX env&lt;/code&gt; to specify a different
Python version, but with some Python version combinations, that approach might
be unsuccessful. (The &lt;code class="docutils literal"&gt;venv&lt;/code&gt; module is tied to the Python version it’s
installed in.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-the-only-user-on-my-system-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m the only user on my system. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;Yes, you do. First, you will still need separation between projects, sooner or
later.  Moreover, if you were to install packages system-wide with pip, you
might end up causing conflicts between packages installed by the system package
manager and by pip. Running &lt;code class="docutils literal"&gt;sudo pip&lt;/code&gt; is never a good idea because of this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="im-using-docker-do-i-still-need-virtual-environments"&gt;
&lt;h3&gt;I’m using Docker. Do I still need virtual environments?&lt;/h3&gt;
&lt;p&gt;They are still a good idea in that case. They protect you against any bad
system-wide Python packages your OS image might have (and one popular base OS
is famous for those). They don’t introduce any extra overhead, while allowing
to have a clean environment and the ability to re-create it outside of Docker
(eg. for local development without Docker)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="what-about-pipenv"&gt;
&lt;h3&gt;What about Pipenv?&lt;/h3&gt;
&lt;p&gt;Pipenv is a dependency management tool. It isn’t compatible with most workflows, and comes with many issues. In my opinion, it’s not worth using (Also, that thing about it being an officially recommended tool? Turns out it’s not true.)&lt;/p&gt;
&lt;p&gt;I also wrote a blog post detailing concerns with that tool, titled &lt;a class="reference external" href="https://chriswarrick.com/blog/2018/07/17/pipenv-promises-a-lot-delivers-very-little/"&gt;Pipenv: promises a lot, delivers very little&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consider using &lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;pip-tools&lt;/a&gt; instead.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The thing you’re actually installing is &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt;. In general, Debian isn’t exactly friendly with Python packaging.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;On Windows, you &lt;em&gt;must&lt;/em&gt; run &lt;code class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; if you want to upgrade the package manager itself.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-3" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-3"&gt;3&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;All script shebangs contain the direct path to the environment’s Python executable.  Many things in the virtual environment are symlinks that point to the original Python.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-4" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/#footnote-reference-4"&gt;4&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Definitely after a minor version (3.x → 3.y) upgrade, sometimes (I’m looking at you Homebrew) after a patch version upgrade (3.x.y → 3.x.z) as well.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>best practices</category><category>devel</category><category>guide</category><category>Python</category><category>venv</category><category>virtual environments</category><category>virtualenv</category><guid>https://chriswarrick.com/blog/2018/09/04/python-virtual-environments/</guid><pubDate>Tue, 04 Sep 2018 18:15:00 GMT</pubDate></item></channel></rss>